
L4_IOT_SENSORS.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00009074  08000190  08000190  00010190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000007b8  08009208  08009208  00019208  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080099c0  080099c0  000201e8  2**0
                  CONTENTS
  4 .ARM          00000008  080099c0  080099c0  000199c0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  080099c8  080099c8  000201e8  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080099c8  080099c8  000199c8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080099cc  080099cc  000199cc  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000001e8  20000000  080099d0  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000fdc  200001e8  08009bb8  000201e8  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  200011c4  08009bb8  000211c4  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  000201e8  2**0
                  CONTENTS, READONLY
 12 .debug_info   0001cb02  00000000  00000000  00020218  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00003b26  00000000  00000000  0003cd1a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 000018c0  00000000  00000000  00040840  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00001710  00000000  00000000  00042100  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00029ba7  00000000  00000000  00043810  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0001ce13  00000000  00000000  0006d3b7  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000f7ec1  00000000  00000000  0008a1ca  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  0018208b  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000070dc  00000000  00000000  001820dc  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	; (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	; (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	200001e8 	.word	0x200001e8
 80001ac:	00000000 	.word	0x00000000
 80001b0:	080091ec 	.word	0x080091ec

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	; (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	; (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	; (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	200001ec 	.word	0x200001ec
 80001cc:	080091ec 	.word	0x080091ec

080001d0 <memchr>:
 80001d0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001d4:	2a10      	cmp	r2, #16
 80001d6:	db2b      	blt.n	8000230 <memchr+0x60>
 80001d8:	f010 0f07 	tst.w	r0, #7
 80001dc:	d008      	beq.n	80001f0 <memchr+0x20>
 80001de:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001e2:	3a01      	subs	r2, #1
 80001e4:	428b      	cmp	r3, r1
 80001e6:	d02d      	beq.n	8000244 <memchr+0x74>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	b342      	cbz	r2, 8000240 <memchr+0x70>
 80001ee:	d1f6      	bne.n	80001de <memchr+0xe>
 80001f0:	b4f0      	push	{r4, r5, r6, r7}
 80001f2:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 80001f6:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 80001fa:	f022 0407 	bic.w	r4, r2, #7
 80001fe:	f07f 0700 	mvns.w	r7, #0
 8000202:	2300      	movs	r3, #0
 8000204:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000208:	3c08      	subs	r4, #8
 800020a:	ea85 0501 	eor.w	r5, r5, r1
 800020e:	ea86 0601 	eor.w	r6, r6, r1
 8000212:	fa85 f547 	uadd8	r5, r5, r7
 8000216:	faa3 f587 	sel	r5, r3, r7
 800021a:	fa86 f647 	uadd8	r6, r6, r7
 800021e:	faa5 f687 	sel	r6, r5, r7
 8000222:	b98e      	cbnz	r6, 8000248 <memchr+0x78>
 8000224:	d1ee      	bne.n	8000204 <memchr+0x34>
 8000226:	bcf0      	pop	{r4, r5, r6, r7}
 8000228:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800022c:	f002 0207 	and.w	r2, r2, #7
 8000230:	b132      	cbz	r2, 8000240 <memchr+0x70>
 8000232:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000236:	3a01      	subs	r2, #1
 8000238:	ea83 0301 	eor.w	r3, r3, r1
 800023c:	b113      	cbz	r3, 8000244 <memchr+0x74>
 800023e:	d1f8      	bne.n	8000232 <memchr+0x62>
 8000240:	2000      	movs	r0, #0
 8000242:	4770      	bx	lr
 8000244:	3801      	subs	r0, #1
 8000246:	4770      	bx	lr
 8000248:	2d00      	cmp	r5, #0
 800024a:	bf06      	itte	eq
 800024c:	4635      	moveq	r5, r6
 800024e:	3803      	subeq	r0, #3
 8000250:	3807      	subne	r0, #7
 8000252:	f015 0f01 	tst.w	r5, #1
 8000256:	d107      	bne.n	8000268 <memchr+0x98>
 8000258:	3001      	adds	r0, #1
 800025a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800025e:	bf02      	ittt	eq
 8000260:	3001      	addeq	r0, #1
 8000262:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000266:	3001      	addeq	r0, #1
 8000268:	bcf0      	pop	{r4, r5, r6, r7}
 800026a:	3801      	subs	r0, #1
 800026c:	4770      	bx	lr
 800026e:	bf00      	nop

08000270 <__aeabi_drsub>:
 8000270:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000274:	e002      	b.n	800027c <__adddf3>
 8000276:	bf00      	nop

08000278 <__aeabi_dsub>:
 8000278:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

0800027c <__adddf3>:
 800027c:	b530      	push	{r4, r5, lr}
 800027e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000282:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000286:	ea94 0f05 	teq	r4, r5
 800028a:	bf08      	it	eq
 800028c:	ea90 0f02 	teqeq	r0, r2
 8000290:	bf1f      	itttt	ne
 8000292:	ea54 0c00 	orrsne.w	ip, r4, r0
 8000296:	ea55 0c02 	orrsne.w	ip, r5, r2
 800029a:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 800029e:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002a2:	f000 80e2 	beq.w	800046a <__adddf3+0x1ee>
 80002a6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002aa:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002ae:	bfb8      	it	lt
 80002b0:	426d      	neglt	r5, r5
 80002b2:	dd0c      	ble.n	80002ce <__adddf3+0x52>
 80002b4:	442c      	add	r4, r5
 80002b6:	ea80 0202 	eor.w	r2, r0, r2
 80002ba:	ea81 0303 	eor.w	r3, r1, r3
 80002be:	ea82 0000 	eor.w	r0, r2, r0
 80002c2:	ea83 0101 	eor.w	r1, r3, r1
 80002c6:	ea80 0202 	eor.w	r2, r0, r2
 80002ca:	ea81 0303 	eor.w	r3, r1, r3
 80002ce:	2d36      	cmp	r5, #54	; 0x36
 80002d0:	bf88      	it	hi
 80002d2:	bd30      	pophi	{r4, r5, pc}
 80002d4:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80002d8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80002dc:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 80002e0:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80002e4:	d002      	beq.n	80002ec <__adddf3+0x70>
 80002e6:	4240      	negs	r0, r0
 80002e8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80002ec:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 80002f0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80002f4:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 80002f8:	d002      	beq.n	8000300 <__adddf3+0x84>
 80002fa:	4252      	negs	r2, r2
 80002fc:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000300:	ea94 0f05 	teq	r4, r5
 8000304:	f000 80a7 	beq.w	8000456 <__adddf3+0x1da>
 8000308:	f1a4 0401 	sub.w	r4, r4, #1
 800030c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000310:	db0d      	blt.n	800032e <__adddf3+0xb2>
 8000312:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000316:	fa22 f205 	lsr.w	r2, r2, r5
 800031a:	1880      	adds	r0, r0, r2
 800031c:	f141 0100 	adc.w	r1, r1, #0
 8000320:	fa03 f20e 	lsl.w	r2, r3, lr
 8000324:	1880      	adds	r0, r0, r2
 8000326:	fa43 f305 	asr.w	r3, r3, r5
 800032a:	4159      	adcs	r1, r3
 800032c:	e00e      	b.n	800034c <__adddf3+0xd0>
 800032e:	f1a5 0520 	sub.w	r5, r5, #32
 8000332:	f10e 0e20 	add.w	lr, lr, #32
 8000336:	2a01      	cmp	r2, #1
 8000338:	fa03 fc0e 	lsl.w	ip, r3, lr
 800033c:	bf28      	it	cs
 800033e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000342:	fa43 f305 	asr.w	r3, r3, r5
 8000346:	18c0      	adds	r0, r0, r3
 8000348:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800034c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000350:	d507      	bpl.n	8000362 <__adddf3+0xe6>
 8000352:	f04f 0e00 	mov.w	lr, #0
 8000356:	f1dc 0c00 	rsbs	ip, ip, #0
 800035a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800035e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000362:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000366:	d31b      	bcc.n	80003a0 <__adddf3+0x124>
 8000368:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800036c:	d30c      	bcc.n	8000388 <__adddf3+0x10c>
 800036e:	0849      	lsrs	r1, r1, #1
 8000370:	ea5f 0030 	movs.w	r0, r0, rrx
 8000374:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000378:	f104 0401 	add.w	r4, r4, #1
 800037c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000380:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 8000384:	f080 809a 	bcs.w	80004bc <__adddf3+0x240>
 8000388:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 800038c:	bf08      	it	eq
 800038e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000392:	f150 0000 	adcs.w	r0, r0, #0
 8000396:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800039a:	ea41 0105 	orr.w	r1, r1, r5
 800039e:	bd30      	pop	{r4, r5, pc}
 80003a0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003a4:	4140      	adcs	r0, r0
 80003a6:	eb41 0101 	adc.w	r1, r1, r1
 80003aa:	3c01      	subs	r4, #1
 80003ac:	bf28      	it	cs
 80003ae:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 80003b2:	d2e9      	bcs.n	8000388 <__adddf3+0x10c>
 80003b4:	f091 0f00 	teq	r1, #0
 80003b8:	bf04      	itt	eq
 80003ba:	4601      	moveq	r1, r0
 80003bc:	2000      	moveq	r0, #0
 80003be:	fab1 f381 	clz	r3, r1
 80003c2:	bf08      	it	eq
 80003c4:	3320      	addeq	r3, #32
 80003c6:	f1a3 030b 	sub.w	r3, r3, #11
 80003ca:	f1b3 0220 	subs.w	r2, r3, #32
 80003ce:	da0c      	bge.n	80003ea <__adddf3+0x16e>
 80003d0:	320c      	adds	r2, #12
 80003d2:	dd08      	ble.n	80003e6 <__adddf3+0x16a>
 80003d4:	f102 0c14 	add.w	ip, r2, #20
 80003d8:	f1c2 020c 	rsb	r2, r2, #12
 80003dc:	fa01 f00c 	lsl.w	r0, r1, ip
 80003e0:	fa21 f102 	lsr.w	r1, r1, r2
 80003e4:	e00c      	b.n	8000400 <__adddf3+0x184>
 80003e6:	f102 0214 	add.w	r2, r2, #20
 80003ea:	bfd8      	it	le
 80003ec:	f1c2 0c20 	rsble	ip, r2, #32
 80003f0:	fa01 f102 	lsl.w	r1, r1, r2
 80003f4:	fa20 fc0c 	lsr.w	ip, r0, ip
 80003f8:	bfdc      	itt	le
 80003fa:	ea41 010c 	orrle.w	r1, r1, ip
 80003fe:	4090      	lslle	r0, r2
 8000400:	1ae4      	subs	r4, r4, r3
 8000402:	bfa2      	ittt	ge
 8000404:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000408:	4329      	orrge	r1, r5
 800040a:	bd30      	popge	{r4, r5, pc}
 800040c:	ea6f 0404 	mvn.w	r4, r4
 8000410:	3c1f      	subs	r4, #31
 8000412:	da1c      	bge.n	800044e <__adddf3+0x1d2>
 8000414:	340c      	adds	r4, #12
 8000416:	dc0e      	bgt.n	8000436 <__adddf3+0x1ba>
 8000418:	f104 0414 	add.w	r4, r4, #20
 800041c:	f1c4 0220 	rsb	r2, r4, #32
 8000420:	fa20 f004 	lsr.w	r0, r0, r4
 8000424:	fa01 f302 	lsl.w	r3, r1, r2
 8000428:	ea40 0003 	orr.w	r0, r0, r3
 800042c:	fa21 f304 	lsr.w	r3, r1, r4
 8000430:	ea45 0103 	orr.w	r1, r5, r3
 8000434:	bd30      	pop	{r4, r5, pc}
 8000436:	f1c4 040c 	rsb	r4, r4, #12
 800043a:	f1c4 0220 	rsb	r2, r4, #32
 800043e:	fa20 f002 	lsr.w	r0, r0, r2
 8000442:	fa01 f304 	lsl.w	r3, r1, r4
 8000446:	ea40 0003 	orr.w	r0, r0, r3
 800044a:	4629      	mov	r1, r5
 800044c:	bd30      	pop	{r4, r5, pc}
 800044e:	fa21 f004 	lsr.w	r0, r1, r4
 8000452:	4629      	mov	r1, r5
 8000454:	bd30      	pop	{r4, r5, pc}
 8000456:	f094 0f00 	teq	r4, #0
 800045a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800045e:	bf06      	itte	eq
 8000460:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000464:	3401      	addeq	r4, #1
 8000466:	3d01      	subne	r5, #1
 8000468:	e74e      	b.n	8000308 <__adddf3+0x8c>
 800046a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800046e:	bf18      	it	ne
 8000470:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000474:	d029      	beq.n	80004ca <__adddf3+0x24e>
 8000476:	ea94 0f05 	teq	r4, r5
 800047a:	bf08      	it	eq
 800047c:	ea90 0f02 	teqeq	r0, r2
 8000480:	d005      	beq.n	800048e <__adddf3+0x212>
 8000482:	ea54 0c00 	orrs.w	ip, r4, r0
 8000486:	bf04      	itt	eq
 8000488:	4619      	moveq	r1, r3
 800048a:	4610      	moveq	r0, r2
 800048c:	bd30      	pop	{r4, r5, pc}
 800048e:	ea91 0f03 	teq	r1, r3
 8000492:	bf1e      	ittt	ne
 8000494:	2100      	movne	r1, #0
 8000496:	2000      	movne	r0, #0
 8000498:	bd30      	popne	{r4, r5, pc}
 800049a:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 800049e:	d105      	bne.n	80004ac <__adddf3+0x230>
 80004a0:	0040      	lsls	r0, r0, #1
 80004a2:	4149      	adcs	r1, r1
 80004a4:	bf28      	it	cs
 80004a6:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80004aa:	bd30      	pop	{r4, r5, pc}
 80004ac:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80004b0:	bf3c      	itt	cc
 80004b2:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80004b6:	bd30      	popcc	{r4, r5, pc}
 80004b8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004bc:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80004c0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80004c4:	f04f 0000 	mov.w	r0, #0
 80004c8:	bd30      	pop	{r4, r5, pc}
 80004ca:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004ce:	bf1a      	itte	ne
 80004d0:	4619      	movne	r1, r3
 80004d2:	4610      	movne	r0, r2
 80004d4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80004d8:	bf1c      	itt	ne
 80004da:	460b      	movne	r3, r1
 80004dc:	4602      	movne	r2, r0
 80004de:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80004e2:	bf06      	itte	eq
 80004e4:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80004e8:	ea91 0f03 	teqeq	r1, r3
 80004ec:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 80004f0:	bd30      	pop	{r4, r5, pc}
 80004f2:	bf00      	nop

080004f4 <__aeabi_ui2d>:
 80004f4:	f090 0f00 	teq	r0, #0
 80004f8:	bf04      	itt	eq
 80004fa:	2100      	moveq	r1, #0
 80004fc:	4770      	bxeq	lr
 80004fe:	b530      	push	{r4, r5, lr}
 8000500:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000504:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000508:	f04f 0500 	mov.w	r5, #0
 800050c:	f04f 0100 	mov.w	r1, #0
 8000510:	e750      	b.n	80003b4 <__adddf3+0x138>
 8000512:	bf00      	nop

08000514 <__aeabi_i2d>:
 8000514:	f090 0f00 	teq	r0, #0
 8000518:	bf04      	itt	eq
 800051a:	2100      	moveq	r1, #0
 800051c:	4770      	bxeq	lr
 800051e:	b530      	push	{r4, r5, lr}
 8000520:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000524:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000528:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800052c:	bf48      	it	mi
 800052e:	4240      	negmi	r0, r0
 8000530:	f04f 0100 	mov.w	r1, #0
 8000534:	e73e      	b.n	80003b4 <__adddf3+0x138>
 8000536:	bf00      	nop

08000538 <__aeabi_f2d>:
 8000538:	0042      	lsls	r2, r0, #1
 800053a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800053e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000542:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000546:	bf1f      	itttt	ne
 8000548:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800054c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000550:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000554:	4770      	bxne	lr
 8000556:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800055a:	bf08      	it	eq
 800055c:	4770      	bxeq	lr
 800055e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000562:	bf04      	itt	eq
 8000564:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000568:	4770      	bxeq	lr
 800056a:	b530      	push	{r4, r5, lr}
 800056c:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000570:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000574:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000578:	e71c      	b.n	80003b4 <__adddf3+0x138>
 800057a:	bf00      	nop

0800057c <__aeabi_ul2d>:
 800057c:	ea50 0201 	orrs.w	r2, r0, r1
 8000580:	bf08      	it	eq
 8000582:	4770      	bxeq	lr
 8000584:	b530      	push	{r4, r5, lr}
 8000586:	f04f 0500 	mov.w	r5, #0
 800058a:	e00a      	b.n	80005a2 <__aeabi_l2d+0x16>

0800058c <__aeabi_l2d>:
 800058c:	ea50 0201 	orrs.w	r2, r0, r1
 8000590:	bf08      	it	eq
 8000592:	4770      	bxeq	lr
 8000594:	b530      	push	{r4, r5, lr}
 8000596:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 800059a:	d502      	bpl.n	80005a2 <__aeabi_l2d+0x16>
 800059c:	4240      	negs	r0, r0
 800059e:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005a2:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80005a6:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80005aa:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005ae:	f43f aed8 	beq.w	8000362 <__adddf3+0xe6>
 80005b2:	f04f 0203 	mov.w	r2, #3
 80005b6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005ba:	bf18      	it	ne
 80005bc:	3203      	addne	r2, #3
 80005be:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005c2:	bf18      	it	ne
 80005c4:	3203      	addne	r2, #3
 80005c6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80005ca:	f1c2 0320 	rsb	r3, r2, #32
 80005ce:	fa00 fc03 	lsl.w	ip, r0, r3
 80005d2:	fa20 f002 	lsr.w	r0, r0, r2
 80005d6:	fa01 fe03 	lsl.w	lr, r1, r3
 80005da:	ea40 000e 	orr.w	r0, r0, lr
 80005de:	fa21 f102 	lsr.w	r1, r1, r2
 80005e2:	4414      	add	r4, r2
 80005e4:	e6bd      	b.n	8000362 <__adddf3+0xe6>
 80005e6:	bf00      	nop

080005e8 <__aeabi_dmul>:
 80005e8:	b570      	push	{r4, r5, r6, lr}
 80005ea:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80005ee:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 80005f2:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80005f6:	bf1d      	ittte	ne
 80005f8:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80005fc:	ea94 0f0c 	teqne	r4, ip
 8000600:	ea95 0f0c 	teqne	r5, ip
 8000604:	f000 f8de 	bleq	80007c4 <__aeabi_dmul+0x1dc>
 8000608:	442c      	add	r4, r5
 800060a:	ea81 0603 	eor.w	r6, r1, r3
 800060e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000612:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000616:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800061a:	bf18      	it	ne
 800061c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000620:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000624:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000628:	d038      	beq.n	800069c <__aeabi_dmul+0xb4>
 800062a:	fba0 ce02 	umull	ip, lr, r0, r2
 800062e:	f04f 0500 	mov.w	r5, #0
 8000632:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000636:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800063a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800063e:	f04f 0600 	mov.w	r6, #0
 8000642:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000646:	f09c 0f00 	teq	ip, #0
 800064a:	bf18      	it	ne
 800064c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000650:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000654:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000658:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800065c:	d204      	bcs.n	8000668 <__aeabi_dmul+0x80>
 800065e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000662:	416d      	adcs	r5, r5
 8000664:	eb46 0606 	adc.w	r6, r6, r6
 8000668:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800066c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000670:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000674:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000678:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800067c:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000680:	bf88      	it	hi
 8000682:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000686:	d81e      	bhi.n	80006c6 <__aeabi_dmul+0xde>
 8000688:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 800068c:	bf08      	it	eq
 800068e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 8000692:	f150 0000 	adcs.w	r0, r0, #0
 8000696:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800069a:	bd70      	pop	{r4, r5, r6, pc}
 800069c:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80006a0:	ea46 0101 	orr.w	r1, r6, r1
 80006a4:	ea40 0002 	orr.w	r0, r0, r2
 80006a8:	ea81 0103 	eor.w	r1, r1, r3
 80006ac:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006b0:	bfc2      	ittt	gt
 80006b2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006b6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006ba:	bd70      	popgt	{r4, r5, r6, pc}
 80006bc:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80006c0:	f04f 0e00 	mov.w	lr, #0
 80006c4:	3c01      	subs	r4, #1
 80006c6:	f300 80ab 	bgt.w	8000820 <__aeabi_dmul+0x238>
 80006ca:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80006ce:	bfde      	ittt	le
 80006d0:	2000      	movle	r0, #0
 80006d2:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 80006d6:	bd70      	pople	{r4, r5, r6, pc}
 80006d8:	f1c4 0400 	rsb	r4, r4, #0
 80006dc:	3c20      	subs	r4, #32
 80006de:	da35      	bge.n	800074c <__aeabi_dmul+0x164>
 80006e0:	340c      	adds	r4, #12
 80006e2:	dc1b      	bgt.n	800071c <__aeabi_dmul+0x134>
 80006e4:	f104 0414 	add.w	r4, r4, #20
 80006e8:	f1c4 0520 	rsb	r5, r4, #32
 80006ec:	fa00 f305 	lsl.w	r3, r0, r5
 80006f0:	fa20 f004 	lsr.w	r0, r0, r4
 80006f4:	fa01 f205 	lsl.w	r2, r1, r5
 80006f8:	ea40 0002 	orr.w	r0, r0, r2
 80006fc:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000700:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000704:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000708:	fa21 f604 	lsr.w	r6, r1, r4
 800070c:	eb42 0106 	adc.w	r1, r2, r6
 8000710:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000714:	bf08      	it	eq
 8000716:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800071a:	bd70      	pop	{r4, r5, r6, pc}
 800071c:	f1c4 040c 	rsb	r4, r4, #12
 8000720:	f1c4 0520 	rsb	r5, r4, #32
 8000724:	fa00 f304 	lsl.w	r3, r0, r4
 8000728:	fa20 f005 	lsr.w	r0, r0, r5
 800072c:	fa01 f204 	lsl.w	r2, r1, r4
 8000730:	ea40 0002 	orr.w	r0, r0, r2
 8000734:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000738:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800073c:	f141 0100 	adc.w	r1, r1, #0
 8000740:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000744:	bf08      	it	eq
 8000746:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800074a:	bd70      	pop	{r4, r5, r6, pc}
 800074c:	f1c4 0520 	rsb	r5, r4, #32
 8000750:	fa00 f205 	lsl.w	r2, r0, r5
 8000754:	ea4e 0e02 	orr.w	lr, lr, r2
 8000758:	fa20 f304 	lsr.w	r3, r0, r4
 800075c:	fa01 f205 	lsl.w	r2, r1, r5
 8000760:	ea43 0302 	orr.w	r3, r3, r2
 8000764:	fa21 f004 	lsr.w	r0, r1, r4
 8000768:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800076c:	fa21 f204 	lsr.w	r2, r1, r4
 8000770:	ea20 0002 	bic.w	r0, r0, r2
 8000774:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000778:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800077c:	bf08      	it	eq
 800077e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000782:	bd70      	pop	{r4, r5, r6, pc}
 8000784:	f094 0f00 	teq	r4, #0
 8000788:	d10f      	bne.n	80007aa <__aeabi_dmul+0x1c2>
 800078a:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 800078e:	0040      	lsls	r0, r0, #1
 8000790:	eb41 0101 	adc.w	r1, r1, r1
 8000794:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000798:	bf08      	it	eq
 800079a:	3c01      	subeq	r4, #1
 800079c:	d0f7      	beq.n	800078e <__aeabi_dmul+0x1a6>
 800079e:	ea41 0106 	orr.w	r1, r1, r6
 80007a2:	f095 0f00 	teq	r5, #0
 80007a6:	bf18      	it	ne
 80007a8:	4770      	bxne	lr
 80007aa:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 80007ae:	0052      	lsls	r2, r2, #1
 80007b0:	eb43 0303 	adc.w	r3, r3, r3
 80007b4:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80007b8:	bf08      	it	eq
 80007ba:	3d01      	subeq	r5, #1
 80007bc:	d0f7      	beq.n	80007ae <__aeabi_dmul+0x1c6>
 80007be:	ea43 0306 	orr.w	r3, r3, r6
 80007c2:	4770      	bx	lr
 80007c4:	ea94 0f0c 	teq	r4, ip
 80007c8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80007cc:	bf18      	it	ne
 80007ce:	ea95 0f0c 	teqne	r5, ip
 80007d2:	d00c      	beq.n	80007ee <__aeabi_dmul+0x206>
 80007d4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80007d8:	bf18      	it	ne
 80007da:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007de:	d1d1      	bne.n	8000784 <__aeabi_dmul+0x19c>
 80007e0:	ea81 0103 	eor.w	r1, r1, r3
 80007e4:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80007e8:	f04f 0000 	mov.w	r0, #0
 80007ec:	bd70      	pop	{r4, r5, r6, pc}
 80007ee:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80007f2:	bf06      	itte	eq
 80007f4:	4610      	moveq	r0, r2
 80007f6:	4619      	moveq	r1, r3
 80007f8:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007fc:	d019      	beq.n	8000832 <__aeabi_dmul+0x24a>
 80007fe:	ea94 0f0c 	teq	r4, ip
 8000802:	d102      	bne.n	800080a <__aeabi_dmul+0x222>
 8000804:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000808:	d113      	bne.n	8000832 <__aeabi_dmul+0x24a>
 800080a:	ea95 0f0c 	teq	r5, ip
 800080e:	d105      	bne.n	800081c <__aeabi_dmul+0x234>
 8000810:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000814:	bf1c      	itt	ne
 8000816:	4610      	movne	r0, r2
 8000818:	4619      	movne	r1, r3
 800081a:	d10a      	bne.n	8000832 <__aeabi_dmul+0x24a>
 800081c:	ea81 0103 	eor.w	r1, r1, r3
 8000820:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000824:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000828:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800082c:	f04f 0000 	mov.w	r0, #0
 8000830:	bd70      	pop	{r4, r5, r6, pc}
 8000832:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000836:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800083a:	bd70      	pop	{r4, r5, r6, pc}

0800083c <__aeabi_ddiv>:
 800083c:	b570      	push	{r4, r5, r6, lr}
 800083e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000842:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000846:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800084a:	bf1d      	ittte	ne
 800084c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000850:	ea94 0f0c 	teqne	r4, ip
 8000854:	ea95 0f0c 	teqne	r5, ip
 8000858:	f000 f8a7 	bleq	80009aa <__aeabi_ddiv+0x16e>
 800085c:	eba4 0405 	sub.w	r4, r4, r5
 8000860:	ea81 0e03 	eor.w	lr, r1, r3
 8000864:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000868:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800086c:	f000 8088 	beq.w	8000980 <__aeabi_ddiv+0x144>
 8000870:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000874:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8000878:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800087c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000880:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000884:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000888:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 800088c:	ea4f 2600 	mov.w	r6, r0, lsl #8
 8000890:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 8000894:	429d      	cmp	r5, r3
 8000896:	bf08      	it	eq
 8000898:	4296      	cmpeq	r6, r2
 800089a:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 800089e:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80008a2:	d202      	bcs.n	80008aa <__aeabi_ddiv+0x6e>
 80008a4:	085b      	lsrs	r3, r3, #1
 80008a6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008aa:	1ab6      	subs	r6, r6, r2
 80008ac:	eb65 0503 	sbc.w	r5, r5, r3
 80008b0:	085b      	lsrs	r3, r3, #1
 80008b2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008b6:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80008ba:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 80008be:	ebb6 0e02 	subs.w	lr, r6, r2
 80008c2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008c6:	bf22      	ittt	cs
 80008c8:	1ab6      	subcs	r6, r6, r2
 80008ca:	4675      	movcs	r5, lr
 80008cc:	ea40 000c 	orrcs.w	r0, r0, ip
 80008d0:	085b      	lsrs	r3, r3, #1
 80008d2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008d6:	ebb6 0e02 	subs.w	lr, r6, r2
 80008da:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008de:	bf22      	ittt	cs
 80008e0:	1ab6      	subcs	r6, r6, r2
 80008e2:	4675      	movcs	r5, lr
 80008e4:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80008e8:	085b      	lsrs	r3, r3, #1
 80008ea:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ee:	ebb6 0e02 	subs.w	lr, r6, r2
 80008f2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008f6:	bf22      	ittt	cs
 80008f8:	1ab6      	subcs	r6, r6, r2
 80008fa:	4675      	movcs	r5, lr
 80008fc:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000900:	085b      	lsrs	r3, r3, #1
 8000902:	ea4f 0232 	mov.w	r2, r2, rrx
 8000906:	ebb6 0e02 	subs.w	lr, r6, r2
 800090a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800090e:	bf22      	ittt	cs
 8000910:	1ab6      	subcs	r6, r6, r2
 8000912:	4675      	movcs	r5, lr
 8000914:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000918:	ea55 0e06 	orrs.w	lr, r5, r6
 800091c:	d018      	beq.n	8000950 <__aeabi_ddiv+0x114>
 800091e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000922:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000926:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800092a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800092e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000932:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000936:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800093a:	d1c0      	bne.n	80008be <__aeabi_ddiv+0x82>
 800093c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000940:	d10b      	bne.n	800095a <__aeabi_ddiv+0x11e>
 8000942:	ea41 0100 	orr.w	r1, r1, r0
 8000946:	f04f 0000 	mov.w	r0, #0
 800094a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800094e:	e7b6      	b.n	80008be <__aeabi_ddiv+0x82>
 8000950:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000954:	bf04      	itt	eq
 8000956:	4301      	orreq	r1, r0
 8000958:	2000      	moveq	r0, #0
 800095a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800095e:	bf88      	it	hi
 8000960:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000964:	f63f aeaf 	bhi.w	80006c6 <__aeabi_dmul+0xde>
 8000968:	ebb5 0c03 	subs.w	ip, r5, r3
 800096c:	bf04      	itt	eq
 800096e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000972:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000976:	f150 0000 	adcs.w	r0, r0, #0
 800097a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800097e:	bd70      	pop	{r4, r5, r6, pc}
 8000980:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 8000984:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000988:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 800098c:	bfc2      	ittt	gt
 800098e:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000992:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000996:	bd70      	popgt	{r4, r5, r6, pc}
 8000998:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 800099c:	f04f 0e00 	mov.w	lr, #0
 80009a0:	3c01      	subs	r4, #1
 80009a2:	e690      	b.n	80006c6 <__aeabi_dmul+0xde>
 80009a4:	ea45 0e06 	orr.w	lr, r5, r6
 80009a8:	e68d      	b.n	80006c6 <__aeabi_dmul+0xde>
 80009aa:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009ae:	ea94 0f0c 	teq	r4, ip
 80009b2:	bf08      	it	eq
 80009b4:	ea95 0f0c 	teqeq	r5, ip
 80009b8:	f43f af3b 	beq.w	8000832 <__aeabi_dmul+0x24a>
 80009bc:	ea94 0f0c 	teq	r4, ip
 80009c0:	d10a      	bne.n	80009d8 <__aeabi_ddiv+0x19c>
 80009c2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80009c6:	f47f af34 	bne.w	8000832 <__aeabi_dmul+0x24a>
 80009ca:	ea95 0f0c 	teq	r5, ip
 80009ce:	f47f af25 	bne.w	800081c <__aeabi_dmul+0x234>
 80009d2:	4610      	mov	r0, r2
 80009d4:	4619      	mov	r1, r3
 80009d6:	e72c      	b.n	8000832 <__aeabi_dmul+0x24a>
 80009d8:	ea95 0f0c 	teq	r5, ip
 80009dc:	d106      	bne.n	80009ec <__aeabi_ddiv+0x1b0>
 80009de:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80009e2:	f43f aefd 	beq.w	80007e0 <__aeabi_dmul+0x1f8>
 80009e6:	4610      	mov	r0, r2
 80009e8:	4619      	mov	r1, r3
 80009ea:	e722      	b.n	8000832 <__aeabi_dmul+0x24a>
 80009ec:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80009f0:	bf18      	it	ne
 80009f2:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80009f6:	f47f aec5 	bne.w	8000784 <__aeabi_dmul+0x19c>
 80009fa:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 80009fe:	f47f af0d 	bne.w	800081c <__aeabi_dmul+0x234>
 8000a02:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a06:	f47f aeeb 	bne.w	80007e0 <__aeabi_dmul+0x1f8>
 8000a0a:	e712      	b.n	8000832 <__aeabi_dmul+0x24a>

08000a0c <__gedf2>:
 8000a0c:	f04f 3cff 	mov.w	ip, #4294967295
 8000a10:	e006      	b.n	8000a20 <__cmpdf2+0x4>
 8000a12:	bf00      	nop

08000a14 <__ledf2>:
 8000a14:	f04f 0c01 	mov.w	ip, #1
 8000a18:	e002      	b.n	8000a20 <__cmpdf2+0x4>
 8000a1a:	bf00      	nop

08000a1c <__cmpdf2>:
 8000a1c:	f04f 0c01 	mov.w	ip, #1
 8000a20:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a24:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a28:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a2c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a30:	bf18      	it	ne
 8000a32:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a36:	d01b      	beq.n	8000a70 <__cmpdf2+0x54>
 8000a38:	b001      	add	sp, #4
 8000a3a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a3e:	bf0c      	ite	eq
 8000a40:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a44:	ea91 0f03 	teqne	r1, r3
 8000a48:	bf02      	ittt	eq
 8000a4a:	ea90 0f02 	teqeq	r0, r2
 8000a4e:	2000      	moveq	r0, #0
 8000a50:	4770      	bxeq	lr
 8000a52:	f110 0f00 	cmn.w	r0, #0
 8000a56:	ea91 0f03 	teq	r1, r3
 8000a5a:	bf58      	it	pl
 8000a5c:	4299      	cmppl	r1, r3
 8000a5e:	bf08      	it	eq
 8000a60:	4290      	cmpeq	r0, r2
 8000a62:	bf2c      	ite	cs
 8000a64:	17d8      	asrcs	r0, r3, #31
 8000a66:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000a6a:	f040 0001 	orr.w	r0, r0, #1
 8000a6e:	4770      	bx	lr
 8000a70:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a74:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a78:	d102      	bne.n	8000a80 <__cmpdf2+0x64>
 8000a7a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a7e:	d107      	bne.n	8000a90 <__cmpdf2+0x74>
 8000a80:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a84:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a88:	d1d6      	bne.n	8000a38 <__cmpdf2+0x1c>
 8000a8a:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000a8e:	d0d3      	beq.n	8000a38 <__cmpdf2+0x1c>
 8000a90:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000a94:	4770      	bx	lr
 8000a96:	bf00      	nop

08000a98 <__aeabi_cdrcmple>:
 8000a98:	4684      	mov	ip, r0
 8000a9a:	4610      	mov	r0, r2
 8000a9c:	4662      	mov	r2, ip
 8000a9e:	468c      	mov	ip, r1
 8000aa0:	4619      	mov	r1, r3
 8000aa2:	4663      	mov	r3, ip
 8000aa4:	e000      	b.n	8000aa8 <__aeabi_cdcmpeq>
 8000aa6:	bf00      	nop

08000aa8 <__aeabi_cdcmpeq>:
 8000aa8:	b501      	push	{r0, lr}
 8000aaa:	f7ff ffb7 	bl	8000a1c <__cmpdf2>
 8000aae:	2800      	cmp	r0, #0
 8000ab0:	bf48      	it	mi
 8000ab2:	f110 0f00 	cmnmi.w	r0, #0
 8000ab6:	bd01      	pop	{r0, pc}

08000ab8 <__aeabi_dcmpeq>:
 8000ab8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000abc:	f7ff fff4 	bl	8000aa8 <__aeabi_cdcmpeq>
 8000ac0:	bf0c      	ite	eq
 8000ac2:	2001      	moveq	r0, #1
 8000ac4:	2000      	movne	r0, #0
 8000ac6:	f85d fb08 	ldr.w	pc, [sp], #8
 8000aca:	bf00      	nop

08000acc <__aeabi_dcmplt>:
 8000acc:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000ad0:	f7ff ffea 	bl	8000aa8 <__aeabi_cdcmpeq>
 8000ad4:	bf34      	ite	cc
 8000ad6:	2001      	movcc	r0, #1
 8000ad8:	2000      	movcs	r0, #0
 8000ada:	f85d fb08 	ldr.w	pc, [sp], #8
 8000ade:	bf00      	nop

08000ae0 <__aeabi_dcmple>:
 8000ae0:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000ae4:	f7ff ffe0 	bl	8000aa8 <__aeabi_cdcmpeq>
 8000ae8:	bf94      	ite	ls
 8000aea:	2001      	movls	r0, #1
 8000aec:	2000      	movhi	r0, #0
 8000aee:	f85d fb08 	ldr.w	pc, [sp], #8
 8000af2:	bf00      	nop

08000af4 <__aeabi_dcmpge>:
 8000af4:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000af8:	f7ff ffce 	bl	8000a98 <__aeabi_cdrcmple>
 8000afc:	bf94      	ite	ls
 8000afe:	2001      	movls	r0, #1
 8000b00:	2000      	movhi	r0, #0
 8000b02:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b06:	bf00      	nop

08000b08 <__aeabi_dcmpgt>:
 8000b08:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b0c:	f7ff ffc4 	bl	8000a98 <__aeabi_cdrcmple>
 8000b10:	bf34      	ite	cc
 8000b12:	2001      	movcc	r0, #1
 8000b14:	2000      	movcs	r0, #0
 8000b16:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b1a:	bf00      	nop

08000b1c <__aeabi_dcmpun>:
 8000b1c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b20:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b24:	d102      	bne.n	8000b2c <__aeabi_dcmpun+0x10>
 8000b26:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b2a:	d10a      	bne.n	8000b42 <__aeabi_dcmpun+0x26>
 8000b2c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b30:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b34:	d102      	bne.n	8000b3c <__aeabi_dcmpun+0x20>
 8000b36:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b3a:	d102      	bne.n	8000b42 <__aeabi_dcmpun+0x26>
 8000b3c:	f04f 0000 	mov.w	r0, #0
 8000b40:	4770      	bx	lr
 8000b42:	f04f 0001 	mov.w	r0, #1
 8000b46:	4770      	bx	lr

08000b48 <__aeabi_d2iz>:
 8000b48:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b4c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000b50:	d215      	bcs.n	8000b7e <__aeabi_d2iz+0x36>
 8000b52:	d511      	bpl.n	8000b78 <__aeabi_d2iz+0x30>
 8000b54:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000b58:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b5c:	d912      	bls.n	8000b84 <__aeabi_d2iz+0x3c>
 8000b5e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b62:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000b66:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000b6a:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000b6e:	fa23 f002 	lsr.w	r0, r3, r2
 8000b72:	bf18      	it	ne
 8000b74:	4240      	negne	r0, r0
 8000b76:	4770      	bx	lr
 8000b78:	f04f 0000 	mov.w	r0, #0
 8000b7c:	4770      	bx	lr
 8000b7e:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000b82:	d105      	bne.n	8000b90 <__aeabi_d2iz+0x48>
 8000b84:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000b88:	bf08      	it	eq
 8000b8a:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000b8e:	4770      	bx	lr
 8000b90:	f04f 0000 	mov.w	r0, #0
 8000b94:	4770      	bx	lr
 8000b96:	bf00      	nop

08000b98 <__aeabi_uldivmod>:
 8000b98:	b953      	cbnz	r3, 8000bb0 <__aeabi_uldivmod+0x18>
 8000b9a:	b94a      	cbnz	r2, 8000bb0 <__aeabi_uldivmod+0x18>
 8000b9c:	2900      	cmp	r1, #0
 8000b9e:	bf08      	it	eq
 8000ba0:	2800      	cmpeq	r0, #0
 8000ba2:	bf1c      	itt	ne
 8000ba4:	f04f 31ff 	movne.w	r1, #4294967295
 8000ba8:	f04f 30ff 	movne.w	r0, #4294967295
 8000bac:	f000 b974 	b.w	8000e98 <__aeabi_idiv0>
 8000bb0:	f1ad 0c08 	sub.w	ip, sp, #8
 8000bb4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000bb8:	f000 f806 	bl	8000bc8 <__udivmoddi4>
 8000bbc:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000bc0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000bc4:	b004      	add	sp, #16
 8000bc6:	4770      	bx	lr

08000bc8 <__udivmoddi4>:
 8000bc8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000bcc:	9d08      	ldr	r5, [sp, #32]
 8000bce:	4604      	mov	r4, r0
 8000bd0:	468e      	mov	lr, r1
 8000bd2:	2b00      	cmp	r3, #0
 8000bd4:	d14d      	bne.n	8000c72 <__udivmoddi4+0xaa>
 8000bd6:	428a      	cmp	r2, r1
 8000bd8:	4694      	mov	ip, r2
 8000bda:	d969      	bls.n	8000cb0 <__udivmoddi4+0xe8>
 8000bdc:	fab2 f282 	clz	r2, r2
 8000be0:	b152      	cbz	r2, 8000bf8 <__udivmoddi4+0x30>
 8000be2:	fa01 f302 	lsl.w	r3, r1, r2
 8000be6:	f1c2 0120 	rsb	r1, r2, #32
 8000bea:	fa20 f101 	lsr.w	r1, r0, r1
 8000bee:	fa0c fc02 	lsl.w	ip, ip, r2
 8000bf2:	ea41 0e03 	orr.w	lr, r1, r3
 8000bf6:	4094      	lsls	r4, r2
 8000bf8:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000bfc:	0c21      	lsrs	r1, r4, #16
 8000bfe:	fbbe f6f8 	udiv	r6, lr, r8
 8000c02:	fa1f f78c 	uxth.w	r7, ip
 8000c06:	fb08 e316 	mls	r3, r8, r6, lr
 8000c0a:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 8000c0e:	fb06 f107 	mul.w	r1, r6, r7
 8000c12:	4299      	cmp	r1, r3
 8000c14:	d90a      	bls.n	8000c2c <__udivmoddi4+0x64>
 8000c16:	eb1c 0303 	adds.w	r3, ip, r3
 8000c1a:	f106 30ff 	add.w	r0, r6, #4294967295
 8000c1e:	f080 811f 	bcs.w	8000e60 <__udivmoddi4+0x298>
 8000c22:	4299      	cmp	r1, r3
 8000c24:	f240 811c 	bls.w	8000e60 <__udivmoddi4+0x298>
 8000c28:	3e02      	subs	r6, #2
 8000c2a:	4463      	add	r3, ip
 8000c2c:	1a5b      	subs	r3, r3, r1
 8000c2e:	b2a4      	uxth	r4, r4
 8000c30:	fbb3 f0f8 	udiv	r0, r3, r8
 8000c34:	fb08 3310 	mls	r3, r8, r0, r3
 8000c38:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000c3c:	fb00 f707 	mul.w	r7, r0, r7
 8000c40:	42a7      	cmp	r7, r4
 8000c42:	d90a      	bls.n	8000c5a <__udivmoddi4+0x92>
 8000c44:	eb1c 0404 	adds.w	r4, ip, r4
 8000c48:	f100 33ff 	add.w	r3, r0, #4294967295
 8000c4c:	f080 810a 	bcs.w	8000e64 <__udivmoddi4+0x29c>
 8000c50:	42a7      	cmp	r7, r4
 8000c52:	f240 8107 	bls.w	8000e64 <__udivmoddi4+0x29c>
 8000c56:	4464      	add	r4, ip
 8000c58:	3802      	subs	r0, #2
 8000c5a:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000c5e:	1be4      	subs	r4, r4, r7
 8000c60:	2600      	movs	r6, #0
 8000c62:	b11d      	cbz	r5, 8000c6c <__udivmoddi4+0xa4>
 8000c64:	40d4      	lsrs	r4, r2
 8000c66:	2300      	movs	r3, #0
 8000c68:	e9c5 4300 	strd	r4, r3, [r5]
 8000c6c:	4631      	mov	r1, r6
 8000c6e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000c72:	428b      	cmp	r3, r1
 8000c74:	d909      	bls.n	8000c8a <__udivmoddi4+0xc2>
 8000c76:	2d00      	cmp	r5, #0
 8000c78:	f000 80ef 	beq.w	8000e5a <__udivmoddi4+0x292>
 8000c7c:	2600      	movs	r6, #0
 8000c7e:	e9c5 0100 	strd	r0, r1, [r5]
 8000c82:	4630      	mov	r0, r6
 8000c84:	4631      	mov	r1, r6
 8000c86:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000c8a:	fab3 f683 	clz	r6, r3
 8000c8e:	2e00      	cmp	r6, #0
 8000c90:	d14a      	bne.n	8000d28 <__udivmoddi4+0x160>
 8000c92:	428b      	cmp	r3, r1
 8000c94:	d302      	bcc.n	8000c9c <__udivmoddi4+0xd4>
 8000c96:	4282      	cmp	r2, r0
 8000c98:	f200 80f9 	bhi.w	8000e8e <__udivmoddi4+0x2c6>
 8000c9c:	1a84      	subs	r4, r0, r2
 8000c9e:	eb61 0303 	sbc.w	r3, r1, r3
 8000ca2:	2001      	movs	r0, #1
 8000ca4:	469e      	mov	lr, r3
 8000ca6:	2d00      	cmp	r5, #0
 8000ca8:	d0e0      	beq.n	8000c6c <__udivmoddi4+0xa4>
 8000caa:	e9c5 4e00 	strd	r4, lr, [r5]
 8000cae:	e7dd      	b.n	8000c6c <__udivmoddi4+0xa4>
 8000cb0:	b902      	cbnz	r2, 8000cb4 <__udivmoddi4+0xec>
 8000cb2:	deff      	udf	#255	; 0xff
 8000cb4:	fab2 f282 	clz	r2, r2
 8000cb8:	2a00      	cmp	r2, #0
 8000cba:	f040 8092 	bne.w	8000de2 <__udivmoddi4+0x21a>
 8000cbe:	eba1 010c 	sub.w	r1, r1, ip
 8000cc2:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000cc6:	fa1f fe8c 	uxth.w	lr, ip
 8000cca:	2601      	movs	r6, #1
 8000ccc:	0c20      	lsrs	r0, r4, #16
 8000cce:	fbb1 f3f7 	udiv	r3, r1, r7
 8000cd2:	fb07 1113 	mls	r1, r7, r3, r1
 8000cd6:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000cda:	fb0e f003 	mul.w	r0, lr, r3
 8000cde:	4288      	cmp	r0, r1
 8000ce0:	d908      	bls.n	8000cf4 <__udivmoddi4+0x12c>
 8000ce2:	eb1c 0101 	adds.w	r1, ip, r1
 8000ce6:	f103 38ff 	add.w	r8, r3, #4294967295
 8000cea:	d202      	bcs.n	8000cf2 <__udivmoddi4+0x12a>
 8000cec:	4288      	cmp	r0, r1
 8000cee:	f200 80cb 	bhi.w	8000e88 <__udivmoddi4+0x2c0>
 8000cf2:	4643      	mov	r3, r8
 8000cf4:	1a09      	subs	r1, r1, r0
 8000cf6:	b2a4      	uxth	r4, r4
 8000cf8:	fbb1 f0f7 	udiv	r0, r1, r7
 8000cfc:	fb07 1110 	mls	r1, r7, r0, r1
 8000d00:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 8000d04:	fb0e fe00 	mul.w	lr, lr, r0
 8000d08:	45a6      	cmp	lr, r4
 8000d0a:	d908      	bls.n	8000d1e <__udivmoddi4+0x156>
 8000d0c:	eb1c 0404 	adds.w	r4, ip, r4
 8000d10:	f100 31ff 	add.w	r1, r0, #4294967295
 8000d14:	d202      	bcs.n	8000d1c <__udivmoddi4+0x154>
 8000d16:	45a6      	cmp	lr, r4
 8000d18:	f200 80bb 	bhi.w	8000e92 <__udivmoddi4+0x2ca>
 8000d1c:	4608      	mov	r0, r1
 8000d1e:	eba4 040e 	sub.w	r4, r4, lr
 8000d22:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 8000d26:	e79c      	b.n	8000c62 <__udivmoddi4+0x9a>
 8000d28:	f1c6 0720 	rsb	r7, r6, #32
 8000d2c:	40b3      	lsls	r3, r6
 8000d2e:	fa22 fc07 	lsr.w	ip, r2, r7
 8000d32:	ea4c 0c03 	orr.w	ip, ip, r3
 8000d36:	fa20 f407 	lsr.w	r4, r0, r7
 8000d3a:	fa01 f306 	lsl.w	r3, r1, r6
 8000d3e:	431c      	orrs	r4, r3
 8000d40:	40f9      	lsrs	r1, r7
 8000d42:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000d46:	fa00 f306 	lsl.w	r3, r0, r6
 8000d4a:	fbb1 f8f9 	udiv	r8, r1, r9
 8000d4e:	0c20      	lsrs	r0, r4, #16
 8000d50:	fa1f fe8c 	uxth.w	lr, ip
 8000d54:	fb09 1118 	mls	r1, r9, r8, r1
 8000d58:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000d5c:	fb08 f00e 	mul.w	r0, r8, lr
 8000d60:	4288      	cmp	r0, r1
 8000d62:	fa02 f206 	lsl.w	r2, r2, r6
 8000d66:	d90b      	bls.n	8000d80 <__udivmoddi4+0x1b8>
 8000d68:	eb1c 0101 	adds.w	r1, ip, r1
 8000d6c:	f108 3aff 	add.w	sl, r8, #4294967295
 8000d70:	f080 8088 	bcs.w	8000e84 <__udivmoddi4+0x2bc>
 8000d74:	4288      	cmp	r0, r1
 8000d76:	f240 8085 	bls.w	8000e84 <__udivmoddi4+0x2bc>
 8000d7a:	f1a8 0802 	sub.w	r8, r8, #2
 8000d7e:	4461      	add	r1, ip
 8000d80:	1a09      	subs	r1, r1, r0
 8000d82:	b2a4      	uxth	r4, r4
 8000d84:	fbb1 f0f9 	udiv	r0, r1, r9
 8000d88:	fb09 1110 	mls	r1, r9, r0, r1
 8000d8c:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 8000d90:	fb00 fe0e 	mul.w	lr, r0, lr
 8000d94:	458e      	cmp	lr, r1
 8000d96:	d908      	bls.n	8000daa <__udivmoddi4+0x1e2>
 8000d98:	eb1c 0101 	adds.w	r1, ip, r1
 8000d9c:	f100 34ff 	add.w	r4, r0, #4294967295
 8000da0:	d26c      	bcs.n	8000e7c <__udivmoddi4+0x2b4>
 8000da2:	458e      	cmp	lr, r1
 8000da4:	d96a      	bls.n	8000e7c <__udivmoddi4+0x2b4>
 8000da6:	3802      	subs	r0, #2
 8000da8:	4461      	add	r1, ip
 8000daa:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 8000dae:	fba0 9402 	umull	r9, r4, r0, r2
 8000db2:	eba1 010e 	sub.w	r1, r1, lr
 8000db6:	42a1      	cmp	r1, r4
 8000db8:	46c8      	mov	r8, r9
 8000dba:	46a6      	mov	lr, r4
 8000dbc:	d356      	bcc.n	8000e6c <__udivmoddi4+0x2a4>
 8000dbe:	d053      	beq.n	8000e68 <__udivmoddi4+0x2a0>
 8000dc0:	b15d      	cbz	r5, 8000dda <__udivmoddi4+0x212>
 8000dc2:	ebb3 0208 	subs.w	r2, r3, r8
 8000dc6:	eb61 010e 	sbc.w	r1, r1, lr
 8000dca:	fa01 f707 	lsl.w	r7, r1, r7
 8000dce:	fa22 f306 	lsr.w	r3, r2, r6
 8000dd2:	40f1      	lsrs	r1, r6
 8000dd4:	431f      	orrs	r7, r3
 8000dd6:	e9c5 7100 	strd	r7, r1, [r5]
 8000dda:	2600      	movs	r6, #0
 8000ddc:	4631      	mov	r1, r6
 8000dde:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000de2:	f1c2 0320 	rsb	r3, r2, #32
 8000de6:	40d8      	lsrs	r0, r3
 8000de8:	fa0c fc02 	lsl.w	ip, ip, r2
 8000dec:	fa21 f303 	lsr.w	r3, r1, r3
 8000df0:	4091      	lsls	r1, r2
 8000df2:	4301      	orrs	r1, r0
 8000df4:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000df8:	fa1f fe8c 	uxth.w	lr, ip
 8000dfc:	fbb3 f0f7 	udiv	r0, r3, r7
 8000e00:	fb07 3610 	mls	r6, r7, r0, r3
 8000e04:	0c0b      	lsrs	r3, r1, #16
 8000e06:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 8000e0a:	fb00 f60e 	mul.w	r6, r0, lr
 8000e0e:	429e      	cmp	r6, r3
 8000e10:	fa04 f402 	lsl.w	r4, r4, r2
 8000e14:	d908      	bls.n	8000e28 <__udivmoddi4+0x260>
 8000e16:	eb1c 0303 	adds.w	r3, ip, r3
 8000e1a:	f100 38ff 	add.w	r8, r0, #4294967295
 8000e1e:	d22f      	bcs.n	8000e80 <__udivmoddi4+0x2b8>
 8000e20:	429e      	cmp	r6, r3
 8000e22:	d92d      	bls.n	8000e80 <__udivmoddi4+0x2b8>
 8000e24:	3802      	subs	r0, #2
 8000e26:	4463      	add	r3, ip
 8000e28:	1b9b      	subs	r3, r3, r6
 8000e2a:	b289      	uxth	r1, r1
 8000e2c:	fbb3 f6f7 	udiv	r6, r3, r7
 8000e30:	fb07 3316 	mls	r3, r7, r6, r3
 8000e34:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000e38:	fb06 f30e 	mul.w	r3, r6, lr
 8000e3c:	428b      	cmp	r3, r1
 8000e3e:	d908      	bls.n	8000e52 <__udivmoddi4+0x28a>
 8000e40:	eb1c 0101 	adds.w	r1, ip, r1
 8000e44:	f106 38ff 	add.w	r8, r6, #4294967295
 8000e48:	d216      	bcs.n	8000e78 <__udivmoddi4+0x2b0>
 8000e4a:	428b      	cmp	r3, r1
 8000e4c:	d914      	bls.n	8000e78 <__udivmoddi4+0x2b0>
 8000e4e:	3e02      	subs	r6, #2
 8000e50:	4461      	add	r1, ip
 8000e52:	1ac9      	subs	r1, r1, r3
 8000e54:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 8000e58:	e738      	b.n	8000ccc <__udivmoddi4+0x104>
 8000e5a:	462e      	mov	r6, r5
 8000e5c:	4628      	mov	r0, r5
 8000e5e:	e705      	b.n	8000c6c <__udivmoddi4+0xa4>
 8000e60:	4606      	mov	r6, r0
 8000e62:	e6e3      	b.n	8000c2c <__udivmoddi4+0x64>
 8000e64:	4618      	mov	r0, r3
 8000e66:	e6f8      	b.n	8000c5a <__udivmoddi4+0x92>
 8000e68:	454b      	cmp	r3, r9
 8000e6a:	d2a9      	bcs.n	8000dc0 <__udivmoddi4+0x1f8>
 8000e6c:	ebb9 0802 	subs.w	r8, r9, r2
 8000e70:	eb64 0e0c 	sbc.w	lr, r4, ip
 8000e74:	3801      	subs	r0, #1
 8000e76:	e7a3      	b.n	8000dc0 <__udivmoddi4+0x1f8>
 8000e78:	4646      	mov	r6, r8
 8000e7a:	e7ea      	b.n	8000e52 <__udivmoddi4+0x28a>
 8000e7c:	4620      	mov	r0, r4
 8000e7e:	e794      	b.n	8000daa <__udivmoddi4+0x1e2>
 8000e80:	4640      	mov	r0, r8
 8000e82:	e7d1      	b.n	8000e28 <__udivmoddi4+0x260>
 8000e84:	46d0      	mov	r8, sl
 8000e86:	e77b      	b.n	8000d80 <__udivmoddi4+0x1b8>
 8000e88:	3b02      	subs	r3, #2
 8000e8a:	4461      	add	r1, ip
 8000e8c:	e732      	b.n	8000cf4 <__udivmoddi4+0x12c>
 8000e8e:	4630      	mov	r0, r6
 8000e90:	e709      	b.n	8000ca6 <__udivmoddi4+0xde>
 8000e92:	4464      	add	r4, ip
 8000e94:	3802      	subs	r0, #2
 8000e96:	e742      	b.n	8000d1e <__udivmoddi4+0x156>

08000e98 <__aeabi_idiv0>:
 8000e98:	4770      	bx	lr
 8000e9a:	bf00      	nop

08000e9c <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000e9c:	b580      	push	{r7, lr}
 8000e9e:	b0d6      	sub	sp, #344	; 0x158
 8000ea0:	af02      	add	r7, sp, #8
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000ea2:	f002 fbd3 	bl	800364c <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000ea6:	f000 fd6f 	bl	8001988 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000eaa:	f000 ffa9 	bl	8001e00 <MX_GPIO_Init>
  MX_DFSDM1_Init();
 8000eae:	f000 fdcd 	bl	8001a4c <MX_DFSDM1_Init>
  MX_QUADSPI_Init();
 8000eb2:	f000 fe83 	bl	8001bbc <MX_QUADSPI_Init>
  MX_SPI3_Init();
 8000eb6:	f000 fea7 	bl	8001c08 <MX_SPI3_Init>
  MX_USART3_UART_Init();
 8000eba:	f000 ff43 	bl	8001d44 <MX_USART3_UART_Init>
  MX_USB_OTG_FS_PCD_Init();
 8000ebe:	f000 ff71 	bl	8001da4 <MX_USB_OTG_FS_PCD_Init>
  MX_I2C1_Init();
 8000ec2:	f000 fdfb 	bl	8001abc <MX_I2C1_Init>
  MX_USART1_UART_Init();
 8000ec6:	f000 fedd 	bl	8001c84 <MX_USART1_UART_Init>
  MX_I2C2_Init();
 8000eca:	f000 fe37 	bl	8001b3c <MX_I2C2_Init>
  MX_USART2_UART_Init();
 8000ece:	f000 ff09 	bl	8001ce4 <MX_USART2_UART_Init>
  /* USER CODE BEGIN 2 */

  // Temperature Sensor
  HAL_UART_Transmit(&huart1, msg1, sizeof(msg1), 1000);
 8000ed2:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000ed6:	2230      	movs	r2, #48	; 0x30
 8000ed8:	495c      	ldr	r1, [pc, #368]	; (800104c <main+0x1b0>)
 8000eda:	485d      	ldr	r0, [pc, #372]	; (8001050 <main+0x1b4>)
 8000edc:	f005 fda9 	bl	8006a32 <HAL_UART_Transmit>
  HAL_UART_Transmit(&huart1, msg2, sizeof(msg2), 1000);
 8000ee0:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000ee4:	222f      	movs	r2, #47	; 0x2f
 8000ee6:	495b      	ldr	r1, [pc, #364]	; (8001054 <main+0x1b8>)
 8000ee8:	4859      	ldr	r0, [pc, #356]	; (8001050 <main+0x1b4>)
 8000eea:	f005 fda2 	bl	8006a32 <HAL_UART_Transmit>
  BSP_TSENSOR_Init();
 8000eee:	f002 f9b7 	bl	8003260 <BSP_TSENSOR_Init>
  HAL_UART_Transmit(&huart1, msg3, sizeof(msg3), 1000);
 8000ef2:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000ef6:	2231      	movs	r2, #49	; 0x31
 8000ef8:	4957      	ldr	r1, [pc, #348]	; (8001058 <main+0x1bc>)
 8000efa:	4855      	ldr	r0, [pc, #340]	; (8001050 <main+0x1b4>)
 8000efc:	f005 fd99 	bl	8006a32 <HAL_UART_Transmit>

  // Accelerometer Sensor
  HAL_UART_Transmit(&huart1, msg7, sizeof(msg7), 1000);
 8000f00:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000f04:	2231      	movs	r2, #49	; 0x31
 8000f06:	4955      	ldr	r1, [pc, #340]	; (800105c <main+0x1c0>)
 8000f08:	4851      	ldr	r0, [pc, #324]	; (8001050 <main+0x1b4>)
 8000f0a:	f005 fd92 	bl	8006a32 <HAL_UART_Transmit>
  HAL_UART_Transmit(&huart1, msg8, sizeof(msg8), 1000);
 8000f0e:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000f12:	2230      	movs	r2, #48	; 0x30
 8000f14:	4952      	ldr	r1, [pc, #328]	; (8001060 <main+0x1c4>)
 8000f16:	484e      	ldr	r0, [pc, #312]	; (8001050 <main+0x1b4>)
 8000f18:	f005 fd8b 	bl	8006a32 <HAL_UART_Transmit>
  BSP_ACCELERO_Init();
 8000f1c:	f002 f94a 	bl	80031b4 <BSP_ACCELERO_Init>
  HAL_UART_Transmit(&huart1, msg9, sizeof(msg9), 1000);
 8000f20:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000f24:	2233      	movs	r2, #51	; 0x33
 8000f26:	494f      	ldr	r1, [pc, #316]	; (8001064 <main+0x1c8>)
 8000f28:	4849      	ldr	r0, [pc, #292]	; (8001050 <main+0x1b4>)
 8000f2a:	f005 fd82 	bl	8006a32 <HAL_UART_Transmit>

  // Display oled i2c
  ssd1306_Init();
 8000f2e:	f001 f949 	bl	80021c4 <ssd1306_Init>
  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */

  float buf_temp[10] = {};
 8000f32:	f107 0378 	add.w	r3, r7, #120	; 0x78
 8000f36:	2228      	movs	r2, #40	; 0x28
 8000f38:	2100      	movs	r1, #0
 8000f3a:	4618      	mov	r0, r3
 8000f3c:	f006 fd7c 	bl	8007a38 <memset>
  float buf_ac[3][10] = {};
 8000f40:	f507 73a8 	add.w	r3, r7, #336	; 0x150
 8000f44:	f5a3 73a8 	sub.w	r3, r3, #336	; 0x150
 8000f48:	4618      	mov	r0, r3
 8000f4a:	2378      	movs	r3, #120	; 0x78
 8000f4c:	461a      	mov	r2, r3
 8000f4e:	2100      	movs	r1, #0
 8000f50:	f006 fd72 	bl	8007a38 <memset>
  int i = 0, j = 0;
 8000f54:	2300      	movs	r3, #0
 8000f56:	f8c7 314c 	str.w	r3, [r7, #332]	; 0x14c
 8000f5a:	2300      	movs	r3, #0
 8000f5c:	f8c7 3148 	str.w	r3, [r7, #328]	; 0x148
  bool fullArray1 = false, fullArray2 = false;
 8000f60:	2300      	movs	r3, #0
 8000f62:	f887 3147 	strb.w	r3, [r7, #327]	; 0x147
 8000f66:	2300      	movs	r3, #0
 8000f68:	f887 3146 	strb.w	r3, [r7, #326]	; 0x146
  float new_temp = 0;
 8000f6c:	f04f 0300 	mov.w	r3, #0
 8000f70:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
  float new_acX = 0;
 8000f74:	f04f 0300 	mov.w	r3, #0
 8000f78:	f8c7 3140 	str.w	r3, [r7, #320]	; 0x140
  float new_acY = 0;
 8000f7c:	f04f 0300 	mov.w	r3, #0
 8000f80:	f8c7 313c 	str.w	r3, [r7, #316]	; 0x13c
  float new_acZ = 0;
 8000f84:	f04f 0300 	mov.w	r3, #0
 8000f88:	f8c7 3138 	str.w	r3, [r7, #312]	; 0x138
  float max = 50,min = 50;
 8000f8c:	4b36      	ldr	r3, [pc, #216]	; (8001068 <main+0x1cc>)
 8000f8e:	f8c7 3134 	str.w	r3, [r7, #308]	; 0x134
 8000f92:	4b35      	ldr	r3, [pc, #212]	; (8001068 <main+0x1cc>)
 8000f94:	f8c7 3130 	str.w	r3, [r7, #304]	; 0x130

  while (1)
  {
	 max = buf_temp[0];
 8000f98:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8000f9a:	f8c7 3134 	str.w	r3, [r7, #308]	; 0x134

    /* USER CODE BEGIN 3 */
    // InterrupÃ§Ã£o

      // Temperature Sensor
      temp_value = BSP_TSENSOR_ReadTemp();
 8000f9e:	f002 f97b 	bl	8003298 <BSP_TSENSOR_ReadTemp>
 8000fa2:	eef0 7a40 	vmov.f32	s15, s0
 8000fa6:	4b31      	ldr	r3, [pc, #196]	; (800106c <main+0x1d0>)
 8000fa8:	edc3 7a00 	vstr	s15, [r3]
      int tmpInt1 = temp_value;
 8000fac:	4b2f      	ldr	r3, [pc, #188]	; (800106c <main+0x1d0>)
 8000fae:	edd3 7a00 	vldr	s15, [r3]
 8000fb2:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8000fb6:	ee17 3a90 	vmov	r3, s15
 8000fba:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
      float tmpFrac = temp_value - tmpInt1;
 8000fbe:	4b2b      	ldr	r3, [pc, #172]	; (800106c <main+0x1d0>)
 8000fc0:	ed93 7a00 	vldr	s14, [r3]
 8000fc4:	f8d7 3120 	ldr.w	r3, [r7, #288]	; 0x120
 8000fc8:	ee07 3a90 	vmov	s15, r3
 8000fcc:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8000fd0:	ee77 7a67 	vsub.f32	s15, s14, s15
 8000fd4:	edc7 7a47 	vstr	s15, [r7, #284]	; 0x11c
      int tmpInt2 = trunc(tmpFrac * 100);
 8000fd8:	edd7 7a47 	vldr	s15, [r7, #284]	; 0x11c
 8000fdc:	ed9f 7a25 	vldr	s14, [pc, #148]	; 8001074 <main+0x1d8>
 8000fe0:	ee67 7a87 	vmul.f32	s15, s15, s14
 8000fe4:	ee17 0a90 	vmov	r0, s15
 8000fe8:	f7ff faa6 	bl	8000538 <__aeabi_f2d>
 8000fec:	4602      	mov	r2, r0
 8000fee:	460b      	mov	r3, r1
 8000ff0:	ec43 2b10 	vmov	d0, r2, r3
 8000ff4:	f007 f982 	bl	80082fc <trunc>
 8000ff8:	ec53 2b10 	vmov	r2, r3, d0
 8000ffc:	4610      	mov	r0, r2
 8000ffe:	4619      	mov	r1, r3
 8001000:	f7ff fda2 	bl	8000b48 <__aeabi_d2iz>
 8001004:	4603      	mov	r3, r0
 8001006:	f8c7 3118 	str.w	r3, [r7, #280]	; 0x118
     // snprintf(str_tmp, 100, " TEMPERATURE = %d.%02d\n\r", tmpInt1, tmpInt2);
     // HAL_UART_Transmit(&huart1, (uint8_t *)str_tmp, sizeof(str_tmp), 1000);
      if (flag == 0x00){
 800100a:	4b19      	ldr	r3, [pc, #100]	; (8001070 <main+0x1d4>)
 800100c:	781b      	ldrb	r3, [r3, #0]
 800100e:	2b00      	cmp	r3, #0
 8001010:	f040 844a 	bne.w	80018a8 <main+0xa0c>
      // Valores em RMS
      //  CriaÃ§Ã£o do buffer de temperatura

      buf_temp[i] = temp_value;
 8001014:	4b15      	ldr	r3, [pc, #84]	; (800106c <main+0x1d0>)
 8001016:	681a      	ldr	r2, [r3, #0]
 8001018:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 800101c:	009b      	lsls	r3, r3, #2
 800101e:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 8001022:	443b      	add	r3, r7
 8001024:	3bd8      	subs	r3, #216	; 0xd8
 8001026:	601a      	str	r2, [r3, #0]
      //float min = buf_temp[0], max = buf_temp[0];
      i++;
 8001028:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 800102c:	3301      	adds	r3, #1
 800102e:	f8c7 314c 	str.w	r3, [r7, #332]	; 0x14c

      if (fullArray1)
 8001032:	f897 3147 	ldrb.w	r3, [r7, #327]	; 0x147
 8001036:	2b00      	cmp	r3, #0
 8001038:	d01e      	beq.n	8001078 <main+0x1dc>
      {
        new_temp = valorRMS(buf_temp, 10);
 800103a:	f107 0378 	add.w	r3, r7, #120	; 0x78
 800103e:	210a      	movs	r1, #10
 8001040:	4618      	mov	r0, r3
 8001042:	f001 fecd 	bl	8002de0 <valorRMS>
 8001046:	ed87 0a49 	vstr	s0, [r7, #292]	; 0x124
 800104a:	e01e      	b.n	800108a <main+0x1ee>
 800104c:	20000000 	.word	0x20000000
 8001050:	2000038c 	.word	0x2000038c
 8001054:	20000030 	.word	0x20000030
 8001058:	20000060 	.word	0x20000060
 800105c:	20000094 	.word	0x20000094
 8001060:	200000c8 	.word	0x200000c8
 8001064:	200000f8 	.word	0x200000f8
 8001068:	42480000 	.word	0x42480000
 800106c:	20000a24 	.word	0x20000a24
 8001070:	20000d1c 	.word	0x20000d1c
 8001074:	42c80000 	.word	0x42c80000
      }
      else
      {
        new_temp = valorRMS(buf_temp, i);
 8001078:	f107 0378 	add.w	r3, r7, #120	; 0x78
 800107c:	f8d7 114c 	ldr.w	r1, [r7, #332]	; 0x14c
 8001080:	4618      	mov	r0, r3
 8001082:	f001 fead 	bl	8002de0 <valorRMS>
 8001086:	ed87 0a49 	vstr	s0, [r7, #292]	; 0x124
      }
      if (i == 10)
 800108a:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 800108e:	2b0a      	cmp	r3, #10
 8001090:	d105      	bne.n	800109e <main+0x202>
      {
        i = 0;
 8001092:	2300      	movs	r3, #0
 8001094:	f8c7 314c 	str.w	r3, [r7, #332]	; 0x14c
        fullArray1 = true;
 8001098:	2301      	movs	r3, #1
 800109a:	f887 3147 	strb.w	r3, [r7, #327]	; 0x147
      }
      if (buf_temp[i] > max)
 800109e:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 80010a2:	009b      	lsls	r3, r3, #2
 80010a4:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 80010a8:	443b      	add	r3, r7
 80010aa:	3bd8      	subs	r3, #216	; 0xd8
 80010ac:	edd3 7a00 	vldr	s15, [r3]
 80010b0:	ed97 7a4d 	vldr	s14, [r7, #308]	; 0x134
 80010b4:	eeb4 7ae7 	vcmpe.f32	s14, s15
 80010b8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80010bc:	d509      	bpl.n	80010d2 <main+0x236>
      {
        max = buf_temp[i];
 80010be:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 80010c2:	009b      	lsls	r3, r3, #2
 80010c4:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 80010c8:	443b      	add	r3, r7
 80010ca:	3bd8      	subs	r3, #216	; 0xd8
 80010cc:	681b      	ldr	r3, [r3, #0]
 80010ce:	f8c7 3134 	str.w	r3, [r7, #308]	; 0x134
      }
      if (buf_temp[i] < min)
 80010d2:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 80010d6:	009b      	lsls	r3, r3, #2
 80010d8:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 80010dc:	443b      	add	r3, r7
 80010de:	3bd8      	subs	r3, #216	; 0xd8
 80010e0:	edd3 7a00 	vldr	s15, [r3]
 80010e4:	ed97 7a4c 	vldr	s14, [r7, #304]	; 0x130
 80010e8:	eeb4 7ae7 	vcmpe.f32	s14, s15
 80010ec:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80010f0:	dd09      	ble.n	8001106 <main+0x26a>
      {
        min = buf_temp[i];
 80010f2:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 80010f6:	009b      	lsls	r3, r3, #2
 80010f8:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 80010fc:	443b      	add	r3, r7
 80010fe:	3bd8      	subs	r3, #216	; 0xd8
 8001100:	681b      	ldr	r3, [r3, #0]
 8001102:	f8c7 3130 	str.w	r3, [r7, #304]	; 0x130
      }

      int min1 = min;
 8001106:	edd7 7a4c 	vldr	s15, [r7, #304]	; 0x130
 800110a:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800110e:	ee17 3a90 	vmov	r3, s15
 8001112:	f8c7 3114 	str.w	r3, [r7, #276]	; 0x114
      float minFrac = min - min1;
 8001116:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800111a:	ee07 3a90 	vmov	s15, r3
 800111e:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001122:	ed97 7a4c 	vldr	s14, [r7, #304]	; 0x130
 8001126:	ee77 7a67 	vsub.f32	s15, s14, s15
 800112a:	edc7 7a44 	vstr	s15, [r7, #272]	; 0x110
      int min2 = trunc(minFrac * 100);
 800112e:	edd7 7a44 	vldr	s15, [r7, #272]	; 0x110
 8001132:	ed1f 7a30 	vldr	s14, [pc, #-192]	; 8001074 <main+0x1d8>
 8001136:	ee67 7a87 	vmul.f32	s15, s15, s14
 800113a:	ee17 0a90 	vmov	r0, s15
 800113e:	f7ff f9fb 	bl	8000538 <__aeabi_f2d>
 8001142:	4602      	mov	r2, r0
 8001144:	460b      	mov	r3, r1
 8001146:	ec43 2b10 	vmov	d0, r2, r3
 800114a:	f007 f8d7 	bl	80082fc <trunc>
 800114e:	ec53 2b10 	vmov	r2, r3, d0
 8001152:	4610      	mov	r0, r2
 8001154:	4619      	mov	r1, r3
 8001156:	f7ff fcf7 	bl	8000b48 <__aeabi_d2iz>
 800115a:	4603      	mov	r3, r0
 800115c:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c

      int max1 = max;
 8001160:	edd7 7a4d 	vldr	s15, [r7, #308]	; 0x134
 8001164:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8001168:	ee17 3a90 	vmov	r3, s15
 800116c:	f8c7 3108 	str.w	r3, [r7, #264]	; 0x108
      float maxFrac = max - max1;
 8001170:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 8001174:	ee07 3a90 	vmov	s15, r3
 8001178:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800117c:	ed97 7a4d 	vldr	s14, [r7, #308]	; 0x134
 8001180:	ee77 7a67 	vsub.f32	s15, s14, s15
 8001184:	edc7 7a41 	vstr	s15, [r7, #260]	; 0x104
      int max2 = trunc(maxFrac * 100);
 8001188:	edd7 7a41 	vldr	s15, [r7, #260]	; 0x104
 800118c:	ed1f 7a47 	vldr	s14, [pc, #-284]	; 8001074 <main+0x1d8>
 8001190:	ee67 7a87 	vmul.f32	s15, s15, s14
 8001194:	ee17 0a90 	vmov	r0, s15
 8001198:	f7ff f9ce 	bl	8000538 <__aeabi_f2d>
 800119c:	4602      	mov	r2, r0
 800119e:	460b      	mov	r3, r1
 80011a0:	ec43 2b10 	vmov	d0, r2, r3
 80011a4:	f007 f8aa 	bl	80082fc <trunc>
 80011a8:	ec53 2b10 	vmov	r2, r3, d0
 80011ac:	4610      	mov	r0, r2
 80011ae:	4619      	mov	r1, r3
 80011b0:	f7ff fcca 	bl	8000b48 <__aeabi_d2iz>
 80011b4:	4603      	mov	r3, r0
 80011b6:	f8c7 3100 	str.w	r3, [r7, #256]	; 0x100

      snprintf(str_tmp2, 100, "RMS = %d.%02d\n\r", tmpInt1, tmpInt2);
 80011ba:	f8d7 3118 	ldr.w	r3, [r7, #280]	; 0x118
 80011be:	9300      	str	r3, [sp, #0]
 80011c0:	f8d7 3120 	ldr.w	r3, [r7, #288]	; 0x120
 80011c4:	4aa8      	ldr	r2, [pc, #672]	; (8001468 <main+0x5cc>)
 80011c6:	2164      	movs	r1, #100	; 0x64
 80011c8:	48a8      	ldr	r0, [pc, #672]	; (800146c <main+0x5d0>)
 80011ca:	f006 fc3d 	bl	8007a48 <sniprintf>
      snprintf(min_temp, 100, "MIN = %d.%02d\n\r", min1, min2);
 80011ce:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80011d2:	9300      	str	r3, [sp, #0]
 80011d4:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80011d8:	4aa5      	ldr	r2, [pc, #660]	; (8001470 <main+0x5d4>)
 80011da:	2164      	movs	r1, #100	; 0x64
 80011dc:	48a5      	ldr	r0, [pc, #660]	; (8001474 <main+0x5d8>)
 80011de:	f006 fc33 	bl	8007a48 <sniprintf>
      snprintf(max_temp, 100, "MAX = %d.%02d\n\r", max1, max2);
 80011e2:	f8d7 3100 	ldr.w	r3, [r7, #256]	; 0x100
 80011e6:	9300      	str	r3, [sp, #0]
 80011e8:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 80011ec:	4aa2      	ldr	r2, [pc, #648]	; (8001478 <main+0x5dc>)
 80011ee:	2164      	movs	r1, #100	; 0x64
 80011f0:	48a2      	ldr	r0, [pc, #648]	; (800147c <main+0x5e0>)
 80011f2:	f006 fc29 	bl	8007a48 <sniprintf>
      HAL_UART_Transmit(&huart1, (uint8_t *)str_tmp2, sizeof(str_tmp2), 1000);
 80011f6:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80011fa:	2264      	movs	r2, #100	; 0x64
 80011fc:	499b      	ldr	r1, [pc, #620]	; (800146c <main+0x5d0>)
 80011fe:	48a0      	ldr	r0, [pc, #640]	; (8001480 <main+0x5e4>)
 8001200:	f005 fc17 	bl	8006a32 <HAL_UART_Transmit>
      HAL_UART_Transmit(&huart1, (uint8_t *)min_temp, sizeof(str_tmp2), 1000);
 8001204:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001208:	2264      	movs	r2, #100	; 0x64
 800120a:	499a      	ldr	r1, [pc, #616]	; (8001474 <main+0x5d8>)
 800120c:	489c      	ldr	r0, [pc, #624]	; (8001480 <main+0x5e4>)
 800120e:	f005 fc10 	bl	8006a32 <HAL_UART_Transmit>
      HAL_UART_Transmit(&huart1, (uint8_t *)max_temp, sizeof(str_tmp2), 1000);
 8001212:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001216:	2264      	movs	r2, #100	; 0x64
 8001218:	4998      	ldr	r1, [pc, #608]	; (800147c <main+0x5e0>)
 800121a:	4899      	ldr	r0, [pc, #612]	; (8001480 <main+0x5e4>)
 800121c:	f005 fc09 	bl	8006a32 <HAL_UART_Transmit>

      // Accelerometer Sensor
      BSP_ACCELERO_AccGetXYZ(acelerometer_value);// se ligar nisso aqui. acelerometer_value já é inteiro
 8001220:	4898      	ldr	r0, [pc, #608]	; (8001484 <main+0x5e8>)
 8001222:	f002 f805 	bl	8003230 <BSP_ACCELERO_AccGetXYZ>
      int acelXInt1 = acelerometer_value[0];
 8001226:	4b97      	ldr	r3, [pc, #604]	; (8001484 <main+0x5e8>)
 8001228:	f9b3 3000 	ldrsh.w	r3, [r3]
 800122c:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
      float acelXFrac = acelerometer_value[0] - acelXInt1;
 8001230:	4b94      	ldr	r3, [pc, #592]	; (8001484 <main+0x5e8>)
 8001232:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001236:	461a      	mov	r2, r3
 8001238:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800123c:	1ad3      	subs	r3, r2, r3
 800123e:	ee07 3a90 	vmov	s15, r3
 8001242:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001246:	edc7 7a3e 	vstr	s15, [r7, #248]	; 0xf8
      int acelXInt2 = trunc(acelXFrac * 100);
 800124a:	edd7 7a3e 	vldr	s15, [r7, #248]	; 0xf8
 800124e:	ed9f 7a94 	vldr	s14, [pc, #592]	; 80014a0 <main+0x604>
 8001252:	ee67 7a87 	vmul.f32	s15, s15, s14
 8001256:	ee17 0a90 	vmov	r0, s15
 800125a:	f7ff f96d 	bl	8000538 <__aeabi_f2d>
 800125e:	4602      	mov	r2, r0
 8001260:	460b      	mov	r3, r1
 8001262:	ec43 2b10 	vmov	d0, r2, r3
 8001266:	f007 f849 	bl	80082fc <trunc>
 800126a:	ec53 2b10 	vmov	r2, r3, d0
 800126e:	4610      	mov	r0, r2
 8001270:	4619      	mov	r1, r3
 8001272:	f7ff fc69 	bl	8000b48 <__aeabi_d2iz>
 8001276:	4603      	mov	r3, r0
 8001278:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4

      int acelYInt1 = acelerometer_value[1];
 800127c:	4b81      	ldr	r3, [pc, #516]	; (8001484 <main+0x5e8>)
 800127e:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 8001282:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0
      float acelYFrac = acelerometer_value[1] - acelYInt1;
 8001286:	4b7f      	ldr	r3, [pc, #508]	; (8001484 <main+0x5e8>)
 8001288:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 800128c:	461a      	mov	r2, r3
 800128e:	f8d7 30f0 	ldr.w	r3, [r7, #240]	; 0xf0
 8001292:	1ad3      	subs	r3, r2, r3
 8001294:	ee07 3a90 	vmov	s15, r3
 8001298:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800129c:	edc7 7a3b 	vstr	s15, [r7, #236]	; 0xec
      int acelYInt2 = trunc(acelYFrac * 100);
 80012a0:	edd7 7a3b 	vldr	s15, [r7, #236]	; 0xec
 80012a4:	ed9f 7a7e 	vldr	s14, [pc, #504]	; 80014a0 <main+0x604>
 80012a8:	ee67 7a87 	vmul.f32	s15, s15, s14
 80012ac:	ee17 0a90 	vmov	r0, s15
 80012b0:	f7ff f942 	bl	8000538 <__aeabi_f2d>
 80012b4:	4602      	mov	r2, r0
 80012b6:	460b      	mov	r3, r1
 80012b8:	ec43 2b10 	vmov	d0, r2, r3
 80012bc:	f007 f81e 	bl	80082fc <trunc>
 80012c0:	ec53 2b10 	vmov	r2, r3, d0
 80012c4:	4610      	mov	r0, r2
 80012c6:	4619      	mov	r1, r3
 80012c8:	f7ff fc3e 	bl	8000b48 <__aeabi_d2iz>
 80012cc:	4603      	mov	r3, r0
 80012ce:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8

      int acelZInt1 = acelerometer_value[2];
 80012d2:	4b6c      	ldr	r3, [pc, #432]	; (8001484 <main+0x5e8>)
 80012d4:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 80012d8:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
      float acelZFrac = acelerometer_value[2] - acelZInt1;
 80012dc:	4b69      	ldr	r3, [pc, #420]	; (8001484 <main+0x5e8>)
 80012de:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 80012e2:	461a      	mov	r2, r3
 80012e4:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80012e8:	1ad3      	subs	r3, r2, r3
 80012ea:	ee07 3a90 	vmov	s15, r3
 80012ee:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80012f2:	edc7 7a38 	vstr	s15, [r7, #224]	; 0xe0
      int acelZInt2 = trunc(acelZFrac * 100);
 80012f6:	edd7 7a38 	vldr	s15, [r7, #224]	; 0xe0
 80012fa:	ed9f 7a69 	vldr	s14, [pc, #420]	; 80014a0 <main+0x604>
 80012fe:	ee67 7a87 	vmul.f32	s15, s15, s14
 8001302:	ee17 0a90 	vmov	r0, s15
 8001306:	f7ff f917 	bl	8000538 <__aeabi_f2d>
 800130a:	4602      	mov	r2, r0
 800130c:	460b      	mov	r3, r1
 800130e:	ec43 2b10 	vmov	d0, r2, r3
 8001312:	f006 fff3 	bl	80082fc <trunc>
 8001316:	ec53 2b10 	vmov	r2, r3, d0
 800131a:	4610      	mov	r0, r2
 800131c:	4619      	mov	r1, r3
 800131e:	f7ff fc13 	bl	8000b48 <__aeabi_d2iz>
 8001322:	4603      	mov	r3, r0
 8001324:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc

      snprintf(str_acel1, 100, " ACEL_X = %d.%02d\n\r", acelXInt1, acelXInt2);
 8001328:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800132c:	9300      	str	r3, [sp, #0]
 800132e:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8001332:	4a55      	ldr	r2, [pc, #340]	; (8001488 <main+0x5ec>)
 8001334:	2164      	movs	r1, #100	; 0x64
 8001336:	4855      	ldr	r0, [pc, #340]	; (800148c <main+0x5f0>)
 8001338:	f006 fb86 	bl	8007a48 <sniprintf>
      snprintf(str_acel2, 100, " ACEL_Y = %d.%02d\n\r", acelYInt1, acelYInt2);
 800133c:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 8001340:	9300      	str	r3, [sp, #0]
 8001342:	f8d7 30f0 	ldr.w	r3, [r7, #240]	; 0xf0
 8001346:	4a52      	ldr	r2, [pc, #328]	; (8001490 <main+0x5f4>)
 8001348:	2164      	movs	r1, #100	; 0x64
 800134a:	4852      	ldr	r0, [pc, #328]	; (8001494 <main+0x5f8>)
 800134c:	f006 fb7c 	bl	8007a48 <sniprintf>
      snprintf(str_acel3, 100, " ACEL_Z = %d.%02d\n\n\r", acelZInt1, acelZInt2);
 8001350:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8001354:	9300      	str	r3, [sp, #0]
 8001356:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800135a:	4a4f      	ldr	r2, [pc, #316]	; (8001498 <main+0x5fc>)
 800135c:	2164      	movs	r1, #100	; 0x64
 800135e:	484f      	ldr	r0, [pc, #316]	; (800149c <main+0x600>)
 8001360:	f006 fb72 	bl	8007a48 <sniprintf>
      HAL_UART_Transmit(&huart1, (uint8_t *)str_acel1, sizeof(str_acel1), 1000);
 8001364:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001368:	2264      	movs	r2, #100	; 0x64
 800136a:	4948      	ldr	r1, [pc, #288]	; (800148c <main+0x5f0>)
 800136c:	4844      	ldr	r0, [pc, #272]	; (8001480 <main+0x5e4>)
 800136e:	f005 fb60 	bl	8006a32 <HAL_UART_Transmit>
      HAL_UART_Transmit(&huart1, (uint8_t *)str_acel2, sizeof(str_acel2), 1000);
 8001372:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001376:	2264      	movs	r2, #100	; 0x64
 8001378:	4946      	ldr	r1, [pc, #280]	; (8001494 <main+0x5f8>)
 800137a:	4841      	ldr	r0, [pc, #260]	; (8001480 <main+0x5e4>)
 800137c:	f005 fb59 	bl	8006a32 <HAL_UART_Transmit>
      HAL_UART_Transmit(&huart1, (uint8_t *)str_acel3, sizeof(str_acel3), 1000);
 8001380:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001384:	2264      	movs	r2, #100	; 0x64
 8001386:	4945      	ldr	r1, [pc, #276]	; (800149c <main+0x600>)
 8001388:	483d      	ldr	r0, [pc, #244]	; (8001480 <main+0x5e4>)
 800138a:	f005 fb52 	bl	8006a32 <HAL_UART_Transmit>

      // CriaÃ§Ã£o do buffer do acelerometro x,y,z

      float min_ax = buf_ac[0][j], max_ax = buf_ac[0][j];
 800138e:	f507 73a8 	add.w	r3, r7, #336	; 0x150
 8001392:	f5a3 72a8 	sub.w	r2, r3, #336	; 0x150
 8001396:	f8d7 3148 	ldr.w	r3, [r7, #328]	; 0x148
 800139a:	009b      	lsls	r3, r3, #2
 800139c:	4413      	add	r3, r2
 800139e:	681b      	ldr	r3, [r3, #0]
 80013a0:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
 80013a4:	f507 73a8 	add.w	r3, r7, #336	; 0x150
 80013a8:	f5a3 72a8 	sub.w	r2, r3, #336	; 0x150
 80013ac:	f8d7 3148 	ldr.w	r3, [r7, #328]	; 0x148
 80013b0:	009b      	lsls	r3, r3, #2
 80013b2:	4413      	add	r3, r2
 80013b4:	681b      	ldr	r3, [r3, #0]
 80013b6:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128

      buf_ac[0][j] = acelerometer_value[0];
 80013ba:	4b32      	ldr	r3, [pc, #200]	; (8001484 <main+0x5e8>)
 80013bc:	f9b3 3000 	ldrsh.w	r3, [r3]
 80013c0:	ee07 3a90 	vmov	s15, r3
 80013c4:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80013c8:	f507 73a8 	add.w	r3, r7, #336	; 0x150
 80013cc:	f5a3 72a8 	sub.w	r2, r3, #336	; 0x150
 80013d0:	f8d7 3148 	ldr.w	r3, [r7, #328]	; 0x148
 80013d4:	009b      	lsls	r3, r3, #2
 80013d6:	4413      	add	r3, r2
 80013d8:	edc3 7a00 	vstr	s15, [r3]
      buf_ac[1][j] = acelerometer_value[1];
 80013dc:	4b29      	ldr	r3, [pc, #164]	; (8001484 <main+0x5e8>)
 80013de:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 80013e2:	ee07 3a90 	vmov	s15, r3
 80013e6:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80013ea:	f507 73a8 	add.w	r3, r7, #336	; 0x150
 80013ee:	f5a3 72a8 	sub.w	r2, r3, #336	; 0x150
 80013f2:	f8d7 3148 	ldr.w	r3, [r7, #328]	; 0x148
 80013f6:	330a      	adds	r3, #10
 80013f8:	009b      	lsls	r3, r3, #2
 80013fa:	4413      	add	r3, r2
 80013fc:	edc3 7a00 	vstr	s15, [r3]
      buf_ac[2][j] = acelerometer_value[2];
 8001400:	4b20      	ldr	r3, [pc, #128]	; (8001484 <main+0x5e8>)
 8001402:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 8001406:	ee07 3a90 	vmov	s15, r3
 800140a:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800140e:	f507 73a8 	add.w	r3, r7, #336	; 0x150
 8001412:	f5a3 72a8 	sub.w	r2, r3, #336	; 0x150
 8001416:	f8d7 3148 	ldr.w	r3, [r7, #328]	; 0x148
 800141a:	3314      	adds	r3, #20
 800141c:	009b      	lsls	r3, r3, #2
 800141e:	4413      	add	r3, r2
 8001420:	edc3 7a00 	vstr	s15, [r3]
      j++;
 8001424:	f8d7 3148 	ldr.w	r3, [r7, #328]	; 0x148
 8001428:	3301      	adds	r3, #1
 800142a:	f8c7 3148 	str.w	r3, [r7, #328]	; 0x148

      if (fullArray2)
 800142e:	f897 3146 	ldrb.w	r3, [r7, #326]	; 0x146
 8001432:	2b00      	cmp	r3, #0
 8001434:	d036      	beq.n	80014a4 <main+0x608>
      {
        new_acX = valorRMS(buf_ac[0], 10);
 8001436:	463b      	mov	r3, r7
 8001438:	210a      	movs	r1, #10
 800143a:	4618      	mov	r0, r3
 800143c:	f001 fcd0 	bl	8002de0 <valorRMS>
 8001440:	ed87 0a50 	vstr	s0, [r7, #320]	; 0x140
        new_acY = valorRMS(buf_ac[1], 10);
 8001444:	463b      	mov	r3, r7
 8001446:	3328      	adds	r3, #40	; 0x28
 8001448:	210a      	movs	r1, #10
 800144a:	4618      	mov	r0, r3
 800144c:	f001 fcc8 	bl	8002de0 <valorRMS>
 8001450:	ed87 0a4f 	vstr	s0, [r7, #316]	; 0x13c
        new_acZ = valorRMS(buf_ac[2], 10);
 8001454:	463b      	mov	r3, r7
 8001456:	3350      	adds	r3, #80	; 0x50
 8001458:	210a      	movs	r1, #10
 800145a:	4618      	mov	r0, r3
 800145c:	f001 fcc0 	bl	8002de0 <valorRMS>
 8001460:	ed87 0a4e 	vstr	s0, [r7, #312]	; 0x138
 8001464:	e038      	b.n	80014d8 <main+0x63c>
 8001466:	bf00      	nop
 8001468:	08009208 	.word	0x08009208
 800146c:	20000a28 	.word	0x20000a28
 8001470:	08009218 	.word	0x08009218
 8001474:	20000a8c 	.word	0x20000a8c
 8001478:	08009228 	.word	0x08009228
 800147c:	20000a98 	.word	0x20000a98
 8001480:	2000038c 	.word	0x2000038c
 8001484:	20000be8 	.word	0x20000be8
 8001488:	08009238 	.word	0x08009238
 800148c:	20000bf0 	.word	0x20000bf0
 8001490:	0800924c 	.word	0x0800924c
 8001494:	20000c54 	.word	0x20000c54
 8001498:	08009260 	.word	0x08009260
 800149c:	20000cb8 	.word	0x20000cb8
 80014a0:	42c80000 	.word	0x42c80000
      }
      else
      {
        new_acX = valorRMS(buf_ac[0], j);
 80014a4:	463b      	mov	r3, r7
 80014a6:	f8d7 1148 	ldr.w	r1, [r7, #328]	; 0x148
 80014aa:	4618      	mov	r0, r3
 80014ac:	f001 fc98 	bl	8002de0 <valorRMS>
 80014b0:	ed87 0a50 	vstr	s0, [r7, #320]	; 0x140
        new_acY = valorRMS(buf_ac[1], j);
 80014b4:	463b      	mov	r3, r7
 80014b6:	3328      	adds	r3, #40	; 0x28
 80014b8:	f8d7 1148 	ldr.w	r1, [r7, #328]	; 0x148
 80014bc:	4618      	mov	r0, r3
 80014be:	f001 fc8f 	bl	8002de0 <valorRMS>
 80014c2:	ed87 0a4f 	vstr	s0, [r7, #316]	; 0x13c
        new_acZ = valorRMS(buf_ac[2], j);
 80014c6:	463b      	mov	r3, r7
 80014c8:	3350      	adds	r3, #80	; 0x50
 80014ca:	f8d7 1148 	ldr.w	r1, [r7, #328]	; 0x148
 80014ce:	4618      	mov	r0, r3
 80014d0:	f001 fc86 	bl	8002de0 <valorRMS>
 80014d4:	ed87 0a4e 	vstr	s0, [r7, #312]	; 0x138
      }

      if (j == 10)
 80014d8:	f8d7 3148 	ldr.w	r3, [r7, #328]	; 0x148
 80014dc:	2b0a      	cmp	r3, #10
 80014de:	d105      	bne.n	80014ec <main+0x650>
      {
        j = 0;
 80014e0:	2300      	movs	r3, #0
 80014e2:	f8c7 3148 	str.w	r3, [r7, #328]	; 0x148
        fullArray2 = true;
 80014e6:	2301      	movs	r3, #1
 80014e8:	f887 3146 	strb.w	r3, [r7, #326]	; 0x146
      }

      // min-max ace_x
      if (buf_ac[0][j] > max_ax)
 80014ec:	f507 73a8 	add.w	r3, r7, #336	; 0x150
 80014f0:	f5a3 72a8 	sub.w	r2, r3, #336	; 0x150
 80014f4:	f8d7 3148 	ldr.w	r3, [r7, #328]	; 0x148
 80014f8:	009b      	lsls	r3, r3, #2
 80014fa:	4413      	add	r3, r2
 80014fc:	edd3 7a00 	vldr	s15, [r3]
 8001500:	ed97 7a4a 	vldr	s14, [r7, #296]	; 0x128
 8001504:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8001508:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800150c:	d50a      	bpl.n	8001524 <main+0x688>
      {
        max_ax = buf_ac[0][j];
 800150e:	f507 73a8 	add.w	r3, r7, #336	; 0x150
 8001512:	f5a3 72a8 	sub.w	r2, r3, #336	; 0x150
 8001516:	f8d7 3148 	ldr.w	r3, [r7, #328]	; 0x148
 800151a:	009b      	lsls	r3, r3, #2
 800151c:	4413      	add	r3, r2
 800151e:	681b      	ldr	r3, [r3, #0]
 8001520:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
      }
      if (buf_ac[0][j] < min_ax)
 8001524:	f507 73a8 	add.w	r3, r7, #336	; 0x150
 8001528:	f5a3 72a8 	sub.w	r2, r3, #336	; 0x150
 800152c:	f8d7 3148 	ldr.w	r3, [r7, #328]	; 0x148
 8001530:	009b      	lsls	r3, r3, #2
 8001532:	4413      	add	r3, r2
 8001534:	edd3 7a00 	vldr	s15, [r3]
 8001538:	ed97 7a4b 	vldr	s14, [r7, #300]	; 0x12c
 800153c:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8001540:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001544:	dd0a      	ble.n	800155c <main+0x6c0>
      {
        min_ax = buf_ac[0][j];
 8001546:	f507 73a8 	add.w	r3, r7, #336	; 0x150
 800154a:	f5a3 72a8 	sub.w	r2, r3, #336	; 0x150
 800154e:	f8d7 3148 	ldr.w	r3, [r7, #328]	; 0x148
 8001552:	009b      	lsls	r3, r3, #2
 8001554:	4413      	add	r3, r2
 8001556:	681b      	ldr	r3, [r3, #0]
 8001558:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
      }

      int min_ax1 = min_ax;
 800155c:	edd7 7a4b 	vldr	s15, [r7, #300]	; 0x12c
 8001560:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8001564:	ee17 3a90 	vmov	r3, s15
 8001568:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
      float minFracX = min_ax - min_ax1;
 800156c:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8001570:	ee07 3a90 	vmov	s15, r3
 8001574:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001578:	ed97 7a4b 	vldr	s14, [r7, #300]	; 0x12c
 800157c:	ee77 7a67 	vsub.f32	s15, s14, s15
 8001580:	edc7 7a35 	vstr	s15, [r7, #212]	; 0xd4
      int min_ax2 = trunc(minFracX * 100);
 8001584:	edd7 7a35 	vldr	s15, [r7, #212]	; 0xd4
 8001588:	ed1f 7a3b 	vldr	s14, [pc, #-236]	; 80014a0 <main+0x604>
 800158c:	ee67 7a87 	vmul.f32	s15, s15, s14
 8001590:	ee17 0a90 	vmov	r0, s15
 8001594:	f7fe ffd0 	bl	8000538 <__aeabi_f2d>
 8001598:	4602      	mov	r2, r0
 800159a:	460b      	mov	r3, r1
 800159c:	ec43 2b10 	vmov	d0, r2, r3
 80015a0:	f006 feac 	bl	80082fc <trunc>
 80015a4:	ec53 2b10 	vmov	r2, r3, d0
 80015a8:	4610      	mov	r0, r2
 80015aa:	4619      	mov	r1, r3
 80015ac:	f7ff facc 	bl	8000b48 <__aeabi_d2iz>
 80015b0:	4603      	mov	r3, r0
 80015b2:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0

      int max_ax1 = max_ax;
 80015b6:	edd7 7a4a 	vldr	s15, [r7, #296]	; 0x128
 80015ba:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80015be:	ee17 3a90 	vmov	r3, s15
 80015c2:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
      float maxFracX = max1 - max_ax;
 80015c6:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 80015ca:	ee07 3a90 	vmov	s15, r3
 80015ce:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 80015d2:	edd7 7a4a 	vldr	s15, [r7, #296]	; 0x128
 80015d6:	ee77 7a67 	vsub.f32	s15, s14, s15
 80015da:	edc7 7a32 	vstr	s15, [r7, #200]	; 0xc8
      int max_ax2 = trunc(maxFracX * 100);
 80015de:	edd7 7a32 	vldr	s15, [r7, #200]	; 0xc8
 80015e2:	ed1f 7a51 	vldr	s14, [pc, #-324]	; 80014a0 <main+0x604>
 80015e6:	ee67 7a87 	vmul.f32	s15, s15, s14
 80015ea:	ee17 0a90 	vmov	r0, s15
 80015ee:	f7fe ffa3 	bl	8000538 <__aeabi_f2d>
 80015f2:	4602      	mov	r2, r0
 80015f4:	460b      	mov	r3, r1
 80015f6:	ec43 2b10 	vmov	d0, r2, r3
 80015fa:	f006 fe7f 	bl	80082fc <trunc>
 80015fe:	ec53 2b10 	vmov	r2, r3, d0
 8001602:	4610      	mov	r0, r2
 8001604:	4619      	mov	r1, r3
 8001606:	f7ff fa9f 	bl	8000b48 <__aeabi_d2iz>
 800160a:	4603      	mov	r3, r0
 800160c:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4

      snprintf(min_acx, 100, "MIN=%d.%02d\n\r", min_ax1, min_ax2);
 8001610:	f8d7 30d0 	ldr.w	r3, [r7, #208]	; 0xd0
 8001614:	9300      	str	r3, [sp, #0]
 8001616:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 800161a:	4ac5      	ldr	r2, [pc, #788]	; (8001930 <main+0xa94>)
 800161c:	2164      	movs	r1, #100	; 0x64
 800161e:	48c5      	ldr	r0, [pc, #788]	; (8001934 <main+0xa98>)
 8001620:	f006 fa12 	bl	8007a48 <sniprintf>
      snprintf(max_acx, 100, "MAX=%d.%02d\n\r", max_ax1, 0);// no display aparece um numero com
 8001624:	2300      	movs	r3, #0
 8001626:	9300      	str	r3, [sp, #0]
 8001628:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 800162c:	4ac2      	ldr	r2, [pc, #776]	; (8001938 <main+0xa9c>)
 800162e:	2164      	movs	r1, #100	; 0x64
 8001630:	48c2      	ldr	r0, [pc, #776]	; (800193c <main+0xaa0>)
 8001632:	f006 fa09 	bl	8007a48 <sniprintf>
      // 4 casas decimais. acredito que tenha algum erro na manipulação das variáveis

      int acx = new_acX;
 8001636:	edd7 7a50 	vldr	s15, [r7, #320]	; 0x140
 800163a:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800163e:	ee17 3a90 	vmov	r3, s15
 8001642:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
      float acxFrac = acx - new_acX;
 8001646:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 800164a:	ee07 3a90 	vmov	s15, r3
 800164e:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8001652:	edd7 7a50 	vldr	s15, [r7, #320]	; 0x140
 8001656:	ee77 7a67 	vsub.f32	s15, s14, s15
 800165a:	edc7 7a2f 	vstr	s15, [r7, #188]	; 0xbc
      int rmsAcx = trunc(acxFrac * 100);
 800165e:	edd7 7a2f 	vldr	s15, [r7, #188]	; 0xbc
 8001662:	ed9f 7ab7 	vldr	s14, [pc, #732]	; 8001940 <main+0xaa4>
 8001666:	ee67 7a87 	vmul.f32	s15, s15, s14
 800166a:	ee17 0a90 	vmov	r0, s15
 800166e:	f7fe ff63 	bl	8000538 <__aeabi_f2d>
 8001672:	4602      	mov	r2, r0
 8001674:	460b      	mov	r3, r1
 8001676:	ec43 2b10 	vmov	d0, r2, r3
 800167a:	f006 fe3f 	bl	80082fc <trunc>
 800167e:	ec53 2b10 	vmov	r2, r3, d0
 8001682:	4610      	mov	r0, r2
 8001684:	4619      	mov	r1, r3
 8001686:	f7ff fa5f 	bl	8000b48 <__aeabi_d2iz>
 800168a:	4603      	mov	r3, r0
 800168c:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8

      int acy = new_acY;
 8001690:	edd7 7a4f 	vldr	s15, [r7, #316]	; 0x13c
 8001694:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8001698:	ee17 3a90 	vmov	r3, s15
 800169c:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
      float acyFrac = acy - new_acY;
 80016a0:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 80016a4:	ee07 3a90 	vmov	s15, r3
 80016a8:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 80016ac:	edd7 7a4f 	vldr	s15, [r7, #316]	; 0x13c
 80016b0:	ee77 7a67 	vsub.f32	s15, s14, s15
 80016b4:	edc7 7a2c 	vstr	s15, [r7, #176]	; 0xb0
      int rmsAcy = trunc(acyFrac * 100);
 80016b8:	edd7 7a2c 	vldr	s15, [r7, #176]	; 0xb0
 80016bc:	ed9f 7aa0 	vldr	s14, [pc, #640]	; 8001940 <main+0xaa4>
 80016c0:	ee67 7a87 	vmul.f32	s15, s15, s14
 80016c4:	ee17 0a90 	vmov	r0, s15
 80016c8:	f7fe ff36 	bl	8000538 <__aeabi_f2d>
 80016cc:	4602      	mov	r2, r0
 80016ce:	460b      	mov	r3, r1
 80016d0:	ec43 2b10 	vmov	d0, r2, r3
 80016d4:	f006 fe12 	bl	80082fc <trunc>
 80016d8:	ec53 2b10 	vmov	r2, r3, d0
 80016dc:	4610      	mov	r0, r2
 80016de:	4619      	mov	r1, r3
 80016e0:	f7ff fa32 	bl	8000b48 <__aeabi_d2iz>
 80016e4:	4603      	mov	r3, r0
 80016e6:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac

      int acz = new_acZ;
 80016ea:	edd7 7a4e 	vldr	s15, [r7, #312]	; 0x138
 80016ee:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80016f2:	ee17 3a90 	vmov	r3, s15
 80016f6:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
      float aczFrac = acx - new_acX;
 80016fa:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 80016fe:	ee07 3a90 	vmov	s15, r3
 8001702:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8001706:	edd7 7a50 	vldr	s15, [r7, #320]	; 0x140
 800170a:	ee77 7a67 	vsub.f32	s15, s14, s15
 800170e:	edc7 7a29 	vstr	s15, [r7, #164]	; 0xa4
      int rmsAcz = trunc(aczFrac * 100);
 8001712:	edd7 7a29 	vldr	s15, [r7, #164]	; 0xa4
 8001716:	ed9f 7a8a 	vldr	s14, [pc, #552]	; 8001940 <main+0xaa4>
 800171a:	ee67 7a87 	vmul.f32	s15, s15, s14
 800171e:	ee17 0a90 	vmov	r0, s15
 8001722:	f7fe ff09 	bl	8000538 <__aeabi_f2d>
 8001726:	4602      	mov	r2, r0
 8001728:	460b      	mov	r3, r1
 800172a:	ec43 2b10 	vmov	d0, r2, r3
 800172e:	f006 fde5 	bl	80082fc <trunc>
 8001732:	ec53 2b10 	vmov	r2, r3, d0
 8001736:	4610      	mov	r0, r2
 8001738:	4619      	mov	r1, r3
 800173a:	f7ff fa05 	bl	8000b48 <__aeabi_d2iz>
 800173e:	4603      	mov	r3, r0
 8001740:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0

      snprintf(str_acx, 100, " RMS_X = %d.%02d\n\n\r", acx, rmsAcx);
 8001744:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 8001748:	9300      	str	r3, [sp, #0]
 800174a:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 800174e:	4a7d      	ldr	r2, [pc, #500]	; (8001944 <main+0xaa8>)
 8001750:	2164      	movs	r1, #100	; 0x64
 8001752:	487d      	ldr	r0, [pc, #500]	; (8001948 <main+0xaac>)
 8001754:	f006 f978 	bl	8007a48 <sniprintf>
      snprintf(str_acy, 100, " RMS_Y = %d.%02d\n\n\r", acy, rmsAcy);
 8001758:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 800175c:	9300      	str	r3, [sp, #0]
 800175e:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 8001762:	4a7a      	ldr	r2, [pc, #488]	; (800194c <main+0xab0>)
 8001764:	2164      	movs	r1, #100	; 0x64
 8001766:	487a      	ldr	r0, [pc, #488]	; (8001950 <main+0xab4>)
 8001768:	f006 f96e 	bl	8007a48 <sniprintf>
      snprintf(str_acz, 100, " RMS_Z = %d.%02d\n\n\r", acz, rmsAcz);
 800176c:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8001770:	9300      	str	r3, [sp, #0]
 8001772:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8001776:	4a77      	ldr	r2, [pc, #476]	; (8001954 <main+0xab8>)
 8001778:	2164      	movs	r1, #100	; 0x64
 800177a:	4877      	ldr	r0, [pc, #476]	; (8001958 <main+0xabc>)
 800177c:	f006 f964 	bl	8007a48 <sniprintf>

      // Display oled i2c

      ssd1306_Fill(White);
 8001780:	2001      	movs	r0, #1
 8001782:	f000 fd89 	bl	8002298 <ssd1306_Fill>
      ssd1306_SetCursor(0, 10);
 8001786:	210a      	movs	r1, #10
 8001788:	2000      	movs	r0, #0
 800178a:	f000 fed3 	bl	8002534 <ssd1306_SetCursor>
      ssd1306_WriteString("TEMPERATURAbla", Font_6x8, Black);
 800178e:	4a73      	ldr	r2, [pc, #460]	; (800195c <main+0xac0>)
 8001790:	2300      	movs	r3, #0
 8001792:	ca06      	ldmia	r2, {r1, r2}
 8001794:	4872      	ldr	r0, [pc, #456]	; (8001960 <main+0xac4>)
 8001796:	f000 fea7 	bl	80024e8 <ssd1306_WriteString>
      ssd1306_SetCursor(0, 20);
 800179a:	2114      	movs	r1, #20
 800179c:	2000      	movs	r0, #0
 800179e:	f000 fec9 	bl	8002534 <ssd1306_SetCursor>
      ssd1306_WriteString(min_temp, Font_6x8, Black);
 80017a2:	4a6e      	ldr	r2, [pc, #440]	; (800195c <main+0xac0>)
 80017a4:	2300      	movs	r3, #0
 80017a6:	ca06      	ldmia	r2, {r1, r2}
 80017a8:	486e      	ldr	r0, [pc, #440]	; (8001964 <main+0xac8>)
 80017aa:	f000 fe9d 	bl	80024e8 <ssd1306_WriteString>
      ssd1306_SetCursor(0, 30);
 80017ae:	211e      	movs	r1, #30
 80017b0:	2000      	movs	r0, #0
 80017b2:	f000 febf 	bl	8002534 <ssd1306_SetCursor>
      ssd1306_WriteString(max_temp, Font_6x8, Black);
 80017b6:	4a69      	ldr	r2, [pc, #420]	; (800195c <main+0xac0>)
 80017b8:	2300      	movs	r3, #0
 80017ba:	ca06      	ldmia	r2, {r1, r2}
 80017bc:	486a      	ldr	r0, [pc, #424]	; (8001968 <main+0xacc>)
 80017be:	f000 fe93 	bl	80024e8 <ssd1306_WriteString>
      ssd1306_UpdateScreen();
 80017c2:	f000 fd8d 	bl	80022e0 <ssd1306_UpdateScreen>
      HAL_Delay(3000);
 80017c6:	f640 30b8 	movw	r0, #3000	; 0xbb8
 80017ca:	f001 ffb3 	bl	8003734 <HAL_Delay>

      ssd1306_Fill(White);
 80017ce:	2001      	movs	r0, #1
 80017d0:	f000 fd62 	bl	8002298 <ssd1306_Fill>
      ssd1306_SetCursor(0, 10);
 80017d4:	210a      	movs	r1, #10
 80017d6:	2000      	movs	r0, #0
 80017d8:	f000 feac 	bl	8002534 <ssd1306_SetCursor>
      ssd1306_WriteString("ACELERACAO X:", Font_6x8, Black);
 80017dc:	4a5f      	ldr	r2, [pc, #380]	; (800195c <main+0xac0>)
 80017de:	2300      	movs	r3, #0
 80017e0:	ca06      	ldmia	r2, {r1, r2}
 80017e2:	4862      	ldr	r0, [pc, #392]	; (800196c <main+0xad0>)
 80017e4:	f000 fe80 	bl	80024e8 <ssd1306_WriteString>
      ssd1306_SetCursor(0, 20);
 80017e8:	2114      	movs	r1, #20
 80017ea:	2000      	movs	r0, #0
 80017ec:	f000 fea2 	bl	8002534 <ssd1306_SetCursor>
      ssd1306_WriteString(str_acx, Font_6x8, Black);
 80017f0:	4a5a      	ldr	r2, [pc, #360]	; (800195c <main+0xac0>)
 80017f2:	2300      	movs	r3, #0
 80017f4:	ca06      	ldmia	r2, {r1, r2}
 80017f6:	4854      	ldr	r0, [pc, #336]	; (8001948 <main+0xaac>)
 80017f8:	f000 fe76 	bl	80024e8 <ssd1306_WriteString>
      ssd1306_SetCursor(0, 30);
 80017fc:	211e      	movs	r1, #30
 80017fe:	2000      	movs	r0, #0
 8001800:	f000 fe98 	bl	8002534 <ssd1306_SetCursor>
      ssd1306_WriteString(min_acx, Font_6x8, Black);
 8001804:	4a55      	ldr	r2, [pc, #340]	; (800195c <main+0xac0>)
 8001806:	2300      	movs	r3, #0
 8001808:	ca06      	ldmia	r2, {r1, r2}
 800180a:	484a      	ldr	r0, [pc, #296]	; (8001934 <main+0xa98>)
 800180c:	f000 fe6c 	bl	80024e8 <ssd1306_WriteString>
      ssd1306_SetCursor(0, 40);
 8001810:	2128      	movs	r1, #40	; 0x28
 8001812:	2000      	movs	r0, #0
 8001814:	f000 fe8e 	bl	8002534 <ssd1306_SetCursor>
      ssd1306_WriteString(max_acx, Font_6x8, Black);
 8001818:	4a50      	ldr	r2, [pc, #320]	; (800195c <main+0xac0>)
 800181a:	2300      	movs	r3, #0
 800181c:	ca06      	ldmia	r2, {r1, r2}
 800181e:	4847      	ldr	r0, [pc, #284]	; (800193c <main+0xaa0>)
 8001820:	f000 fe62 	bl	80024e8 <ssd1306_WriteString>
      ssd1306_UpdateScreen();
 8001824:	f000 fd5c 	bl	80022e0 <ssd1306_UpdateScreen>
      HAL_Delay(3000);
 8001828:	f640 30b8 	movw	r0, #3000	; 0xbb8
 800182c:	f001 ff82 	bl	8003734 <HAL_Delay>

      ssd1306_Fill(White);
 8001830:	2001      	movs	r0, #1
 8001832:	f000 fd31 	bl	8002298 <ssd1306_Fill>
      ssd1306_SetCursor(0, 10);
 8001836:	210a      	movs	r1, #10
 8001838:	2000      	movs	r0, #0
 800183a:	f000 fe7b 	bl	8002534 <ssd1306_SetCursor>
      ssd1306_WriteString("ACELERACAO Y:", Font_6x8, Black);
 800183e:	4a47      	ldr	r2, [pc, #284]	; (800195c <main+0xac0>)
 8001840:	2300      	movs	r3, #0
 8001842:	ca06      	ldmia	r2, {r1, r2}
 8001844:	484a      	ldr	r0, [pc, #296]	; (8001970 <main+0xad4>)
 8001846:	f000 fe4f 	bl	80024e8 <ssd1306_WriteString>
      ssd1306_SetCursor(0, 20);
 800184a:	2114      	movs	r1, #20
 800184c:	2000      	movs	r0, #0
 800184e:	f000 fe71 	bl	8002534 <ssd1306_SetCursor>
      ssd1306_WriteString(str_acy, Font_6x8, Black);
 8001852:	4a42      	ldr	r2, [pc, #264]	; (800195c <main+0xac0>)
 8001854:	2300      	movs	r3, #0
 8001856:	ca06      	ldmia	r2, {r1, r2}
 8001858:	483d      	ldr	r0, [pc, #244]	; (8001950 <main+0xab4>)
 800185a:	f000 fe45 	bl	80024e8 <ssd1306_WriteString>
      ssd1306_UpdateScreen();
 800185e:	f000 fd3f 	bl	80022e0 <ssd1306_UpdateScreen>
      HAL_Delay(3000);
 8001862:	f640 30b8 	movw	r0, #3000	; 0xbb8
 8001866:	f001 ff65 	bl	8003734 <HAL_Delay>

      ssd1306_Fill(White);
 800186a:	2001      	movs	r0, #1
 800186c:	f000 fd14 	bl	8002298 <ssd1306_Fill>
      ssd1306_SetCursor(0, 10);
 8001870:	210a      	movs	r1, #10
 8001872:	2000      	movs	r0, #0
 8001874:	f000 fe5e 	bl	8002534 <ssd1306_SetCursor>
      ssd1306_WriteString("ACELERACAO Z:", Font_6x8, Black);
 8001878:	4a38      	ldr	r2, [pc, #224]	; (800195c <main+0xac0>)
 800187a:	2300      	movs	r3, #0
 800187c:	ca06      	ldmia	r2, {r1, r2}
 800187e:	483d      	ldr	r0, [pc, #244]	; (8001974 <main+0xad8>)
 8001880:	f000 fe32 	bl	80024e8 <ssd1306_WriteString>
      ssd1306_SetCursor(0, 20);
 8001884:	2114      	movs	r1, #20
 8001886:	2000      	movs	r0, #0
 8001888:	f000 fe54 	bl	8002534 <ssd1306_SetCursor>
      ssd1306_WriteString(str_acz, Font_6x8, Black);
 800188c:	4a33      	ldr	r2, [pc, #204]	; (800195c <main+0xac0>)
 800188e:	2300      	movs	r3, #0
 8001890:	ca06      	ldmia	r2, {r1, r2}
 8001892:	4831      	ldr	r0, [pc, #196]	; (8001958 <main+0xabc>)
 8001894:	f000 fe28 	bl	80024e8 <ssd1306_WriteString>
      ssd1306_UpdateScreen();
 8001898:	f000 fd22 	bl	80022e0 <ssd1306_UpdateScreen>
      HAL_Delay(3000);
 800189c:	f640 30b8 	movw	r0, #3000	; 0xbb8
 80018a0:	f001 ff48 	bl	8003734 <HAL_Delay>
 80018a4:	f7ff bb78 	b.w	8000f98 <main+0xfc>
    }
    else
    {

      temp_value = 0;
 80018a8:	4b33      	ldr	r3, [pc, #204]	; (8001978 <main+0xadc>)
 80018aa:	f04f 0200 	mov.w	r2, #0
 80018ae:	601a      	str	r2, [r3, #0]
      tmpInt1 = 0;
 80018b0:	2300      	movs	r3, #0
 80018b2:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
      tmpInt2 = 0;
 80018b6:	2300      	movs	r3, #0
 80018b8:	f8c7 3118 	str.w	r3, [r7, #280]	; 0x118

      snprintf(min_temp, 100, "MIN = %d.%02d\n\r", 0, 0);
 80018bc:	2300      	movs	r3, #0
 80018be:	9300      	str	r3, [sp, #0]
 80018c0:	2300      	movs	r3, #0
 80018c2:	4a2e      	ldr	r2, [pc, #184]	; (800197c <main+0xae0>)
 80018c4:	2164      	movs	r1, #100	; 0x64
 80018c6:	4827      	ldr	r0, [pc, #156]	; (8001964 <main+0xac8>)
 80018c8:	f006 f8be 	bl	8007a48 <sniprintf>
      snprintf(max_temp, 100, "MAX = %d.%02d\n\r", 0, 0);
 80018cc:	2300      	movs	r3, #0
 80018ce:	9300      	str	r3, [sp, #0]
 80018d0:	2300      	movs	r3, #0
 80018d2:	4a2b      	ldr	r2, [pc, #172]	; (8001980 <main+0xae4>)
 80018d4:	2164      	movs	r1, #100	; 0x64
 80018d6:	4824      	ldr	r0, [pc, #144]	; (8001968 <main+0xacc>)
 80018d8:	f006 f8b6 	bl	8007a48 <sniprintf>
      ssd1306_Fill(White);
 80018dc:	2001      	movs	r0, #1
 80018de:	f000 fcdb 	bl	8002298 <ssd1306_Fill>
      ssd1306_SetCursor(0, 10);
 80018e2:	210a      	movs	r1, #10
 80018e4:	2000      	movs	r0, #0
 80018e6:	f000 fe25 	bl	8002534 <ssd1306_SetCursor>
      ssd1306_WriteString("TEMPERATURA", Font_6x8, Black);
 80018ea:	4a1c      	ldr	r2, [pc, #112]	; (800195c <main+0xac0>)
 80018ec:	2300      	movs	r3, #0
 80018ee:	ca06      	ldmia	r2, {r1, r2}
 80018f0:	4824      	ldr	r0, [pc, #144]	; (8001984 <main+0xae8>)
 80018f2:	f000 fdf9 	bl	80024e8 <ssd1306_WriteString>
      ssd1306_SetCursor(0, 20);
 80018f6:	2114      	movs	r1, #20
 80018f8:	2000      	movs	r0, #0
 80018fa:	f000 fe1b 	bl	8002534 <ssd1306_SetCursor>
      ssd1306_WriteString(min_temp, Font_6x8, Black);
 80018fe:	4a17      	ldr	r2, [pc, #92]	; (800195c <main+0xac0>)
 8001900:	2300      	movs	r3, #0
 8001902:	ca06      	ldmia	r2, {r1, r2}
 8001904:	4817      	ldr	r0, [pc, #92]	; (8001964 <main+0xac8>)
 8001906:	f000 fdef 	bl	80024e8 <ssd1306_WriteString>
      ssd1306_SetCursor(0, 30);
 800190a:	211e      	movs	r1, #30
 800190c:	2000      	movs	r0, #0
 800190e:	f000 fe11 	bl	8002534 <ssd1306_SetCursor>
      ssd1306_WriteString(max_temp, Font_6x8, Black);
 8001912:	4a12      	ldr	r2, [pc, #72]	; (800195c <main+0xac0>)
 8001914:	2300      	movs	r3, #0
 8001916:	ca06      	ldmia	r2, {r1, r2}
 8001918:	4813      	ldr	r0, [pc, #76]	; (8001968 <main+0xacc>)
 800191a:	f000 fde5 	bl	80024e8 <ssd1306_WriteString>
      ssd1306_UpdateScreen();
 800191e:	f000 fcdf 	bl	80022e0 <ssd1306_UpdateScreen>
      HAL_Delay(2000);
 8001922:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
 8001926:	f001 ff05 	bl	8003734 <HAL_Delay>
  {
 800192a:	f7ff bb35 	b.w	8000f98 <main+0xfc>
 800192e:	bf00      	nop
 8001930:	08009278 	.word	0x08009278
 8001934:	20000aa4 	.word	0x20000aa4
 8001938:	08009288 	.word	0x08009288
 800193c:	20000ab0 	.word	0x20000ab0
 8001940:	42c80000 	.word	0x42c80000
 8001944:	08009298 	.word	0x08009298
 8001948:	20000abc 	.word	0x20000abc
 800194c:	080092ac 	.word	0x080092ac
 8001950:	20000b20 	.word	0x20000b20
 8001954:	080092c0 	.word	0x080092c0
 8001958:	20000b84 	.word	0x20000b84
 800195c:	2000012c 	.word	0x2000012c
 8001960:	080092d4 	.word	0x080092d4
 8001964:	20000a8c 	.word	0x20000a8c
 8001968:	20000a98 	.word	0x20000a98
 800196c:	080092e4 	.word	0x080092e4
 8001970:	080092f4 	.word	0x080092f4
 8001974:	08009304 	.word	0x08009304
 8001978:	20000a24 	.word	0x20000a24
 800197c:	08009218 	.word	0x08009218
 8001980:	08009228 	.word	0x08009228
 8001984:	08009314 	.word	0x08009314

08001988 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001988:	b580      	push	{r7, lr}
 800198a:	b096      	sub	sp, #88	; 0x58
 800198c:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800198e:	f107 0314 	add.w	r3, r7, #20
 8001992:	2244      	movs	r2, #68	; 0x44
 8001994:	2100      	movs	r1, #0
 8001996:	4618      	mov	r0, r3
 8001998:	f006 f84e 	bl	8007a38 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 800199c:	463b      	mov	r3, r7
 800199e:	2200      	movs	r2, #0
 80019a0:	601a      	str	r2, [r3, #0]
 80019a2:	605a      	str	r2, [r3, #4]
 80019a4:	609a      	str	r2, [r3, #8]
 80019a6:	60da      	str	r2, [r3, #12]
 80019a8:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  if (HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1) != HAL_OK)
 80019aa:	f44f 7000 	mov.w	r0, #512	; 0x200
 80019ae:	f003 fb61 	bl	8005074 <HAL_PWREx_ControlVoltageScaling>
 80019b2:	4603      	mov	r3, r0
 80019b4:	2b00      	cmp	r3, #0
 80019b6:	d001      	beq.n	80019bc <SystemClock_Config+0x34>
  {
    Error_Handler();
 80019b8:	f000 fbc6 	bl	8002148 <Error_Handler>
  }

  /** Configure LSE Drive Capability
  */
  HAL_PWR_EnableBkUpAccess();
 80019bc:	f003 fb3c 	bl	8005038 <HAL_PWR_EnableBkUpAccess>
  __HAL_RCC_LSEDRIVE_CONFIG(RCC_LSEDRIVE_LOW);
 80019c0:	4b21      	ldr	r3, [pc, #132]	; (8001a48 <SystemClock_Config+0xc0>)
 80019c2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80019c6:	4a20      	ldr	r2, [pc, #128]	; (8001a48 <SystemClock_Config+0xc0>)
 80019c8:	f023 0318 	bic.w	r3, r3, #24
 80019cc:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_LSE|RCC_OSCILLATORTYPE_MSI;
 80019d0:	2314      	movs	r3, #20
 80019d2:	617b      	str	r3, [r7, #20]
  RCC_OscInitStruct.LSEState = RCC_LSE_ON;
 80019d4:	2301      	movs	r3, #1
 80019d6:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.MSIState = RCC_MSI_ON;
 80019d8:	2301      	movs	r3, #1
 80019da:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.MSICalibrationValue = 0;
 80019dc:	2300      	movs	r3, #0
 80019de:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.MSIClockRange = RCC_MSIRANGE_6;
 80019e0:	2360      	movs	r3, #96	; 0x60
 80019e2:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80019e4:	2302      	movs	r3, #2
 80019e6:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_MSI;
 80019e8:	2301      	movs	r3, #1
 80019ea:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLM = 1;
 80019ec:	2301      	movs	r3, #1
 80019ee:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLN = 40;
 80019f0:	2328      	movs	r3, #40	; 0x28
 80019f2:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV7;
 80019f4:	2307      	movs	r3, #7
 80019f6:	64fb      	str	r3, [r7, #76]	; 0x4c
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 80019f8:	2302      	movs	r3, #2
 80019fa:	653b      	str	r3, [r7, #80]	; 0x50
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 80019fc:	2302      	movs	r3, #2
 80019fe:	657b      	str	r3, [r7, #84]	; 0x54
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001a00:	f107 0314 	add.w	r3, r7, #20
 8001a04:	4618      	mov	r0, r3
 8001a06:	f003 fc57 	bl	80052b8 <HAL_RCC_OscConfig>
 8001a0a:	4603      	mov	r3, r0
 8001a0c:	2b00      	cmp	r3, #0
 8001a0e:	d001      	beq.n	8001a14 <SystemClock_Config+0x8c>
  {
    Error_Handler();
 8001a10:	f000 fb9a 	bl	8002148 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001a14:	230f      	movs	r3, #15
 8001a16:	603b      	str	r3, [r7, #0]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8001a18:	2303      	movs	r3, #3
 8001a1a:	607b      	str	r3, [r7, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001a1c:	2300      	movs	r3, #0
 8001a1e:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8001a20:	2300      	movs	r3, #0
 8001a22:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8001a24:	2300      	movs	r3, #0
 8001a26:	613b      	str	r3, [r7, #16]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK)
 8001a28:	463b      	mov	r3, r7
 8001a2a:	2104      	movs	r1, #4
 8001a2c:	4618      	mov	r0, r3
 8001a2e:	f004 f81f 	bl	8005a70 <HAL_RCC_ClockConfig>
 8001a32:	4603      	mov	r3, r0
 8001a34:	2b00      	cmp	r3, #0
 8001a36:	d001      	beq.n	8001a3c <SystemClock_Config+0xb4>
  {
    Error_Handler();
 8001a38:	f000 fb86 	bl	8002148 <Error_Handler>
  }

  /** Enable MSI Auto calibration
  */
  HAL_RCCEx_EnableMSIPLLMode();
 8001a3c:	f004 fd26 	bl	800648c <HAL_RCCEx_EnableMSIPLLMode>
}
 8001a40:	bf00      	nop
 8001a42:	3758      	adds	r7, #88	; 0x58
 8001a44:	46bd      	mov	sp, r7
 8001a46:	bd80      	pop	{r7, pc}
 8001a48:	40021000 	.word	0x40021000

08001a4c <MX_DFSDM1_Init>:
  * @brief DFSDM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_DFSDM1_Init(void)
{
 8001a4c:	b580      	push	{r7, lr}
 8001a4e:	af00      	add	r7, sp, #0
  /* USER CODE END DFSDM1_Init 0 */

  /* USER CODE BEGIN DFSDM1_Init 1 */

  /* USER CODE END DFSDM1_Init 1 */
  hdfsdm1_channel1.Instance = DFSDM1_Channel1;
 8001a50:	4b18      	ldr	r3, [pc, #96]	; (8001ab4 <MX_DFSDM1_Init+0x68>)
 8001a52:	4a19      	ldr	r2, [pc, #100]	; (8001ab8 <MX_DFSDM1_Init+0x6c>)
 8001a54:	601a      	str	r2, [r3, #0]
  hdfsdm1_channel1.Init.OutputClock.Activation = ENABLE;
 8001a56:	4b17      	ldr	r3, [pc, #92]	; (8001ab4 <MX_DFSDM1_Init+0x68>)
 8001a58:	2201      	movs	r2, #1
 8001a5a:	711a      	strb	r2, [r3, #4]
  hdfsdm1_channel1.Init.OutputClock.Selection = DFSDM_CHANNEL_OUTPUT_CLOCK_SYSTEM;
 8001a5c:	4b15      	ldr	r3, [pc, #84]	; (8001ab4 <MX_DFSDM1_Init+0x68>)
 8001a5e:	2200      	movs	r2, #0
 8001a60:	609a      	str	r2, [r3, #8]
  hdfsdm1_channel1.Init.OutputClock.Divider = 2;
 8001a62:	4b14      	ldr	r3, [pc, #80]	; (8001ab4 <MX_DFSDM1_Init+0x68>)
 8001a64:	2202      	movs	r2, #2
 8001a66:	60da      	str	r2, [r3, #12]
  hdfsdm1_channel1.Init.Input.Multiplexer = DFSDM_CHANNEL_EXTERNAL_INPUTS;
 8001a68:	4b12      	ldr	r3, [pc, #72]	; (8001ab4 <MX_DFSDM1_Init+0x68>)
 8001a6a:	2200      	movs	r2, #0
 8001a6c:	611a      	str	r2, [r3, #16]
  hdfsdm1_channel1.Init.Input.DataPacking = DFSDM_CHANNEL_STANDARD_MODE;
 8001a6e:	4b11      	ldr	r3, [pc, #68]	; (8001ab4 <MX_DFSDM1_Init+0x68>)
 8001a70:	2200      	movs	r2, #0
 8001a72:	615a      	str	r2, [r3, #20]
  hdfsdm1_channel1.Init.Input.Pins = DFSDM_CHANNEL_FOLLOWING_CHANNEL_PINS;
 8001a74:	4b0f      	ldr	r3, [pc, #60]	; (8001ab4 <MX_DFSDM1_Init+0x68>)
 8001a76:	f44f 7280 	mov.w	r2, #256	; 0x100
 8001a7a:	619a      	str	r2, [r3, #24]
  hdfsdm1_channel1.Init.SerialInterface.Type = DFSDM_CHANNEL_SPI_RISING;
 8001a7c:	4b0d      	ldr	r3, [pc, #52]	; (8001ab4 <MX_DFSDM1_Init+0x68>)
 8001a7e:	2200      	movs	r2, #0
 8001a80:	61da      	str	r2, [r3, #28]
  hdfsdm1_channel1.Init.SerialInterface.SpiClock = DFSDM_CHANNEL_SPI_CLOCK_INTERNAL;
 8001a82:	4b0c      	ldr	r3, [pc, #48]	; (8001ab4 <MX_DFSDM1_Init+0x68>)
 8001a84:	2204      	movs	r2, #4
 8001a86:	621a      	str	r2, [r3, #32]
  hdfsdm1_channel1.Init.Awd.FilterOrder = DFSDM_CHANNEL_FASTSINC_ORDER;
 8001a88:	4b0a      	ldr	r3, [pc, #40]	; (8001ab4 <MX_DFSDM1_Init+0x68>)
 8001a8a:	2200      	movs	r2, #0
 8001a8c:	625a      	str	r2, [r3, #36]	; 0x24
  hdfsdm1_channel1.Init.Awd.Oversampling = 1;
 8001a8e:	4b09      	ldr	r3, [pc, #36]	; (8001ab4 <MX_DFSDM1_Init+0x68>)
 8001a90:	2201      	movs	r2, #1
 8001a92:	629a      	str	r2, [r3, #40]	; 0x28
  hdfsdm1_channel1.Init.Offset = 0;
 8001a94:	4b07      	ldr	r3, [pc, #28]	; (8001ab4 <MX_DFSDM1_Init+0x68>)
 8001a96:	2200      	movs	r2, #0
 8001a98:	62da      	str	r2, [r3, #44]	; 0x2c
  hdfsdm1_channel1.Init.RightBitShift = 0x00;
 8001a9a:	4b06      	ldr	r3, [pc, #24]	; (8001ab4 <MX_DFSDM1_Init+0x68>)
 8001a9c:	2200      	movs	r2, #0
 8001a9e:	631a      	str	r2, [r3, #48]	; 0x30
  if (HAL_DFSDM_ChannelInit(&hdfsdm1_channel1) != HAL_OK)
 8001aa0:	4804      	ldr	r0, [pc, #16]	; (8001ab4 <MX_DFSDM1_Init+0x68>)
 8001aa2:	f001 ff7d 	bl	80039a0 <HAL_DFSDM_ChannelInit>
 8001aa6:	4603      	mov	r3, r0
 8001aa8:	2b00      	cmp	r3, #0
 8001aaa:	d001      	beq.n	8001ab0 <MX_DFSDM1_Init+0x64>
  {
    Error_Handler();
 8001aac:	f000 fb4c 	bl	8002148 <Error_Handler>
  }
  /* USER CODE BEGIN DFSDM1_Init 2 */

  /* USER CODE END DFSDM1_Init 2 */

}
 8001ab0:	bf00      	nop
 8001ab2:	bd80      	pop	{r7, pc}
 8001ab4:	20000204 	.word	0x20000204
 8001ab8:	40016020 	.word	0x40016020

08001abc <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 8001abc:	b580      	push	{r7, lr}
 8001abe:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8001ac0:	4b1b      	ldr	r3, [pc, #108]	; (8001b30 <MX_I2C1_Init+0x74>)
 8001ac2:	4a1c      	ldr	r2, [pc, #112]	; (8001b34 <MX_I2C1_Init+0x78>)
 8001ac4:	601a      	str	r2, [r3, #0]
  hi2c1.Init.Timing = 0x00702991;
 8001ac6:	4b1a      	ldr	r3, [pc, #104]	; (8001b30 <MX_I2C1_Init+0x74>)
 8001ac8:	4a1b      	ldr	r2, [pc, #108]	; (8001b38 <MX_I2C1_Init+0x7c>)
 8001aca:	605a      	str	r2, [r3, #4]
  hi2c1.Init.OwnAddress1 = 0;
 8001acc:	4b18      	ldr	r3, [pc, #96]	; (8001b30 <MX_I2C1_Init+0x74>)
 8001ace:	2200      	movs	r2, #0
 8001ad0:	609a      	str	r2, [r3, #8]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8001ad2:	4b17      	ldr	r3, [pc, #92]	; (8001b30 <MX_I2C1_Init+0x74>)
 8001ad4:	2201      	movs	r2, #1
 8001ad6:	60da      	str	r2, [r3, #12]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8001ad8:	4b15      	ldr	r3, [pc, #84]	; (8001b30 <MX_I2C1_Init+0x74>)
 8001ada:	2200      	movs	r2, #0
 8001adc:	611a      	str	r2, [r3, #16]
  hi2c1.Init.OwnAddress2 = 0;
 8001ade:	4b14      	ldr	r3, [pc, #80]	; (8001b30 <MX_I2C1_Init+0x74>)
 8001ae0:	2200      	movs	r2, #0
 8001ae2:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 8001ae4:	4b12      	ldr	r3, [pc, #72]	; (8001b30 <MX_I2C1_Init+0x74>)
 8001ae6:	2200      	movs	r2, #0
 8001ae8:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8001aea:	4b11      	ldr	r3, [pc, #68]	; (8001b30 <MX_I2C1_Init+0x74>)
 8001aec:	2200      	movs	r2, #0
 8001aee:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8001af0:	4b0f      	ldr	r3, [pc, #60]	; (8001b30 <MX_I2C1_Init+0x74>)
 8001af2:	2200      	movs	r2, #0
 8001af4:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8001af6:	480e      	ldr	r0, [pc, #56]	; (8001b30 <MX_I2C1_Init+0x74>)
 8001af8:	f002 fb2c 	bl	8004154 <HAL_I2C_Init>
 8001afc:	4603      	mov	r3, r0
 8001afe:	2b00      	cmp	r3, #0
 8001b00:	d001      	beq.n	8001b06 <MX_I2C1_Init+0x4a>
  {
    Error_Handler();
 8001b02:	f000 fb21 	bl	8002148 <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c1, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 8001b06:	2100      	movs	r1, #0
 8001b08:	4809      	ldr	r0, [pc, #36]	; (8001b30 <MX_I2C1_Init+0x74>)
 8001b0a:	f003 f8b5 	bl	8004c78 <HAL_I2CEx_ConfigAnalogFilter>
 8001b0e:	4603      	mov	r3, r0
 8001b10:	2b00      	cmp	r3, #0
 8001b12:	d001      	beq.n	8001b18 <MX_I2C1_Init+0x5c>
  {
    Error_Handler();
 8001b14:	f000 fb18 	bl	8002148 <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c1, 0) != HAL_OK)
 8001b18:	2100      	movs	r1, #0
 8001b1a:	4805      	ldr	r0, [pc, #20]	; (8001b30 <MX_I2C1_Init+0x74>)
 8001b1c:	f003 f8f7 	bl	8004d0e <HAL_I2CEx_ConfigDigitalFilter>
 8001b20:	4603      	mov	r3, r0
 8001b22:	2b00      	cmp	r3, #0
 8001b24:	d001      	beq.n	8001b2a <MX_I2C1_Init+0x6e>
  {
    Error_Handler();
 8001b26:	f000 fb0f 	bl	8002148 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8001b2a:	bf00      	nop
 8001b2c:	bd80      	pop	{r7, pc}
 8001b2e:	bf00      	nop
 8001b30:	2000023c 	.word	0x2000023c
 8001b34:	40005400 	.word	0x40005400
 8001b38:	00702991 	.word	0x00702991

08001b3c <MX_I2C2_Init>:
  * @brief I2C2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C2_Init(void)
{
 8001b3c:	b580      	push	{r7, lr}
 8001b3e:	af00      	add	r7, sp, #0
  /* USER CODE END I2C2_Init 0 */

  /* USER CODE BEGIN I2C2_Init 1 */

  /* USER CODE END I2C2_Init 1 */
  hi2c2.Instance = I2C2;
 8001b40:	4b1b      	ldr	r3, [pc, #108]	; (8001bb0 <MX_I2C2_Init+0x74>)
 8001b42:	4a1c      	ldr	r2, [pc, #112]	; (8001bb4 <MX_I2C2_Init+0x78>)
 8001b44:	601a      	str	r2, [r3, #0]
  hi2c2.Init.Timing = 0x00702991;
 8001b46:	4b1a      	ldr	r3, [pc, #104]	; (8001bb0 <MX_I2C2_Init+0x74>)
 8001b48:	4a1b      	ldr	r2, [pc, #108]	; (8001bb8 <MX_I2C2_Init+0x7c>)
 8001b4a:	605a      	str	r2, [r3, #4]
  hi2c2.Init.OwnAddress1 = 0;
 8001b4c:	4b18      	ldr	r3, [pc, #96]	; (8001bb0 <MX_I2C2_Init+0x74>)
 8001b4e:	2200      	movs	r2, #0
 8001b50:	609a      	str	r2, [r3, #8]
  hi2c2.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8001b52:	4b17      	ldr	r3, [pc, #92]	; (8001bb0 <MX_I2C2_Init+0x74>)
 8001b54:	2201      	movs	r2, #1
 8001b56:	60da      	str	r2, [r3, #12]
  hi2c2.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8001b58:	4b15      	ldr	r3, [pc, #84]	; (8001bb0 <MX_I2C2_Init+0x74>)
 8001b5a:	2200      	movs	r2, #0
 8001b5c:	611a      	str	r2, [r3, #16]
  hi2c2.Init.OwnAddress2 = 0;
 8001b5e:	4b14      	ldr	r3, [pc, #80]	; (8001bb0 <MX_I2C2_Init+0x74>)
 8001b60:	2200      	movs	r2, #0
 8001b62:	615a      	str	r2, [r3, #20]
  hi2c2.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 8001b64:	4b12      	ldr	r3, [pc, #72]	; (8001bb0 <MX_I2C2_Init+0x74>)
 8001b66:	2200      	movs	r2, #0
 8001b68:	619a      	str	r2, [r3, #24]
  hi2c2.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8001b6a:	4b11      	ldr	r3, [pc, #68]	; (8001bb0 <MX_I2C2_Init+0x74>)
 8001b6c:	2200      	movs	r2, #0
 8001b6e:	61da      	str	r2, [r3, #28]
  hi2c2.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8001b70:	4b0f      	ldr	r3, [pc, #60]	; (8001bb0 <MX_I2C2_Init+0x74>)
 8001b72:	2200      	movs	r2, #0
 8001b74:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c2) != HAL_OK)
 8001b76:	480e      	ldr	r0, [pc, #56]	; (8001bb0 <MX_I2C2_Init+0x74>)
 8001b78:	f002 faec 	bl	8004154 <HAL_I2C_Init>
 8001b7c:	4603      	mov	r3, r0
 8001b7e:	2b00      	cmp	r3, #0
 8001b80:	d001      	beq.n	8001b86 <MX_I2C2_Init+0x4a>
  {
    Error_Handler();
 8001b82:	f000 fae1 	bl	8002148 <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c2, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 8001b86:	2100      	movs	r1, #0
 8001b88:	4809      	ldr	r0, [pc, #36]	; (8001bb0 <MX_I2C2_Init+0x74>)
 8001b8a:	f003 f875 	bl	8004c78 <HAL_I2CEx_ConfigAnalogFilter>
 8001b8e:	4603      	mov	r3, r0
 8001b90:	2b00      	cmp	r3, #0
 8001b92:	d001      	beq.n	8001b98 <MX_I2C2_Init+0x5c>
  {
    Error_Handler();
 8001b94:	f000 fad8 	bl	8002148 <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c2, 0) != HAL_OK)
 8001b98:	2100      	movs	r1, #0
 8001b9a:	4805      	ldr	r0, [pc, #20]	; (8001bb0 <MX_I2C2_Init+0x74>)
 8001b9c:	f003 f8b7 	bl	8004d0e <HAL_I2CEx_ConfigDigitalFilter>
 8001ba0:	4603      	mov	r3, r0
 8001ba2:	2b00      	cmp	r3, #0
 8001ba4:	d001      	beq.n	8001baa <MX_I2C2_Init+0x6e>
  {
    Error_Handler();
 8001ba6:	f000 facf 	bl	8002148 <Error_Handler>
  }
  /* USER CODE BEGIN I2C2_Init 2 */

  /* USER CODE END I2C2_Init 2 */

}
 8001baa:	bf00      	nop
 8001bac:	bd80      	pop	{r7, pc}
 8001bae:	bf00      	nop
 8001bb0:	20000290 	.word	0x20000290
 8001bb4:	40005800 	.word	0x40005800
 8001bb8:	00702991 	.word	0x00702991

08001bbc <MX_QUADSPI_Init>:
  * @brief QUADSPI Initialization Function
  * @param None
  * @retval None
  */
static void MX_QUADSPI_Init(void)
{
 8001bbc:	b580      	push	{r7, lr}
 8001bbe:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN QUADSPI_Init 1 */

  /* USER CODE END QUADSPI_Init 1 */
  /* QUADSPI parameter configuration*/
  hqspi.Instance = QUADSPI;
 8001bc0:	4b0f      	ldr	r3, [pc, #60]	; (8001c00 <MX_QUADSPI_Init+0x44>)
 8001bc2:	4a10      	ldr	r2, [pc, #64]	; (8001c04 <MX_QUADSPI_Init+0x48>)
 8001bc4:	601a      	str	r2, [r3, #0]
  hqspi.Init.ClockPrescaler = 2;
 8001bc6:	4b0e      	ldr	r3, [pc, #56]	; (8001c00 <MX_QUADSPI_Init+0x44>)
 8001bc8:	2202      	movs	r2, #2
 8001bca:	605a      	str	r2, [r3, #4]
  hqspi.Init.FifoThreshold = 4;
 8001bcc:	4b0c      	ldr	r3, [pc, #48]	; (8001c00 <MX_QUADSPI_Init+0x44>)
 8001bce:	2204      	movs	r2, #4
 8001bd0:	609a      	str	r2, [r3, #8]
  hqspi.Init.SampleShifting = QSPI_SAMPLE_SHIFTING_HALFCYCLE;
 8001bd2:	4b0b      	ldr	r3, [pc, #44]	; (8001c00 <MX_QUADSPI_Init+0x44>)
 8001bd4:	2210      	movs	r2, #16
 8001bd6:	60da      	str	r2, [r3, #12]
  hqspi.Init.FlashSize = 23;
 8001bd8:	4b09      	ldr	r3, [pc, #36]	; (8001c00 <MX_QUADSPI_Init+0x44>)
 8001bda:	2217      	movs	r2, #23
 8001bdc:	611a      	str	r2, [r3, #16]
  hqspi.Init.ChipSelectHighTime = QSPI_CS_HIGH_TIME_1_CYCLE;
 8001bde:	4b08      	ldr	r3, [pc, #32]	; (8001c00 <MX_QUADSPI_Init+0x44>)
 8001be0:	2200      	movs	r2, #0
 8001be2:	615a      	str	r2, [r3, #20]
  hqspi.Init.ClockMode = QSPI_CLOCK_MODE_0;
 8001be4:	4b06      	ldr	r3, [pc, #24]	; (8001c00 <MX_QUADSPI_Init+0x44>)
 8001be6:	2200      	movs	r2, #0
 8001be8:	619a      	str	r2, [r3, #24]
  if (HAL_QSPI_Init(&hqspi) != HAL_OK)
 8001bea:	4805      	ldr	r0, [pc, #20]	; (8001c00 <MX_QUADSPI_Init+0x44>)
 8001bec:	f003 faa8 	bl	8005140 <HAL_QSPI_Init>
 8001bf0:	4603      	mov	r3, r0
 8001bf2:	2b00      	cmp	r3, #0
 8001bf4:	d001      	beq.n	8001bfa <MX_QUADSPI_Init+0x3e>
  {
    Error_Handler();
 8001bf6:	f000 faa7 	bl	8002148 <Error_Handler>
  }
  /* USER CODE BEGIN QUADSPI_Init 2 */

  /* USER CODE END QUADSPI_Init 2 */

}
 8001bfa:	bf00      	nop
 8001bfc:	bd80      	pop	{r7, pc}
 8001bfe:	bf00      	nop
 8001c00:	200002e4 	.word	0x200002e4
 8001c04:	a0001000 	.word	0xa0001000

08001c08 <MX_SPI3_Init>:
  * @brief SPI3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI3_Init(void)
{
 8001c08:	b580      	push	{r7, lr}
 8001c0a:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI3_Init 1 */

  /* USER CODE END SPI3_Init 1 */
  /* SPI3 parameter configuration*/
  hspi3.Instance = SPI3;
 8001c0c:	4b1b      	ldr	r3, [pc, #108]	; (8001c7c <MX_SPI3_Init+0x74>)
 8001c0e:	4a1c      	ldr	r2, [pc, #112]	; (8001c80 <MX_SPI3_Init+0x78>)
 8001c10:	601a      	str	r2, [r3, #0]
  hspi3.Init.Mode = SPI_MODE_MASTER;
 8001c12:	4b1a      	ldr	r3, [pc, #104]	; (8001c7c <MX_SPI3_Init+0x74>)
 8001c14:	f44f 7282 	mov.w	r2, #260	; 0x104
 8001c18:	605a      	str	r2, [r3, #4]
  hspi3.Init.Direction = SPI_DIRECTION_2LINES;
 8001c1a:	4b18      	ldr	r3, [pc, #96]	; (8001c7c <MX_SPI3_Init+0x74>)
 8001c1c:	2200      	movs	r2, #0
 8001c1e:	609a      	str	r2, [r3, #8]
  hspi3.Init.DataSize = SPI_DATASIZE_4BIT;
 8001c20:	4b16      	ldr	r3, [pc, #88]	; (8001c7c <MX_SPI3_Init+0x74>)
 8001c22:	f44f 7240 	mov.w	r2, #768	; 0x300
 8001c26:	60da      	str	r2, [r3, #12]
  hspi3.Init.CLKPolarity = SPI_POLARITY_LOW;
 8001c28:	4b14      	ldr	r3, [pc, #80]	; (8001c7c <MX_SPI3_Init+0x74>)
 8001c2a:	2200      	movs	r2, #0
 8001c2c:	611a      	str	r2, [r3, #16]
  hspi3.Init.CLKPhase = SPI_PHASE_1EDGE;
 8001c2e:	4b13      	ldr	r3, [pc, #76]	; (8001c7c <MX_SPI3_Init+0x74>)
 8001c30:	2200      	movs	r2, #0
 8001c32:	615a      	str	r2, [r3, #20]
  hspi3.Init.NSS = SPI_NSS_SOFT;
 8001c34:	4b11      	ldr	r3, [pc, #68]	; (8001c7c <MX_SPI3_Init+0x74>)
 8001c36:	f44f 7200 	mov.w	r2, #512	; 0x200
 8001c3a:	619a      	str	r2, [r3, #24]
  hspi3.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8001c3c:	4b0f      	ldr	r3, [pc, #60]	; (8001c7c <MX_SPI3_Init+0x74>)
 8001c3e:	2200      	movs	r2, #0
 8001c40:	61da      	str	r2, [r3, #28]
  hspi3.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8001c42:	4b0e      	ldr	r3, [pc, #56]	; (8001c7c <MX_SPI3_Init+0x74>)
 8001c44:	2200      	movs	r2, #0
 8001c46:	621a      	str	r2, [r3, #32]
  hspi3.Init.TIMode = SPI_TIMODE_DISABLE;
 8001c48:	4b0c      	ldr	r3, [pc, #48]	; (8001c7c <MX_SPI3_Init+0x74>)
 8001c4a:	2200      	movs	r2, #0
 8001c4c:	625a      	str	r2, [r3, #36]	; 0x24
  hspi3.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8001c4e:	4b0b      	ldr	r3, [pc, #44]	; (8001c7c <MX_SPI3_Init+0x74>)
 8001c50:	2200      	movs	r2, #0
 8001c52:	629a      	str	r2, [r3, #40]	; 0x28
  hspi3.Init.CRCPolynomial = 7;
 8001c54:	4b09      	ldr	r3, [pc, #36]	; (8001c7c <MX_SPI3_Init+0x74>)
 8001c56:	2207      	movs	r2, #7
 8001c58:	62da      	str	r2, [r3, #44]	; 0x2c
  hspi3.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 8001c5a:	4b08      	ldr	r3, [pc, #32]	; (8001c7c <MX_SPI3_Init+0x74>)
 8001c5c:	2200      	movs	r2, #0
 8001c5e:	631a      	str	r2, [r3, #48]	; 0x30
  hspi3.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 8001c60:	4b06      	ldr	r3, [pc, #24]	; (8001c7c <MX_SPI3_Init+0x74>)
 8001c62:	2208      	movs	r2, #8
 8001c64:	635a      	str	r2, [r3, #52]	; 0x34
  if (HAL_SPI_Init(&hspi3) != HAL_OK)
 8001c66:	4805      	ldr	r0, [pc, #20]	; (8001c7c <MX_SPI3_Init+0x74>)
 8001c68:	f004 fdf2 	bl	8006850 <HAL_SPI_Init>
 8001c6c:	4603      	mov	r3, r0
 8001c6e:	2b00      	cmp	r3, #0
 8001c70:	d001      	beq.n	8001c76 <MX_SPI3_Init+0x6e>
  {
    Error_Handler();
 8001c72:	f000 fa69 	bl	8002148 <Error_Handler>
  }
  /* USER CODE BEGIN SPI3_Init 2 */

  /* USER CODE END SPI3_Init 2 */

}
 8001c76:	bf00      	nop
 8001c78:	bd80      	pop	{r7, pc}
 8001c7a:	bf00      	nop
 8001c7c:	20000328 	.word	0x20000328
 8001c80:	40003c00 	.word	0x40003c00

08001c84 <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 8001c84:	b580      	push	{r7, lr}
 8001c86:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8001c88:	4b14      	ldr	r3, [pc, #80]	; (8001cdc <MX_USART1_UART_Init+0x58>)
 8001c8a:	4a15      	ldr	r2, [pc, #84]	; (8001ce0 <MX_USART1_UART_Init+0x5c>)
 8001c8c:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 8001c8e:	4b13      	ldr	r3, [pc, #76]	; (8001cdc <MX_USART1_UART_Init+0x58>)
 8001c90:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8001c94:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8001c96:	4b11      	ldr	r3, [pc, #68]	; (8001cdc <MX_USART1_UART_Init+0x58>)
 8001c98:	2200      	movs	r2, #0
 8001c9a:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8001c9c:	4b0f      	ldr	r3, [pc, #60]	; (8001cdc <MX_USART1_UART_Init+0x58>)
 8001c9e:	2200      	movs	r2, #0
 8001ca0:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8001ca2:	4b0e      	ldr	r3, [pc, #56]	; (8001cdc <MX_USART1_UART_Init+0x58>)
 8001ca4:	2200      	movs	r2, #0
 8001ca6:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8001ca8:	4b0c      	ldr	r3, [pc, #48]	; (8001cdc <MX_USART1_UART_Init+0x58>)
 8001caa:	220c      	movs	r2, #12
 8001cac:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001cae:	4b0b      	ldr	r3, [pc, #44]	; (8001cdc <MX_USART1_UART_Init+0x58>)
 8001cb0:	2200      	movs	r2, #0
 8001cb2:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8001cb4:	4b09      	ldr	r3, [pc, #36]	; (8001cdc <MX_USART1_UART_Init+0x58>)
 8001cb6:	2200      	movs	r2, #0
 8001cb8:	61da      	str	r2, [r3, #28]
  huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8001cba:	4b08      	ldr	r3, [pc, #32]	; (8001cdc <MX_USART1_UART_Init+0x58>)
 8001cbc:	2200      	movs	r2, #0
 8001cbe:	621a      	str	r2, [r3, #32]
  huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8001cc0:	4b06      	ldr	r3, [pc, #24]	; (8001cdc <MX_USART1_UART_Init+0x58>)
 8001cc2:	2200      	movs	r2, #0
 8001cc4:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8001cc6:	4805      	ldr	r0, [pc, #20]	; (8001cdc <MX_USART1_UART_Init+0x58>)
 8001cc8:	f004 fe65 	bl	8006996 <HAL_UART_Init>
 8001ccc:	4603      	mov	r3, r0
 8001cce:	2b00      	cmp	r3, #0
 8001cd0:	d001      	beq.n	8001cd6 <MX_USART1_UART_Init+0x52>
  {
    Error_Handler();
 8001cd2:	f000 fa39 	bl	8002148 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 8001cd6:	bf00      	nop
 8001cd8:	bd80      	pop	{r7, pc}
 8001cda:	bf00      	nop
 8001cdc:	2000038c 	.word	0x2000038c
 8001ce0:	40013800 	.word	0x40013800

08001ce4 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8001ce4:	b580      	push	{r7, lr}
 8001ce6:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8001ce8:	4b14      	ldr	r3, [pc, #80]	; (8001d3c <MX_USART2_UART_Init+0x58>)
 8001cea:	4a15      	ldr	r2, [pc, #84]	; (8001d40 <MX_USART2_UART_Init+0x5c>)
 8001cec:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 8001cee:	4b13      	ldr	r3, [pc, #76]	; (8001d3c <MX_USART2_UART_Init+0x58>)
 8001cf0:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8001cf4:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8001cf6:	4b11      	ldr	r3, [pc, #68]	; (8001d3c <MX_USART2_UART_Init+0x58>)
 8001cf8:	2200      	movs	r2, #0
 8001cfa:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8001cfc:	4b0f      	ldr	r3, [pc, #60]	; (8001d3c <MX_USART2_UART_Init+0x58>)
 8001cfe:	2200      	movs	r2, #0
 8001d00:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8001d02:	4b0e      	ldr	r3, [pc, #56]	; (8001d3c <MX_USART2_UART_Init+0x58>)
 8001d04:	2200      	movs	r2, #0
 8001d06:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8001d08:	4b0c      	ldr	r3, [pc, #48]	; (8001d3c <MX_USART2_UART_Init+0x58>)
 8001d0a:	220c      	movs	r2, #12
 8001d0c:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001d0e:	4b0b      	ldr	r3, [pc, #44]	; (8001d3c <MX_USART2_UART_Init+0x58>)
 8001d10:	2200      	movs	r2, #0
 8001d12:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8001d14:	4b09      	ldr	r3, [pc, #36]	; (8001d3c <MX_USART2_UART_Init+0x58>)
 8001d16:	2200      	movs	r2, #0
 8001d18:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8001d1a:	4b08      	ldr	r3, [pc, #32]	; (8001d3c <MX_USART2_UART_Init+0x58>)
 8001d1c:	2200      	movs	r2, #0
 8001d1e:	621a      	str	r2, [r3, #32]
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8001d20:	4b06      	ldr	r3, [pc, #24]	; (8001d3c <MX_USART2_UART_Init+0x58>)
 8001d22:	2200      	movs	r2, #0
 8001d24:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8001d26:	4805      	ldr	r0, [pc, #20]	; (8001d3c <MX_USART2_UART_Init+0x58>)
 8001d28:	f004 fe35 	bl	8006996 <HAL_UART_Init>
 8001d2c:	4603      	mov	r3, r0
 8001d2e:	2b00      	cmp	r3, #0
 8001d30:	d001      	beq.n	8001d36 <MX_USART2_UART_Init+0x52>
  {
    Error_Handler();
 8001d32:	f000 fa09 	bl	8002148 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8001d36:	bf00      	nop
 8001d38:	bd80      	pop	{r7, pc}
 8001d3a:	bf00      	nop
 8001d3c:	20000410 	.word	0x20000410
 8001d40:	40004400 	.word	0x40004400

08001d44 <MX_USART3_UART_Init>:
  * @brief USART3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART3_UART_Init(void)
{
 8001d44:	b580      	push	{r7, lr}
 8001d46:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 8001d48:	4b14      	ldr	r3, [pc, #80]	; (8001d9c <MX_USART3_UART_Init+0x58>)
 8001d4a:	4a15      	ldr	r2, [pc, #84]	; (8001da0 <MX_USART3_UART_Init+0x5c>)
 8001d4c:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 115200;
 8001d4e:	4b13      	ldr	r3, [pc, #76]	; (8001d9c <MX_USART3_UART_Init+0x58>)
 8001d50:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8001d54:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 8001d56:	4b11      	ldr	r3, [pc, #68]	; (8001d9c <MX_USART3_UART_Init+0x58>)
 8001d58:	2200      	movs	r2, #0
 8001d5a:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 8001d5c:	4b0f      	ldr	r3, [pc, #60]	; (8001d9c <MX_USART3_UART_Init+0x58>)
 8001d5e:	2200      	movs	r2, #0
 8001d60:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 8001d62:	4b0e      	ldr	r3, [pc, #56]	; (8001d9c <MX_USART3_UART_Init+0x58>)
 8001d64:	2200      	movs	r2, #0
 8001d66:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 8001d68:	4b0c      	ldr	r3, [pc, #48]	; (8001d9c <MX_USART3_UART_Init+0x58>)
 8001d6a:	220c      	movs	r2, #12
 8001d6c:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001d6e:	4b0b      	ldr	r3, [pc, #44]	; (8001d9c <MX_USART3_UART_Init+0x58>)
 8001d70:	2200      	movs	r2, #0
 8001d72:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 8001d74:	4b09      	ldr	r3, [pc, #36]	; (8001d9c <MX_USART3_UART_Init+0x58>)
 8001d76:	2200      	movs	r2, #0
 8001d78:	61da      	str	r2, [r3, #28]
  huart3.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8001d7a:	4b08      	ldr	r3, [pc, #32]	; (8001d9c <MX_USART3_UART_Init+0x58>)
 8001d7c:	2200      	movs	r2, #0
 8001d7e:	621a      	str	r2, [r3, #32]
  huart3.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8001d80:	4b06      	ldr	r3, [pc, #24]	; (8001d9c <MX_USART3_UART_Init+0x58>)
 8001d82:	2200      	movs	r2, #0
 8001d84:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart3) != HAL_OK)
 8001d86:	4805      	ldr	r0, [pc, #20]	; (8001d9c <MX_USART3_UART_Init+0x58>)
 8001d88:	f004 fe05 	bl	8006996 <HAL_UART_Init>
 8001d8c:	4603      	mov	r3, r0
 8001d8e:	2b00      	cmp	r3, #0
 8001d90:	d001      	beq.n	8001d96 <MX_USART3_UART_Init+0x52>
  {
    Error_Handler();
 8001d92:	f000 f9d9 	bl	8002148 <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 8001d96:	bf00      	nop
 8001d98:	bd80      	pop	{r7, pc}
 8001d9a:	bf00      	nop
 8001d9c:	20000494 	.word	0x20000494
 8001da0:	40004800 	.word	0x40004800

08001da4 <MX_USB_OTG_FS_PCD_Init>:
  * @brief USB_OTG_FS Initialization Function
  * @param None
  * @retval None
  */
static void MX_USB_OTG_FS_PCD_Init(void)
{
 8001da4:	b580      	push	{r7, lr}
 8001da6:	af00      	add	r7, sp, #0
  /* USER CODE END USB_OTG_FS_Init 0 */

  /* USER CODE BEGIN USB_OTG_FS_Init 1 */

  /* USER CODE END USB_OTG_FS_Init 1 */
  hpcd_USB_OTG_FS.Instance = USB_OTG_FS;
 8001da8:	4b14      	ldr	r3, [pc, #80]	; (8001dfc <MX_USB_OTG_FS_PCD_Init+0x58>)
 8001daa:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
 8001dae:	601a      	str	r2, [r3, #0]
  hpcd_USB_OTG_FS.Init.dev_endpoints = 6;
 8001db0:	4b12      	ldr	r3, [pc, #72]	; (8001dfc <MX_USB_OTG_FS_PCD_Init+0x58>)
 8001db2:	2206      	movs	r2, #6
 8001db4:	605a      	str	r2, [r3, #4]
  hpcd_USB_OTG_FS.Init.speed = PCD_SPEED_FULL;
 8001db6:	4b11      	ldr	r3, [pc, #68]	; (8001dfc <MX_USB_OTG_FS_PCD_Init+0x58>)
 8001db8:	2202      	movs	r2, #2
 8001dba:	60da      	str	r2, [r3, #12]
  hpcd_USB_OTG_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 8001dbc:	4b0f      	ldr	r3, [pc, #60]	; (8001dfc <MX_USB_OTG_FS_PCD_Init+0x58>)
 8001dbe:	2202      	movs	r2, #2
 8001dc0:	619a      	str	r2, [r3, #24]
  hpcd_USB_OTG_FS.Init.Sof_enable = DISABLE;
 8001dc2:	4b0e      	ldr	r3, [pc, #56]	; (8001dfc <MX_USB_OTG_FS_PCD_Init+0x58>)
 8001dc4:	2200      	movs	r2, #0
 8001dc6:	61da      	str	r2, [r3, #28]
  hpcd_USB_OTG_FS.Init.low_power_enable = DISABLE;
 8001dc8:	4b0c      	ldr	r3, [pc, #48]	; (8001dfc <MX_USB_OTG_FS_PCD_Init+0x58>)
 8001dca:	2200      	movs	r2, #0
 8001dcc:	621a      	str	r2, [r3, #32]
  hpcd_USB_OTG_FS.Init.lpm_enable = DISABLE;
 8001dce:	4b0b      	ldr	r3, [pc, #44]	; (8001dfc <MX_USB_OTG_FS_PCD_Init+0x58>)
 8001dd0:	2200      	movs	r2, #0
 8001dd2:	625a      	str	r2, [r3, #36]	; 0x24
  hpcd_USB_OTG_FS.Init.battery_charging_enable = DISABLE;
 8001dd4:	4b09      	ldr	r3, [pc, #36]	; (8001dfc <MX_USB_OTG_FS_PCD_Init+0x58>)
 8001dd6:	2200      	movs	r2, #0
 8001dd8:	629a      	str	r2, [r3, #40]	; 0x28
  hpcd_USB_OTG_FS.Init.use_dedicated_ep1 = DISABLE;
 8001dda:	4b08      	ldr	r3, [pc, #32]	; (8001dfc <MX_USB_OTG_FS_PCD_Init+0x58>)
 8001ddc:	2200      	movs	r2, #0
 8001dde:	631a      	str	r2, [r3, #48]	; 0x30
  hpcd_USB_OTG_FS.Init.vbus_sensing_enable = DISABLE;
 8001de0:	4b06      	ldr	r3, [pc, #24]	; (8001dfc <MX_USB_OTG_FS_PCD_Init+0x58>)
 8001de2:	2200      	movs	r2, #0
 8001de4:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_PCD_Init(&hpcd_USB_OTG_FS) != HAL_OK)
 8001de6:	4805      	ldr	r0, [pc, #20]	; (8001dfc <MX_USB_OTG_FS_PCD_Init+0x58>)
 8001de8:	f002 ffdd 	bl	8004da6 <HAL_PCD_Init>
 8001dec:	4603      	mov	r3, r0
 8001dee:	2b00      	cmp	r3, #0
 8001df0:	d001      	beq.n	8001df6 <MX_USB_OTG_FS_PCD_Init+0x52>
  {
    Error_Handler();
 8001df2:	f000 f9a9 	bl	8002148 <Error_Handler>
  }
  /* USER CODE BEGIN USB_OTG_FS_Init 2 */

  /* USER CODE END USB_OTG_FS_Init 2 */

}
 8001df6:	bf00      	nop
 8001df8:	bd80      	pop	{r7, pc}
 8001dfa:	bf00      	nop
 8001dfc:	20000518 	.word	0x20000518

08001e00 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8001e00:	b580      	push	{r7, lr}
 8001e02:	b08a      	sub	sp, #40	; 0x28
 8001e04:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001e06:	f107 0314 	add.w	r3, r7, #20
 8001e0a:	2200      	movs	r2, #0
 8001e0c:	601a      	str	r2, [r3, #0]
 8001e0e:	605a      	str	r2, [r3, #4]
 8001e10:	609a      	str	r2, [r3, #8]
 8001e12:	60da      	str	r2, [r3, #12]
 8001e14:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8001e16:	4bbb      	ldr	r3, [pc, #748]	; (8002104 <MX_GPIO_Init+0x304>)
 8001e18:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001e1a:	4aba      	ldr	r2, [pc, #744]	; (8002104 <MX_GPIO_Init+0x304>)
 8001e1c:	f043 0310 	orr.w	r3, r3, #16
 8001e20:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001e22:	4bb8      	ldr	r3, [pc, #736]	; (8002104 <MX_GPIO_Init+0x304>)
 8001e24:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001e26:	f003 0310 	and.w	r3, r3, #16
 8001e2a:	613b      	str	r3, [r7, #16]
 8001e2c:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8001e2e:	4bb5      	ldr	r3, [pc, #724]	; (8002104 <MX_GPIO_Init+0x304>)
 8001e30:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001e32:	4ab4      	ldr	r2, [pc, #720]	; (8002104 <MX_GPIO_Init+0x304>)
 8001e34:	f043 0304 	orr.w	r3, r3, #4
 8001e38:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001e3a:	4bb2      	ldr	r3, [pc, #712]	; (8002104 <MX_GPIO_Init+0x304>)
 8001e3c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001e3e:	f003 0304 	and.w	r3, r3, #4
 8001e42:	60fb      	str	r3, [r7, #12]
 8001e44:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001e46:	4baf      	ldr	r3, [pc, #700]	; (8002104 <MX_GPIO_Init+0x304>)
 8001e48:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001e4a:	4aae      	ldr	r2, [pc, #696]	; (8002104 <MX_GPIO_Init+0x304>)
 8001e4c:	f043 0301 	orr.w	r3, r3, #1
 8001e50:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001e52:	4bac      	ldr	r3, [pc, #688]	; (8002104 <MX_GPIO_Init+0x304>)
 8001e54:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001e56:	f003 0301 	and.w	r3, r3, #1
 8001e5a:	60bb      	str	r3, [r7, #8]
 8001e5c:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001e5e:	4ba9      	ldr	r3, [pc, #676]	; (8002104 <MX_GPIO_Init+0x304>)
 8001e60:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001e62:	4aa8      	ldr	r2, [pc, #672]	; (8002104 <MX_GPIO_Init+0x304>)
 8001e64:	f043 0302 	orr.w	r3, r3, #2
 8001e68:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001e6a:	4ba6      	ldr	r3, [pc, #664]	; (8002104 <MX_GPIO_Init+0x304>)
 8001e6c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001e6e:	f003 0302 	and.w	r3, r3, #2
 8001e72:	607b      	str	r3, [r7, #4]
 8001e74:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8001e76:	4ba3      	ldr	r3, [pc, #652]	; (8002104 <MX_GPIO_Init+0x304>)
 8001e78:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001e7a:	4aa2      	ldr	r2, [pc, #648]	; (8002104 <MX_GPIO_Init+0x304>)
 8001e7c:	f043 0308 	orr.w	r3, r3, #8
 8001e80:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001e82:	4ba0      	ldr	r3, [pc, #640]	; (8002104 <MX_GPIO_Init+0x304>)
 8001e84:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001e86:	f003 0308 	and.w	r3, r3, #8
 8001e8a:	603b      	str	r3, [r7, #0]
 8001e8c:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOE, M24SR64_Y_RF_DISABLE_Pin|M24SR64_Y_GPO_Pin|ISM43362_RST_Pin, GPIO_PIN_RESET);
 8001e8e:	2200      	movs	r2, #0
 8001e90:	f44f 718a 	mov.w	r1, #276	; 0x114
 8001e94:	489c      	ldr	r0, [pc, #624]	; (8002108 <MX_GPIO_Init+0x308>)
 8001e96:	f002 f92d 	bl	80040f4 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, ARD_D10_Pin|LED_GREEN_Pin|SPBTLE_RF_RST_Pin|ARD_D9_Pin, GPIO_PIN_RESET);
 8001e9a:	2200      	movs	r2, #0
 8001e9c:	f248 1124 	movw	r1, #33060	; 0x8124
 8001ea0:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001ea4:	f002 f926 	bl	80040f4 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, ARD_D8_Pin|ISM43362_BOOT0_Pin|ISM43362_WAKEUP_Pin|LED2_Pin
 8001ea8:	2200      	movs	r2, #0
 8001eaa:	f24f 0114 	movw	r1, #61460	; 0xf014
 8001eae:	4897      	ldr	r0, [pc, #604]	; (800210c <MX_GPIO_Init+0x30c>)
 8001eb0:	f002 f920 	bl	80040f4 <HAL_GPIO_WritePin>
                          |SPSGRF_915_SDN_Pin|ARD_D5_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOD, USB_OTG_FS_PWR_EN_Pin|PMOD_RESET_Pin|STSAFE_A100_RESET_Pin, GPIO_PIN_RESET);
 8001eb4:	2200      	movs	r2, #0
 8001eb6:	f241 0181 	movw	r1, #4225	; 0x1081
 8001eba:	4895      	ldr	r0, [pc, #596]	; (8002110 <MX_GPIO_Init+0x310>)
 8001ebc:	f002 f91a 	bl	80040f4 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(SPBTLE_RF_SPI3_CSN_GPIO_Port, SPBTLE_RF_SPI3_CSN_Pin, GPIO_PIN_SET);
 8001ec0:	2201      	movs	r2, #1
 8001ec2:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8001ec6:	4892      	ldr	r0, [pc, #584]	; (8002110 <MX_GPIO_Init+0x310>)
 8001ec8:	f002 f914 	bl	80040f4 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, VL53L0X_XSHUT_Pin|LED3_WIFI__LED4_BLE_Pin, GPIO_PIN_RESET);
 8001ecc:	2200      	movs	r2, #0
 8001ece:	f44f 7110 	mov.w	r1, #576	; 0x240
 8001ed2:	4890      	ldr	r0, [pc, #576]	; (8002114 <MX_GPIO_Init+0x314>)
 8001ed4:	f002 f90e 	bl	80040f4 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(SPSGRF_915_SPI3_CSN_GPIO_Port, SPSGRF_915_SPI3_CSN_Pin, GPIO_PIN_SET);
 8001ed8:	2201      	movs	r2, #1
 8001eda:	2120      	movs	r1, #32
 8001edc:	488b      	ldr	r0, [pc, #556]	; (800210c <MX_GPIO_Init+0x30c>)
 8001ede:	f002 f909 	bl	80040f4 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(ISM43362_SPI3_CSN_GPIO_Port, ISM43362_SPI3_CSN_Pin, GPIO_PIN_SET);
 8001ee2:	2201      	movs	r2, #1
 8001ee4:	2101      	movs	r1, #1
 8001ee6:	4888      	ldr	r0, [pc, #544]	; (8002108 <MX_GPIO_Init+0x308>)
 8001ee8:	f002 f904 	bl	80040f4 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : M24SR64_Y_RF_DISABLE_Pin M24SR64_Y_GPO_Pin ISM43362_RST_Pin ISM43362_SPI3_CSN_Pin */
  GPIO_InitStruct.Pin = M24SR64_Y_RF_DISABLE_Pin|M24SR64_Y_GPO_Pin|ISM43362_RST_Pin|ISM43362_SPI3_CSN_Pin;
 8001eec:	f240 1315 	movw	r3, #277	; 0x115
 8001ef0:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001ef2:	2301      	movs	r3, #1
 8001ef4:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001ef6:	2300      	movs	r3, #0
 8001ef8:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001efa:	2300      	movs	r3, #0
 8001efc:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8001efe:	f107 0314 	add.w	r3, r7, #20
 8001f02:	4619      	mov	r1, r3
 8001f04:	4880      	ldr	r0, [pc, #512]	; (8002108 <MX_GPIO_Init+0x308>)
 8001f06:	f001 fe57 	bl	8003bb8 <HAL_GPIO_Init>

  /*Configure GPIO pins : SPSGRF_915_GPIO3_EXTI5_Pin SPBTLE_RF_IRQ_EXTI6_Pin ISM43362_DRDY_EXTI1_Pin */
  GPIO_InitStruct.Pin = SPSGRF_915_GPIO3_EXTI5_Pin|SPBTLE_RF_IRQ_EXTI6_Pin|ISM43362_DRDY_EXTI1_Pin;
 8001f0a:	2362      	movs	r3, #98	; 0x62
 8001f0c:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8001f0e:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 8001f12:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001f14:	2300      	movs	r3, #0
 8001f16:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8001f18:	f107 0314 	add.w	r3, r7, #20
 8001f1c:	4619      	mov	r1, r3
 8001f1e:	487a      	ldr	r0, [pc, #488]	; (8002108 <MX_GPIO_Init+0x308>)
 8001f20:	f001 fe4a 	bl	8003bb8 <HAL_GPIO_Init>

  /*Configure GPIO pin : BLUE_BUTTON_Pin */
  GPIO_InitStruct.Pin = BLUE_BUTTON_Pin;
 8001f24:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8001f28:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 8001f2a:	f44f 1304 	mov.w	r3, #2162688	; 0x210000
 8001f2e:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8001f30:	2301      	movs	r3, #1
 8001f32:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(BLUE_BUTTON_GPIO_Port, &GPIO_InitStruct);
 8001f34:	f107 0314 	add.w	r3, r7, #20
 8001f38:	4619      	mov	r1, r3
 8001f3a:	4876      	ldr	r0, [pc, #472]	; (8002114 <MX_GPIO_Init+0x314>)
 8001f3c:	f001 fe3c 	bl	8003bb8 <HAL_GPIO_Init>

  /*Configure GPIO pins : ARD_A5_Pin ARD_A4_Pin ARD_A3_Pin ARD_A2_Pin
                           ARD_A1_Pin ARD_A0_Pin */
  GPIO_InitStruct.Pin = ARD_A5_Pin|ARD_A4_Pin|ARD_A3_Pin|ARD_A2_Pin
 8001f40:	233f      	movs	r3, #63	; 0x3f
 8001f42:	617b      	str	r3, [r7, #20]
                          |ARD_A1_Pin|ARD_A0_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG_ADC_CONTROL;
 8001f44:	230b      	movs	r3, #11
 8001f46:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001f48:	2300      	movs	r3, #0
 8001f4a:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001f4c:	f107 0314 	add.w	r3, r7, #20
 8001f50:	4619      	mov	r1, r3
 8001f52:	4870      	ldr	r0, [pc, #448]	; (8002114 <MX_GPIO_Init+0x314>)
 8001f54:	f001 fe30 	bl	8003bb8 <HAL_GPIO_Init>

  /*Configure GPIO pins : ARD_D1_Pin ARD_D0_Pin */
  GPIO_InitStruct.Pin = ARD_D1_Pin|ARD_D0_Pin;
 8001f58:	2303      	movs	r3, #3
 8001f5a:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001f5c:	2302      	movs	r3, #2
 8001f5e:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001f60:	2300      	movs	r3, #0
 8001f62:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001f64:	2303      	movs	r3, #3
 8001f66:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Alternate = GPIO_AF8_UART4;
 8001f68:	2308      	movs	r3, #8
 8001f6a:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001f6c:	f107 0314 	add.w	r3, r7, #20
 8001f70:	4619      	mov	r1, r3
 8001f72:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001f76:	f001 fe1f 	bl	8003bb8 <HAL_GPIO_Init>

  /*Configure GPIO pins : ARD_D10_Pin LED_GREEN_Pin SPBTLE_RF_RST_Pin ARD_D9_Pin */
  GPIO_InitStruct.Pin = ARD_D10_Pin|LED_GREEN_Pin|SPBTLE_RF_RST_Pin|ARD_D9_Pin;
 8001f7a:	f248 1324 	movw	r3, #33060	; 0x8124
 8001f7e:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001f80:	2301      	movs	r3, #1
 8001f82:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001f84:	2300      	movs	r3, #0
 8001f86:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001f88:	2300      	movs	r3, #0
 8001f8a:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001f8c:	f107 0314 	add.w	r3, r7, #20
 8001f90:	4619      	mov	r1, r3
 8001f92:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001f96:	f001 fe0f 	bl	8003bb8 <HAL_GPIO_Init>

  /*Configure GPIO pin : ARD_D4_Pin */
  GPIO_InitStruct.Pin = ARD_D4_Pin;
 8001f9a:	2308      	movs	r3, #8
 8001f9c:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001f9e:	2302      	movs	r3, #2
 8001fa0:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001fa2:	2300      	movs	r3, #0
 8001fa4:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001fa6:	2300      	movs	r3, #0
 8001fa8:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 8001faa:	2301      	movs	r3, #1
 8001fac:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(ARD_D4_GPIO_Port, &GPIO_InitStruct);
 8001fae:	f107 0314 	add.w	r3, r7, #20
 8001fb2:	4619      	mov	r1, r3
 8001fb4:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001fb8:	f001 fdfe 	bl	8003bb8 <HAL_GPIO_Init>

  /*Configure GPIO pin : ARD_D7_Pin */
  GPIO_InitStruct.Pin = ARD_D7_Pin;
 8001fbc:	2310      	movs	r3, #16
 8001fbe:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG_ADC_CONTROL;
 8001fc0:	230b      	movs	r3, #11
 8001fc2:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001fc4:	2300      	movs	r3, #0
 8001fc6:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(ARD_D7_GPIO_Port, &GPIO_InitStruct);
 8001fc8:	f107 0314 	add.w	r3, r7, #20
 8001fcc:	4619      	mov	r1, r3
 8001fce:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001fd2:	f001 fdf1 	bl	8003bb8 <HAL_GPIO_Init>

  /*Configure GPIO pins : ARD_D12_Pin ARD_D11_Pin */
  GPIO_InitStruct.Pin = ARD_D12_Pin|ARD_D11_Pin;
 8001fd6:	23c0      	movs	r3, #192	; 0xc0
 8001fd8:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001fda:	2302      	movs	r3, #2
 8001fdc:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001fde:	2300      	movs	r3, #0
 8001fe0:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001fe2:	2303      	movs	r3, #3
 8001fe4:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8001fe6:	2305      	movs	r3, #5
 8001fe8:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001fea:	f107 0314 	add.w	r3, r7, #20
 8001fee:	4619      	mov	r1, r3
 8001ff0:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001ff4:	f001 fde0 	bl	8003bb8 <HAL_GPIO_Init>

  /*Configure GPIO pin : ARD_D3_Pin */
  GPIO_InitStruct.Pin = ARD_D3_Pin;
 8001ff8:	2301      	movs	r3, #1
 8001ffa:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8001ffc:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 8002000:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002002:	2300      	movs	r3, #0
 8002004:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(ARD_D3_GPIO_Port, &GPIO_InitStruct);
 8002006:	f107 0314 	add.w	r3, r7, #20
 800200a:	4619      	mov	r1, r3
 800200c:	483f      	ldr	r0, [pc, #252]	; (800210c <MX_GPIO_Init+0x30c>)
 800200e:	f001 fdd3 	bl	8003bb8 <HAL_GPIO_Init>

  /*Configure GPIO pin : ARD_D6_Pin */
  GPIO_InitStruct.Pin = ARD_D6_Pin;
 8002012:	2302      	movs	r3, #2
 8002014:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG_ADC_CONTROL;
 8002016:	230b      	movs	r3, #11
 8002018:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800201a:	2300      	movs	r3, #0
 800201c:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(ARD_D6_GPIO_Port, &GPIO_InitStruct);
 800201e:	f107 0314 	add.w	r3, r7, #20
 8002022:	4619      	mov	r1, r3
 8002024:	4839      	ldr	r0, [pc, #228]	; (800210c <MX_GPIO_Init+0x30c>)
 8002026:	f001 fdc7 	bl	8003bb8 <HAL_GPIO_Init>

  /*Configure GPIO pins : ARD_D8_Pin ISM43362_BOOT0_Pin ISM43362_WAKEUP_Pin LED2_Pin
                           SPSGRF_915_SDN_Pin ARD_D5_Pin SPSGRF_915_SPI3_CSN_Pin */
  GPIO_InitStruct.Pin = ARD_D8_Pin|ISM43362_BOOT0_Pin|ISM43362_WAKEUP_Pin|LED2_Pin
 800202a:	f24f 0334 	movw	r3, #61492	; 0xf034
 800202e:	617b      	str	r3, [r7, #20]
                          |SPSGRF_915_SDN_Pin|ARD_D5_Pin|SPSGRF_915_SPI3_CSN_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002030:	2301      	movs	r3, #1
 8002032:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002034:	2300      	movs	r3, #0
 8002036:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002038:	2300      	movs	r3, #0
 800203a:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800203c:	f107 0314 	add.w	r3, r7, #20
 8002040:	4619      	mov	r1, r3
 8002042:	4832      	ldr	r0, [pc, #200]	; (800210c <MX_GPIO_Init+0x30c>)
 8002044:	f001 fdb8 	bl	8003bb8 <HAL_GPIO_Init>

  /*Configure GPIO pins : LPS22HB_INT_DRDY_EXTI0_Pin LSM6DSL_INT1_EXTI11_Pin ARD_D2_Pin HTS221_DRDY_EXTI15_Pin
                           PMOD_IRQ_EXTI12_Pin */
  GPIO_InitStruct.Pin = LPS22HB_INT_DRDY_EXTI0_Pin|LSM6DSL_INT1_EXTI11_Pin|ARD_D2_Pin|HTS221_DRDY_EXTI15_Pin
 8002048:	f64c 4304 	movw	r3, #52228	; 0xcc04
 800204c:	617b      	str	r3, [r7, #20]
                          |PMOD_IRQ_EXTI12_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 800204e:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 8002052:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002054:	2300      	movs	r3, #0
 8002056:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8002058:	f107 0314 	add.w	r3, r7, #20
 800205c:	4619      	mov	r1, r3
 800205e:	482c      	ldr	r0, [pc, #176]	; (8002110 <MX_GPIO_Init+0x310>)
 8002060:	f001 fdaa 	bl	8003bb8 <HAL_GPIO_Init>

  /*Configure GPIO pins : USB_OTG_FS_PWR_EN_Pin SPBTLE_RF_SPI3_CSN_Pin PMOD_RESET_Pin STSAFE_A100_RESET_Pin */
  GPIO_InitStruct.Pin = USB_OTG_FS_PWR_EN_Pin|SPBTLE_RF_SPI3_CSN_Pin|PMOD_RESET_Pin|STSAFE_A100_RESET_Pin;
 8002064:	f243 0381 	movw	r3, #12417	; 0x3081
 8002068:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800206a:	2301      	movs	r3, #1
 800206c:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800206e:	2300      	movs	r3, #0
 8002070:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002072:	2300      	movs	r3, #0
 8002074:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8002076:	f107 0314 	add.w	r3, r7, #20
 800207a:	4619      	mov	r1, r3
 800207c:	4824      	ldr	r0, [pc, #144]	; (8002110 <MX_GPIO_Init+0x310>)
 800207e:	f001 fd9b 	bl	8003bb8 <HAL_GPIO_Init>

  /*Configure GPIO pins : VL53L0X_XSHUT_Pin LED3_WIFI__LED4_BLE_Pin */
  GPIO_InitStruct.Pin = VL53L0X_XSHUT_Pin|LED3_WIFI__LED4_BLE_Pin;
 8002082:	f44f 7310 	mov.w	r3, #576	; 0x240
 8002086:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002088:	2301      	movs	r3, #1
 800208a:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800208c:	2300      	movs	r3, #0
 800208e:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002090:	2300      	movs	r3, #0
 8002092:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8002094:	f107 0314 	add.w	r3, r7, #20
 8002098:	4619      	mov	r1, r3
 800209a:	481e      	ldr	r0, [pc, #120]	; (8002114 <MX_GPIO_Init+0x314>)
 800209c:	f001 fd8c 	bl	8003bb8 <HAL_GPIO_Init>

  /*Configure GPIO pins : VL53L0X_GPIO1_EXTI7_Pin LSM3MDL_DRDY_EXTI8_Pin */
  GPIO_InitStruct.Pin = VL53L0X_GPIO1_EXTI7_Pin|LSM3MDL_DRDY_EXTI8_Pin;
 80020a0:	f44f 73c0 	mov.w	r3, #384	; 0x180
 80020a4:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 80020a6:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 80020aa:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80020ac:	2300      	movs	r3, #0
 80020ae:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80020b0:	f107 0314 	add.w	r3, r7, #20
 80020b4:	4619      	mov	r1, r3
 80020b6:	4817      	ldr	r0, [pc, #92]	; (8002114 <MX_GPIO_Init+0x314>)
 80020b8:	f001 fd7e 	bl	8003bb8 <HAL_GPIO_Init>

  /*Configure GPIO pin : PMOD_SPI2_SCK_Pin */
  GPIO_InitStruct.Pin = PMOD_SPI2_SCK_Pin;
 80020bc:	2302      	movs	r3, #2
 80020be:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80020c0:	2302      	movs	r3, #2
 80020c2:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80020c4:	2300      	movs	r3, #0
 80020c6:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80020c8:	2303      	movs	r3, #3
 80020ca:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 80020cc:	2305      	movs	r3, #5
 80020ce:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(PMOD_SPI2_SCK_GPIO_Port, &GPIO_InitStruct);
 80020d0:	f107 0314 	add.w	r3, r7, #20
 80020d4:	4619      	mov	r1, r3
 80020d6:	480e      	ldr	r0, [pc, #56]	; (8002110 <MX_GPIO_Init+0x310>)
 80020d8:	f001 fd6e 	bl	8003bb8 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI9_5_IRQn, 0, 0);
 80020dc:	2200      	movs	r2, #0
 80020de:	2100      	movs	r1, #0
 80020e0:	2017      	movs	r0, #23
 80020e2:	f001 fc26 	bl	8003932 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI9_5_IRQn);
 80020e6:	2017      	movs	r0, #23
 80020e8:	f001 fc3f 	bl	800396a <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI15_10_IRQn, 0, 0);
 80020ec:	2200      	movs	r2, #0
 80020ee:	2100      	movs	r1, #0
 80020f0:	2028      	movs	r0, #40	; 0x28
 80020f2:	f001 fc1e 	bl	8003932 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 80020f6:	2028      	movs	r0, #40	; 0x28
 80020f8:	f001 fc37 	bl	800396a <HAL_NVIC_EnableIRQ>

}
 80020fc:	bf00      	nop
 80020fe:	3728      	adds	r7, #40	; 0x28
 8002100:	46bd      	mov	sp, r7
 8002102:	bd80      	pop	{r7, pc}
 8002104:	40021000 	.word	0x40021000
 8002108:	48001000 	.word	0x48001000
 800210c:	48000400 	.word	0x48000400
 8002110:	48000c00 	.word	0x48000c00
 8002114:	48000800 	.word	0x48000800

08002118 <HAL_GPIO_EXTI_Callback>:

/* USER CODE BEGIN 4 */
HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 8002118:	b480      	push	{r7}
 800211a:	b083      	sub	sp, #12
 800211c:	af00      	add	r7, sp, #0
 800211e:	4603      	mov	r3, r0
 8002120:	80fb      	strh	r3, [r7, #6]
  if (GPIO_Pin == BLUE_BUTTON_Pin)
 8002122:	88fb      	ldrh	r3, [r7, #6]
 8002124:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8002128:	d105      	bne.n	8002136 <HAL_GPIO_EXTI_Callback+0x1e>
  {
	//HAL_Delay(5000);
    flag = ~flag;
 800212a:	4b06      	ldr	r3, [pc, #24]	; (8002144 <HAL_GPIO_EXTI_Callback+0x2c>)
 800212c:	781b      	ldrb	r3, [r3, #0]
 800212e:	43db      	mvns	r3, r3
 8002130:	b2da      	uxtb	r2, r3
 8002132:	4b04      	ldr	r3, [pc, #16]	; (8002144 <HAL_GPIO_EXTI_Callback+0x2c>)
 8002134:	701a      	strb	r2, [r3, #0]

  }

}
 8002136:	bf00      	nop
 8002138:	370c      	adds	r7, #12
 800213a:	46bd      	mov	sp, r7
 800213c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002140:	4770      	bx	lr
 8002142:	bf00      	nop
 8002144:	20000d1c 	.word	0x20000d1c

08002148 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8002148:	b480      	push	{r7}
 800214a:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 800214c:	b672      	cpsid	i
}
 800214e:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8002150:	e7fe      	b.n	8002150 <Error_Handler+0x8>

08002152 <ssd1306_Reset>:
#include <stdlib.h>
#include <string.h>  // For memcpy

#if defined(SSD1306_USE_I2C)

void ssd1306_Reset(void) {
 8002152:	b480      	push	{r7}
 8002154:	af00      	add	r7, sp, #0
    /* for I2C - do nothing */
}
 8002156:	bf00      	nop
 8002158:	46bd      	mov	sp, r7
 800215a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800215e:	4770      	bx	lr

08002160 <ssd1306_WriteCommand>:

// Send a byte to the command register
void ssd1306_WriteCommand(uint8_t byte) {
 8002160:	b580      	push	{r7, lr}
 8002162:	b086      	sub	sp, #24
 8002164:	af04      	add	r7, sp, #16
 8002166:	4603      	mov	r3, r0
 8002168:	71fb      	strb	r3, [r7, #7]
    HAL_I2C_Mem_Write(&SSD1306_I2C_PORT, SSD1306_I2C_ADDR, 0x00, 1, &byte, 1, HAL_MAX_DELAY);
 800216a:	f04f 33ff 	mov.w	r3, #4294967295
 800216e:	9302      	str	r3, [sp, #8]
 8002170:	2301      	movs	r3, #1
 8002172:	9301      	str	r3, [sp, #4]
 8002174:	1dfb      	adds	r3, r7, #7
 8002176:	9300      	str	r3, [sp, #0]
 8002178:	2301      	movs	r3, #1
 800217a:	2200      	movs	r2, #0
 800217c:	2178      	movs	r1, #120	; 0x78
 800217e:	4803      	ldr	r0, [pc, #12]	; (800218c <ssd1306_WriteCommand+0x2c>)
 8002180:	f002 f8a6 	bl	80042d0 <HAL_I2C_Mem_Write>
}
 8002184:	bf00      	nop
 8002186:	3708      	adds	r7, #8
 8002188:	46bd      	mov	sp, r7
 800218a:	bd80      	pop	{r7, pc}
 800218c:	2000023c 	.word	0x2000023c

08002190 <ssd1306_WriteData>:

// Send data
void ssd1306_WriteData(uint8_t* buffer, size_t buff_size) {
 8002190:	b580      	push	{r7, lr}
 8002192:	b086      	sub	sp, #24
 8002194:	af04      	add	r7, sp, #16
 8002196:	6078      	str	r0, [r7, #4]
 8002198:	6039      	str	r1, [r7, #0]
    HAL_I2C_Mem_Write(&SSD1306_I2C_PORT, SSD1306_I2C_ADDR, 0x40, 1, buffer, buff_size, HAL_MAX_DELAY);
 800219a:	683b      	ldr	r3, [r7, #0]
 800219c:	b29b      	uxth	r3, r3
 800219e:	f04f 32ff 	mov.w	r2, #4294967295
 80021a2:	9202      	str	r2, [sp, #8]
 80021a4:	9301      	str	r3, [sp, #4]
 80021a6:	687b      	ldr	r3, [r7, #4]
 80021a8:	9300      	str	r3, [sp, #0]
 80021aa:	2301      	movs	r3, #1
 80021ac:	2240      	movs	r2, #64	; 0x40
 80021ae:	2178      	movs	r1, #120	; 0x78
 80021b0:	4803      	ldr	r0, [pc, #12]	; (80021c0 <ssd1306_WriteData+0x30>)
 80021b2:	f002 f88d 	bl	80042d0 <HAL_I2C_Mem_Write>
}
 80021b6:	bf00      	nop
 80021b8:	3708      	adds	r7, #8
 80021ba:	46bd      	mov	sp, r7
 80021bc:	bd80      	pop	{r7, pc}
 80021be:	bf00      	nop
 80021c0:	2000023c 	.word	0x2000023c

080021c4 <ssd1306_Init>:
    }
    return ret;
}

// Initialize the oled screen
void ssd1306_Init(void) {
 80021c4:	b580      	push	{r7, lr}
 80021c6:	af00      	add	r7, sp, #0
    // Reset OLED
    ssd1306_Reset();
 80021c8:	f7ff ffc3 	bl	8002152 <ssd1306_Reset>

    // Wait for the screen to boot
    HAL_Delay(100);
 80021cc:	2064      	movs	r0, #100	; 0x64
 80021ce:	f001 fab1 	bl	8003734 <HAL_Delay>

    // Init OLED
    ssd1306_SetDisplayOn(0); //display off
 80021d2:	2000      	movs	r0, #0
 80021d4:	f000 f9da 	bl	800258c <ssd1306_SetDisplayOn>

    ssd1306_WriteCommand(0x20); //Set Memory Addressing Mode
 80021d8:	2020      	movs	r0, #32
 80021da:	f7ff ffc1 	bl	8002160 <ssd1306_WriteCommand>
    ssd1306_WriteCommand(0x00); // 00b,Horizontal Addressing Mode; 01b,Vertical Addressing Mode;
 80021de:	2000      	movs	r0, #0
 80021e0:	f7ff ffbe 	bl	8002160 <ssd1306_WriteCommand>
                                // 10b,Page Addressing Mode (RESET); 11b,Invalid

    ssd1306_WriteCommand(0xB0); //Set Page Start Address for Page Addressing Mode,0-7
 80021e4:	20b0      	movs	r0, #176	; 0xb0
 80021e6:	f7ff ffbb 	bl	8002160 <ssd1306_WriteCommand>

#ifdef SSD1306_MIRROR_VERT
    ssd1306_WriteCommand(0xC0); // Mirror vertically
#else
    ssd1306_WriteCommand(0xC8); //Set COM Output Scan Direction
 80021ea:	20c8      	movs	r0, #200	; 0xc8
 80021ec:	f7ff ffb8 	bl	8002160 <ssd1306_WriteCommand>
#endif

    ssd1306_WriteCommand(0x00); //---set low column address
 80021f0:	2000      	movs	r0, #0
 80021f2:	f7ff ffb5 	bl	8002160 <ssd1306_WriteCommand>
    ssd1306_WriteCommand(0x10); //---set high column address
 80021f6:	2010      	movs	r0, #16
 80021f8:	f7ff ffb2 	bl	8002160 <ssd1306_WriteCommand>

    ssd1306_WriteCommand(0x40); //--set start line address - CHECK
 80021fc:	2040      	movs	r0, #64	; 0x40
 80021fe:	f7ff ffaf 	bl	8002160 <ssd1306_WriteCommand>

    ssd1306_SetContrast(0xFF);
 8002202:	20ff      	movs	r0, #255	; 0xff
 8002204:	f000 f9ae 	bl	8002564 <ssd1306_SetContrast>

#ifdef SSD1306_MIRROR_HORIZ
    ssd1306_WriteCommand(0xA0); // Mirror horizontally
#else
    ssd1306_WriteCommand(0xA1); //--set segment re-map 0 to 127 - CHECK
 8002208:	20a1      	movs	r0, #161	; 0xa1
 800220a:	f7ff ffa9 	bl	8002160 <ssd1306_WriteCommand>
#endif

#ifdef SSD1306_INVERSE_COLOR
    ssd1306_WriteCommand(0xA7); //--set inverse color
#else
    ssd1306_WriteCommand(0xA6); //--set normal color
 800220e:	20a6      	movs	r0, #166	; 0xa6
 8002210:	f7ff ffa6 	bl	8002160 <ssd1306_WriteCommand>
// Set multiplex ratio.
#if (SSD1306_HEIGHT == 128)
    // Found in the Luma Python lib for SH1106.
    ssd1306_WriteCommand(0xFF);
#else
    ssd1306_WriteCommand(0xA8); //--set multiplex ratio(1 to 64) - CHECK
 8002214:	20a8      	movs	r0, #168	; 0xa8
 8002216:	f7ff ffa3 	bl	8002160 <ssd1306_WriteCommand>
#endif

#if (SSD1306_HEIGHT == 32)
    ssd1306_WriteCommand(0x1F); //
#elif (SSD1306_HEIGHT == 64)
    ssd1306_WriteCommand(0x3F); //
 800221a:	203f      	movs	r0, #63	; 0x3f
 800221c:	f7ff ffa0 	bl	8002160 <ssd1306_WriteCommand>
    ssd1306_WriteCommand(0x3F); // Seems to work for 128px high displays too.
#else
#error "Only 32, 64, or 128 lines of height are supported!"
#endif

    ssd1306_WriteCommand(0xA4); //0xa4,Output follows RAM content;0xa5,Output ignores RAM content
 8002220:	20a4      	movs	r0, #164	; 0xa4
 8002222:	f7ff ff9d 	bl	8002160 <ssd1306_WriteCommand>

    ssd1306_WriteCommand(0xD3); //-set display offset - CHECK
 8002226:	20d3      	movs	r0, #211	; 0xd3
 8002228:	f7ff ff9a 	bl	8002160 <ssd1306_WriteCommand>
    ssd1306_WriteCommand(0x00); //-not offset
 800222c:	2000      	movs	r0, #0
 800222e:	f7ff ff97 	bl	8002160 <ssd1306_WriteCommand>

    ssd1306_WriteCommand(0xD5); //--set display clock divide ratio/oscillator frequency
 8002232:	20d5      	movs	r0, #213	; 0xd5
 8002234:	f7ff ff94 	bl	8002160 <ssd1306_WriteCommand>
    ssd1306_WriteCommand(0xF0); //--set divide ratio
 8002238:	20f0      	movs	r0, #240	; 0xf0
 800223a:	f7ff ff91 	bl	8002160 <ssd1306_WriteCommand>

    ssd1306_WriteCommand(0xD9); //--set pre-charge period
 800223e:	20d9      	movs	r0, #217	; 0xd9
 8002240:	f7ff ff8e 	bl	8002160 <ssd1306_WriteCommand>
    ssd1306_WriteCommand(0x22); //
 8002244:	2022      	movs	r0, #34	; 0x22
 8002246:	f7ff ff8b 	bl	8002160 <ssd1306_WriteCommand>

    ssd1306_WriteCommand(0xDA); //--set com pins hardware configuration - CHECK
 800224a:	20da      	movs	r0, #218	; 0xda
 800224c:	f7ff ff88 	bl	8002160 <ssd1306_WriteCommand>
#if (SSD1306_HEIGHT == 32)
    ssd1306_WriteCommand(0x02);
#elif (SSD1306_HEIGHT == 64)
    ssd1306_WriteCommand(0x12);
 8002250:	2012      	movs	r0, #18
 8002252:	f7ff ff85 	bl	8002160 <ssd1306_WriteCommand>
    ssd1306_WriteCommand(0x12);
#else
#error "Only 32, 64, or 128 lines of height are supported!"
#endif

    ssd1306_WriteCommand(0xDB); //--set vcomh
 8002256:	20db      	movs	r0, #219	; 0xdb
 8002258:	f7ff ff82 	bl	8002160 <ssd1306_WriteCommand>
    ssd1306_WriteCommand(0x20); //0x20,0.77xVcc
 800225c:	2020      	movs	r0, #32
 800225e:	f7ff ff7f 	bl	8002160 <ssd1306_WriteCommand>

    ssd1306_WriteCommand(0x8D); //--set DC-DC enable
 8002262:	208d      	movs	r0, #141	; 0x8d
 8002264:	f7ff ff7c 	bl	8002160 <ssd1306_WriteCommand>
    ssd1306_WriteCommand(0x14); //
 8002268:	2014      	movs	r0, #20
 800226a:	f7ff ff79 	bl	8002160 <ssd1306_WriteCommand>
    ssd1306_SetDisplayOn(1); //--turn on SSD1306 panel
 800226e:	2001      	movs	r0, #1
 8002270:	f000 f98c 	bl	800258c <ssd1306_SetDisplayOn>

    // Clear screen
    ssd1306_Fill(Black);
 8002274:	2000      	movs	r0, #0
 8002276:	f000 f80f 	bl	8002298 <ssd1306_Fill>
    
    // Flush buffer to screen
    ssd1306_UpdateScreen();
 800227a:	f000 f831 	bl	80022e0 <ssd1306_UpdateScreen>
    
    // Set default values for screen object
    SSD1306.CurrentX = 0;
 800227e:	4b05      	ldr	r3, [pc, #20]	; (8002294 <ssd1306_Init+0xd0>)
 8002280:	2200      	movs	r2, #0
 8002282:	801a      	strh	r2, [r3, #0]
    SSD1306.CurrentY = 0;
 8002284:	4b03      	ldr	r3, [pc, #12]	; (8002294 <ssd1306_Init+0xd0>)
 8002286:	2200      	movs	r2, #0
 8002288:	805a      	strh	r2, [r3, #2]
    
    SSD1306.Initialized = 1;
 800228a:	4b02      	ldr	r3, [pc, #8]	; (8002294 <ssd1306_Init+0xd0>)
 800228c:	2201      	movs	r2, #1
 800228e:	711a      	strb	r2, [r3, #4]
}
 8002290:	bf00      	nop
 8002292:	bd80      	pop	{r7, pc}
 8002294:	20001120 	.word	0x20001120

08002298 <ssd1306_Fill>:

// Fill the whole screen with the given color
void ssd1306_Fill(SSD1306_COLOR color) {
 8002298:	b480      	push	{r7}
 800229a:	b085      	sub	sp, #20
 800229c:	af00      	add	r7, sp, #0
 800229e:	4603      	mov	r3, r0
 80022a0:	71fb      	strb	r3, [r7, #7]
    /* Set memory */
    uint32_t i;

    for(i = 0; i < sizeof(SSD1306_Buffer); i++) {
 80022a2:	2300      	movs	r3, #0
 80022a4:	60fb      	str	r3, [r7, #12]
 80022a6:	e00d      	b.n	80022c4 <ssd1306_Fill+0x2c>
        SSD1306_Buffer[i] = (color == Black) ? 0x00 : 0xFF;
 80022a8:	79fb      	ldrb	r3, [r7, #7]
 80022aa:	2b00      	cmp	r3, #0
 80022ac:	d101      	bne.n	80022b2 <ssd1306_Fill+0x1a>
 80022ae:	2100      	movs	r1, #0
 80022b0:	e000      	b.n	80022b4 <ssd1306_Fill+0x1c>
 80022b2:	21ff      	movs	r1, #255	; 0xff
 80022b4:	4a09      	ldr	r2, [pc, #36]	; (80022dc <ssd1306_Fill+0x44>)
 80022b6:	68fb      	ldr	r3, [r7, #12]
 80022b8:	4413      	add	r3, r2
 80022ba:	460a      	mov	r2, r1
 80022bc:	701a      	strb	r2, [r3, #0]
    for(i = 0; i < sizeof(SSD1306_Buffer); i++) {
 80022be:	68fb      	ldr	r3, [r7, #12]
 80022c0:	3301      	adds	r3, #1
 80022c2:	60fb      	str	r3, [r7, #12]
 80022c4:	68fb      	ldr	r3, [r7, #12]
 80022c6:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80022ca:	d3ed      	bcc.n	80022a8 <ssd1306_Fill+0x10>
    }
}
 80022cc:	bf00      	nop
 80022ce:	bf00      	nop
 80022d0:	3714      	adds	r7, #20
 80022d2:	46bd      	mov	sp, r7
 80022d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022d8:	4770      	bx	lr
 80022da:	bf00      	nop
 80022dc:	20000d20 	.word	0x20000d20

080022e0 <ssd1306_UpdateScreen>:

// Write the screenbuffer with changed to the screen
void ssd1306_UpdateScreen(void) {
 80022e0:	b580      	push	{r7, lr}
 80022e2:	b082      	sub	sp, #8
 80022e4:	af00      	add	r7, sp, #0
    // depends on the screen height:
    //
    //  * 32px   ==  4 pages
    //  * 64px   ==  8 pages
    //  * 128px  ==  16 pages
    for(uint8_t i = 0; i < SSD1306_HEIGHT/8; i++) {
 80022e6:	2300      	movs	r3, #0
 80022e8:	71fb      	strb	r3, [r7, #7]
 80022ea:	e016      	b.n	800231a <ssd1306_UpdateScreen+0x3a>
        ssd1306_WriteCommand(0xB0 + i); // Set the current RAM page address.
 80022ec:	79fb      	ldrb	r3, [r7, #7]
 80022ee:	3b50      	subs	r3, #80	; 0x50
 80022f0:	b2db      	uxtb	r3, r3
 80022f2:	4618      	mov	r0, r3
 80022f4:	f7ff ff34 	bl	8002160 <ssd1306_WriteCommand>
        ssd1306_WriteCommand(0x00 + SSD1306_X_OFFSET_LOWER);
 80022f8:	2000      	movs	r0, #0
 80022fa:	f7ff ff31 	bl	8002160 <ssd1306_WriteCommand>
        ssd1306_WriteCommand(0x10 + SSD1306_X_OFFSET_UPPER);
 80022fe:	2010      	movs	r0, #16
 8002300:	f7ff ff2e 	bl	8002160 <ssd1306_WriteCommand>
        ssd1306_WriteData(&SSD1306_Buffer[SSD1306_WIDTH*i],SSD1306_WIDTH);
 8002304:	79fb      	ldrb	r3, [r7, #7]
 8002306:	01db      	lsls	r3, r3, #7
 8002308:	4a08      	ldr	r2, [pc, #32]	; (800232c <ssd1306_UpdateScreen+0x4c>)
 800230a:	4413      	add	r3, r2
 800230c:	2180      	movs	r1, #128	; 0x80
 800230e:	4618      	mov	r0, r3
 8002310:	f7ff ff3e 	bl	8002190 <ssd1306_WriteData>
    for(uint8_t i = 0; i < SSD1306_HEIGHT/8; i++) {
 8002314:	79fb      	ldrb	r3, [r7, #7]
 8002316:	3301      	adds	r3, #1
 8002318:	71fb      	strb	r3, [r7, #7]
 800231a:	79fb      	ldrb	r3, [r7, #7]
 800231c:	2b07      	cmp	r3, #7
 800231e:	d9e5      	bls.n	80022ec <ssd1306_UpdateScreen+0xc>
    }
}
 8002320:	bf00      	nop
 8002322:	bf00      	nop
 8002324:	3708      	adds	r7, #8
 8002326:	46bd      	mov	sp, r7
 8002328:	bd80      	pop	{r7, pc}
 800232a:	bf00      	nop
 800232c:	20000d20 	.word	0x20000d20

08002330 <ssd1306_DrawPixel>:

//    Draw one pixel in the screenbuffer
//    X => X Coordinate
//    Y => Y Coordinate
//    color => Pixel color
void ssd1306_DrawPixel(uint8_t x, uint8_t y, SSD1306_COLOR color) {
 8002330:	b480      	push	{r7}
 8002332:	b083      	sub	sp, #12
 8002334:	af00      	add	r7, sp, #0
 8002336:	4603      	mov	r3, r0
 8002338:	71fb      	strb	r3, [r7, #7]
 800233a:	460b      	mov	r3, r1
 800233c:	71bb      	strb	r3, [r7, #6]
 800233e:	4613      	mov	r3, r2
 8002340:	717b      	strb	r3, [r7, #5]
    if(x >= SSD1306_WIDTH || y >= SSD1306_HEIGHT) {
 8002342:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002346:	2b00      	cmp	r3, #0
 8002348:	db3d      	blt.n	80023c6 <ssd1306_DrawPixel+0x96>
 800234a:	79bb      	ldrb	r3, [r7, #6]
 800234c:	2b3f      	cmp	r3, #63	; 0x3f
 800234e:	d83a      	bhi.n	80023c6 <ssd1306_DrawPixel+0x96>
        // Don't write outside the buffer
        return;
    }
   
    // Draw in the right color
    if(color == White) {
 8002350:	797b      	ldrb	r3, [r7, #5]
 8002352:	2b01      	cmp	r3, #1
 8002354:	d11a      	bne.n	800238c <ssd1306_DrawPixel+0x5c>
        SSD1306_Buffer[x + (y / 8) * SSD1306_WIDTH] |= 1 << (y % 8);
 8002356:	79fa      	ldrb	r2, [r7, #7]
 8002358:	79bb      	ldrb	r3, [r7, #6]
 800235a:	08db      	lsrs	r3, r3, #3
 800235c:	b2d8      	uxtb	r0, r3
 800235e:	4603      	mov	r3, r0
 8002360:	01db      	lsls	r3, r3, #7
 8002362:	4413      	add	r3, r2
 8002364:	4a1b      	ldr	r2, [pc, #108]	; (80023d4 <ssd1306_DrawPixel+0xa4>)
 8002366:	5cd3      	ldrb	r3, [r2, r3]
 8002368:	b25a      	sxtb	r2, r3
 800236a:	79bb      	ldrb	r3, [r7, #6]
 800236c:	f003 0307 	and.w	r3, r3, #7
 8002370:	2101      	movs	r1, #1
 8002372:	fa01 f303 	lsl.w	r3, r1, r3
 8002376:	b25b      	sxtb	r3, r3
 8002378:	4313      	orrs	r3, r2
 800237a:	b259      	sxtb	r1, r3
 800237c:	79fa      	ldrb	r2, [r7, #7]
 800237e:	4603      	mov	r3, r0
 8002380:	01db      	lsls	r3, r3, #7
 8002382:	4413      	add	r3, r2
 8002384:	b2c9      	uxtb	r1, r1
 8002386:	4a13      	ldr	r2, [pc, #76]	; (80023d4 <ssd1306_DrawPixel+0xa4>)
 8002388:	54d1      	strb	r1, [r2, r3]
 800238a:	e01d      	b.n	80023c8 <ssd1306_DrawPixel+0x98>
    } else { 
        SSD1306_Buffer[x + (y / 8) * SSD1306_WIDTH] &= ~(1 << (y % 8));
 800238c:	79fa      	ldrb	r2, [r7, #7]
 800238e:	79bb      	ldrb	r3, [r7, #6]
 8002390:	08db      	lsrs	r3, r3, #3
 8002392:	b2d8      	uxtb	r0, r3
 8002394:	4603      	mov	r3, r0
 8002396:	01db      	lsls	r3, r3, #7
 8002398:	4413      	add	r3, r2
 800239a:	4a0e      	ldr	r2, [pc, #56]	; (80023d4 <ssd1306_DrawPixel+0xa4>)
 800239c:	5cd3      	ldrb	r3, [r2, r3]
 800239e:	b25a      	sxtb	r2, r3
 80023a0:	79bb      	ldrb	r3, [r7, #6]
 80023a2:	f003 0307 	and.w	r3, r3, #7
 80023a6:	2101      	movs	r1, #1
 80023a8:	fa01 f303 	lsl.w	r3, r1, r3
 80023ac:	b25b      	sxtb	r3, r3
 80023ae:	43db      	mvns	r3, r3
 80023b0:	b25b      	sxtb	r3, r3
 80023b2:	4013      	ands	r3, r2
 80023b4:	b259      	sxtb	r1, r3
 80023b6:	79fa      	ldrb	r2, [r7, #7]
 80023b8:	4603      	mov	r3, r0
 80023ba:	01db      	lsls	r3, r3, #7
 80023bc:	4413      	add	r3, r2
 80023be:	b2c9      	uxtb	r1, r1
 80023c0:	4a04      	ldr	r2, [pc, #16]	; (80023d4 <ssd1306_DrawPixel+0xa4>)
 80023c2:	54d1      	strb	r1, [r2, r3]
 80023c4:	e000      	b.n	80023c8 <ssd1306_DrawPixel+0x98>
        return;
 80023c6:	bf00      	nop
    }
}
 80023c8:	370c      	adds	r7, #12
 80023ca:	46bd      	mov	sp, r7
 80023cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023d0:	4770      	bx	lr
 80023d2:	bf00      	nop
 80023d4:	20000d20 	.word	0x20000d20

080023d8 <ssd1306_WriteChar>:

// Draw 1 char to the screen buffer
// ch       => char om weg te schrijven
// Font     => Font waarmee we gaan schrijven
// color    => Black or White
char ssd1306_WriteChar(char ch, FontDef Font, SSD1306_COLOR color) {
 80023d8:	b590      	push	{r4, r7, lr}
 80023da:	b089      	sub	sp, #36	; 0x24
 80023dc:	af00      	add	r7, sp, #0
 80023de:	4604      	mov	r4, r0
 80023e0:	1d38      	adds	r0, r7, #4
 80023e2:	e880 0006 	stmia.w	r0, {r1, r2}
 80023e6:	461a      	mov	r2, r3
 80023e8:	4623      	mov	r3, r4
 80023ea:	73fb      	strb	r3, [r7, #15]
 80023ec:	4613      	mov	r3, r2
 80023ee:	73bb      	strb	r3, [r7, #14]
    uint32_t i, b, j;
    
    // Check if character is valid
    if (ch < 32 || ch > 126)
 80023f0:	7bfb      	ldrb	r3, [r7, #15]
 80023f2:	2b1f      	cmp	r3, #31
 80023f4:	d902      	bls.n	80023fc <ssd1306_WriteChar+0x24>
 80023f6:	7bfb      	ldrb	r3, [r7, #15]
 80023f8:	2b7e      	cmp	r3, #126	; 0x7e
 80023fa:	d901      	bls.n	8002400 <ssd1306_WriteChar+0x28>
        return 0;
 80023fc:	2300      	movs	r3, #0
 80023fe:	e06d      	b.n	80024dc <ssd1306_WriteChar+0x104>
    
    // Check remaining space on current line
    if (SSD1306_WIDTH < (SSD1306.CurrentX + Font.FontWidth) ||
 8002400:	4b38      	ldr	r3, [pc, #224]	; (80024e4 <ssd1306_WriteChar+0x10c>)
 8002402:	881b      	ldrh	r3, [r3, #0]
 8002404:	461a      	mov	r2, r3
 8002406:	793b      	ldrb	r3, [r7, #4]
 8002408:	4413      	add	r3, r2
 800240a:	2b80      	cmp	r3, #128	; 0x80
 800240c:	dc06      	bgt.n	800241c <ssd1306_WriteChar+0x44>
        SSD1306_HEIGHT < (SSD1306.CurrentY + Font.FontHeight))
 800240e:	4b35      	ldr	r3, [pc, #212]	; (80024e4 <ssd1306_WriteChar+0x10c>)
 8002410:	885b      	ldrh	r3, [r3, #2]
 8002412:	461a      	mov	r2, r3
 8002414:	797b      	ldrb	r3, [r7, #5]
 8002416:	4413      	add	r3, r2
    if (SSD1306_WIDTH < (SSD1306.CurrentX + Font.FontWidth) ||
 8002418:	2b40      	cmp	r3, #64	; 0x40
 800241a:	dd01      	ble.n	8002420 <ssd1306_WriteChar+0x48>
    {
        // Not enough space on current line
        return 0;
 800241c:	2300      	movs	r3, #0
 800241e:	e05d      	b.n	80024dc <ssd1306_WriteChar+0x104>
    }
    
    // Use the font to write
    for(i = 0; i < Font.FontHeight; i++) {
 8002420:	2300      	movs	r3, #0
 8002422:	61fb      	str	r3, [r7, #28]
 8002424:	e04c      	b.n	80024c0 <ssd1306_WriteChar+0xe8>
        b = Font.data[(ch - 32) * Font.FontHeight + i];
 8002426:	68ba      	ldr	r2, [r7, #8]
 8002428:	7bfb      	ldrb	r3, [r7, #15]
 800242a:	3b20      	subs	r3, #32
 800242c:	7979      	ldrb	r1, [r7, #5]
 800242e:	fb01 f303 	mul.w	r3, r1, r3
 8002432:	4619      	mov	r1, r3
 8002434:	69fb      	ldr	r3, [r7, #28]
 8002436:	440b      	add	r3, r1
 8002438:	005b      	lsls	r3, r3, #1
 800243a:	4413      	add	r3, r2
 800243c:	881b      	ldrh	r3, [r3, #0]
 800243e:	617b      	str	r3, [r7, #20]
        for(j = 0; j < Font.FontWidth; j++) {
 8002440:	2300      	movs	r3, #0
 8002442:	61bb      	str	r3, [r7, #24]
 8002444:	e034      	b.n	80024b0 <ssd1306_WriteChar+0xd8>
            if((b << j) & 0x8000)  {
 8002446:	697a      	ldr	r2, [r7, #20]
 8002448:	69bb      	ldr	r3, [r7, #24]
 800244a:	fa02 f303 	lsl.w	r3, r2, r3
 800244e:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8002452:	2b00      	cmp	r3, #0
 8002454:	d012      	beq.n	800247c <ssd1306_WriteChar+0xa4>
                ssd1306_DrawPixel(SSD1306.CurrentX + j, (SSD1306.CurrentY + i), (SSD1306_COLOR) color);
 8002456:	4b23      	ldr	r3, [pc, #140]	; (80024e4 <ssd1306_WriteChar+0x10c>)
 8002458:	881b      	ldrh	r3, [r3, #0]
 800245a:	b2da      	uxtb	r2, r3
 800245c:	69bb      	ldr	r3, [r7, #24]
 800245e:	b2db      	uxtb	r3, r3
 8002460:	4413      	add	r3, r2
 8002462:	b2d8      	uxtb	r0, r3
 8002464:	4b1f      	ldr	r3, [pc, #124]	; (80024e4 <ssd1306_WriteChar+0x10c>)
 8002466:	885b      	ldrh	r3, [r3, #2]
 8002468:	b2da      	uxtb	r2, r3
 800246a:	69fb      	ldr	r3, [r7, #28]
 800246c:	b2db      	uxtb	r3, r3
 800246e:	4413      	add	r3, r2
 8002470:	b2db      	uxtb	r3, r3
 8002472:	7bba      	ldrb	r2, [r7, #14]
 8002474:	4619      	mov	r1, r3
 8002476:	f7ff ff5b 	bl	8002330 <ssd1306_DrawPixel>
 800247a:	e016      	b.n	80024aa <ssd1306_WriteChar+0xd2>
            } else {
                ssd1306_DrawPixel(SSD1306.CurrentX + j, (SSD1306.CurrentY + i), (SSD1306_COLOR)!color);
 800247c:	4b19      	ldr	r3, [pc, #100]	; (80024e4 <ssd1306_WriteChar+0x10c>)
 800247e:	881b      	ldrh	r3, [r3, #0]
 8002480:	b2da      	uxtb	r2, r3
 8002482:	69bb      	ldr	r3, [r7, #24]
 8002484:	b2db      	uxtb	r3, r3
 8002486:	4413      	add	r3, r2
 8002488:	b2d8      	uxtb	r0, r3
 800248a:	4b16      	ldr	r3, [pc, #88]	; (80024e4 <ssd1306_WriteChar+0x10c>)
 800248c:	885b      	ldrh	r3, [r3, #2]
 800248e:	b2da      	uxtb	r2, r3
 8002490:	69fb      	ldr	r3, [r7, #28]
 8002492:	b2db      	uxtb	r3, r3
 8002494:	4413      	add	r3, r2
 8002496:	b2d9      	uxtb	r1, r3
 8002498:	7bbb      	ldrb	r3, [r7, #14]
 800249a:	2b00      	cmp	r3, #0
 800249c:	bf0c      	ite	eq
 800249e:	2301      	moveq	r3, #1
 80024a0:	2300      	movne	r3, #0
 80024a2:	b2db      	uxtb	r3, r3
 80024a4:	461a      	mov	r2, r3
 80024a6:	f7ff ff43 	bl	8002330 <ssd1306_DrawPixel>
        for(j = 0; j < Font.FontWidth; j++) {
 80024aa:	69bb      	ldr	r3, [r7, #24]
 80024ac:	3301      	adds	r3, #1
 80024ae:	61bb      	str	r3, [r7, #24]
 80024b0:	793b      	ldrb	r3, [r7, #4]
 80024b2:	461a      	mov	r2, r3
 80024b4:	69bb      	ldr	r3, [r7, #24]
 80024b6:	4293      	cmp	r3, r2
 80024b8:	d3c5      	bcc.n	8002446 <ssd1306_WriteChar+0x6e>
    for(i = 0; i < Font.FontHeight; i++) {
 80024ba:	69fb      	ldr	r3, [r7, #28]
 80024bc:	3301      	adds	r3, #1
 80024be:	61fb      	str	r3, [r7, #28]
 80024c0:	797b      	ldrb	r3, [r7, #5]
 80024c2:	461a      	mov	r2, r3
 80024c4:	69fb      	ldr	r3, [r7, #28]
 80024c6:	4293      	cmp	r3, r2
 80024c8:	d3ad      	bcc.n	8002426 <ssd1306_WriteChar+0x4e>
            }
        }
    }
    
    // The current space is now taken
    SSD1306.CurrentX += Font.FontWidth;
 80024ca:	4b06      	ldr	r3, [pc, #24]	; (80024e4 <ssd1306_WriteChar+0x10c>)
 80024cc:	881a      	ldrh	r2, [r3, #0]
 80024ce:	793b      	ldrb	r3, [r7, #4]
 80024d0:	b29b      	uxth	r3, r3
 80024d2:	4413      	add	r3, r2
 80024d4:	b29a      	uxth	r2, r3
 80024d6:	4b03      	ldr	r3, [pc, #12]	; (80024e4 <ssd1306_WriteChar+0x10c>)
 80024d8:	801a      	strh	r2, [r3, #0]
    
    // Return written char for validation
    return ch;
 80024da:	7bfb      	ldrb	r3, [r7, #15]
}
 80024dc:	4618      	mov	r0, r3
 80024de:	3724      	adds	r7, #36	; 0x24
 80024e0:	46bd      	mov	sp, r7
 80024e2:	bd90      	pop	{r4, r7, pc}
 80024e4:	20001120 	.word	0x20001120

080024e8 <ssd1306_WriteString>:

// Write full string to screenbuffer
char ssd1306_WriteString(char* str, FontDef Font, SSD1306_COLOR color) {
 80024e8:	b580      	push	{r7, lr}
 80024ea:	b084      	sub	sp, #16
 80024ec:	af00      	add	r7, sp, #0
 80024ee:	60f8      	str	r0, [r7, #12]
 80024f0:	1d38      	adds	r0, r7, #4
 80024f2:	e880 0006 	stmia.w	r0, {r1, r2}
 80024f6:	70fb      	strb	r3, [r7, #3]
    // Write until null-byte
    while (*str) {
 80024f8:	e012      	b.n	8002520 <ssd1306_WriteString+0x38>
        if (ssd1306_WriteChar(*str, Font, color) != *str) {
 80024fa:	68fb      	ldr	r3, [r7, #12]
 80024fc:	7818      	ldrb	r0, [r3, #0]
 80024fe:	78fb      	ldrb	r3, [r7, #3]
 8002500:	1d3a      	adds	r2, r7, #4
 8002502:	ca06      	ldmia	r2, {r1, r2}
 8002504:	f7ff ff68 	bl	80023d8 <ssd1306_WriteChar>
 8002508:	4603      	mov	r3, r0
 800250a:	461a      	mov	r2, r3
 800250c:	68fb      	ldr	r3, [r7, #12]
 800250e:	781b      	ldrb	r3, [r3, #0]
 8002510:	429a      	cmp	r2, r3
 8002512:	d002      	beq.n	800251a <ssd1306_WriteString+0x32>
            // Char could not be written
            return *str;
 8002514:	68fb      	ldr	r3, [r7, #12]
 8002516:	781b      	ldrb	r3, [r3, #0]
 8002518:	e008      	b.n	800252c <ssd1306_WriteString+0x44>
        }
        
        // Next char
        str++;
 800251a:	68fb      	ldr	r3, [r7, #12]
 800251c:	3301      	adds	r3, #1
 800251e:	60fb      	str	r3, [r7, #12]
    while (*str) {
 8002520:	68fb      	ldr	r3, [r7, #12]
 8002522:	781b      	ldrb	r3, [r3, #0]
 8002524:	2b00      	cmp	r3, #0
 8002526:	d1e8      	bne.n	80024fa <ssd1306_WriteString+0x12>
    }
    
    // Everything ok
    return *str;
 8002528:	68fb      	ldr	r3, [r7, #12]
 800252a:	781b      	ldrb	r3, [r3, #0]
}
 800252c:	4618      	mov	r0, r3
 800252e:	3710      	adds	r7, #16
 8002530:	46bd      	mov	sp, r7
 8002532:	bd80      	pop	{r7, pc}

08002534 <ssd1306_SetCursor>:

// Position the cursor
void ssd1306_SetCursor(uint8_t x, uint8_t y) {
 8002534:	b480      	push	{r7}
 8002536:	b083      	sub	sp, #12
 8002538:	af00      	add	r7, sp, #0
 800253a:	4603      	mov	r3, r0
 800253c:	460a      	mov	r2, r1
 800253e:	71fb      	strb	r3, [r7, #7]
 8002540:	4613      	mov	r3, r2
 8002542:	71bb      	strb	r3, [r7, #6]
    SSD1306.CurrentX = x;
 8002544:	79fb      	ldrb	r3, [r7, #7]
 8002546:	b29a      	uxth	r2, r3
 8002548:	4b05      	ldr	r3, [pc, #20]	; (8002560 <ssd1306_SetCursor+0x2c>)
 800254a:	801a      	strh	r2, [r3, #0]
    SSD1306.CurrentY = y;
 800254c:	79bb      	ldrb	r3, [r7, #6]
 800254e:	b29a      	uxth	r2, r3
 8002550:	4b03      	ldr	r3, [pc, #12]	; (8002560 <ssd1306_SetCursor+0x2c>)
 8002552:	805a      	strh	r2, [r3, #2]
}
 8002554:	bf00      	nop
 8002556:	370c      	adds	r7, #12
 8002558:	46bd      	mov	sp, r7
 800255a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800255e:	4770      	bx	lr
 8002560:	20001120 	.word	0x20001120

08002564 <ssd1306_SetContrast>:
        }
    }
    return;
}

void ssd1306_SetContrast(const uint8_t value) {
 8002564:	b580      	push	{r7, lr}
 8002566:	b084      	sub	sp, #16
 8002568:	af00      	add	r7, sp, #0
 800256a:	4603      	mov	r3, r0
 800256c:	71fb      	strb	r3, [r7, #7]
    const uint8_t kSetContrastControlRegister = 0x81;
 800256e:	2381      	movs	r3, #129	; 0x81
 8002570:	73fb      	strb	r3, [r7, #15]
    ssd1306_WriteCommand(kSetContrastControlRegister);
 8002572:	7bfb      	ldrb	r3, [r7, #15]
 8002574:	4618      	mov	r0, r3
 8002576:	f7ff fdf3 	bl	8002160 <ssd1306_WriteCommand>
    ssd1306_WriteCommand(value);
 800257a:	79fb      	ldrb	r3, [r7, #7]
 800257c:	4618      	mov	r0, r3
 800257e:	f7ff fdef 	bl	8002160 <ssd1306_WriteCommand>
}
 8002582:	bf00      	nop
 8002584:	3710      	adds	r7, #16
 8002586:	46bd      	mov	sp, r7
 8002588:	bd80      	pop	{r7, pc}
	...

0800258c <ssd1306_SetDisplayOn>:

void ssd1306_SetDisplayOn(const uint8_t on) {
 800258c:	b580      	push	{r7, lr}
 800258e:	b084      	sub	sp, #16
 8002590:	af00      	add	r7, sp, #0
 8002592:	4603      	mov	r3, r0
 8002594:	71fb      	strb	r3, [r7, #7]
    uint8_t value;
    if (on) {
 8002596:	79fb      	ldrb	r3, [r7, #7]
 8002598:	2b00      	cmp	r3, #0
 800259a:	d005      	beq.n	80025a8 <ssd1306_SetDisplayOn+0x1c>
        value = 0xAF;   // Display on
 800259c:	23af      	movs	r3, #175	; 0xaf
 800259e:	73fb      	strb	r3, [r7, #15]
        SSD1306.DisplayOn = 1;
 80025a0:	4b08      	ldr	r3, [pc, #32]	; (80025c4 <ssd1306_SetDisplayOn+0x38>)
 80025a2:	2201      	movs	r2, #1
 80025a4:	715a      	strb	r2, [r3, #5]
 80025a6:	e004      	b.n	80025b2 <ssd1306_SetDisplayOn+0x26>
    } else {
        value = 0xAE;   // Display off
 80025a8:	23ae      	movs	r3, #174	; 0xae
 80025aa:	73fb      	strb	r3, [r7, #15]
        SSD1306.DisplayOn = 0;
 80025ac:	4b05      	ldr	r3, [pc, #20]	; (80025c4 <ssd1306_SetDisplayOn+0x38>)
 80025ae:	2200      	movs	r2, #0
 80025b0:	715a      	strb	r2, [r3, #5]
    }
    ssd1306_WriteCommand(value);
 80025b2:	7bfb      	ldrb	r3, [r7, #15]
 80025b4:	4618      	mov	r0, r3
 80025b6:	f7ff fdd3 	bl	8002160 <ssd1306_WriteCommand>
}
 80025ba:	bf00      	nop
 80025bc:	3710      	adds	r7, #16
 80025be:	46bd      	mov	sp, r7
 80025c0:	bd80      	pop	{r7, pc}
 80025c2:	bf00      	nop
 80025c4:	20001120 	.word	0x20001120

080025c8 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80025c8:	b480      	push	{r7}
 80025ca:	b083      	sub	sp, #12
 80025cc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80025ce:	4b0f      	ldr	r3, [pc, #60]	; (800260c <HAL_MspInit+0x44>)
 80025d0:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80025d2:	4a0e      	ldr	r2, [pc, #56]	; (800260c <HAL_MspInit+0x44>)
 80025d4:	f043 0301 	orr.w	r3, r3, #1
 80025d8:	6613      	str	r3, [r2, #96]	; 0x60
 80025da:	4b0c      	ldr	r3, [pc, #48]	; (800260c <HAL_MspInit+0x44>)
 80025dc:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80025de:	f003 0301 	and.w	r3, r3, #1
 80025e2:	607b      	str	r3, [r7, #4]
 80025e4:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80025e6:	4b09      	ldr	r3, [pc, #36]	; (800260c <HAL_MspInit+0x44>)
 80025e8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80025ea:	4a08      	ldr	r2, [pc, #32]	; (800260c <HAL_MspInit+0x44>)
 80025ec:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80025f0:	6593      	str	r3, [r2, #88]	; 0x58
 80025f2:	4b06      	ldr	r3, [pc, #24]	; (800260c <HAL_MspInit+0x44>)
 80025f4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80025f6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80025fa:	603b      	str	r3, [r7, #0]
 80025fc:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80025fe:	bf00      	nop
 8002600:	370c      	adds	r7, #12
 8002602:	46bd      	mov	sp, r7
 8002604:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002608:	4770      	bx	lr
 800260a:	bf00      	nop
 800260c:	40021000 	.word	0x40021000

08002610 <HAL_DFSDM_ChannelMspInit>:
* This function configures the hardware resources used in this example
* @param hdfsdm_channel: DFSDM_Channel handle pointer
* @retval None
*/
void HAL_DFSDM_ChannelMspInit(DFSDM_Channel_HandleTypeDef* hdfsdm_channel)
{
 8002610:	b580      	push	{r7, lr}
 8002612:	b0ac      	sub	sp, #176	; 0xb0
 8002614:	af00      	add	r7, sp, #0
 8002616:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002618:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 800261c:	2200      	movs	r2, #0
 800261e:	601a      	str	r2, [r3, #0]
 8002620:	605a      	str	r2, [r3, #4]
 8002622:	609a      	str	r2, [r3, #8]
 8002624:	60da      	str	r2, [r3, #12]
 8002626:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8002628:	f107 0314 	add.w	r3, r7, #20
 800262c:	2288      	movs	r2, #136	; 0x88
 800262e:	2100      	movs	r1, #0
 8002630:	4618      	mov	r0, r3
 8002632:	f005 fa01 	bl	8007a38 <memset>
  if(DFSDM1_Init == 0)
 8002636:	4b25      	ldr	r3, [pc, #148]	; (80026cc <HAL_DFSDM_ChannelMspInit+0xbc>)
 8002638:	681b      	ldr	r3, [r3, #0]
 800263a:	2b00      	cmp	r3, #0
 800263c:	d142      	bne.n	80026c4 <HAL_DFSDM_ChannelMspInit+0xb4>

  /* USER CODE END DFSDM1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_DFSDM1;
 800263e:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8002642:	617b      	str	r3, [r7, #20]
    PeriphClkInit.Dfsdm1ClockSelection = RCC_DFSDM1CLKSOURCE_PCLK;
 8002644:	2300      	movs	r3, #0
 8002646:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 800264a:	f107 0314 	add.w	r3, r7, #20
 800264e:	4618      	mov	r0, r3
 8002650:	f003 fc32 	bl	8005eb8 <HAL_RCCEx_PeriphCLKConfig>
 8002654:	4603      	mov	r3, r0
 8002656:	2b00      	cmp	r3, #0
 8002658:	d001      	beq.n	800265e <HAL_DFSDM_ChannelMspInit+0x4e>
    {
      Error_Handler();
 800265a:	f7ff fd75 	bl	8002148 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_DFSDM1_CLK_ENABLE();
 800265e:	4b1c      	ldr	r3, [pc, #112]	; (80026d0 <HAL_DFSDM_ChannelMspInit+0xc0>)
 8002660:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002662:	4a1b      	ldr	r2, [pc, #108]	; (80026d0 <HAL_DFSDM_ChannelMspInit+0xc0>)
 8002664:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8002668:	6613      	str	r3, [r2, #96]	; 0x60
 800266a:	4b19      	ldr	r3, [pc, #100]	; (80026d0 <HAL_DFSDM_ChannelMspInit+0xc0>)
 800266c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800266e:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8002672:	613b      	str	r3, [r7, #16]
 8002674:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOE_CLK_ENABLE();
 8002676:	4b16      	ldr	r3, [pc, #88]	; (80026d0 <HAL_DFSDM_ChannelMspInit+0xc0>)
 8002678:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800267a:	4a15      	ldr	r2, [pc, #84]	; (80026d0 <HAL_DFSDM_ChannelMspInit+0xc0>)
 800267c:	f043 0310 	orr.w	r3, r3, #16
 8002680:	64d3      	str	r3, [r2, #76]	; 0x4c
 8002682:	4b13      	ldr	r3, [pc, #76]	; (80026d0 <HAL_DFSDM_ChannelMspInit+0xc0>)
 8002684:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002686:	f003 0310 	and.w	r3, r3, #16
 800268a:	60fb      	str	r3, [r7, #12]
 800268c:	68fb      	ldr	r3, [r7, #12]
    /**DFSDM1 GPIO Configuration
    PE7     ------> DFSDM1_DATIN2
    PE9     ------> DFSDM1_CKOUT
    */
    GPIO_InitStruct.Pin = DFSDM1_DATIN2_Pin|DFSDM1_CKOUT_Pin;
 800268e:	f44f 7320 	mov.w	r3, #640	; 0x280
 8002692:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002696:	2302      	movs	r3, #2
 8002698:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800269c:	2300      	movs	r3, #0
 800269e:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80026a2:	2300      	movs	r3, #0
 80026a4:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
    GPIO_InitStruct.Alternate = GPIO_AF6_DFSDM1;
 80026a8:	2306      	movs	r3, #6
 80026aa:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 80026ae:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 80026b2:	4619      	mov	r1, r3
 80026b4:	4807      	ldr	r0, [pc, #28]	; (80026d4 <HAL_DFSDM_ChannelMspInit+0xc4>)
 80026b6:	f001 fa7f 	bl	8003bb8 <HAL_GPIO_Init>

  /* USER CODE BEGIN DFSDM1_MspInit 1 */

  /* USER CODE END DFSDM1_MspInit 1 */
  DFSDM1_Init++;
 80026ba:	4b04      	ldr	r3, [pc, #16]	; (80026cc <HAL_DFSDM_ChannelMspInit+0xbc>)
 80026bc:	681b      	ldr	r3, [r3, #0]
 80026be:	3301      	adds	r3, #1
 80026c0:	4a02      	ldr	r2, [pc, #8]	; (80026cc <HAL_DFSDM_ChannelMspInit+0xbc>)
 80026c2:	6013      	str	r3, [r2, #0]
  }

}
 80026c4:	bf00      	nop
 80026c6:	37b0      	adds	r7, #176	; 0xb0
 80026c8:	46bd      	mov	sp, r7
 80026ca:	bd80      	pop	{r7, pc}
 80026cc:	20001128 	.word	0x20001128
 80026d0:	40021000 	.word	0x40021000
 80026d4:	48001000 	.word	0x48001000

080026d8 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 80026d8:	b580      	push	{r7, lr}
 80026da:	b0ae      	sub	sp, #184	; 0xb8
 80026dc:	af00      	add	r7, sp, #0
 80026de:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80026e0:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
 80026e4:	2200      	movs	r2, #0
 80026e6:	601a      	str	r2, [r3, #0]
 80026e8:	605a      	str	r2, [r3, #4]
 80026ea:	609a      	str	r2, [r3, #8]
 80026ec:	60da      	str	r2, [r3, #12]
 80026ee:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 80026f0:	f107 031c 	add.w	r3, r7, #28
 80026f4:	2288      	movs	r2, #136	; 0x88
 80026f6:	2100      	movs	r1, #0
 80026f8:	4618      	mov	r0, r3
 80026fa:	f005 f99d 	bl	8007a38 <memset>
  if(hi2c->Instance==I2C1)
 80026fe:	687b      	ldr	r3, [r7, #4]
 8002700:	681b      	ldr	r3, [r3, #0]
 8002702:	4a42      	ldr	r2, [pc, #264]	; (800280c <HAL_I2C_MspInit+0x134>)
 8002704:	4293      	cmp	r3, r2
 8002706:	d13c      	bne.n	8002782 <HAL_I2C_MspInit+0xaa>

  /* USER CODE END I2C1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_I2C1;
 8002708:	2340      	movs	r3, #64	; 0x40
 800270a:	61fb      	str	r3, [r7, #28]
    PeriphClkInit.I2c1ClockSelection = RCC_I2C1CLKSOURCE_PCLK1;
 800270c:	2300      	movs	r3, #0
 800270e:	66fb      	str	r3, [r7, #108]	; 0x6c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8002710:	f107 031c 	add.w	r3, r7, #28
 8002714:	4618      	mov	r0, r3
 8002716:	f003 fbcf 	bl	8005eb8 <HAL_RCCEx_PeriphCLKConfig>
 800271a:	4603      	mov	r3, r0
 800271c:	2b00      	cmp	r3, #0
 800271e:	d001      	beq.n	8002724 <HAL_I2C_MspInit+0x4c>
    {
      Error_Handler();
 8002720:	f7ff fd12 	bl	8002148 <Error_Handler>
    }

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8002724:	4b3a      	ldr	r3, [pc, #232]	; (8002810 <HAL_I2C_MspInit+0x138>)
 8002726:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002728:	4a39      	ldr	r2, [pc, #228]	; (8002810 <HAL_I2C_MspInit+0x138>)
 800272a:	f043 0302 	orr.w	r3, r3, #2
 800272e:	64d3      	str	r3, [r2, #76]	; 0x4c
 8002730:	4b37      	ldr	r3, [pc, #220]	; (8002810 <HAL_I2C_MspInit+0x138>)
 8002732:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002734:	f003 0302 	and.w	r3, r3, #2
 8002738:	61bb      	str	r3, [r7, #24]
 800273a:	69bb      	ldr	r3, [r7, #24]
    /**I2C1 GPIO Configuration
    PB8     ------> I2C1_SCL
    PB9     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = ARD_D15_Pin|GPIO_PIN_9;
 800273c:	f44f 7340 	mov.w	r3, #768	; 0x300
 8002740:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8002744:	2312      	movs	r3, #18
 8002746:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800274a:	2300      	movs	r3, #0
 800274c:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002750:	2303      	movs	r3, #3
 8002752:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8002756:	2304      	movs	r3, #4
 8002758:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800275c:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
 8002760:	4619      	mov	r1, r3
 8002762:	482c      	ldr	r0, [pc, #176]	; (8002814 <HAL_I2C_MspInit+0x13c>)
 8002764:	f001 fa28 	bl	8003bb8 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8002768:	4b29      	ldr	r3, [pc, #164]	; (8002810 <HAL_I2C_MspInit+0x138>)
 800276a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800276c:	4a28      	ldr	r2, [pc, #160]	; (8002810 <HAL_I2C_MspInit+0x138>)
 800276e:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8002772:	6593      	str	r3, [r2, #88]	; 0x58
 8002774:	4b26      	ldr	r3, [pc, #152]	; (8002810 <HAL_I2C_MspInit+0x138>)
 8002776:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002778:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800277c:	617b      	str	r3, [r7, #20]
 800277e:	697b      	ldr	r3, [r7, #20]
  /* USER CODE BEGIN I2C2_MspInit 1 */

  /* USER CODE END I2C2_MspInit 1 */
  }

}
 8002780:	e040      	b.n	8002804 <HAL_I2C_MspInit+0x12c>
  else if(hi2c->Instance==I2C2)
 8002782:	687b      	ldr	r3, [r7, #4]
 8002784:	681b      	ldr	r3, [r3, #0]
 8002786:	4a24      	ldr	r2, [pc, #144]	; (8002818 <HAL_I2C_MspInit+0x140>)
 8002788:	4293      	cmp	r3, r2
 800278a:	d13b      	bne.n	8002804 <HAL_I2C_MspInit+0x12c>
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_I2C2;
 800278c:	2380      	movs	r3, #128	; 0x80
 800278e:	61fb      	str	r3, [r7, #28]
    PeriphClkInit.I2c2ClockSelection = RCC_I2C2CLKSOURCE_PCLK1;
 8002790:	2300      	movs	r3, #0
 8002792:	673b      	str	r3, [r7, #112]	; 0x70
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8002794:	f107 031c 	add.w	r3, r7, #28
 8002798:	4618      	mov	r0, r3
 800279a:	f003 fb8d 	bl	8005eb8 <HAL_RCCEx_PeriphCLKConfig>
 800279e:	4603      	mov	r3, r0
 80027a0:	2b00      	cmp	r3, #0
 80027a2:	d001      	beq.n	80027a8 <HAL_I2C_MspInit+0xd0>
      Error_Handler();
 80027a4:	f7ff fcd0 	bl	8002148 <Error_Handler>
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80027a8:	4b19      	ldr	r3, [pc, #100]	; (8002810 <HAL_I2C_MspInit+0x138>)
 80027aa:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80027ac:	4a18      	ldr	r2, [pc, #96]	; (8002810 <HAL_I2C_MspInit+0x138>)
 80027ae:	f043 0302 	orr.w	r3, r3, #2
 80027b2:	64d3      	str	r3, [r2, #76]	; 0x4c
 80027b4:	4b16      	ldr	r3, [pc, #88]	; (8002810 <HAL_I2C_MspInit+0x138>)
 80027b6:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80027b8:	f003 0302 	and.w	r3, r3, #2
 80027bc:	613b      	str	r3, [r7, #16]
 80027be:	693b      	ldr	r3, [r7, #16]
    GPIO_InitStruct.Pin = INTERNAL_I2C2_SCL_Pin|INTERNAL_I2C2_SDA_Pin;
 80027c0:	f44f 6340 	mov.w	r3, #3072	; 0xc00
 80027c4:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 80027c8:	2312      	movs	r3, #18
 80027ca:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 80027ce:	2301      	movs	r3, #1
 80027d0:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80027d4:	2303      	movs	r3, #3
 80027d6:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C2;
 80027da:	2304      	movs	r3, #4
 80027dc:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80027e0:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
 80027e4:	4619      	mov	r1, r3
 80027e6:	480b      	ldr	r0, [pc, #44]	; (8002814 <HAL_I2C_MspInit+0x13c>)
 80027e8:	f001 f9e6 	bl	8003bb8 <HAL_GPIO_Init>
    __HAL_RCC_I2C2_CLK_ENABLE();
 80027ec:	4b08      	ldr	r3, [pc, #32]	; (8002810 <HAL_I2C_MspInit+0x138>)
 80027ee:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80027f0:	4a07      	ldr	r2, [pc, #28]	; (8002810 <HAL_I2C_MspInit+0x138>)
 80027f2:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 80027f6:	6593      	str	r3, [r2, #88]	; 0x58
 80027f8:	4b05      	ldr	r3, [pc, #20]	; (8002810 <HAL_I2C_MspInit+0x138>)
 80027fa:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80027fc:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002800:	60fb      	str	r3, [r7, #12]
 8002802:	68fb      	ldr	r3, [r7, #12]
}
 8002804:	bf00      	nop
 8002806:	37b8      	adds	r7, #184	; 0xb8
 8002808:	46bd      	mov	sp, r7
 800280a:	bd80      	pop	{r7, pc}
 800280c:	40005400 	.word	0x40005400
 8002810:	40021000 	.word	0x40021000
 8002814:	48000400 	.word	0x48000400
 8002818:	40005800 	.word	0x40005800

0800281c <HAL_I2C_MspDeInit>:
* This function freeze the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspDeInit(I2C_HandleTypeDef* hi2c)
{
 800281c:	b580      	push	{r7, lr}
 800281e:	b082      	sub	sp, #8
 8002820:	af00      	add	r7, sp, #0
 8002822:	6078      	str	r0, [r7, #4]
  if(hi2c->Instance==I2C1)
 8002824:	687b      	ldr	r3, [r7, #4]
 8002826:	681b      	ldr	r3, [r3, #0]
 8002828:	4a16      	ldr	r2, [pc, #88]	; (8002884 <HAL_I2C_MspDeInit+0x68>)
 800282a:	4293      	cmp	r3, r2
 800282c:	d110      	bne.n	8002850 <HAL_I2C_MspDeInit+0x34>
  {
  /* USER CODE BEGIN I2C1_MspDeInit 0 */

  /* USER CODE END I2C1_MspDeInit 0 */
    /* Peripheral clock disable */
    __HAL_RCC_I2C1_CLK_DISABLE();
 800282e:	4b16      	ldr	r3, [pc, #88]	; (8002888 <HAL_I2C_MspDeInit+0x6c>)
 8002830:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002832:	4a15      	ldr	r2, [pc, #84]	; (8002888 <HAL_I2C_MspDeInit+0x6c>)
 8002834:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8002838:	6593      	str	r3, [r2, #88]	; 0x58

    /**I2C1 GPIO Configuration
    PB8     ------> I2C1_SCL
    PB9     ------> I2C1_SDA
    */
    HAL_GPIO_DeInit(ARD_D15_GPIO_Port, ARD_D15_Pin);
 800283a:	f44f 7180 	mov.w	r1, #256	; 0x100
 800283e:	4813      	ldr	r0, [pc, #76]	; (800288c <HAL_I2C_MspDeInit+0x70>)
 8002840:	f001 fb64 	bl	8003f0c <HAL_GPIO_DeInit>

    HAL_GPIO_DeInit(GPIOB, GPIO_PIN_9);
 8002844:	f44f 7100 	mov.w	r1, #512	; 0x200
 8002848:	4810      	ldr	r0, [pc, #64]	; (800288c <HAL_I2C_MspDeInit+0x70>)
 800284a:	f001 fb5f 	bl	8003f0c <HAL_GPIO_DeInit>
  /* USER CODE BEGIN I2C2_MspDeInit 1 */

  /* USER CODE END I2C2_MspDeInit 1 */
  }

}
 800284e:	e014      	b.n	800287a <HAL_I2C_MspDeInit+0x5e>
  else if(hi2c->Instance==I2C2)
 8002850:	687b      	ldr	r3, [r7, #4]
 8002852:	681b      	ldr	r3, [r3, #0]
 8002854:	4a0e      	ldr	r2, [pc, #56]	; (8002890 <HAL_I2C_MspDeInit+0x74>)
 8002856:	4293      	cmp	r3, r2
 8002858:	d10f      	bne.n	800287a <HAL_I2C_MspDeInit+0x5e>
    __HAL_RCC_I2C2_CLK_DISABLE();
 800285a:	4b0b      	ldr	r3, [pc, #44]	; (8002888 <HAL_I2C_MspDeInit+0x6c>)
 800285c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800285e:	4a0a      	ldr	r2, [pc, #40]	; (8002888 <HAL_I2C_MspDeInit+0x6c>)
 8002860:	f423 0380 	bic.w	r3, r3, #4194304	; 0x400000
 8002864:	6593      	str	r3, [r2, #88]	; 0x58
    HAL_GPIO_DeInit(INTERNAL_I2C2_SCL_GPIO_Port, INTERNAL_I2C2_SCL_Pin);
 8002866:	f44f 6180 	mov.w	r1, #1024	; 0x400
 800286a:	4808      	ldr	r0, [pc, #32]	; (800288c <HAL_I2C_MspDeInit+0x70>)
 800286c:	f001 fb4e 	bl	8003f0c <HAL_GPIO_DeInit>
    HAL_GPIO_DeInit(INTERNAL_I2C2_SDA_GPIO_Port, INTERNAL_I2C2_SDA_Pin);
 8002870:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8002874:	4805      	ldr	r0, [pc, #20]	; (800288c <HAL_I2C_MspDeInit+0x70>)
 8002876:	f001 fb49 	bl	8003f0c <HAL_GPIO_DeInit>
}
 800287a:	bf00      	nop
 800287c:	3708      	adds	r7, #8
 800287e:	46bd      	mov	sp, r7
 8002880:	bd80      	pop	{r7, pc}
 8002882:	bf00      	nop
 8002884:	40005400 	.word	0x40005400
 8002888:	40021000 	.word	0x40021000
 800288c:	48000400 	.word	0x48000400
 8002890:	40005800 	.word	0x40005800

08002894 <HAL_QSPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hqspi: QSPI handle pointer
* @retval None
*/
void HAL_QSPI_MspInit(QSPI_HandleTypeDef* hqspi)
{
 8002894:	b580      	push	{r7, lr}
 8002896:	b08a      	sub	sp, #40	; 0x28
 8002898:	af00      	add	r7, sp, #0
 800289a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800289c:	f107 0314 	add.w	r3, r7, #20
 80028a0:	2200      	movs	r2, #0
 80028a2:	601a      	str	r2, [r3, #0]
 80028a4:	605a      	str	r2, [r3, #4]
 80028a6:	609a      	str	r2, [r3, #8]
 80028a8:	60da      	str	r2, [r3, #12]
 80028aa:	611a      	str	r2, [r3, #16]
  if(hqspi->Instance==QUADSPI)
 80028ac:	687b      	ldr	r3, [r7, #4]
 80028ae:	681b      	ldr	r3, [r3, #0]
 80028b0:	4a17      	ldr	r2, [pc, #92]	; (8002910 <HAL_QSPI_MspInit+0x7c>)
 80028b2:	4293      	cmp	r3, r2
 80028b4:	d128      	bne.n	8002908 <HAL_QSPI_MspInit+0x74>
  {
  /* USER CODE BEGIN QUADSPI_MspInit 0 */

  /* USER CODE END QUADSPI_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_QSPI_CLK_ENABLE();
 80028b6:	4b17      	ldr	r3, [pc, #92]	; (8002914 <HAL_QSPI_MspInit+0x80>)
 80028b8:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80028ba:	4a16      	ldr	r2, [pc, #88]	; (8002914 <HAL_QSPI_MspInit+0x80>)
 80028bc:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80028c0:	6513      	str	r3, [r2, #80]	; 0x50
 80028c2:	4b14      	ldr	r3, [pc, #80]	; (8002914 <HAL_QSPI_MspInit+0x80>)
 80028c4:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80028c6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80028ca:	613b      	str	r3, [r7, #16]
 80028cc:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOE_CLK_ENABLE();
 80028ce:	4b11      	ldr	r3, [pc, #68]	; (8002914 <HAL_QSPI_MspInit+0x80>)
 80028d0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80028d2:	4a10      	ldr	r2, [pc, #64]	; (8002914 <HAL_QSPI_MspInit+0x80>)
 80028d4:	f043 0310 	orr.w	r3, r3, #16
 80028d8:	64d3      	str	r3, [r2, #76]	; 0x4c
 80028da:	4b0e      	ldr	r3, [pc, #56]	; (8002914 <HAL_QSPI_MspInit+0x80>)
 80028dc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80028de:	f003 0310 	and.w	r3, r3, #16
 80028e2:	60fb      	str	r3, [r7, #12]
 80028e4:	68fb      	ldr	r3, [r7, #12]
    PE12     ------> QUADSPI_BK1_IO0
    PE13     ------> QUADSPI_BK1_IO1
    PE14     ------> QUADSPI_BK1_IO2
    PE15     ------> QUADSPI_BK1_IO3
    */
    GPIO_InitStruct.Pin = QUADSPI_CLK_Pin|QUADSPI_NCS_Pin|OQUADSPI_BK1_IO0_Pin|QUADSPI_BK1_IO1_Pin
 80028e6:	f44f 437c 	mov.w	r3, #64512	; 0xfc00
 80028ea:	617b      	str	r3, [r7, #20]
                          |QUAD_SPI_BK1_IO2_Pin|QUAD_SPI_BK1_IO3_Pin;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80028ec:	2302      	movs	r3, #2
 80028ee:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80028f0:	2300      	movs	r3, #0
 80028f2:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80028f4:	2303      	movs	r3, #3
 80028f6:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF10_QUADSPI;
 80028f8:	230a      	movs	r3, #10
 80028fa:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 80028fc:	f107 0314 	add.w	r3, r7, #20
 8002900:	4619      	mov	r1, r3
 8002902:	4805      	ldr	r0, [pc, #20]	; (8002918 <HAL_QSPI_MspInit+0x84>)
 8002904:	f001 f958 	bl	8003bb8 <HAL_GPIO_Init>
  /* USER CODE BEGIN QUADSPI_MspInit 1 */

  /* USER CODE END QUADSPI_MspInit 1 */
  }

}
 8002908:	bf00      	nop
 800290a:	3728      	adds	r7, #40	; 0x28
 800290c:	46bd      	mov	sp, r7
 800290e:	bd80      	pop	{r7, pc}
 8002910:	a0001000 	.word	0xa0001000
 8002914:	40021000 	.word	0x40021000
 8002918:	48001000 	.word	0x48001000

0800291c <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 800291c:	b580      	push	{r7, lr}
 800291e:	b08a      	sub	sp, #40	; 0x28
 8002920:	af00      	add	r7, sp, #0
 8002922:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002924:	f107 0314 	add.w	r3, r7, #20
 8002928:	2200      	movs	r2, #0
 800292a:	601a      	str	r2, [r3, #0]
 800292c:	605a      	str	r2, [r3, #4]
 800292e:	609a      	str	r2, [r3, #8]
 8002930:	60da      	str	r2, [r3, #12]
 8002932:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI3)
 8002934:	687b      	ldr	r3, [r7, #4]
 8002936:	681b      	ldr	r3, [r3, #0]
 8002938:	4a17      	ldr	r2, [pc, #92]	; (8002998 <HAL_SPI_MspInit+0x7c>)
 800293a:	4293      	cmp	r3, r2
 800293c:	d128      	bne.n	8002990 <HAL_SPI_MspInit+0x74>
  {
  /* USER CODE BEGIN SPI3_MspInit 0 */

  /* USER CODE END SPI3_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI3_CLK_ENABLE();
 800293e:	4b17      	ldr	r3, [pc, #92]	; (800299c <HAL_SPI_MspInit+0x80>)
 8002940:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002942:	4a16      	ldr	r2, [pc, #88]	; (800299c <HAL_SPI_MspInit+0x80>)
 8002944:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8002948:	6593      	str	r3, [r2, #88]	; 0x58
 800294a:	4b14      	ldr	r3, [pc, #80]	; (800299c <HAL_SPI_MspInit+0x80>)
 800294c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800294e:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8002952:	613b      	str	r3, [r7, #16]
 8002954:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8002956:	4b11      	ldr	r3, [pc, #68]	; (800299c <HAL_SPI_MspInit+0x80>)
 8002958:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800295a:	4a10      	ldr	r2, [pc, #64]	; (800299c <HAL_SPI_MspInit+0x80>)
 800295c:	f043 0304 	orr.w	r3, r3, #4
 8002960:	64d3      	str	r3, [r2, #76]	; 0x4c
 8002962:	4b0e      	ldr	r3, [pc, #56]	; (800299c <HAL_SPI_MspInit+0x80>)
 8002964:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002966:	f003 0304 	and.w	r3, r3, #4
 800296a:	60fb      	str	r3, [r7, #12]
 800296c:	68fb      	ldr	r3, [r7, #12]
    /**SPI3 GPIO Configuration
    PC10     ------> SPI3_SCK
    PC11     ------> SPI3_MISO
    PC12     ------> SPI3_MOSI
    */
    GPIO_InitStruct.Pin = INTERNAL_SPI3_SCK_Pin|INTERNAL_SPI3_MISO_Pin|INTERNAL_SPI3_MOSI_Pin;
 800296e:	f44f 53e0 	mov.w	r3, #7168	; 0x1c00
 8002972:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002974:	2302      	movs	r3, #2
 8002976:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002978:	2300      	movs	r3, #0
 800297a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800297c:	2303      	movs	r3, #3
 800297e:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 8002980:	2306      	movs	r3, #6
 8002982:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8002984:	f107 0314 	add.w	r3, r7, #20
 8002988:	4619      	mov	r1, r3
 800298a:	4805      	ldr	r0, [pc, #20]	; (80029a0 <HAL_SPI_MspInit+0x84>)
 800298c:	f001 f914 	bl	8003bb8 <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI3_MspInit 1 */

  /* USER CODE END SPI3_MspInit 1 */
  }

}
 8002990:	bf00      	nop
 8002992:	3728      	adds	r7, #40	; 0x28
 8002994:	46bd      	mov	sp, r7
 8002996:	bd80      	pop	{r7, pc}
 8002998:	40003c00 	.word	0x40003c00
 800299c:	40021000 	.word	0x40021000
 80029a0:	48000800 	.word	0x48000800

080029a4 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 80029a4:	b580      	push	{r7, lr}
 80029a6:	b0b0      	sub	sp, #192	; 0xc0
 80029a8:	af00      	add	r7, sp, #0
 80029aa:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80029ac:	f107 03ac 	add.w	r3, r7, #172	; 0xac
 80029b0:	2200      	movs	r2, #0
 80029b2:	601a      	str	r2, [r3, #0]
 80029b4:	605a      	str	r2, [r3, #4]
 80029b6:	609a      	str	r2, [r3, #8]
 80029b8:	60da      	str	r2, [r3, #12]
 80029ba:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 80029bc:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80029c0:	2288      	movs	r2, #136	; 0x88
 80029c2:	2100      	movs	r1, #0
 80029c4:	4618      	mov	r0, r3
 80029c6:	f005 f837 	bl	8007a38 <memset>
  if(huart->Instance==USART1)
 80029ca:	687b      	ldr	r3, [r7, #4]
 80029cc:	681b      	ldr	r3, [r3, #0]
 80029ce:	4a62      	ldr	r2, [pc, #392]	; (8002b58 <HAL_UART_MspInit+0x1b4>)
 80029d0:	4293      	cmp	r3, r2
 80029d2:	d13b      	bne.n	8002a4c <HAL_UART_MspInit+0xa8>

  /* USER CODE END USART1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART1;
 80029d4:	2301      	movs	r3, #1
 80029d6:	627b      	str	r3, [r7, #36]	; 0x24
    PeriphClkInit.Usart1ClockSelection = RCC_USART1CLKSOURCE_PCLK2;
 80029d8:	2300      	movs	r3, #0
 80029da:	65fb      	str	r3, [r7, #92]	; 0x5c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80029dc:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80029e0:	4618      	mov	r0, r3
 80029e2:	f003 fa69 	bl	8005eb8 <HAL_RCCEx_PeriphCLKConfig>
 80029e6:	4603      	mov	r3, r0
 80029e8:	2b00      	cmp	r3, #0
 80029ea:	d001      	beq.n	80029f0 <HAL_UART_MspInit+0x4c>
    {
      Error_Handler();
 80029ec:	f7ff fbac 	bl	8002148 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 80029f0:	4b5a      	ldr	r3, [pc, #360]	; (8002b5c <HAL_UART_MspInit+0x1b8>)
 80029f2:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80029f4:	4a59      	ldr	r2, [pc, #356]	; (8002b5c <HAL_UART_MspInit+0x1b8>)
 80029f6:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80029fa:	6613      	str	r3, [r2, #96]	; 0x60
 80029fc:	4b57      	ldr	r3, [pc, #348]	; (8002b5c <HAL_UART_MspInit+0x1b8>)
 80029fe:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002a00:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002a04:	623b      	str	r3, [r7, #32]
 8002a06:	6a3b      	ldr	r3, [r7, #32]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8002a08:	4b54      	ldr	r3, [pc, #336]	; (8002b5c <HAL_UART_MspInit+0x1b8>)
 8002a0a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002a0c:	4a53      	ldr	r2, [pc, #332]	; (8002b5c <HAL_UART_MspInit+0x1b8>)
 8002a0e:	f043 0302 	orr.w	r3, r3, #2
 8002a12:	64d3      	str	r3, [r2, #76]	; 0x4c
 8002a14:	4b51      	ldr	r3, [pc, #324]	; (8002b5c <HAL_UART_MspInit+0x1b8>)
 8002a16:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002a18:	f003 0302 	and.w	r3, r3, #2
 8002a1c:	61fb      	str	r3, [r7, #28]
 8002a1e:	69fb      	ldr	r3, [r7, #28]
    /**USART1 GPIO Configuration
    PB6     ------> USART1_TX
    PB7     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8002a20:	23c0      	movs	r3, #192	; 0xc0
 8002a22:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002a26:	2302      	movs	r3, #2
 8002a28:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002a2c:	2300      	movs	r3, #0
 8002a2e:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002a32:	2303      	movs	r3, #3
 8002a34:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8002a38:	2307      	movs	r3, #7
 8002a3a:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002a3e:	f107 03ac 	add.w	r3, r7, #172	; 0xac
 8002a42:	4619      	mov	r1, r3
 8002a44:	4846      	ldr	r0, [pc, #280]	; (8002b60 <HAL_UART_MspInit+0x1bc>)
 8002a46:	f001 f8b7 	bl	8003bb8 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }

}
 8002a4a:	e081      	b.n	8002b50 <HAL_UART_MspInit+0x1ac>
  else if(huart->Instance==USART2)
 8002a4c:	687b      	ldr	r3, [r7, #4]
 8002a4e:	681b      	ldr	r3, [r3, #0]
 8002a50:	4a44      	ldr	r2, [pc, #272]	; (8002b64 <HAL_UART_MspInit+0x1c0>)
 8002a52:	4293      	cmp	r3, r2
 8002a54:	d13b      	bne.n	8002ace <HAL_UART_MspInit+0x12a>
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART2;
 8002a56:	2302      	movs	r3, #2
 8002a58:	627b      	str	r3, [r7, #36]	; 0x24
    PeriphClkInit.Usart2ClockSelection = RCC_USART2CLKSOURCE_PCLK1;
 8002a5a:	2300      	movs	r3, #0
 8002a5c:	663b      	str	r3, [r7, #96]	; 0x60
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8002a5e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8002a62:	4618      	mov	r0, r3
 8002a64:	f003 fa28 	bl	8005eb8 <HAL_RCCEx_PeriphCLKConfig>
 8002a68:	4603      	mov	r3, r0
 8002a6a:	2b00      	cmp	r3, #0
 8002a6c:	d001      	beq.n	8002a72 <HAL_UART_MspInit+0xce>
      Error_Handler();
 8002a6e:	f7ff fb6b 	bl	8002148 <Error_Handler>
    __HAL_RCC_USART2_CLK_ENABLE();
 8002a72:	4b3a      	ldr	r3, [pc, #232]	; (8002b5c <HAL_UART_MspInit+0x1b8>)
 8002a74:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002a76:	4a39      	ldr	r2, [pc, #228]	; (8002b5c <HAL_UART_MspInit+0x1b8>)
 8002a78:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002a7c:	6593      	str	r3, [r2, #88]	; 0x58
 8002a7e:	4b37      	ldr	r3, [pc, #220]	; (8002b5c <HAL_UART_MspInit+0x1b8>)
 8002a80:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002a82:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002a86:	61bb      	str	r3, [r7, #24]
 8002a88:	69bb      	ldr	r3, [r7, #24]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 8002a8a:	4b34      	ldr	r3, [pc, #208]	; (8002b5c <HAL_UART_MspInit+0x1b8>)
 8002a8c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002a8e:	4a33      	ldr	r2, [pc, #204]	; (8002b5c <HAL_UART_MspInit+0x1b8>)
 8002a90:	f043 0308 	orr.w	r3, r3, #8
 8002a94:	64d3      	str	r3, [r2, #76]	; 0x4c
 8002a96:	4b31      	ldr	r3, [pc, #196]	; (8002b5c <HAL_UART_MspInit+0x1b8>)
 8002a98:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002a9a:	f003 0308 	and.w	r3, r3, #8
 8002a9e:	617b      	str	r3, [r7, #20]
 8002aa0:	697b      	ldr	r3, [r7, #20]
    GPIO_InitStruct.Pin = PMOD_UART2_CTS_Pin|PMOD_UART2_RTS_Pin|PMOD_UART2_TX_Pin|PMOD_UART2_RX_Pin;
 8002aa2:	2378      	movs	r3, #120	; 0x78
 8002aa4:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002aa8:	2302      	movs	r3, #2
 8002aaa:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002aae:	2300      	movs	r3, #0
 8002ab0:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002ab4:	2303      	movs	r3, #3
 8002ab6:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8002aba:	2307      	movs	r3, #7
 8002abc:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8002ac0:	f107 03ac 	add.w	r3, r7, #172	; 0xac
 8002ac4:	4619      	mov	r1, r3
 8002ac6:	4828      	ldr	r0, [pc, #160]	; (8002b68 <HAL_UART_MspInit+0x1c4>)
 8002ac8:	f001 f876 	bl	8003bb8 <HAL_GPIO_Init>
}
 8002acc:	e040      	b.n	8002b50 <HAL_UART_MspInit+0x1ac>
  else if(huart->Instance==USART3)
 8002ace:	687b      	ldr	r3, [r7, #4]
 8002ad0:	681b      	ldr	r3, [r3, #0]
 8002ad2:	4a26      	ldr	r2, [pc, #152]	; (8002b6c <HAL_UART_MspInit+0x1c8>)
 8002ad4:	4293      	cmp	r3, r2
 8002ad6:	d13b      	bne.n	8002b50 <HAL_UART_MspInit+0x1ac>
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART3;
 8002ad8:	2304      	movs	r3, #4
 8002ada:	627b      	str	r3, [r7, #36]	; 0x24
    PeriphClkInit.Usart3ClockSelection = RCC_USART3CLKSOURCE_PCLK1;
 8002adc:	2300      	movs	r3, #0
 8002ade:	667b      	str	r3, [r7, #100]	; 0x64
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8002ae0:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8002ae4:	4618      	mov	r0, r3
 8002ae6:	f003 f9e7 	bl	8005eb8 <HAL_RCCEx_PeriphCLKConfig>
 8002aea:	4603      	mov	r3, r0
 8002aec:	2b00      	cmp	r3, #0
 8002aee:	d001      	beq.n	8002af4 <HAL_UART_MspInit+0x150>
      Error_Handler();
 8002af0:	f7ff fb2a 	bl	8002148 <Error_Handler>
    __HAL_RCC_USART3_CLK_ENABLE();
 8002af4:	4b19      	ldr	r3, [pc, #100]	; (8002b5c <HAL_UART_MspInit+0x1b8>)
 8002af6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002af8:	4a18      	ldr	r2, [pc, #96]	; (8002b5c <HAL_UART_MspInit+0x1b8>)
 8002afa:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8002afe:	6593      	str	r3, [r2, #88]	; 0x58
 8002b00:	4b16      	ldr	r3, [pc, #88]	; (8002b5c <HAL_UART_MspInit+0x1b8>)
 8002b02:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002b04:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8002b08:	613b      	str	r3, [r7, #16]
 8002b0a:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 8002b0c:	4b13      	ldr	r3, [pc, #76]	; (8002b5c <HAL_UART_MspInit+0x1b8>)
 8002b0e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002b10:	4a12      	ldr	r2, [pc, #72]	; (8002b5c <HAL_UART_MspInit+0x1b8>)
 8002b12:	f043 0308 	orr.w	r3, r3, #8
 8002b16:	64d3      	str	r3, [r2, #76]	; 0x4c
 8002b18:	4b10      	ldr	r3, [pc, #64]	; (8002b5c <HAL_UART_MspInit+0x1b8>)
 8002b1a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002b1c:	f003 0308 	and.w	r3, r3, #8
 8002b20:	60fb      	str	r3, [r7, #12]
 8002b22:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = INTERNAL_UART3_TX_Pin|INTERNAL_UART3_RX_Pin;
 8002b24:	f44f 7340 	mov.w	r3, #768	; 0x300
 8002b28:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002b2c:	2302      	movs	r3, #2
 8002b2e:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002b32:	2300      	movs	r3, #0
 8002b34:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002b38:	2303      	movs	r3, #3
 8002b3a:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 8002b3e:	2307      	movs	r3, #7
 8002b40:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8002b44:	f107 03ac 	add.w	r3, r7, #172	; 0xac
 8002b48:	4619      	mov	r1, r3
 8002b4a:	4807      	ldr	r0, [pc, #28]	; (8002b68 <HAL_UART_MspInit+0x1c4>)
 8002b4c:	f001 f834 	bl	8003bb8 <HAL_GPIO_Init>
}
 8002b50:	bf00      	nop
 8002b52:	37c0      	adds	r7, #192	; 0xc0
 8002b54:	46bd      	mov	sp, r7
 8002b56:	bd80      	pop	{r7, pc}
 8002b58:	40013800 	.word	0x40013800
 8002b5c:	40021000 	.word	0x40021000
 8002b60:	48000400 	.word	0x48000400
 8002b64:	40004400 	.word	0x40004400
 8002b68:	48000c00 	.word	0x48000c00
 8002b6c:	40004800 	.word	0x40004800

08002b70 <HAL_PCD_MspInit>:
* This function configures the hardware resources used in this example
* @param hpcd: PCD handle pointer
* @retval None
*/
void HAL_PCD_MspInit(PCD_HandleTypeDef* hpcd)
{
 8002b70:	b580      	push	{r7, lr}
 8002b72:	b0ac      	sub	sp, #176	; 0xb0
 8002b74:	af00      	add	r7, sp, #0
 8002b76:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002b78:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 8002b7c:	2200      	movs	r2, #0
 8002b7e:	601a      	str	r2, [r3, #0]
 8002b80:	605a      	str	r2, [r3, #4]
 8002b82:	609a      	str	r2, [r3, #8]
 8002b84:	60da      	str	r2, [r3, #12]
 8002b86:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8002b88:	f107 0314 	add.w	r3, r7, #20
 8002b8c:	2288      	movs	r2, #136	; 0x88
 8002b8e:	2100      	movs	r1, #0
 8002b90:	4618      	mov	r0, r3
 8002b92:	f004 ff51 	bl	8007a38 <memset>
  if(hpcd->Instance==USB_OTG_FS)
 8002b96:	687b      	ldr	r3, [r7, #4]
 8002b98:	681b      	ldr	r3, [r3, #0]
 8002b9a:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8002b9e:	d17c      	bne.n	8002c9a <HAL_PCD_MspInit+0x12a>

  /* USER CODE END USB_OTG_FS_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USB;
 8002ba0:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8002ba4:	617b      	str	r3, [r7, #20]
    PeriphClkInit.UsbClockSelection = RCC_USBCLKSOURCE_PLLSAI1;
 8002ba6:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
 8002baa:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
    PeriphClkInit.PLLSAI1.PLLSAI1Source = RCC_PLLSOURCE_MSI;
 8002bae:	2301      	movs	r3, #1
 8002bb0:	61bb      	str	r3, [r7, #24]
    PeriphClkInit.PLLSAI1.PLLSAI1M = 1;
 8002bb2:	2301      	movs	r3, #1
 8002bb4:	61fb      	str	r3, [r7, #28]
    PeriphClkInit.PLLSAI1.PLLSAI1N = 24;
 8002bb6:	2318      	movs	r3, #24
 8002bb8:	623b      	str	r3, [r7, #32]
    PeriphClkInit.PLLSAI1.PLLSAI1P = RCC_PLLP_DIV7;
 8002bba:	2307      	movs	r3, #7
 8002bbc:	627b      	str	r3, [r7, #36]	; 0x24
    PeriphClkInit.PLLSAI1.PLLSAI1Q = RCC_PLLQ_DIV2;
 8002bbe:	2302      	movs	r3, #2
 8002bc0:	62bb      	str	r3, [r7, #40]	; 0x28
    PeriphClkInit.PLLSAI1.PLLSAI1R = RCC_PLLR_DIV2;
 8002bc2:	2302      	movs	r3, #2
 8002bc4:	62fb      	str	r3, [r7, #44]	; 0x2c
    PeriphClkInit.PLLSAI1.PLLSAI1ClockOut = RCC_PLLSAI1_48M2CLK;
 8002bc6:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 8002bca:	633b      	str	r3, [r7, #48]	; 0x30
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8002bcc:	f107 0314 	add.w	r3, r7, #20
 8002bd0:	4618      	mov	r0, r3
 8002bd2:	f003 f971 	bl	8005eb8 <HAL_RCCEx_PeriphCLKConfig>
 8002bd6:	4603      	mov	r3, r0
 8002bd8:	2b00      	cmp	r3, #0
 8002bda:	d001      	beq.n	8002be0 <HAL_PCD_MspInit+0x70>
    {
      Error_Handler();
 8002bdc:	f7ff fab4 	bl	8002148 <Error_Handler>
    }

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002be0:	4b30      	ldr	r3, [pc, #192]	; (8002ca4 <HAL_PCD_MspInit+0x134>)
 8002be2:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002be4:	4a2f      	ldr	r2, [pc, #188]	; (8002ca4 <HAL_PCD_MspInit+0x134>)
 8002be6:	f043 0301 	orr.w	r3, r3, #1
 8002bea:	64d3      	str	r3, [r2, #76]	; 0x4c
 8002bec:	4b2d      	ldr	r3, [pc, #180]	; (8002ca4 <HAL_PCD_MspInit+0x134>)
 8002bee:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002bf0:	f003 0301 	and.w	r3, r3, #1
 8002bf4:	613b      	str	r3, [r7, #16]
 8002bf6:	693b      	ldr	r3, [r7, #16]
    PA9     ------> USB_OTG_FS_VBUS
    PA10     ------> USB_OTG_FS_ID
    PA11     ------> USB_OTG_FS_DM
    PA12     ------> USB_OTG_FS_DP
    */
    GPIO_InitStruct.Pin = USB_OTG_FS_VBUS_Pin;
 8002bf8:	f44f 7300 	mov.w	r3, #512	; 0x200
 8002bfc:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8002c00:	2300      	movs	r3, #0
 8002c02:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002c06:	2300      	movs	r3, #0
 8002c08:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    HAL_GPIO_Init(USB_OTG_FS_VBUS_GPIO_Port, &GPIO_InitStruct);
 8002c0c:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 8002c10:	4619      	mov	r1, r3
 8002c12:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8002c16:	f000 ffcf 	bl	8003bb8 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = USB_OTG_FS_ID_Pin|USB_OTG_FS_DM_Pin|USB_OTG_FS_DP_Pin;
 8002c1a:	f44f 53e0 	mov.w	r3, #7168	; 0x1c00
 8002c1e:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002c22:	2302      	movs	r3, #2
 8002c24:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002c28:	2300      	movs	r3, #0
 8002c2a:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002c2e:	2303      	movs	r3, #3
 8002c30:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 8002c34:	230a      	movs	r3, #10
 8002c36:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002c3a:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 8002c3e:	4619      	mov	r1, r3
 8002c40:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8002c44:	f000 ffb8 	bl	8003bb8 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 8002c48:	4b16      	ldr	r3, [pc, #88]	; (8002ca4 <HAL_PCD_MspInit+0x134>)
 8002c4a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002c4c:	4a15      	ldr	r2, [pc, #84]	; (8002ca4 <HAL_PCD_MspInit+0x134>)
 8002c4e:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8002c52:	64d3      	str	r3, [r2, #76]	; 0x4c
 8002c54:	4b13      	ldr	r3, [pc, #76]	; (8002ca4 <HAL_PCD_MspInit+0x134>)
 8002c56:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002c58:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8002c5c:	60fb      	str	r3, [r7, #12]
 8002c5e:	68fb      	ldr	r3, [r7, #12]

    /* Enable VDDUSB */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8002c60:	4b10      	ldr	r3, [pc, #64]	; (8002ca4 <HAL_PCD_MspInit+0x134>)
 8002c62:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002c64:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002c68:	2b00      	cmp	r3, #0
 8002c6a:	d114      	bne.n	8002c96 <HAL_PCD_MspInit+0x126>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002c6c:	4b0d      	ldr	r3, [pc, #52]	; (8002ca4 <HAL_PCD_MspInit+0x134>)
 8002c6e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002c70:	4a0c      	ldr	r2, [pc, #48]	; (8002ca4 <HAL_PCD_MspInit+0x134>)
 8002c72:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002c76:	6593      	str	r3, [r2, #88]	; 0x58
 8002c78:	4b0a      	ldr	r3, [pc, #40]	; (8002ca4 <HAL_PCD_MspInit+0x134>)
 8002c7a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002c7c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002c80:	60bb      	str	r3, [r7, #8]
 8002c82:	68bb      	ldr	r3, [r7, #8]
      HAL_PWREx_EnableVddUSB();
 8002c84:	f002 fa4c 	bl	8005120 <HAL_PWREx_EnableVddUSB>
      __HAL_RCC_PWR_CLK_DISABLE();
 8002c88:	4b06      	ldr	r3, [pc, #24]	; (8002ca4 <HAL_PCD_MspInit+0x134>)
 8002c8a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002c8c:	4a05      	ldr	r2, [pc, #20]	; (8002ca4 <HAL_PCD_MspInit+0x134>)
 8002c8e:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002c92:	6593      	str	r3, [r2, #88]	; 0x58
  /* USER CODE BEGIN USB_OTG_FS_MspInit 1 */

  /* USER CODE END USB_OTG_FS_MspInit 1 */
  }

}
 8002c94:	e001      	b.n	8002c9a <HAL_PCD_MspInit+0x12a>
      HAL_PWREx_EnableVddUSB();
 8002c96:	f002 fa43 	bl	8005120 <HAL_PWREx_EnableVddUSB>
}
 8002c9a:	bf00      	nop
 8002c9c:	37b0      	adds	r7, #176	; 0xb0
 8002c9e:	46bd      	mov	sp, r7
 8002ca0:	bd80      	pop	{r7, pc}
 8002ca2:	bf00      	nop
 8002ca4:	40021000 	.word	0x40021000

08002ca8 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8002ca8:	b480      	push	{r7}
 8002caa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8002cac:	e7fe      	b.n	8002cac <NMI_Handler+0x4>

08002cae <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8002cae:	b480      	push	{r7}
 8002cb0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8002cb2:	e7fe      	b.n	8002cb2 <HardFault_Handler+0x4>

08002cb4 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8002cb4:	b480      	push	{r7}
 8002cb6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8002cb8:	e7fe      	b.n	8002cb8 <MemManage_Handler+0x4>

08002cba <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8002cba:	b480      	push	{r7}
 8002cbc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8002cbe:	e7fe      	b.n	8002cbe <BusFault_Handler+0x4>

08002cc0 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8002cc0:	b480      	push	{r7}
 8002cc2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8002cc4:	e7fe      	b.n	8002cc4 <UsageFault_Handler+0x4>

08002cc6 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8002cc6:	b480      	push	{r7}
 8002cc8:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8002cca:	bf00      	nop
 8002ccc:	46bd      	mov	sp, r7
 8002cce:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002cd2:	4770      	bx	lr

08002cd4 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8002cd4:	b480      	push	{r7}
 8002cd6:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8002cd8:	bf00      	nop
 8002cda:	46bd      	mov	sp, r7
 8002cdc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ce0:	4770      	bx	lr

08002ce2 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8002ce2:	b480      	push	{r7}
 8002ce4:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8002ce6:	bf00      	nop
 8002ce8:	46bd      	mov	sp, r7
 8002cea:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002cee:	4770      	bx	lr

08002cf0 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8002cf0:	b580      	push	{r7, lr}
 8002cf2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8002cf4:	f000 fcfe 	bl	80036f4 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8002cf8:	bf00      	nop
 8002cfa:	bd80      	pop	{r7, pc}

08002cfc <EXTI9_5_IRQHandler>:

/**
  * @brief This function handles EXTI line[9:5] interrupts.
  */
void EXTI9_5_IRQHandler(void)
{
 8002cfc:	b580      	push	{r7, lr}
 8002cfe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI9_5_IRQn 0 */

  /* USER CODE END EXTI9_5_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(SPSGRF_915_GPIO3_EXTI5_Pin);
 8002d00:	2020      	movs	r0, #32
 8002d02:	f001 fa0f 	bl	8004124 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(SPBTLE_RF_IRQ_EXTI6_Pin);
 8002d06:	2040      	movs	r0, #64	; 0x40
 8002d08:	f001 fa0c 	bl	8004124 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(VL53L0X_GPIO1_EXTI7_Pin);
 8002d0c:	2080      	movs	r0, #128	; 0x80
 8002d0e:	f001 fa09 	bl	8004124 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(LSM3MDL_DRDY_EXTI8_Pin);
 8002d12:	f44f 7080 	mov.w	r0, #256	; 0x100
 8002d16:	f001 fa05 	bl	8004124 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI9_5_IRQn 1 */

  /* USER CODE END EXTI9_5_IRQn 1 */
}
 8002d1a:	bf00      	nop
 8002d1c:	bd80      	pop	{r7, pc}

08002d1e <EXTI15_10_IRQHandler>:

/**
  * @brief This function handles EXTI line[15:10] interrupts.
  */
void EXTI15_10_IRQHandler(void)
{
 8002d1e:	b580      	push	{r7, lr}
 8002d20:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */

  /* USER CODE END EXTI15_10_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(LPS22HB_INT_DRDY_EXTI0_Pin);
 8002d22:	f44f 6080 	mov.w	r0, #1024	; 0x400
 8002d26:	f001 f9fd 	bl	8004124 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(LSM6DSL_INT1_EXTI11_Pin);
 8002d2a:	f44f 6000 	mov.w	r0, #2048	; 0x800
 8002d2e:	f001 f9f9 	bl	8004124 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(BLUE_BUTTON_Pin);
 8002d32:	f44f 5000 	mov.w	r0, #8192	; 0x2000
 8002d36:	f001 f9f5 	bl	8004124 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(ARD_D2_Pin);
 8002d3a:	f44f 4080 	mov.w	r0, #16384	; 0x4000
 8002d3e:	f001 f9f1 	bl	8004124 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(HTS221_DRDY_EXTI15_Pin);
 8002d42:	f44f 4000 	mov.w	r0, #32768	; 0x8000
 8002d46:	f001 f9ed 	bl	8004124 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI15_10_IRQn 1 */

  /* USER CODE END EXTI15_10_IRQn 1 */
}
 8002d4a:	bf00      	nop
 8002d4c:	bd80      	pop	{r7, pc}
	...

08002d50 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8002d50:	b580      	push	{r7, lr}
 8002d52:	b086      	sub	sp, #24
 8002d54:	af00      	add	r7, sp, #0
 8002d56:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8002d58:	4a14      	ldr	r2, [pc, #80]	; (8002dac <_sbrk+0x5c>)
 8002d5a:	4b15      	ldr	r3, [pc, #84]	; (8002db0 <_sbrk+0x60>)
 8002d5c:	1ad3      	subs	r3, r2, r3
 8002d5e:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8002d60:	697b      	ldr	r3, [r7, #20]
 8002d62:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8002d64:	4b13      	ldr	r3, [pc, #76]	; (8002db4 <_sbrk+0x64>)
 8002d66:	681b      	ldr	r3, [r3, #0]
 8002d68:	2b00      	cmp	r3, #0
 8002d6a:	d102      	bne.n	8002d72 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8002d6c:	4b11      	ldr	r3, [pc, #68]	; (8002db4 <_sbrk+0x64>)
 8002d6e:	4a12      	ldr	r2, [pc, #72]	; (8002db8 <_sbrk+0x68>)
 8002d70:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8002d72:	4b10      	ldr	r3, [pc, #64]	; (8002db4 <_sbrk+0x64>)
 8002d74:	681a      	ldr	r2, [r3, #0]
 8002d76:	687b      	ldr	r3, [r7, #4]
 8002d78:	4413      	add	r3, r2
 8002d7a:	693a      	ldr	r2, [r7, #16]
 8002d7c:	429a      	cmp	r2, r3
 8002d7e:	d207      	bcs.n	8002d90 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8002d80:	f004 fe08 	bl	8007994 <__errno>
 8002d84:	4603      	mov	r3, r0
 8002d86:	220c      	movs	r2, #12
 8002d88:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8002d8a:	f04f 33ff 	mov.w	r3, #4294967295
 8002d8e:	e009      	b.n	8002da4 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8002d90:	4b08      	ldr	r3, [pc, #32]	; (8002db4 <_sbrk+0x64>)
 8002d92:	681b      	ldr	r3, [r3, #0]
 8002d94:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8002d96:	4b07      	ldr	r3, [pc, #28]	; (8002db4 <_sbrk+0x64>)
 8002d98:	681a      	ldr	r2, [r3, #0]
 8002d9a:	687b      	ldr	r3, [r7, #4]
 8002d9c:	4413      	add	r3, r2
 8002d9e:	4a05      	ldr	r2, [pc, #20]	; (8002db4 <_sbrk+0x64>)
 8002da0:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8002da2:	68fb      	ldr	r3, [r7, #12]
}
 8002da4:	4618      	mov	r0, r3
 8002da6:	3718      	adds	r7, #24
 8002da8:	46bd      	mov	sp, r7
 8002daa:	bd80      	pop	{r7, pc}
 8002dac:	20018000 	.word	0x20018000
 8002db0:	00000400 	.word	0x00000400
 8002db4:	2000112c 	.word	0x2000112c
 8002db8:	200011c8 	.word	0x200011c8

08002dbc <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @retval None
  */

void SystemInit(void)
{
 8002dbc:	b480      	push	{r7}
 8002dbe:	af00      	add	r7, sp, #0
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET;
#endif

  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 20U)|(3UL << 22U));  /* set CP10 and CP11 Full Access */
 8002dc0:	4b06      	ldr	r3, [pc, #24]	; (8002ddc <SystemInit+0x20>)
 8002dc2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002dc6:	4a05      	ldr	r2, [pc, #20]	; (8002ddc <SystemInit+0x20>)
 8002dc8:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8002dcc:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
#endif
}
 8002dd0:	bf00      	nop
 8002dd2:	46bd      	mov	sp, r7
 8002dd4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002dd8:	4770      	bx	lr
 8002dda:	bf00      	nop
 8002ddc:	e000ed00 	.word	0xe000ed00

08002de0 <valorRMS>:


#include <math.h>
#include <stdlib.h>

float valorRMS (float sinal[],int tam){
 8002de0:	b5b0      	push	{r4, r5, r7, lr}
 8002de2:	b086      	sub	sp, #24
 8002de4:	af00      	add	r7, sp, #0
 8002de6:	6078      	str	r0, [r7, #4]
 8002de8:	6039      	str	r1, [r7, #0]
    short sum = 0,med,valor_rms;
 8002dea:	2300      	movs	r3, #0
 8002dec:	82fb      	strh	r3, [r7, #22]
    int i;
    for( i = 0;i<tam;i++){
 8002dee:	2300      	movs	r3, #0
 8002df0:	613b      	str	r3, [r7, #16]
 8002df2:	e027      	b.n	8002e44 <valorRMS+0x64>
        sum+=pow(sinal[i],2);
 8002df4:	693b      	ldr	r3, [r7, #16]
 8002df6:	009b      	lsls	r3, r3, #2
 8002df8:	687a      	ldr	r2, [r7, #4]
 8002dfa:	4413      	add	r3, r2
 8002dfc:	681b      	ldr	r3, [r3, #0]
 8002dfe:	4618      	mov	r0, r3
 8002e00:	f7fd fb9a 	bl	8000538 <__aeabi_f2d>
 8002e04:	4602      	mov	r2, r0
 8002e06:	460b      	mov	r3, r1
 8002e08:	ed9f 1b2b 	vldr	d1, [pc, #172]	; 8002eb8 <valorRMS+0xd8>
 8002e0c:	ec43 2b10 	vmov	d0, r2, r3
 8002e10:	f005 faa6 	bl	8008360 <pow>
 8002e14:	ec55 4b10 	vmov	r4, r5, d0
 8002e18:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 8002e1c:	4618      	mov	r0, r3
 8002e1e:	f7fd fb79 	bl	8000514 <__aeabi_i2d>
 8002e22:	4602      	mov	r2, r0
 8002e24:	460b      	mov	r3, r1
 8002e26:	4620      	mov	r0, r4
 8002e28:	4629      	mov	r1, r5
 8002e2a:	f7fd fa27 	bl	800027c <__adddf3>
 8002e2e:	4602      	mov	r2, r0
 8002e30:	460b      	mov	r3, r1
 8002e32:	4610      	mov	r0, r2
 8002e34:	4619      	mov	r1, r3
 8002e36:	f7fd fe87 	bl	8000b48 <__aeabi_d2iz>
 8002e3a:	4603      	mov	r3, r0
 8002e3c:	82fb      	strh	r3, [r7, #22]
    for( i = 0;i<tam;i++){
 8002e3e:	693b      	ldr	r3, [r7, #16]
 8002e40:	3301      	adds	r3, #1
 8002e42:	613b      	str	r3, [r7, #16]
 8002e44:	693a      	ldr	r2, [r7, #16]
 8002e46:	683b      	ldr	r3, [r7, #0]
 8002e48:	429a      	cmp	r2, r3
 8002e4a:	dbd3      	blt.n	8002df4 <valorRMS+0x14>
    }
    med = (float) sum/i;
 8002e4c:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 8002e50:	ee07 3a90 	vmov	s15, r3
 8002e54:	eef8 6ae7 	vcvt.f32.s32	s13, s15
 8002e58:	693b      	ldr	r3, [r7, #16]
 8002e5a:	ee07 3a90 	vmov	s15, r3
 8002e5e:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8002e62:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8002e66:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8002e6a:	ee17 3a90 	vmov	r3, s15
 8002e6e:	81fb      	strh	r3, [r7, #14]
    valor_rms = sqrt(sum/i);
 8002e70:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 8002e74:	693b      	ldr	r3, [r7, #16]
 8002e76:	fb92 f3f3 	sdiv	r3, r2, r3
 8002e7a:	4618      	mov	r0, r3
 8002e7c:	f7fd fb4a 	bl	8000514 <__aeabi_i2d>
 8002e80:	4602      	mov	r2, r0
 8002e82:	460b      	mov	r3, r1
 8002e84:	ec43 2b10 	vmov	d0, r2, r3
 8002e88:	f005 fada 	bl	8008440 <sqrt>
 8002e8c:	ec53 2b10 	vmov	r2, r3, d0
 8002e90:	4610      	mov	r0, r2
 8002e92:	4619      	mov	r1, r3
 8002e94:	f7fd fe58 	bl	8000b48 <__aeabi_d2iz>
 8002e98:	4603      	mov	r3, r0
 8002e9a:	81bb      	strh	r3, [r7, #12]
    return valor_rms;
 8002e9c:	f9b7 300c 	ldrsh.w	r3, [r7, #12]
 8002ea0:	ee07 3a90 	vmov	s15, r3
 8002ea4:	eef8 7ae7 	vcvt.f32.s32	s15, s15
}
 8002ea8:	eeb0 0a67 	vmov.f32	s0, s15
 8002eac:	3718      	adds	r7, #24
 8002eae:	46bd      	mov	sp, r7
 8002eb0:	bdb0      	pop	{r4, r5, r7, pc}
 8002eb2:	bf00      	nop
 8002eb4:	f3af 8000 	nop.w
 8002eb8:	00000000 	.word	0x00000000
 8002ebc:	40000000 	.word	0x40000000

08002ec0 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Set stack pointer */
 8002ec0:	f8df d034 	ldr.w	sp, [pc, #52]	; 8002ef8 <LoopForever+0x2>

/* Call the clock system initialization function.*/
    bl  SystemInit
 8002ec4:	f7ff ff7a 	bl	8002dbc <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8002ec8:	480c      	ldr	r0, [pc, #48]	; (8002efc <LoopForever+0x6>)
  ldr r1, =_edata
 8002eca:	490d      	ldr	r1, [pc, #52]	; (8002f00 <LoopForever+0xa>)
  ldr r2, =_sidata
 8002ecc:	4a0d      	ldr	r2, [pc, #52]	; (8002f04 <LoopForever+0xe>)
  movs r3, #0
 8002ece:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8002ed0:	e002      	b.n	8002ed8 <LoopCopyDataInit>

08002ed2 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8002ed2:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8002ed4:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8002ed6:	3304      	adds	r3, #4

08002ed8 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8002ed8:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8002eda:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8002edc:	d3f9      	bcc.n	8002ed2 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8002ede:	4a0a      	ldr	r2, [pc, #40]	; (8002f08 <LoopForever+0x12>)
  ldr r4, =_ebss
 8002ee0:	4c0a      	ldr	r4, [pc, #40]	; (8002f0c <LoopForever+0x16>)
  movs r3, #0
 8002ee2:	2300      	movs	r3, #0
  b LoopFillZerobss
 8002ee4:	e001      	b.n	8002eea <LoopFillZerobss>

08002ee6 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8002ee6:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8002ee8:	3204      	adds	r2, #4

08002eea <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8002eea:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8002eec:	d3fb      	bcc.n	8002ee6 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8002eee:	f004 fd57 	bl	80079a0 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8002ef2:	f7fd ffd3 	bl	8000e9c <main>

08002ef6 <LoopForever>:

LoopForever:
    b LoopForever
 8002ef6:	e7fe      	b.n	8002ef6 <LoopForever>
  ldr   sp, =_estack    /* Set stack pointer */
 8002ef8:	20018000 	.word	0x20018000
  ldr r0, =_sdata
 8002efc:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8002f00:	200001e8 	.word	0x200001e8
  ldr r2, =_sidata
 8002f04:	080099d0 	.word	0x080099d0
  ldr r2, =_sbss
 8002f08:	200001e8 	.word	0x200001e8
  ldr r4, =_ebss
 8002f0c:	200011c4 	.word	0x200011c4

08002f10 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8002f10:	e7fe      	b.n	8002f10 <ADC1_2_IRQHandler>
	...

08002f14 <I2Cx_MspInit>:
  * @brief  Initializes I2C MSP.
  * @param  i2c_handler  I2C handler
  * @retval None
  */
static void I2Cx_MspInit(I2C_HandleTypeDef *i2c_handler)
{
 8002f14:	b580      	push	{r7, lr}
 8002f16:	b08a      	sub	sp, #40	; 0x28
 8002f18:	af00      	add	r7, sp, #0
 8002f1a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef  gpio_init_structure;

  /*** Configure the GPIOs ***/
  /* Enable GPIO clock */
  DISCOVERY_I2Cx_SCL_SDA_GPIO_CLK_ENABLE();
 8002f1c:	4b27      	ldr	r3, [pc, #156]	; (8002fbc <I2Cx_MspInit+0xa8>)
 8002f1e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002f20:	4a26      	ldr	r2, [pc, #152]	; (8002fbc <I2Cx_MspInit+0xa8>)
 8002f22:	f043 0302 	orr.w	r3, r3, #2
 8002f26:	64d3      	str	r3, [r2, #76]	; 0x4c
 8002f28:	4b24      	ldr	r3, [pc, #144]	; (8002fbc <I2Cx_MspInit+0xa8>)
 8002f2a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002f2c:	f003 0302 	and.w	r3, r3, #2
 8002f30:	613b      	str	r3, [r7, #16]
 8002f32:	693b      	ldr	r3, [r7, #16]

  /* Configure I2C Tx, Rx as alternate function */
  gpio_init_structure.Pin = DISCOVERY_I2Cx_SCL_PIN | DISCOVERY_I2Cx_SDA_PIN;
 8002f34:	f44f 6340 	mov.w	r3, #3072	; 0xc00
 8002f38:	617b      	str	r3, [r7, #20]
  gpio_init_structure.Mode = GPIO_MODE_AF_OD;
 8002f3a:	2312      	movs	r3, #18
 8002f3c:	61bb      	str	r3, [r7, #24]
  gpio_init_structure.Pull = GPIO_PULLUP;
 8002f3e:	2301      	movs	r3, #1
 8002f40:	61fb      	str	r3, [r7, #28]
  gpio_init_structure.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002f42:	2303      	movs	r3, #3
 8002f44:	623b      	str	r3, [r7, #32]
  gpio_init_structure.Alternate = DISCOVERY_I2Cx_SCL_SDA_AF;
 8002f46:	2304      	movs	r3, #4
 8002f48:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(DISCOVERY_I2Cx_SCL_SDA_GPIO_PORT, &gpio_init_structure);
 8002f4a:	f107 0314 	add.w	r3, r7, #20
 8002f4e:	4619      	mov	r1, r3
 8002f50:	481b      	ldr	r0, [pc, #108]	; (8002fc0 <I2Cx_MspInit+0xac>)
 8002f52:	f000 fe31 	bl	8003bb8 <HAL_GPIO_Init>

  HAL_GPIO_Init(DISCOVERY_I2Cx_SCL_SDA_GPIO_PORT, &gpio_init_structure);
 8002f56:	f107 0314 	add.w	r3, r7, #20
 8002f5a:	4619      	mov	r1, r3
 8002f5c:	4818      	ldr	r0, [pc, #96]	; (8002fc0 <I2Cx_MspInit+0xac>)
 8002f5e:	f000 fe2b 	bl	8003bb8 <HAL_GPIO_Init>

  /*** Configure the I2C peripheral ***/
  /* Enable I2C clock */
  DISCOVERY_I2Cx_CLK_ENABLE();
 8002f62:	4b16      	ldr	r3, [pc, #88]	; (8002fbc <I2Cx_MspInit+0xa8>)
 8002f64:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002f66:	4a15      	ldr	r2, [pc, #84]	; (8002fbc <I2Cx_MspInit+0xa8>)
 8002f68:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8002f6c:	6593      	str	r3, [r2, #88]	; 0x58
 8002f6e:	4b13      	ldr	r3, [pc, #76]	; (8002fbc <I2Cx_MspInit+0xa8>)
 8002f70:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002f72:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002f76:	60fb      	str	r3, [r7, #12]
 8002f78:	68fb      	ldr	r3, [r7, #12]

  /* Force the I2C peripheral clock reset */
  DISCOVERY_I2Cx_FORCE_RESET();
 8002f7a:	4b10      	ldr	r3, [pc, #64]	; (8002fbc <I2Cx_MspInit+0xa8>)
 8002f7c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002f7e:	4a0f      	ldr	r2, [pc, #60]	; (8002fbc <I2Cx_MspInit+0xa8>)
 8002f80:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8002f84:	6393      	str	r3, [r2, #56]	; 0x38

  /* Release the I2C peripheral clock reset */
  DISCOVERY_I2Cx_RELEASE_RESET();
 8002f86:	4b0d      	ldr	r3, [pc, #52]	; (8002fbc <I2Cx_MspInit+0xa8>)
 8002f88:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002f8a:	4a0c      	ldr	r2, [pc, #48]	; (8002fbc <I2Cx_MspInit+0xa8>)
 8002f8c:	f423 0380 	bic.w	r3, r3, #4194304	; 0x400000
 8002f90:	6393      	str	r3, [r2, #56]	; 0x38

  /* Enable and set I2Cx Interrupt to a lower priority */
  HAL_NVIC_SetPriority(DISCOVERY_I2Cx_EV_IRQn, 0x0F, 0);
 8002f92:	2200      	movs	r2, #0
 8002f94:	210f      	movs	r1, #15
 8002f96:	2021      	movs	r0, #33	; 0x21
 8002f98:	f000 fccb 	bl	8003932 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DISCOVERY_I2Cx_EV_IRQn);
 8002f9c:	2021      	movs	r0, #33	; 0x21
 8002f9e:	f000 fce4 	bl	800396a <HAL_NVIC_EnableIRQ>

  /* Enable and set I2Cx Interrupt to a lower priority */
  HAL_NVIC_SetPriority(DISCOVERY_I2Cx_ER_IRQn, 0x0F, 0);
 8002fa2:	2200      	movs	r2, #0
 8002fa4:	210f      	movs	r1, #15
 8002fa6:	2022      	movs	r0, #34	; 0x22
 8002fa8:	f000 fcc3 	bl	8003932 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DISCOVERY_I2Cx_ER_IRQn);
 8002fac:	2022      	movs	r0, #34	; 0x22
 8002fae:	f000 fcdc 	bl	800396a <HAL_NVIC_EnableIRQ>
}
 8002fb2:	bf00      	nop
 8002fb4:	3728      	adds	r7, #40	; 0x28
 8002fb6:	46bd      	mov	sp, r7
 8002fb8:	bd80      	pop	{r7, pc}
 8002fba:	bf00      	nop
 8002fbc:	40021000 	.word	0x40021000
 8002fc0:	48000400 	.word	0x48000400

08002fc4 <I2Cx_Init>:
  * @brief  Initializes I2C HAL.
  * @param  i2c_handler  I2C handler
  * @retval None
  */
static void I2Cx_Init(I2C_HandleTypeDef *i2c_handler)
{
 8002fc4:	b580      	push	{r7, lr}
 8002fc6:	b082      	sub	sp, #8
 8002fc8:	af00      	add	r7, sp, #0
 8002fca:	6078      	str	r0, [r7, #4]
  /* I2C configuration */
  i2c_handler->Instance              = DISCOVERY_I2Cx;
 8002fcc:	687b      	ldr	r3, [r7, #4]
 8002fce:	4a12      	ldr	r2, [pc, #72]	; (8003018 <I2Cx_Init+0x54>)
 8002fd0:	601a      	str	r2, [r3, #0]
  i2c_handler->Init.Timing           = DISCOVERY_I2Cx_TIMING;
 8002fd2:	687b      	ldr	r3, [r7, #4]
 8002fd4:	4a11      	ldr	r2, [pc, #68]	; (800301c <I2Cx_Init+0x58>)
 8002fd6:	605a      	str	r2, [r3, #4]
  i2c_handler->Init.OwnAddress1      = 0;
 8002fd8:	687b      	ldr	r3, [r7, #4]
 8002fda:	2200      	movs	r2, #0
 8002fdc:	609a      	str	r2, [r3, #8]
  i2c_handler->Init.AddressingMode   = I2C_ADDRESSINGMODE_7BIT;
 8002fde:	687b      	ldr	r3, [r7, #4]
 8002fe0:	2201      	movs	r2, #1
 8002fe2:	60da      	str	r2, [r3, #12]
  i2c_handler->Init.DualAddressMode  = I2C_DUALADDRESS_DISABLE;
 8002fe4:	687b      	ldr	r3, [r7, #4]
 8002fe6:	2200      	movs	r2, #0
 8002fe8:	611a      	str	r2, [r3, #16]
  i2c_handler->Init.OwnAddress2      = 0;
 8002fea:	687b      	ldr	r3, [r7, #4]
 8002fec:	2200      	movs	r2, #0
 8002fee:	615a      	str	r2, [r3, #20]
  i2c_handler->Init.GeneralCallMode  = I2C_GENERALCALL_DISABLE;
 8002ff0:	687b      	ldr	r3, [r7, #4]
 8002ff2:	2200      	movs	r2, #0
 8002ff4:	61da      	str	r2, [r3, #28]
  i2c_handler->Init.NoStretchMode    = I2C_NOSTRETCH_DISABLE;
 8002ff6:	687b      	ldr	r3, [r7, #4]
 8002ff8:	2200      	movs	r2, #0
 8002ffa:	621a      	str	r2, [r3, #32]

  /* Init the I2C */
  I2Cx_MspInit(i2c_handler);
 8002ffc:	6878      	ldr	r0, [r7, #4]
 8002ffe:	f7ff ff89 	bl	8002f14 <I2Cx_MspInit>
  HAL_I2C_Init(i2c_handler);
 8003002:	6878      	ldr	r0, [r7, #4]
 8003004:	f001 f8a6 	bl	8004154 <HAL_I2C_Init>
  
  /**Configure Analogue filter */
  HAL_I2CEx_ConfigAnalogFilter(i2c_handler, I2C_ANALOGFILTER_ENABLE);  
 8003008:	2100      	movs	r1, #0
 800300a:	6878      	ldr	r0, [r7, #4]
 800300c:	f001 fe34 	bl	8004c78 <HAL_I2CEx_ConfigAnalogFilter>
}
 8003010:	bf00      	nop
 8003012:	3708      	adds	r7, #8
 8003014:	46bd      	mov	sp, r7
 8003016:	bd80      	pop	{r7, pc}
 8003018:	40005800 	.word	0x40005800
 800301c:	00702681 	.word	0x00702681

08003020 <I2Cx_ReadMultiple>:
  * @param  Buffer  Pointer to data buffer
  * @param  Length  Length of the data
  * @retval HAL status
  */
static HAL_StatusTypeDef I2Cx_ReadMultiple(I2C_HandleTypeDef *i2c_handler, uint8_t Addr, uint16_t Reg, uint16_t MemAddress, uint8_t *Buffer, uint16_t Length)
{
 8003020:	b580      	push	{r7, lr}
 8003022:	b08a      	sub	sp, #40	; 0x28
 8003024:	af04      	add	r7, sp, #16
 8003026:	60f8      	str	r0, [r7, #12]
 8003028:	4608      	mov	r0, r1
 800302a:	4611      	mov	r1, r2
 800302c:	461a      	mov	r2, r3
 800302e:	4603      	mov	r3, r0
 8003030:	72fb      	strb	r3, [r7, #11]
 8003032:	460b      	mov	r3, r1
 8003034:	813b      	strh	r3, [r7, #8]
 8003036:	4613      	mov	r3, r2
 8003038:	80fb      	strh	r3, [r7, #6]
  HAL_StatusTypeDef status = HAL_OK;
 800303a:	2300      	movs	r3, #0
 800303c:	75fb      	strb	r3, [r7, #23]

  status = HAL_I2C_Mem_Read(i2c_handler, Addr, (uint16_t)Reg, MemAddress, Buffer, Length, 1000);
 800303e:	7afb      	ldrb	r3, [r7, #11]
 8003040:	b299      	uxth	r1, r3
 8003042:	88f8      	ldrh	r0, [r7, #6]
 8003044:	893a      	ldrh	r2, [r7, #8]
 8003046:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800304a:	9302      	str	r3, [sp, #8]
 800304c:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800304e:	9301      	str	r3, [sp, #4]
 8003050:	6a3b      	ldr	r3, [r7, #32]
 8003052:	9300      	str	r3, [sp, #0]
 8003054:	4603      	mov	r3, r0
 8003056:	68f8      	ldr	r0, [r7, #12]
 8003058:	f001 fa4e 	bl	80044f8 <HAL_I2C_Mem_Read>
 800305c:	4603      	mov	r3, r0
 800305e:	75fb      	strb	r3, [r7, #23]

  /* Check the communication status */
  if(status != HAL_OK)
 8003060:	7dfb      	ldrb	r3, [r7, #23]
 8003062:	2b00      	cmp	r3, #0
 8003064:	d004      	beq.n	8003070 <I2Cx_ReadMultiple+0x50>
  {
    /* I2C error occurred */
    I2Cx_Error(i2c_handler, Addr);
 8003066:	7afb      	ldrb	r3, [r7, #11]
 8003068:	4619      	mov	r1, r3
 800306a:	68f8      	ldr	r0, [r7, #12]
 800306c:	f000 f832 	bl	80030d4 <I2Cx_Error>
  }
  return status;
 8003070:	7dfb      	ldrb	r3, [r7, #23]
}
 8003072:	4618      	mov	r0, r3
 8003074:	3718      	adds	r7, #24
 8003076:	46bd      	mov	sp, r7
 8003078:	bd80      	pop	{r7, pc}

0800307a <I2Cx_WriteMultiple>:
  * @param  Buffer  The target register value to be written
  * @param  Length  buffer size to be written
  * @retval HAL status
  */
static HAL_StatusTypeDef I2Cx_WriteMultiple(I2C_HandleTypeDef *i2c_handler, uint8_t Addr, uint16_t Reg, uint16_t MemAddress, uint8_t *Buffer, uint16_t Length)
{
 800307a:	b580      	push	{r7, lr}
 800307c:	b08a      	sub	sp, #40	; 0x28
 800307e:	af04      	add	r7, sp, #16
 8003080:	60f8      	str	r0, [r7, #12]
 8003082:	4608      	mov	r0, r1
 8003084:	4611      	mov	r1, r2
 8003086:	461a      	mov	r2, r3
 8003088:	4603      	mov	r3, r0
 800308a:	72fb      	strb	r3, [r7, #11]
 800308c:	460b      	mov	r3, r1
 800308e:	813b      	strh	r3, [r7, #8]
 8003090:	4613      	mov	r3, r2
 8003092:	80fb      	strh	r3, [r7, #6]
  HAL_StatusTypeDef status = HAL_OK;
 8003094:	2300      	movs	r3, #0
 8003096:	75fb      	strb	r3, [r7, #23]

  status = HAL_I2C_Mem_Write(i2c_handler, Addr, (uint16_t)Reg, MemAddress, Buffer, Length, 1000);
 8003098:	7afb      	ldrb	r3, [r7, #11]
 800309a:	b299      	uxth	r1, r3
 800309c:	88f8      	ldrh	r0, [r7, #6]
 800309e:	893a      	ldrh	r2, [r7, #8]
 80030a0:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80030a4:	9302      	str	r3, [sp, #8]
 80030a6:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 80030a8:	9301      	str	r3, [sp, #4]
 80030aa:	6a3b      	ldr	r3, [r7, #32]
 80030ac:	9300      	str	r3, [sp, #0]
 80030ae:	4603      	mov	r3, r0
 80030b0:	68f8      	ldr	r0, [r7, #12]
 80030b2:	f001 f90d 	bl	80042d0 <HAL_I2C_Mem_Write>
 80030b6:	4603      	mov	r3, r0
 80030b8:	75fb      	strb	r3, [r7, #23]

  /* Check the communication status */
  if(status != HAL_OK)
 80030ba:	7dfb      	ldrb	r3, [r7, #23]
 80030bc:	2b00      	cmp	r3, #0
 80030be:	d004      	beq.n	80030ca <I2Cx_WriteMultiple+0x50>
  {
    /* Re-Initiaize the I2C Bus */
    I2Cx_Error(i2c_handler, Addr);
 80030c0:	7afb      	ldrb	r3, [r7, #11]
 80030c2:	4619      	mov	r1, r3
 80030c4:	68f8      	ldr	r0, [r7, #12]
 80030c6:	f000 f805 	bl	80030d4 <I2Cx_Error>
  }
  return status;
 80030ca:	7dfb      	ldrb	r3, [r7, #23]
}
 80030cc:	4618      	mov	r0, r3
 80030ce:	3718      	adds	r7, #24
 80030d0:	46bd      	mov	sp, r7
 80030d2:	bd80      	pop	{r7, pc}

080030d4 <I2Cx_Error>:
  * @param  i2c_handler  I2C handler
  * @param  Addr  I2C Address
  * @retval None
  */
static void I2Cx_Error(I2C_HandleTypeDef *i2c_handler, uint8_t Addr)
{
 80030d4:	b580      	push	{r7, lr}
 80030d6:	b082      	sub	sp, #8
 80030d8:	af00      	add	r7, sp, #0
 80030da:	6078      	str	r0, [r7, #4]
 80030dc:	460b      	mov	r3, r1
 80030de:	70fb      	strb	r3, [r7, #3]
  /* De-initialize the I2C communication bus */
  HAL_I2C_DeInit(i2c_handler);
 80030e0:	6878      	ldr	r0, [r7, #4]
 80030e2:	f001 f8c6 	bl	8004272 <HAL_I2C_DeInit>
  
  /* Re-Initialize the I2C communication bus */
  I2Cx_Init(i2c_handler);
 80030e6:	6878      	ldr	r0, [r7, #4]
 80030e8:	f7ff ff6c 	bl	8002fc4 <I2Cx_Init>
}
 80030ec:	bf00      	nop
 80030ee:	3708      	adds	r7, #8
 80030f0:	46bd      	mov	sp, r7
 80030f2:	bd80      	pop	{r7, pc}

080030f4 <SENSOR_IO_Init>:
/**
  * @brief  Initializes Sensors low level.
  * @retval None
  */
void SENSOR_IO_Init(void)
{
 80030f4:	b580      	push	{r7, lr}
 80030f6:	af00      	add	r7, sp, #0
  I2Cx_Init(&hI2cHandler);
 80030f8:	4802      	ldr	r0, [pc, #8]	; (8003104 <SENSOR_IO_Init+0x10>)
 80030fa:	f7ff ff63 	bl	8002fc4 <I2Cx_Init>
}
 80030fe:	bf00      	nop
 8003100:	bd80      	pop	{r7, pc}
 8003102:	bf00      	nop
 8003104:	20001130 	.word	0x20001130

08003108 <SENSOR_IO_Write>:
  * @param  Reg  Reg address
  * @param  Value  Data to be written
  * @retval None
  */
void SENSOR_IO_Write(uint8_t Addr, uint8_t Reg, uint8_t Value)
{
 8003108:	b580      	push	{r7, lr}
 800310a:	b084      	sub	sp, #16
 800310c:	af02      	add	r7, sp, #8
 800310e:	4603      	mov	r3, r0
 8003110:	71fb      	strb	r3, [r7, #7]
 8003112:	460b      	mov	r3, r1
 8003114:	71bb      	strb	r3, [r7, #6]
 8003116:	4613      	mov	r3, r2
 8003118:	717b      	strb	r3, [r7, #5]
  I2Cx_WriteMultiple(&hI2cHandler, Addr, (uint16_t)Reg, I2C_MEMADD_SIZE_8BIT,(uint8_t*)&Value, 1);
 800311a:	79bb      	ldrb	r3, [r7, #6]
 800311c:	b29a      	uxth	r2, r3
 800311e:	79f9      	ldrb	r1, [r7, #7]
 8003120:	2301      	movs	r3, #1
 8003122:	9301      	str	r3, [sp, #4]
 8003124:	1d7b      	adds	r3, r7, #5
 8003126:	9300      	str	r3, [sp, #0]
 8003128:	2301      	movs	r3, #1
 800312a:	4803      	ldr	r0, [pc, #12]	; (8003138 <SENSOR_IO_Write+0x30>)
 800312c:	f7ff ffa5 	bl	800307a <I2Cx_WriteMultiple>
}
 8003130:	bf00      	nop
 8003132:	3708      	adds	r7, #8
 8003134:	46bd      	mov	sp, r7
 8003136:	bd80      	pop	{r7, pc}
 8003138:	20001130 	.word	0x20001130

0800313c <SENSOR_IO_Read>:
  * @param  Addr  I2C address
  * @param  Reg  Reg address
  * @retval Data to be read
  */
uint8_t SENSOR_IO_Read(uint8_t Addr, uint8_t Reg)
{
 800313c:	b580      	push	{r7, lr}
 800313e:	b086      	sub	sp, #24
 8003140:	af02      	add	r7, sp, #8
 8003142:	4603      	mov	r3, r0
 8003144:	460a      	mov	r2, r1
 8003146:	71fb      	strb	r3, [r7, #7]
 8003148:	4613      	mov	r3, r2
 800314a:	71bb      	strb	r3, [r7, #6]
  uint8_t read_value = 0;
 800314c:	2300      	movs	r3, #0
 800314e:	73fb      	strb	r3, [r7, #15]

  I2Cx_ReadMultiple(&hI2cHandler, Addr, Reg, I2C_MEMADD_SIZE_8BIT, (uint8_t*)&read_value, 1);
 8003150:	79bb      	ldrb	r3, [r7, #6]
 8003152:	b29a      	uxth	r2, r3
 8003154:	79f9      	ldrb	r1, [r7, #7]
 8003156:	2301      	movs	r3, #1
 8003158:	9301      	str	r3, [sp, #4]
 800315a:	f107 030f 	add.w	r3, r7, #15
 800315e:	9300      	str	r3, [sp, #0]
 8003160:	2301      	movs	r3, #1
 8003162:	4804      	ldr	r0, [pc, #16]	; (8003174 <SENSOR_IO_Read+0x38>)
 8003164:	f7ff ff5c 	bl	8003020 <I2Cx_ReadMultiple>

  return read_value;
 8003168:	7bfb      	ldrb	r3, [r7, #15]
}
 800316a:	4618      	mov	r0, r3
 800316c:	3710      	adds	r7, #16
 800316e:	46bd      	mov	sp, r7
 8003170:	bd80      	pop	{r7, pc}
 8003172:	bf00      	nop
 8003174:	20001130 	.word	0x20001130

08003178 <SENSOR_IO_ReadMultiple>:
  * @param  Buffer  Pointer to data buffer
  * @param  Length  Length of the data
  * @retval HAL status
  */
uint16_t SENSOR_IO_ReadMultiple(uint8_t Addr, uint8_t Reg, uint8_t *Buffer, uint16_t Length)
{
 8003178:	b580      	push	{r7, lr}
 800317a:	b084      	sub	sp, #16
 800317c:	af02      	add	r7, sp, #8
 800317e:	603a      	str	r2, [r7, #0]
 8003180:	461a      	mov	r2, r3
 8003182:	4603      	mov	r3, r0
 8003184:	71fb      	strb	r3, [r7, #7]
 8003186:	460b      	mov	r3, r1
 8003188:	71bb      	strb	r3, [r7, #6]
 800318a:	4613      	mov	r3, r2
 800318c:	80bb      	strh	r3, [r7, #4]
 return I2Cx_ReadMultiple(&hI2cHandler, Addr, (uint16_t)Reg, I2C_MEMADD_SIZE_8BIT, Buffer, Length);
 800318e:	79bb      	ldrb	r3, [r7, #6]
 8003190:	b29a      	uxth	r2, r3
 8003192:	79f9      	ldrb	r1, [r7, #7]
 8003194:	88bb      	ldrh	r3, [r7, #4]
 8003196:	9301      	str	r3, [sp, #4]
 8003198:	683b      	ldr	r3, [r7, #0]
 800319a:	9300      	str	r3, [sp, #0]
 800319c:	2301      	movs	r3, #1
 800319e:	4804      	ldr	r0, [pc, #16]	; (80031b0 <SENSOR_IO_ReadMultiple+0x38>)
 80031a0:	f7ff ff3e 	bl	8003020 <I2Cx_ReadMultiple>
 80031a4:	4603      	mov	r3, r0
 80031a6:	b29b      	uxth	r3, r3
}
 80031a8:	4618      	mov	r0, r3
 80031aa:	3708      	adds	r7, #8
 80031ac:	46bd      	mov	sp, r7
 80031ae:	bd80      	pop	{r7, pc}
 80031b0:	20001130 	.word	0x20001130

080031b4 <BSP_ACCELERO_Init>:
/**
  * @brief  Initialize the ACCELERO.
  * @retval ACCELERO_OK or ACCELERO_ERROR
  */
ACCELERO_StatusTypeDef BSP_ACCELERO_Init(void)
{  
 80031b4:	b580      	push	{r7, lr}
 80031b6:	b084      	sub	sp, #16
 80031b8:	af00      	add	r7, sp, #0
  ACCELERO_StatusTypeDef ret = ACCELERO_OK;
 80031ba:	2300      	movs	r3, #0
 80031bc:	73fb      	strb	r3, [r7, #15]
  uint16_t ctrl = 0x0000;
 80031be:	2300      	movs	r3, #0
 80031c0:	81bb      	strh	r3, [r7, #12]
  ACCELERO_InitTypeDef LSM6DSL_InitStructure;

  if(Lsm6dslAccDrv.ReadID() != LSM6DSL_ACC_GYRO_WHO_AM_I)
 80031c2:	4b19      	ldr	r3, [pc, #100]	; (8003228 <BSP_ACCELERO_Init+0x74>)
 80031c4:	689b      	ldr	r3, [r3, #8]
 80031c6:	4798      	blx	r3
 80031c8:	4603      	mov	r3, r0
 80031ca:	2b6a      	cmp	r3, #106	; 0x6a
 80031cc:	d002      	beq.n	80031d4 <BSP_ACCELERO_Init+0x20>
  {
    ret = ACCELERO_ERROR;
 80031ce:	2301      	movs	r3, #1
 80031d0:	73fb      	strb	r3, [r7, #15]
 80031d2:	e024      	b.n	800321e <BSP_ACCELERO_Init+0x6a>
  }
  else
  {
    /* Initialize the ACCELERO accelerometer driver structure */
    AccelerometerDrv = &Lsm6dslAccDrv;
 80031d4:	4b15      	ldr	r3, [pc, #84]	; (800322c <BSP_ACCELERO_Init+0x78>)
 80031d6:	4a14      	ldr	r2, [pc, #80]	; (8003228 <BSP_ACCELERO_Init+0x74>)
 80031d8:	601a      	str	r2, [r3, #0]
  
    /* MEMS configuration ------------------------------------------------------*/
    /* Fill the ACCELERO accelerometer structure */
    LSM6DSL_InitStructure.AccOutput_DataRate = LSM6DSL_ODR_52Hz;
 80031da:	2330      	movs	r3, #48	; 0x30
 80031dc:	717b      	strb	r3, [r7, #5]
    LSM6DSL_InitStructure.Axes_Enable = 0;
 80031de:	2300      	movs	r3, #0
 80031e0:	71bb      	strb	r3, [r7, #6]
    LSM6DSL_InitStructure.AccFull_Scale = LSM6DSL_ACC_FULLSCALE_2G;
 80031e2:	2300      	movs	r3, #0
 80031e4:	72bb      	strb	r3, [r7, #10]
    LSM6DSL_InitStructure.BlockData_Update = LSM6DSL_BDU_BLOCK_UPDATE;
 80031e6:	2340      	movs	r3, #64	; 0x40
 80031e8:	723b      	strb	r3, [r7, #8]
    LSM6DSL_InitStructure.High_Resolution = 0;
 80031ea:	2300      	movs	r3, #0
 80031ec:	71fb      	strb	r3, [r7, #7]
    LSM6DSL_InitStructure.Communication_Mode = 0;
 80031ee:	2300      	movs	r3, #0
 80031f0:	72fb      	strb	r3, [r7, #11]
        
    /* Configure MEMS: data rate, full scale  */
    ctrl =  (LSM6DSL_InitStructure.AccOutput_DataRate | LSM6DSL_InitStructure.AccFull_Scale);
 80031f2:	797a      	ldrb	r2, [r7, #5]
 80031f4:	7abb      	ldrb	r3, [r7, #10]
 80031f6:	4313      	orrs	r3, r2
 80031f8:	b2db      	uxtb	r3, r3
 80031fa:	81bb      	strh	r3, [r7, #12]
    
    /* Configure MEMS: BDU and Auto-increment for multi read/write */
    ctrl |= ((LSM6DSL_InitStructure.BlockData_Update | LSM6DSL_ACC_GYRO_IF_INC_ENABLED) << 8);
 80031fc:	7a3b      	ldrb	r3, [r7, #8]
 80031fe:	f043 0304 	orr.w	r3, r3, #4
 8003202:	b2db      	uxtb	r3, r3
 8003204:	021b      	lsls	r3, r3, #8
 8003206:	b21a      	sxth	r2, r3
 8003208:	f9b7 300c 	ldrsh.w	r3, [r7, #12]
 800320c:	4313      	orrs	r3, r2
 800320e:	b21b      	sxth	r3, r3
 8003210:	81bb      	strh	r3, [r7, #12]

    /* Configure the ACCELERO accelerometer main parameters */
    AccelerometerDrv->Init(ctrl);
 8003212:	4b06      	ldr	r3, [pc, #24]	; (800322c <BSP_ACCELERO_Init+0x78>)
 8003214:	681b      	ldr	r3, [r3, #0]
 8003216:	681b      	ldr	r3, [r3, #0]
 8003218:	89ba      	ldrh	r2, [r7, #12]
 800321a:	4610      	mov	r0, r2
 800321c:	4798      	blx	r3
  }  

  return ret;
 800321e:	7bfb      	ldrb	r3, [r7, #15]
}
 8003220:	4618      	mov	r0, r3
 8003222:	3710      	adds	r7, #16
 8003224:	46bd      	mov	sp, r7
 8003226:	bd80      	pop	{r7, pc}
 8003228:	20000148 	.word	0x20000148
 800322c:	20001184 	.word	0x20001184

08003230 <BSP_ACCELERO_AccGetXYZ>:
  * @param  pDataXYZ Pointer on 3 angular accelerations table with  
  *                  pDataXYZ[0] = X axis, pDataXYZ[1] = Y axis, pDataXYZ[2] = Z axis
  * @retval None
  */
void BSP_ACCELERO_AccGetXYZ(int16_t *pDataXYZ)
{
 8003230:	b580      	push	{r7, lr}
 8003232:	b082      	sub	sp, #8
 8003234:	af00      	add	r7, sp, #0
 8003236:	6078      	str	r0, [r7, #4]
  if(AccelerometerDrv != NULL)
 8003238:	4b08      	ldr	r3, [pc, #32]	; (800325c <BSP_ACCELERO_AccGetXYZ+0x2c>)
 800323a:	681b      	ldr	r3, [r3, #0]
 800323c:	2b00      	cmp	r3, #0
 800323e:	d009      	beq.n	8003254 <BSP_ACCELERO_AccGetXYZ+0x24>
  {
    if(AccelerometerDrv->GetXYZ != NULL)
 8003240:	4b06      	ldr	r3, [pc, #24]	; (800325c <BSP_ACCELERO_AccGetXYZ+0x2c>)
 8003242:	681b      	ldr	r3, [r3, #0]
 8003244:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003246:	2b00      	cmp	r3, #0
 8003248:	d004      	beq.n	8003254 <BSP_ACCELERO_AccGetXYZ+0x24>
    {   
      AccelerometerDrv->GetXYZ(pDataXYZ);
 800324a:	4b04      	ldr	r3, [pc, #16]	; (800325c <BSP_ACCELERO_AccGetXYZ+0x2c>)
 800324c:	681b      	ldr	r3, [r3, #0]
 800324e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003250:	6878      	ldr	r0, [r7, #4]
 8003252:	4798      	blx	r3
    }
  }
}
 8003254:	bf00      	nop
 8003256:	3708      	adds	r7, #8
 8003258:	46bd      	mov	sp, r7
 800325a:	bd80      	pop	{r7, pc}
 800325c:	20001184 	.word	0x20001184

08003260 <BSP_TSENSOR_Init>:
/**
  * @brief  Initializes peripherals used by the I2C Temperature Sensor driver.
  * @retval TSENSOR status
  */
uint32_t BSP_TSENSOR_Init(void)
{  
 8003260:	b580      	push	{r7, lr}
 8003262:	b082      	sub	sp, #8
 8003264:	af00      	add	r7, sp, #0
  uint8_t ret = TSENSOR_ERROR;
 8003266:	2301      	movs	r3, #1
 8003268:	71fb      	strb	r3, [r7, #7]

#ifdef USE_LPS22HB_TEMP
  tsensor_drv = &LPS22HB_T_Drv;
#else /* USE_HTS221_TEMP */
  tsensor_drv = &HTS221_T_Drv; 
 800326a:	4b09      	ldr	r3, [pc, #36]	; (8003290 <BSP_TSENSOR_Init+0x30>)
 800326c:	4a09      	ldr	r2, [pc, #36]	; (8003294 <BSP_TSENSOR_Init+0x34>)
 800326e:	601a      	str	r2, [r3, #0]
#endif

  /* Low level init */
  SENSOR_IO_Init();
 8003270:	f7ff ff40 	bl	80030f4 <SENSOR_IO_Init>

  /* TSENSOR Init */   
  tsensor_drv->Init(TSENSOR_I2C_ADDRESS, NULL);
 8003274:	4b06      	ldr	r3, [pc, #24]	; (8003290 <BSP_TSENSOR_Init+0x30>)
 8003276:	681b      	ldr	r3, [r3, #0]
 8003278:	681b      	ldr	r3, [r3, #0]
 800327a:	2100      	movs	r1, #0
 800327c:	20be      	movs	r0, #190	; 0xbe
 800327e:	4798      	blx	r3

  ret = TSENSOR_OK;
 8003280:	2300      	movs	r3, #0
 8003282:	71fb      	strb	r3, [r7, #7]
  
  return ret;
 8003284:	79fb      	ldrb	r3, [r7, #7]
}
 8003286:	4618      	mov	r0, r3
 8003288:	3708      	adds	r7, #8
 800328a:	46bd      	mov	sp, r7
 800328c:	bd80      	pop	{r7, pc}
 800328e:	bf00      	nop
 8003290:	20001188 	.word	0x20001188
 8003294:	20000138 	.word	0x20000138

08003298 <BSP_TSENSOR_ReadTemp>:
/**
  * @brief  Read Temperature register of TS751.
  * @retval STTS751 measured temperature value.
  */
float BSP_TSENSOR_ReadTemp(void)
{ 
 8003298:	b580      	push	{r7, lr}
 800329a:	af00      	add	r7, sp, #0
  return tsensor_drv->ReadTemp(TSENSOR_I2C_ADDRESS);
 800329c:	4b04      	ldr	r3, [pc, #16]	; (80032b0 <BSP_TSENSOR_ReadTemp+0x18>)
 800329e:	681b      	ldr	r3, [r3, #0]
 80032a0:	68db      	ldr	r3, [r3, #12]
 80032a2:	20be      	movs	r0, #190	; 0xbe
 80032a4:	4798      	blx	r3
 80032a6:	eef0 7a40 	vmov.f32	s15, s0
}
 80032aa:	eeb0 0a67 	vmov.f32	s0, s15
 80032ae:	bd80      	pop	{r7, pc}
 80032b0:	20001188 	.word	0x20001188

080032b4 <HTS221_T_Init>:
  * @param  DeviceAddr: I2C device address
  * @param  InitStruct: pointer to a TSENSOR_InitTypeDef structure 
  *         that contains the configuration setting for the HTS221.
  */
void HTS221_T_Init(uint16_t DeviceAddr, TSENSOR_InitTypeDef *pInitStruct)
{  
 80032b4:	b580      	push	{r7, lr}
 80032b6:	b084      	sub	sp, #16
 80032b8:	af00      	add	r7, sp, #0
 80032ba:	4603      	mov	r3, r0
 80032bc:	6039      	str	r1, [r7, #0]
 80032be:	80fb      	strh	r3, [r7, #6]
  uint8_t tmp;
  
  /* Read CTRL_REG1 */
  tmp = SENSOR_IO_Read(DeviceAddr, HTS221_CTRL_REG1);
 80032c0:	88fb      	ldrh	r3, [r7, #6]
 80032c2:	b2db      	uxtb	r3, r3
 80032c4:	2120      	movs	r1, #32
 80032c6:	4618      	mov	r0, r3
 80032c8:	f7ff ff38 	bl	800313c <SENSOR_IO_Read>
 80032cc:	4603      	mov	r3, r0
 80032ce:	73fb      	strb	r3, [r7, #15]
  
  /* Enable BDU */
  tmp &= ~HTS221_BDU_MASK;
 80032d0:	7bfb      	ldrb	r3, [r7, #15]
 80032d2:	f023 0304 	bic.w	r3, r3, #4
 80032d6:	73fb      	strb	r3, [r7, #15]
  tmp |= (1 << HTS221_BDU_BIT);
 80032d8:	7bfb      	ldrb	r3, [r7, #15]
 80032da:	f043 0304 	orr.w	r3, r3, #4
 80032de:	73fb      	strb	r3, [r7, #15]
  
  /* Set default ODR */
  tmp &= ~HTS221_ODR_MASK;
 80032e0:	7bfb      	ldrb	r3, [r7, #15]
 80032e2:	f023 0303 	bic.w	r3, r3, #3
 80032e6:	73fb      	strb	r3, [r7, #15]
  tmp |= (uint8_t)0x01; /* Set ODR to 1Hz */
 80032e8:	7bfb      	ldrb	r3, [r7, #15]
 80032ea:	f043 0301 	orr.w	r3, r3, #1
 80032ee:	73fb      	strb	r3, [r7, #15]
  
  /* Activate the device */
  tmp |= HTS221_PD_MASK;
 80032f0:	7bfb      	ldrb	r3, [r7, #15]
 80032f2:	f063 037f 	orn	r3, r3, #127	; 0x7f
 80032f6:	73fb      	strb	r3, [r7, #15]
  
  /* Apply settings to CTRL_REG1 */
  SENSOR_IO_Write(DeviceAddr, HTS221_CTRL_REG1, tmp);
 80032f8:	88fb      	ldrh	r3, [r7, #6]
 80032fa:	b2db      	uxtb	r3, r3
 80032fc:	7bfa      	ldrb	r2, [r7, #15]
 80032fe:	2120      	movs	r1, #32
 8003300:	4618      	mov	r0, r3
 8003302:	f7ff ff01 	bl	8003108 <SENSOR_IO_Write>
}
 8003306:	bf00      	nop
 8003308:	3710      	adds	r7, #16
 800330a:	46bd      	mov	sp, r7
 800330c:	bd80      	pop	{r7, pc}

0800330e <HTS221_T_ReadTemp>:
  * @brief  Read temperature value of HTS221
  * @param  DeviceAddr: I2C device address
  * @retval temperature value
  */
float HTS221_T_ReadTemp(uint16_t DeviceAddr)
{
 800330e:	b580      	push	{r7, lr}
 8003310:	b088      	sub	sp, #32
 8003312:	af00      	add	r7, sp, #0
 8003314:	4603      	mov	r3, r0
 8003316:	80fb      	strh	r3, [r7, #6]
  int16_t T0_out, T1_out, T_out, T0_degC_x8_u16, T1_degC_x8_u16;
  int16_t T0_degC, T1_degC;
  uint8_t buffer[4], tmp;
  float tmp_f;

  SENSOR_IO_ReadMultiple(DeviceAddr, (HTS221_T0_DEGC_X8 | 0x80), buffer, 2);
 8003318:	88fb      	ldrh	r3, [r7, #6]
 800331a:	b2d8      	uxtb	r0, r3
 800331c:	f107 0208 	add.w	r2, r7, #8
 8003320:	2302      	movs	r3, #2
 8003322:	21b2      	movs	r1, #178	; 0xb2
 8003324:	f7ff ff28 	bl	8003178 <SENSOR_IO_ReadMultiple>
  tmp = SENSOR_IO_Read(DeviceAddr, HTS221_T0_T1_DEGC_H2);
 8003328:	88fb      	ldrh	r3, [r7, #6]
 800332a:	b2db      	uxtb	r3, r3
 800332c:	2135      	movs	r1, #53	; 0x35
 800332e:	4618      	mov	r0, r3
 8003330:	f7ff ff04 	bl	800313c <SENSOR_IO_Read>
 8003334:	4603      	mov	r3, r0
 8003336:	77fb      	strb	r3, [r7, #31]

  T0_degC_x8_u16 = (((uint16_t)(tmp & 0x03)) << 8) | ((uint16_t)buffer[0]);
 8003338:	7ffb      	ldrb	r3, [r7, #31]
 800333a:	021b      	lsls	r3, r3, #8
 800333c:	b21b      	sxth	r3, r3
 800333e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003342:	b21a      	sxth	r2, r3
 8003344:	7a3b      	ldrb	r3, [r7, #8]
 8003346:	b21b      	sxth	r3, r3
 8003348:	4313      	orrs	r3, r2
 800334a:	83bb      	strh	r3, [r7, #28]
  T1_degC_x8_u16 = (((uint16_t)(tmp & 0x0C)) << 6) | ((uint16_t)buffer[1]);
 800334c:	7ffb      	ldrb	r3, [r7, #31]
 800334e:	019b      	lsls	r3, r3, #6
 8003350:	b21b      	sxth	r3, r3
 8003352:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003356:	b21a      	sxth	r2, r3
 8003358:	7a7b      	ldrb	r3, [r7, #9]
 800335a:	b21b      	sxth	r3, r3
 800335c:	4313      	orrs	r3, r2
 800335e:	837b      	strh	r3, [r7, #26]
  T0_degC = T0_degC_x8_u16 >> 3;
 8003360:	f9b7 301c 	ldrsh.w	r3, [r7, #28]
 8003364:	10db      	asrs	r3, r3, #3
 8003366:	833b      	strh	r3, [r7, #24]
  T1_degC = T1_degC_x8_u16 >> 3;
 8003368:	f9b7 301a 	ldrsh.w	r3, [r7, #26]
 800336c:	10db      	asrs	r3, r3, #3
 800336e:	82fb      	strh	r3, [r7, #22]

  SENSOR_IO_ReadMultiple(DeviceAddr, (HTS221_T0_OUT_L | 0x80), buffer, 4);
 8003370:	88fb      	ldrh	r3, [r7, #6]
 8003372:	b2d8      	uxtb	r0, r3
 8003374:	f107 0208 	add.w	r2, r7, #8
 8003378:	2304      	movs	r3, #4
 800337a:	21bc      	movs	r1, #188	; 0xbc
 800337c:	f7ff fefc 	bl	8003178 <SENSOR_IO_ReadMultiple>

  T0_out = (((uint16_t)buffer[1]) << 8) | (uint16_t)buffer[0];
 8003380:	7a7b      	ldrb	r3, [r7, #9]
 8003382:	021b      	lsls	r3, r3, #8
 8003384:	b21a      	sxth	r2, r3
 8003386:	7a3b      	ldrb	r3, [r7, #8]
 8003388:	b21b      	sxth	r3, r3
 800338a:	4313      	orrs	r3, r2
 800338c:	82bb      	strh	r3, [r7, #20]
  T1_out = (((uint16_t)buffer[3]) << 8) | (uint16_t)buffer[2];
 800338e:	7afb      	ldrb	r3, [r7, #11]
 8003390:	021b      	lsls	r3, r3, #8
 8003392:	b21a      	sxth	r2, r3
 8003394:	7abb      	ldrb	r3, [r7, #10]
 8003396:	b21b      	sxth	r3, r3
 8003398:	4313      	orrs	r3, r2
 800339a:	827b      	strh	r3, [r7, #18]

  SENSOR_IO_ReadMultiple(DeviceAddr, (HTS221_TEMP_OUT_L_REG | 0x80), buffer, 2);
 800339c:	88fb      	ldrh	r3, [r7, #6]
 800339e:	b2d8      	uxtb	r0, r3
 80033a0:	f107 0208 	add.w	r2, r7, #8
 80033a4:	2302      	movs	r3, #2
 80033a6:	21aa      	movs	r1, #170	; 0xaa
 80033a8:	f7ff fee6 	bl	8003178 <SENSOR_IO_ReadMultiple>

  T_out = (((uint16_t)buffer[1]) << 8) | (uint16_t)buffer[0];
 80033ac:	7a7b      	ldrb	r3, [r7, #9]
 80033ae:	021b      	lsls	r3, r3, #8
 80033b0:	b21a      	sxth	r2, r3
 80033b2:	7a3b      	ldrb	r3, [r7, #8]
 80033b4:	b21b      	sxth	r3, r3
 80033b6:	4313      	orrs	r3, r2
 80033b8:	823b      	strh	r3, [r7, #16]

  tmp_f = (float)(T_out - T0_out) * (float)(T1_degC - T0_degC) / (float)(T1_out - T0_out)  +  T0_degC;
 80033ba:	f9b7 2010 	ldrsh.w	r2, [r7, #16]
 80033be:	f9b7 3014 	ldrsh.w	r3, [r7, #20]
 80033c2:	1ad3      	subs	r3, r2, r3
 80033c4:	ee07 3a90 	vmov	s15, r3
 80033c8:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 80033cc:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 80033d0:	f9b7 3018 	ldrsh.w	r3, [r7, #24]
 80033d4:	1ad3      	subs	r3, r2, r3
 80033d6:	ee07 3a90 	vmov	s15, r3
 80033da:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80033de:	ee67 6a27 	vmul.f32	s13, s14, s15
 80033e2:	f9b7 2012 	ldrsh.w	r2, [r7, #18]
 80033e6:	f9b7 3014 	ldrsh.w	r3, [r7, #20]
 80033ea:	1ad3      	subs	r3, r2, r3
 80033ec:	ee07 3a90 	vmov	s15, r3
 80033f0:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80033f4:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80033f8:	f9b7 3018 	ldrsh.w	r3, [r7, #24]
 80033fc:	ee07 3a90 	vmov	s15, r3
 8003400:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8003404:	ee77 7a27 	vadd.f32	s15, s14, s15
 8003408:	edc7 7a03 	vstr	s15, [r7, #12]

  return tmp_f;
 800340c:	68fb      	ldr	r3, [r7, #12]
 800340e:	ee07 3a90 	vmov	s15, r3
}
 8003412:	eeb0 0a67 	vmov.f32	s0, s15
 8003416:	3720      	adds	r7, #32
 8003418:	46bd      	mov	sp, r7
 800341a:	bd80      	pop	{r7, pc}

0800341c <LSM6DSL_AccInit>:
/**
  * @brief  Set LSM6DSL Accelerometer Initialization.
  * @param  InitStruct: Init parameters
  */
void LSM6DSL_AccInit(uint16_t InitStruct)
{  
 800341c:	b580      	push	{r7, lr}
 800341e:	b084      	sub	sp, #16
 8003420:	af00      	add	r7, sp, #0
 8003422:	4603      	mov	r3, r0
 8003424:	80fb      	strh	r3, [r7, #6]
  uint8_t ctrl = 0x00;
 8003426:	2300      	movs	r3, #0
 8003428:	73fb      	strb	r3, [r7, #15]
  uint8_t tmp;

  /* Read CTRL1_XL */
  tmp = SENSOR_IO_Read(LSM6DSL_ACC_GYRO_I2C_ADDRESS_LOW, LSM6DSL_ACC_GYRO_CTRL1_XL);
 800342a:	2110      	movs	r1, #16
 800342c:	20d4      	movs	r0, #212	; 0xd4
 800342e:	f7ff fe85 	bl	800313c <SENSOR_IO_Read>
 8003432:	4603      	mov	r3, r0
 8003434:	73bb      	strb	r3, [r7, #14]

  /* Write value to ACC MEMS CTRL1_XL register: FS and Data Rate */
  ctrl = (uint8_t) InitStruct;
 8003436:	88fb      	ldrh	r3, [r7, #6]
 8003438:	73fb      	strb	r3, [r7, #15]
  tmp &= ~(0xFC);
 800343a:	7bbb      	ldrb	r3, [r7, #14]
 800343c:	f003 0303 	and.w	r3, r3, #3
 8003440:	73bb      	strb	r3, [r7, #14]
  tmp |= ctrl;
 8003442:	7bba      	ldrb	r2, [r7, #14]
 8003444:	7bfb      	ldrb	r3, [r7, #15]
 8003446:	4313      	orrs	r3, r2
 8003448:	73bb      	strb	r3, [r7, #14]
  SENSOR_IO_Write(LSM6DSL_ACC_GYRO_I2C_ADDRESS_LOW, LSM6DSL_ACC_GYRO_CTRL1_XL, tmp);
 800344a:	7bbb      	ldrb	r3, [r7, #14]
 800344c:	461a      	mov	r2, r3
 800344e:	2110      	movs	r1, #16
 8003450:	20d4      	movs	r0, #212	; 0xd4
 8003452:	f7ff fe59 	bl	8003108 <SENSOR_IO_Write>

  /* Read CTRL3_C */
  tmp = SENSOR_IO_Read(LSM6DSL_ACC_GYRO_I2C_ADDRESS_LOW, LSM6DSL_ACC_GYRO_CTRL3_C);
 8003456:	2112      	movs	r1, #18
 8003458:	20d4      	movs	r0, #212	; 0xd4
 800345a:	f7ff fe6f 	bl	800313c <SENSOR_IO_Read>
 800345e:	4603      	mov	r3, r0
 8003460:	73bb      	strb	r3, [r7, #14]

  /* Write value to ACC MEMS CTRL3_C register: BDU and Auto-increment */
  ctrl = ((uint8_t) (InitStruct >> 8));
 8003462:	88fb      	ldrh	r3, [r7, #6]
 8003464:	0a1b      	lsrs	r3, r3, #8
 8003466:	b29b      	uxth	r3, r3
 8003468:	73fb      	strb	r3, [r7, #15]
  tmp &= ~(0x44);
 800346a:	7bbb      	ldrb	r3, [r7, #14]
 800346c:	f023 0344 	bic.w	r3, r3, #68	; 0x44
 8003470:	73bb      	strb	r3, [r7, #14]
  tmp |= ctrl; 
 8003472:	7bba      	ldrb	r2, [r7, #14]
 8003474:	7bfb      	ldrb	r3, [r7, #15]
 8003476:	4313      	orrs	r3, r2
 8003478:	73bb      	strb	r3, [r7, #14]
  SENSOR_IO_Write(LSM6DSL_ACC_GYRO_I2C_ADDRESS_LOW, LSM6DSL_ACC_GYRO_CTRL3_C, tmp);
 800347a:	7bbb      	ldrb	r3, [r7, #14]
 800347c:	461a      	mov	r2, r3
 800347e:	2112      	movs	r1, #18
 8003480:	20d4      	movs	r0, #212	; 0xd4
 8003482:	f7ff fe41 	bl	8003108 <SENSOR_IO_Write>
}
 8003486:	bf00      	nop
 8003488:	3710      	adds	r7, #16
 800348a:	46bd      	mov	sp, r7
 800348c:	bd80      	pop	{r7, pc}

0800348e <LSM6DSL_AccDeInit>:

/**
  * @brief  LSM6DSL Accelerometer De-initialization.
  */
void LSM6DSL_AccDeInit(void)
{
 800348e:	b580      	push	{r7, lr}
 8003490:	b082      	sub	sp, #8
 8003492:	af00      	add	r7, sp, #0
  uint8_t ctrl = 0x00;
 8003494:	2300      	movs	r3, #0
 8003496:	71fb      	strb	r3, [r7, #7]
  
  /* Read control register 1 value */
  ctrl = SENSOR_IO_Read(LSM6DSL_ACC_GYRO_I2C_ADDRESS_LOW, LSM6DSL_ACC_GYRO_CTRL1_XL);
 8003498:	2110      	movs	r1, #16
 800349a:	20d4      	movs	r0, #212	; 0xd4
 800349c:	f7ff fe4e 	bl	800313c <SENSOR_IO_Read>
 80034a0:	4603      	mov	r3, r0
 80034a2:	71fb      	strb	r3, [r7, #7]

  /* Clear ODR bits */
  ctrl &= ~(LSM6DSL_ODR_BITPOSITION);
 80034a4:	79fb      	ldrb	r3, [r7, #7]
 80034a6:	f003 030f 	and.w	r3, r3, #15
 80034aa:	71fb      	strb	r3, [r7, #7]

  /* Set Power down */
  ctrl |= LSM6DSL_ODR_POWER_DOWN;
  
  /* write back control register */
  SENSOR_IO_Write(LSM6DSL_ACC_GYRO_I2C_ADDRESS_LOW, LSM6DSL_ACC_GYRO_CTRL1_XL, ctrl);
 80034ac:	79fb      	ldrb	r3, [r7, #7]
 80034ae:	461a      	mov	r2, r3
 80034b0:	2110      	movs	r1, #16
 80034b2:	20d4      	movs	r0, #212	; 0xd4
 80034b4:	f7ff fe28 	bl	8003108 <SENSOR_IO_Write>
}
 80034b8:	bf00      	nop
 80034ba:	3708      	adds	r7, #8
 80034bc:	46bd      	mov	sp, r7
 80034be:	bd80      	pop	{r7, pc}

080034c0 <LSM6DSL_AccReadID>:
/**
  * @brief  Read LSM6DSL ID.
  * @retval ID 
  */
uint8_t LSM6DSL_AccReadID(void)
{  
 80034c0:	b580      	push	{r7, lr}
 80034c2:	af00      	add	r7, sp, #0
  /* IO interface initialization */
  SENSOR_IO_Init();
 80034c4:	f7ff fe16 	bl	80030f4 <SENSOR_IO_Init>
  /* Read value at Who am I register address */
  return (SENSOR_IO_Read(LSM6DSL_ACC_GYRO_I2C_ADDRESS_LOW, LSM6DSL_ACC_GYRO_WHO_AM_I_REG));
 80034c8:	210f      	movs	r1, #15
 80034ca:	20d4      	movs	r0, #212	; 0xd4
 80034cc:	f7ff fe36 	bl	800313c <SENSOR_IO_Read>
 80034d0:	4603      	mov	r3, r0
}
 80034d2:	4618      	mov	r0, r3
 80034d4:	bd80      	pop	{r7, pc}

080034d6 <LSM6DSL_AccLowPower>:
/**
  * @brief  Set/Unset Accelerometer in low power mode.
  * @param  status 0 means disable Low Power Mode, otherwise Low Power Mode is enabled
  */
void LSM6DSL_AccLowPower(uint16_t status)
{
 80034d6:	b580      	push	{r7, lr}
 80034d8:	b084      	sub	sp, #16
 80034da:	af00      	add	r7, sp, #0
 80034dc:	4603      	mov	r3, r0
 80034de:	80fb      	strh	r3, [r7, #6]
  uint8_t ctrl = 0x00;
 80034e0:	2300      	movs	r3, #0
 80034e2:	73fb      	strb	r3, [r7, #15]
  
  /* Read CTRL6_C value */
  ctrl = SENSOR_IO_Read(LSM6DSL_ACC_GYRO_I2C_ADDRESS_LOW, LSM6DSL_ACC_GYRO_CTRL6_C);
 80034e4:	2115      	movs	r1, #21
 80034e6:	20d4      	movs	r0, #212	; 0xd4
 80034e8:	f7ff fe28 	bl	800313c <SENSOR_IO_Read>
 80034ec:	4603      	mov	r3, r0
 80034ee:	73fb      	strb	r3, [r7, #15]

  /* Clear Low Power Mode bit */
  ctrl &= ~(0x10);
 80034f0:	7bfb      	ldrb	r3, [r7, #15]
 80034f2:	f023 0310 	bic.w	r3, r3, #16
 80034f6:	73fb      	strb	r3, [r7, #15]

  /* Set Low Power Mode */
  if(status)
 80034f8:	88fb      	ldrh	r3, [r7, #6]
 80034fa:	2b00      	cmp	r3, #0
 80034fc:	d003      	beq.n	8003506 <LSM6DSL_AccLowPower+0x30>
  {
    ctrl |= LSM6DSL_ACC_GYRO_LP_XL_ENABLED;
 80034fe:	7bfb      	ldrb	r3, [r7, #15]
 8003500:	f043 0310 	orr.w	r3, r3, #16
 8003504:	73fb      	strb	r3, [r7, #15]
  {
    ctrl |= LSM6DSL_ACC_GYRO_LP_XL_DISABLED;
  }
  
  /* write back control register */
  SENSOR_IO_Write(LSM6DSL_ACC_GYRO_I2C_ADDRESS_LOW, LSM6DSL_ACC_GYRO_CTRL6_C, ctrl);
 8003506:	7bfb      	ldrb	r3, [r7, #15]
 8003508:	461a      	mov	r2, r3
 800350a:	2115      	movs	r1, #21
 800350c:	20d4      	movs	r0, #212	; 0xd4
 800350e:	f7ff fdfb 	bl	8003108 <SENSOR_IO_Write>
}
 8003512:	bf00      	nop
 8003514:	3710      	adds	r7, #16
 8003516:	46bd      	mov	sp, r7
 8003518:	bd80      	pop	{r7, pc}
	...

0800351c <LSM6DSL_AccReadXYZ>:
/**
  * @brief  Read X, Y & Z Acceleration values 
  * @param  pData: Data out pointer
  */
void LSM6DSL_AccReadXYZ(int16_t* pData)
{
 800351c:	b580      	push	{r7, lr}
 800351e:	b088      	sub	sp, #32
 8003520:	af00      	add	r7, sp, #0
 8003522:	6078      	str	r0, [r7, #4]
  int16_t pnRawData[3];
  uint8_t ctrlx= 0;
 8003524:	2300      	movs	r3, #0
 8003526:	75fb      	strb	r3, [r7, #23]
  uint8_t buffer[6];
  uint8_t i = 0;
 8003528:	2300      	movs	r3, #0
 800352a:	77fb      	strb	r3, [r7, #31]
  float sensitivity = 0;
 800352c:	f04f 0300 	mov.w	r3, #0
 8003530:	61bb      	str	r3, [r7, #24]
  
  /* Read the acceleration control register content */
  ctrlx = SENSOR_IO_Read(LSM6DSL_ACC_GYRO_I2C_ADDRESS_LOW, LSM6DSL_ACC_GYRO_CTRL1_XL);
 8003532:	2110      	movs	r1, #16
 8003534:	20d4      	movs	r0, #212	; 0xd4
 8003536:	f7ff fe01 	bl	800313c <SENSOR_IO_Read>
 800353a:	4603      	mov	r3, r0
 800353c:	75fb      	strb	r3, [r7, #23]
  
  /* Read output register X, Y & Z acceleration */
  SENSOR_IO_ReadMultiple(LSM6DSL_ACC_GYRO_I2C_ADDRESS_LOW, LSM6DSL_ACC_GYRO_OUTX_L_XL, buffer, 6);
 800353e:	f107 0208 	add.w	r2, r7, #8
 8003542:	2306      	movs	r3, #6
 8003544:	2128      	movs	r1, #40	; 0x28
 8003546:	20d4      	movs	r0, #212	; 0xd4
 8003548:	f7ff fe16 	bl	8003178 <SENSOR_IO_ReadMultiple>
  
  for(i=0; i<3; i++)
 800354c:	2300      	movs	r3, #0
 800354e:	77fb      	strb	r3, [r7, #31]
 8003550:	e01c      	b.n	800358c <LSM6DSL_AccReadXYZ+0x70>
  {
    pnRawData[i]=((((uint16_t)buffer[2*i+1]) << 8) + (uint16_t)buffer[2*i]);
 8003552:	7ffb      	ldrb	r3, [r7, #31]
 8003554:	005b      	lsls	r3, r3, #1
 8003556:	3301      	adds	r3, #1
 8003558:	3320      	adds	r3, #32
 800355a:	443b      	add	r3, r7
 800355c:	f813 3c18 	ldrb.w	r3, [r3, #-24]
 8003560:	b29b      	uxth	r3, r3
 8003562:	021b      	lsls	r3, r3, #8
 8003564:	b29a      	uxth	r2, r3
 8003566:	7ffb      	ldrb	r3, [r7, #31]
 8003568:	005b      	lsls	r3, r3, #1
 800356a:	3320      	adds	r3, #32
 800356c:	443b      	add	r3, r7
 800356e:	f813 3c18 	ldrb.w	r3, [r3, #-24]
 8003572:	b29b      	uxth	r3, r3
 8003574:	4413      	add	r3, r2
 8003576:	b29a      	uxth	r2, r3
 8003578:	7ffb      	ldrb	r3, [r7, #31]
 800357a:	b212      	sxth	r2, r2
 800357c:	005b      	lsls	r3, r3, #1
 800357e:	3320      	adds	r3, #32
 8003580:	443b      	add	r3, r7
 8003582:	f823 2c10 	strh.w	r2, [r3, #-16]
  for(i=0; i<3; i++)
 8003586:	7ffb      	ldrb	r3, [r7, #31]
 8003588:	3301      	adds	r3, #1
 800358a:	77fb      	strb	r3, [r7, #31]
 800358c:	7ffb      	ldrb	r3, [r7, #31]
 800358e:	2b02      	cmp	r3, #2
 8003590:	d9df      	bls.n	8003552 <LSM6DSL_AccReadXYZ+0x36>
  }
  
  /* Normal mode */
  /* Switch the sensitivity value set in the CRTL1_XL */
  switch(ctrlx & 0x0C)
 8003592:	7dfb      	ldrb	r3, [r7, #23]
 8003594:	f003 030c 	and.w	r3, r3, #12
 8003598:	2b0c      	cmp	r3, #12
 800359a:	d829      	bhi.n	80035f0 <LSM6DSL_AccReadXYZ+0xd4>
 800359c:	a201      	add	r2, pc, #4	; (adr r2, 80035a4 <LSM6DSL_AccReadXYZ+0x88>)
 800359e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80035a2:	bf00      	nop
 80035a4:	080035d9 	.word	0x080035d9
 80035a8:	080035f1 	.word	0x080035f1
 80035ac:	080035f1 	.word	0x080035f1
 80035b0:	080035f1 	.word	0x080035f1
 80035b4:	080035eb 	.word	0x080035eb
 80035b8:	080035f1 	.word	0x080035f1
 80035bc:	080035f1 	.word	0x080035f1
 80035c0:	080035f1 	.word	0x080035f1
 80035c4:	080035df 	.word	0x080035df
 80035c8:	080035f1 	.word	0x080035f1
 80035cc:	080035f1 	.word	0x080035f1
 80035d0:	080035f1 	.word	0x080035f1
 80035d4:	080035e5 	.word	0x080035e5
  {
  case LSM6DSL_ACC_FULLSCALE_2G:
    sensitivity = LSM6DSL_ACC_SENSITIVITY_2G;
 80035d8:	4b18      	ldr	r3, [pc, #96]	; (800363c <LSM6DSL_AccReadXYZ+0x120>)
 80035da:	61bb      	str	r3, [r7, #24]
    break;
 80035dc:	e008      	b.n	80035f0 <LSM6DSL_AccReadXYZ+0xd4>
  case LSM6DSL_ACC_FULLSCALE_4G:
    sensitivity = LSM6DSL_ACC_SENSITIVITY_4G;
 80035de:	4b18      	ldr	r3, [pc, #96]	; (8003640 <LSM6DSL_AccReadXYZ+0x124>)
 80035e0:	61bb      	str	r3, [r7, #24]
    break;
 80035e2:	e005      	b.n	80035f0 <LSM6DSL_AccReadXYZ+0xd4>
  case LSM6DSL_ACC_FULLSCALE_8G:
    sensitivity = LSM6DSL_ACC_SENSITIVITY_8G;
 80035e4:	4b17      	ldr	r3, [pc, #92]	; (8003644 <LSM6DSL_AccReadXYZ+0x128>)
 80035e6:	61bb      	str	r3, [r7, #24]
    break;
 80035e8:	e002      	b.n	80035f0 <LSM6DSL_AccReadXYZ+0xd4>
  case LSM6DSL_ACC_FULLSCALE_16G:
    sensitivity = LSM6DSL_ACC_SENSITIVITY_16G;
 80035ea:	4b17      	ldr	r3, [pc, #92]	; (8003648 <LSM6DSL_AccReadXYZ+0x12c>)
 80035ec:	61bb      	str	r3, [r7, #24]
    break;    
 80035ee:	bf00      	nop
  }
  
  /* Obtain the mg value for the three axis */
  for(i=0; i<3; i++)
 80035f0:	2300      	movs	r3, #0
 80035f2:	77fb      	strb	r3, [r7, #31]
 80035f4:	e01a      	b.n	800362c <LSM6DSL_AccReadXYZ+0x110>
  {
    pData[i]=( int16_t )(pnRawData[i] * sensitivity);
 80035f6:	7ffb      	ldrb	r3, [r7, #31]
 80035f8:	005b      	lsls	r3, r3, #1
 80035fa:	3320      	adds	r3, #32
 80035fc:	443b      	add	r3, r7
 80035fe:	f933 3c10 	ldrsh.w	r3, [r3, #-16]
 8003602:	ee07 3a90 	vmov	s15, r3
 8003606:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 800360a:	edd7 7a06 	vldr	s15, [r7, #24]
 800360e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8003612:	7ffb      	ldrb	r3, [r7, #31]
 8003614:	005b      	lsls	r3, r3, #1
 8003616:	687a      	ldr	r2, [r7, #4]
 8003618:	4413      	add	r3, r2
 800361a:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800361e:	ee17 2a90 	vmov	r2, s15
 8003622:	b212      	sxth	r2, r2
 8003624:	801a      	strh	r2, [r3, #0]
  for(i=0; i<3; i++)
 8003626:	7ffb      	ldrb	r3, [r7, #31]
 8003628:	3301      	adds	r3, #1
 800362a:	77fb      	strb	r3, [r7, #31]
 800362c:	7ffb      	ldrb	r3, [r7, #31]
 800362e:	2b02      	cmp	r3, #2
 8003630:	d9e1      	bls.n	80035f6 <LSM6DSL_AccReadXYZ+0xda>
  }
}
 8003632:	bf00      	nop
 8003634:	bf00      	nop
 8003636:	3720      	adds	r7, #32
 8003638:	46bd      	mov	sp, r7
 800363a:	bd80      	pop	{r7, pc}
 800363c:	3d79db23 	.word	0x3d79db23
 8003640:	3df9db23 	.word	0x3df9db23
 8003644:	3e79db23 	.word	0x3e79db23
 8003648:	3ef9db23 	.word	0x3ef9db23

0800364c <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 800364c:	b580      	push	{r7, lr}
 800364e:	b082      	sub	sp, #8
 8003650:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8003652:	2300      	movs	r3, #0
 8003654:	71fb      	strb	r3, [r7, #7]
#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8003656:	2003      	movs	r0, #3
 8003658:	f000 f960 	bl	800391c <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 800365c:	2000      	movs	r0, #0
 800365e:	f000 f80d 	bl	800367c <HAL_InitTick>
 8003662:	4603      	mov	r3, r0
 8003664:	2b00      	cmp	r3, #0
 8003666:	d002      	beq.n	800366e <HAL_Init+0x22>
  {
    status = HAL_ERROR;
 8003668:	2301      	movs	r3, #1
 800366a:	71fb      	strb	r3, [r7, #7]
 800366c:	e001      	b.n	8003672 <HAL_Init+0x26>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 800366e:	f7fe ffab 	bl	80025c8 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8003672:	79fb      	ldrb	r3, [r7, #7]
}
 8003674:	4618      	mov	r0, r3
 8003676:	3708      	adds	r7, #8
 8003678:	46bd      	mov	sp, r7
 800367a:	bd80      	pop	{r7, pc}

0800367c <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority  Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 800367c:	b580      	push	{r7, lr}
 800367e:	b084      	sub	sp, #16
 8003680:	af00      	add	r7, sp, #0
 8003682:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 8003684:	2300      	movs	r3, #0
 8003686:	73fb      	strb	r3, [r7, #15]

  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that doesn't take the value zero)*/
  if ((uint32_t)uwTickFreq != 0U)
 8003688:	4b17      	ldr	r3, [pc, #92]	; (80036e8 <HAL_InitTick+0x6c>)
 800368a:	781b      	ldrb	r3, [r3, #0]
 800368c:	2b00      	cmp	r3, #0
 800368e:	d023      	beq.n	80036d8 <HAL_InitTick+0x5c>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / (uint32_t)uwTickFreq)) == 0U)
 8003690:	4b16      	ldr	r3, [pc, #88]	; (80036ec <HAL_InitTick+0x70>)
 8003692:	681a      	ldr	r2, [r3, #0]
 8003694:	4b14      	ldr	r3, [pc, #80]	; (80036e8 <HAL_InitTick+0x6c>)
 8003696:	781b      	ldrb	r3, [r3, #0]
 8003698:	4619      	mov	r1, r3
 800369a:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800369e:	fbb3 f3f1 	udiv	r3, r3, r1
 80036a2:	fbb2 f3f3 	udiv	r3, r2, r3
 80036a6:	4618      	mov	r0, r3
 80036a8:	f000 f96d 	bl	8003986 <HAL_SYSTICK_Config>
 80036ac:	4603      	mov	r3, r0
 80036ae:	2b00      	cmp	r3, #0
 80036b0:	d10f      	bne.n	80036d2 <HAL_InitTick+0x56>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80036b2:	687b      	ldr	r3, [r7, #4]
 80036b4:	2b0f      	cmp	r3, #15
 80036b6:	d809      	bhi.n	80036cc <HAL_InitTick+0x50>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80036b8:	2200      	movs	r2, #0
 80036ba:	6879      	ldr	r1, [r7, #4]
 80036bc:	f04f 30ff 	mov.w	r0, #4294967295
 80036c0:	f000 f937 	bl	8003932 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 80036c4:	4a0a      	ldr	r2, [pc, #40]	; (80036f0 <HAL_InitTick+0x74>)
 80036c6:	687b      	ldr	r3, [r7, #4]
 80036c8:	6013      	str	r3, [r2, #0]
 80036ca:	e007      	b.n	80036dc <HAL_InitTick+0x60>
      }
      else
      {
        status = HAL_ERROR;
 80036cc:	2301      	movs	r3, #1
 80036ce:	73fb      	strb	r3, [r7, #15]
 80036d0:	e004      	b.n	80036dc <HAL_InitTick+0x60>
      }
    }
    else
    {
      status = HAL_ERROR;
 80036d2:	2301      	movs	r3, #1
 80036d4:	73fb      	strb	r3, [r7, #15]
 80036d6:	e001      	b.n	80036dc <HAL_InitTick+0x60>
    }
  }
  else
  {
    status = HAL_ERROR;
 80036d8:	2301      	movs	r3, #1
 80036da:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 80036dc:	7bfb      	ldrb	r3, [r7, #15]
}
 80036de:	4618      	mov	r0, r3
 80036e0:	3710      	adds	r7, #16
 80036e2:	46bd      	mov	sp, r7
 80036e4:	bd80      	pop	{r7, pc}
 80036e6:	bf00      	nop
 80036e8:	20000180 	.word	0x20000180
 80036ec:	20000134 	.word	0x20000134
 80036f0:	2000017c 	.word	0x2000017c

080036f4 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80036f4:	b480      	push	{r7}
 80036f6:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 80036f8:	4b06      	ldr	r3, [pc, #24]	; (8003714 <HAL_IncTick+0x20>)
 80036fa:	781b      	ldrb	r3, [r3, #0]
 80036fc:	461a      	mov	r2, r3
 80036fe:	4b06      	ldr	r3, [pc, #24]	; (8003718 <HAL_IncTick+0x24>)
 8003700:	681b      	ldr	r3, [r3, #0]
 8003702:	4413      	add	r3, r2
 8003704:	4a04      	ldr	r2, [pc, #16]	; (8003718 <HAL_IncTick+0x24>)
 8003706:	6013      	str	r3, [r2, #0]
}
 8003708:	bf00      	nop
 800370a:	46bd      	mov	sp, r7
 800370c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003710:	4770      	bx	lr
 8003712:	bf00      	nop
 8003714:	20000180 	.word	0x20000180
 8003718:	2000118c 	.word	0x2000118c

0800371c <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 800371c:	b480      	push	{r7}
 800371e:	af00      	add	r7, sp, #0
  return uwTick;
 8003720:	4b03      	ldr	r3, [pc, #12]	; (8003730 <HAL_GetTick+0x14>)
 8003722:	681b      	ldr	r3, [r3, #0]
}
 8003724:	4618      	mov	r0, r3
 8003726:	46bd      	mov	sp, r7
 8003728:	f85d 7b04 	ldr.w	r7, [sp], #4
 800372c:	4770      	bx	lr
 800372e:	bf00      	nop
 8003730:	2000118c 	.word	0x2000118c

08003734 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8003734:	b580      	push	{r7, lr}
 8003736:	b084      	sub	sp, #16
 8003738:	af00      	add	r7, sp, #0
 800373a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 800373c:	f7ff ffee 	bl	800371c <HAL_GetTick>
 8003740:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8003742:	687b      	ldr	r3, [r7, #4]
 8003744:	60fb      	str	r3, [r7, #12]

  /* Add a period to guaranty minimum wait */
  if (wait < HAL_MAX_DELAY)
 8003746:	68fb      	ldr	r3, [r7, #12]
 8003748:	f1b3 3fff 	cmp.w	r3, #4294967295
 800374c:	d005      	beq.n	800375a <HAL_Delay+0x26>
  {
    wait += (uint32_t)uwTickFreq;
 800374e:	4b0a      	ldr	r3, [pc, #40]	; (8003778 <HAL_Delay+0x44>)
 8003750:	781b      	ldrb	r3, [r3, #0]
 8003752:	461a      	mov	r2, r3
 8003754:	68fb      	ldr	r3, [r7, #12]
 8003756:	4413      	add	r3, r2
 8003758:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 800375a:	bf00      	nop
 800375c:	f7ff ffde 	bl	800371c <HAL_GetTick>
 8003760:	4602      	mov	r2, r0
 8003762:	68bb      	ldr	r3, [r7, #8]
 8003764:	1ad3      	subs	r3, r2, r3
 8003766:	68fa      	ldr	r2, [r7, #12]
 8003768:	429a      	cmp	r2, r3
 800376a:	d8f7      	bhi.n	800375c <HAL_Delay+0x28>
  {
  }
}
 800376c:	bf00      	nop
 800376e:	bf00      	nop
 8003770:	3710      	adds	r7, #16
 8003772:	46bd      	mov	sp, r7
 8003774:	bd80      	pop	{r7, pc}
 8003776:	bf00      	nop
 8003778:	20000180 	.word	0x20000180

0800377c <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800377c:	b480      	push	{r7}
 800377e:	b085      	sub	sp, #20
 8003780:	af00      	add	r7, sp, #0
 8003782:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8003784:	687b      	ldr	r3, [r7, #4]
 8003786:	f003 0307 	and.w	r3, r3, #7
 800378a:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 800378c:	4b0c      	ldr	r3, [pc, #48]	; (80037c0 <__NVIC_SetPriorityGrouping+0x44>)
 800378e:	68db      	ldr	r3, [r3, #12]
 8003790:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8003792:	68ba      	ldr	r2, [r7, #8]
 8003794:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8003798:	4013      	ands	r3, r2
 800379a:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 800379c:	68fb      	ldr	r3, [r7, #12]
 800379e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80037a0:	68bb      	ldr	r3, [r7, #8]
 80037a2:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80037a4:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 80037a8:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80037ac:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80037ae:	4a04      	ldr	r2, [pc, #16]	; (80037c0 <__NVIC_SetPriorityGrouping+0x44>)
 80037b0:	68bb      	ldr	r3, [r7, #8]
 80037b2:	60d3      	str	r3, [r2, #12]
}
 80037b4:	bf00      	nop
 80037b6:	3714      	adds	r7, #20
 80037b8:	46bd      	mov	sp, r7
 80037ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80037be:	4770      	bx	lr
 80037c0:	e000ed00 	.word	0xe000ed00

080037c4 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80037c4:	b480      	push	{r7}
 80037c6:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80037c8:	4b04      	ldr	r3, [pc, #16]	; (80037dc <__NVIC_GetPriorityGrouping+0x18>)
 80037ca:	68db      	ldr	r3, [r3, #12]
 80037cc:	0a1b      	lsrs	r3, r3, #8
 80037ce:	f003 0307 	and.w	r3, r3, #7
}
 80037d2:	4618      	mov	r0, r3
 80037d4:	46bd      	mov	sp, r7
 80037d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80037da:	4770      	bx	lr
 80037dc:	e000ed00 	.word	0xe000ed00

080037e0 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80037e0:	b480      	push	{r7}
 80037e2:	b083      	sub	sp, #12
 80037e4:	af00      	add	r7, sp, #0
 80037e6:	4603      	mov	r3, r0
 80037e8:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80037ea:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80037ee:	2b00      	cmp	r3, #0
 80037f0:	db0b      	blt.n	800380a <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80037f2:	79fb      	ldrb	r3, [r7, #7]
 80037f4:	f003 021f 	and.w	r2, r3, #31
 80037f8:	4907      	ldr	r1, [pc, #28]	; (8003818 <__NVIC_EnableIRQ+0x38>)
 80037fa:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80037fe:	095b      	lsrs	r3, r3, #5
 8003800:	2001      	movs	r0, #1
 8003802:	fa00 f202 	lsl.w	r2, r0, r2
 8003806:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 800380a:	bf00      	nop
 800380c:	370c      	adds	r7, #12
 800380e:	46bd      	mov	sp, r7
 8003810:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003814:	4770      	bx	lr
 8003816:	bf00      	nop
 8003818:	e000e100 	.word	0xe000e100

0800381c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 800381c:	b480      	push	{r7}
 800381e:	b083      	sub	sp, #12
 8003820:	af00      	add	r7, sp, #0
 8003822:	4603      	mov	r3, r0
 8003824:	6039      	str	r1, [r7, #0]
 8003826:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8003828:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800382c:	2b00      	cmp	r3, #0
 800382e:	db0a      	blt.n	8003846 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003830:	683b      	ldr	r3, [r7, #0]
 8003832:	b2da      	uxtb	r2, r3
 8003834:	490c      	ldr	r1, [pc, #48]	; (8003868 <__NVIC_SetPriority+0x4c>)
 8003836:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800383a:	0112      	lsls	r2, r2, #4
 800383c:	b2d2      	uxtb	r2, r2
 800383e:	440b      	add	r3, r1
 8003840:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8003844:	e00a      	b.n	800385c <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003846:	683b      	ldr	r3, [r7, #0]
 8003848:	b2da      	uxtb	r2, r3
 800384a:	4908      	ldr	r1, [pc, #32]	; (800386c <__NVIC_SetPriority+0x50>)
 800384c:	79fb      	ldrb	r3, [r7, #7]
 800384e:	f003 030f 	and.w	r3, r3, #15
 8003852:	3b04      	subs	r3, #4
 8003854:	0112      	lsls	r2, r2, #4
 8003856:	b2d2      	uxtb	r2, r2
 8003858:	440b      	add	r3, r1
 800385a:	761a      	strb	r2, [r3, #24]
}
 800385c:	bf00      	nop
 800385e:	370c      	adds	r7, #12
 8003860:	46bd      	mov	sp, r7
 8003862:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003866:	4770      	bx	lr
 8003868:	e000e100 	.word	0xe000e100
 800386c:	e000ed00 	.word	0xe000ed00

08003870 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8003870:	b480      	push	{r7}
 8003872:	b089      	sub	sp, #36	; 0x24
 8003874:	af00      	add	r7, sp, #0
 8003876:	60f8      	str	r0, [r7, #12]
 8003878:	60b9      	str	r1, [r7, #8]
 800387a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 800387c:	68fb      	ldr	r3, [r7, #12]
 800387e:	f003 0307 	and.w	r3, r3, #7
 8003882:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8003884:	69fb      	ldr	r3, [r7, #28]
 8003886:	f1c3 0307 	rsb	r3, r3, #7
 800388a:	2b04      	cmp	r3, #4
 800388c:	bf28      	it	cs
 800388e:	2304      	movcs	r3, #4
 8003890:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8003892:	69fb      	ldr	r3, [r7, #28]
 8003894:	3304      	adds	r3, #4
 8003896:	2b06      	cmp	r3, #6
 8003898:	d902      	bls.n	80038a0 <NVIC_EncodePriority+0x30>
 800389a:	69fb      	ldr	r3, [r7, #28]
 800389c:	3b03      	subs	r3, #3
 800389e:	e000      	b.n	80038a2 <NVIC_EncodePriority+0x32>
 80038a0:	2300      	movs	r3, #0
 80038a2:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80038a4:	f04f 32ff 	mov.w	r2, #4294967295
 80038a8:	69bb      	ldr	r3, [r7, #24]
 80038aa:	fa02 f303 	lsl.w	r3, r2, r3
 80038ae:	43da      	mvns	r2, r3
 80038b0:	68bb      	ldr	r3, [r7, #8]
 80038b2:	401a      	ands	r2, r3
 80038b4:	697b      	ldr	r3, [r7, #20]
 80038b6:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80038b8:	f04f 31ff 	mov.w	r1, #4294967295
 80038bc:	697b      	ldr	r3, [r7, #20]
 80038be:	fa01 f303 	lsl.w	r3, r1, r3
 80038c2:	43d9      	mvns	r1, r3
 80038c4:	687b      	ldr	r3, [r7, #4]
 80038c6:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80038c8:	4313      	orrs	r3, r2
         );
}
 80038ca:	4618      	mov	r0, r3
 80038cc:	3724      	adds	r7, #36	; 0x24
 80038ce:	46bd      	mov	sp, r7
 80038d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80038d4:	4770      	bx	lr
	...

080038d8 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80038d8:	b580      	push	{r7, lr}
 80038da:	b082      	sub	sp, #8
 80038dc:	af00      	add	r7, sp, #0
 80038de:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80038e0:	687b      	ldr	r3, [r7, #4]
 80038e2:	3b01      	subs	r3, #1
 80038e4:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80038e8:	d301      	bcc.n	80038ee <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80038ea:	2301      	movs	r3, #1
 80038ec:	e00f      	b.n	800390e <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80038ee:	4a0a      	ldr	r2, [pc, #40]	; (8003918 <SysTick_Config+0x40>)
 80038f0:	687b      	ldr	r3, [r7, #4]
 80038f2:	3b01      	subs	r3, #1
 80038f4:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80038f6:	210f      	movs	r1, #15
 80038f8:	f04f 30ff 	mov.w	r0, #4294967295
 80038fc:	f7ff ff8e 	bl	800381c <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8003900:	4b05      	ldr	r3, [pc, #20]	; (8003918 <SysTick_Config+0x40>)
 8003902:	2200      	movs	r2, #0
 8003904:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8003906:	4b04      	ldr	r3, [pc, #16]	; (8003918 <SysTick_Config+0x40>)
 8003908:	2207      	movs	r2, #7
 800390a:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 800390c:	2300      	movs	r3, #0
}
 800390e:	4618      	mov	r0, r3
 8003910:	3708      	adds	r7, #8
 8003912:	46bd      	mov	sp, r7
 8003914:	bd80      	pop	{r7, pc}
 8003916:	bf00      	nop
 8003918:	e000e010 	.word	0xe000e010

0800391c <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800391c:	b580      	push	{r7, lr}
 800391e:	b082      	sub	sp, #8
 8003920:	af00      	add	r7, sp, #0
 8003922:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8003924:	6878      	ldr	r0, [r7, #4]
 8003926:	f7ff ff29 	bl	800377c <__NVIC_SetPriorityGrouping>
}
 800392a:	bf00      	nop
 800392c:	3708      	adds	r7, #8
 800392e:	46bd      	mov	sp, r7
 8003930:	bd80      	pop	{r7, pc}

08003932 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8003932:	b580      	push	{r7, lr}
 8003934:	b086      	sub	sp, #24
 8003936:	af00      	add	r7, sp, #0
 8003938:	4603      	mov	r3, r0
 800393a:	60b9      	str	r1, [r7, #8]
 800393c:	607a      	str	r2, [r7, #4]
 800393e:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 8003940:	2300      	movs	r3, #0
 8003942:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8003944:	f7ff ff3e 	bl	80037c4 <__NVIC_GetPriorityGrouping>
 8003948:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800394a:	687a      	ldr	r2, [r7, #4]
 800394c:	68b9      	ldr	r1, [r7, #8]
 800394e:	6978      	ldr	r0, [r7, #20]
 8003950:	f7ff ff8e 	bl	8003870 <NVIC_EncodePriority>
 8003954:	4602      	mov	r2, r0
 8003956:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800395a:	4611      	mov	r1, r2
 800395c:	4618      	mov	r0, r3
 800395e:	f7ff ff5d 	bl	800381c <__NVIC_SetPriority>
}
 8003962:	bf00      	nop
 8003964:	3718      	adds	r7, #24
 8003966:	46bd      	mov	sp, r7
 8003968:	bd80      	pop	{r7, pc}

0800396a <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32l4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800396a:	b580      	push	{r7, lr}
 800396c:	b082      	sub	sp, #8
 800396e:	af00      	add	r7, sp, #0
 8003970:	4603      	mov	r3, r0
 8003972:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8003974:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003978:	4618      	mov	r0, r3
 800397a:	f7ff ff31 	bl	80037e0 <__NVIC_EnableIRQ>
}
 800397e:	bf00      	nop
 8003980:	3708      	adds	r7, #8
 8003982:	46bd      	mov	sp, r7
 8003984:	bd80      	pop	{r7, pc}

08003986 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8003986:	b580      	push	{r7, lr}
 8003988:	b082      	sub	sp, #8
 800398a:	af00      	add	r7, sp, #0
 800398c:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800398e:	6878      	ldr	r0, [r7, #4]
 8003990:	f7ff ffa2 	bl	80038d8 <SysTick_Config>
 8003994:	4603      	mov	r3, r0
}
 8003996:	4618      	mov	r0, r3
 8003998:	3708      	adds	r7, #8
 800399a:	46bd      	mov	sp, r7
 800399c:	bd80      	pop	{r7, pc}
	...

080039a0 <HAL_DFSDM_ChannelInit>:
  *         in the DFSDM_ChannelInitTypeDef structure and initialize the associated handle.
  * @param  hdfsdm_channel DFSDM channel handle.
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_DFSDM_ChannelInit(DFSDM_Channel_HandleTypeDef *hdfsdm_channel)
{
 80039a0:	b580      	push	{r7, lr}
 80039a2:	b082      	sub	sp, #8
 80039a4:	af00      	add	r7, sp, #0
 80039a6:	6078      	str	r0, [r7, #4]
  /* Check DFSDM Channel handle */
  if (hdfsdm_channel == NULL)
 80039a8:	687b      	ldr	r3, [r7, #4]
 80039aa:	2b00      	cmp	r3, #0
 80039ac:	d101      	bne.n	80039b2 <HAL_DFSDM_ChannelInit+0x12>
  {
    return HAL_ERROR;
 80039ae:	2301      	movs	r3, #1
 80039b0:	e0ac      	b.n	8003b0c <HAL_DFSDM_ChannelInit+0x16c>
  assert_param(IS_DFSDM_CHANNEL_FILTER_OVS_RATIO(hdfsdm_channel->Init.Awd.Oversampling));
  assert_param(IS_DFSDM_CHANNEL_OFFSET(hdfsdm_channel->Init.Offset));
  assert_param(IS_DFSDM_CHANNEL_RIGHT_BIT_SHIFT(hdfsdm_channel->Init.RightBitShift));

  /* Check that channel has not been already initialized */
  if (a_dfsdm1ChannelHandle[DFSDM_GetChannelFromInstance(hdfsdm_channel->Instance)] != NULL)
 80039b2:	687b      	ldr	r3, [r7, #4]
 80039b4:	681b      	ldr	r3, [r3, #0]
 80039b6:	4618      	mov	r0, r3
 80039b8:	f000 f8b2 	bl	8003b20 <DFSDM_GetChannelFromInstance>
 80039bc:	4603      	mov	r3, r0
 80039be:	4a55      	ldr	r2, [pc, #340]	; (8003b14 <HAL_DFSDM_ChannelInit+0x174>)
 80039c0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80039c4:	2b00      	cmp	r3, #0
 80039c6:	d001      	beq.n	80039cc <HAL_DFSDM_ChannelInit+0x2c>
  {
    return HAL_ERROR;
 80039c8:	2301      	movs	r3, #1
 80039ca:	e09f      	b.n	8003b0c <HAL_DFSDM_ChannelInit+0x16c>
    hdfsdm_channel->MspInitCallback = HAL_DFSDM_ChannelMspInit;
  }
  hdfsdm_channel->MspInitCallback(hdfsdm_channel);
#else
  /* Call MSP init function */
  HAL_DFSDM_ChannelMspInit(hdfsdm_channel);
 80039cc:	6878      	ldr	r0, [r7, #4]
 80039ce:	f7fe fe1f 	bl	8002610 <HAL_DFSDM_ChannelMspInit>
#endif

  /* Update the channel counter */
  v_dfsdm1ChannelCounter++;
 80039d2:	4b51      	ldr	r3, [pc, #324]	; (8003b18 <HAL_DFSDM_ChannelInit+0x178>)
 80039d4:	681b      	ldr	r3, [r3, #0]
 80039d6:	3301      	adds	r3, #1
 80039d8:	4a4f      	ldr	r2, [pc, #316]	; (8003b18 <HAL_DFSDM_ChannelInit+0x178>)
 80039da:	6013      	str	r3, [r2, #0]

  /* Configure output serial clock and enable global DFSDM interface only for first channel */
  if (v_dfsdm1ChannelCounter == 1U)
 80039dc:	4b4e      	ldr	r3, [pc, #312]	; (8003b18 <HAL_DFSDM_ChannelInit+0x178>)
 80039de:	681b      	ldr	r3, [r3, #0]
 80039e0:	2b01      	cmp	r3, #1
 80039e2:	d125      	bne.n	8003a30 <HAL_DFSDM_ChannelInit+0x90>
  {
    assert_param(IS_DFSDM_CHANNEL_OUTPUT_CLOCK(hdfsdm_channel->Init.OutputClock.Selection));
    /* Set the output serial clock source */
    DFSDM1_Channel0->CHCFGR1 &= ~(DFSDM_CHCFGR1_CKOUTSRC);
 80039e4:	4b4d      	ldr	r3, [pc, #308]	; (8003b1c <HAL_DFSDM_ChannelInit+0x17c>)
 80039e6:	681b      	ldr	r3, [r3, #0]
 80039e8:	4a4c      	ldr	r2, [pc, #304]	; (8003b1c <HAL_DFSDM_ChannelInit+0x17c>)
 80039ea:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 80039ee:	6013      	str	r3, [r2, #0]
    DFSDM1_Channel0->CHCFGR1 |= hdfsdm_channel->Init.OutputClock.Selection;
 80039f0:	4b4a      	ldr	r3, [pc, #296]	; (8003b1c <HAL_DFSDM_ChannelInit+0x17c>)
 80039f2:	681a      	ldr	r2, [r3, #0]
 80039f4:	687b      	ldr	r3, [r7, #4]
 80039f6:	689b      	ldr	r3, [r3, #8]
 80039f8:	4948      	ldr	r1, [pc, #288]	; (8003b1c <HAL_DFSDM_ChannelInit+0x17c>)
 80039fa:	4313      	orrs	r3, r2
 80039fc:	600b      	str	r3, [r1, #0]

    /* Reset clock divider */
    DFSDM1_Channel0->CHCFGR1 &= ~(DFSDM_CHCFGR1_CKOUTDIV);
 80039fe:	4b47      	ldr	r3, [pc, #284]	; (8003b1c <HAL_DFSDM_ChannelInit+0x17c>)
 8003a00:	681b      	ldr	r3, [r3, #0]
 8003a02:	4a46      	ldr	r2, [pc, #280]	; (8003b1c <HAL_DFSDM_ChannelInit+0x17c>)
 8003a04:	f423 037f 	bic.w	r3, r3, #16711680	; 0xff0000
 8003a08:	6013      	str	r3, [r2, #0]
    if (hdfsdm_channel->Init.OutputClock.Activation == ENABLE)
 8003a0a:	687b      	ldr	r3, [r7, #4]
 8003a0c:	791b      	ldrb	r3, [r3, #4]
 8003a0e:	2b01      	cmp	r3, #1
 8003a10:	d108      	bne.n	8003a24 <HAL_DFSDM_ChannelInit+0x84>
    {
      assert_param(IS_DFSDM_CHANNEL_OUTPUT_CLOCK_DIVIDER(hdfsdm_channel->Init.OutputClock.Divider));
      /* Set the output clock divider */
      DFSDM1_Channel0->CHCFGR1 |= (uint32_t)((hdfsdm_channel->Init.OutputClock.Divider - 1U) <<
 8003a12:	4b42      	ldr	r3, [pc, #264]	; (8003b1c <HAL_DFSDM_ChannelInit+0x17c>)
 8003a14:	681a      	ldr	r2, [r3, #0]
 8003a16:	687b      	ldr	r3, [r7, #4]
 8003a18:	68db      	ldr	r3, [r3, #12]
 8003a1a:	3b01      	subs	r3, #1
 8003a1c:	041b      	lsls	r3, r3, #16
 8003a1e:	493f      	ldr	r1, [pc, #252]	; (8003b1c <HAL_DFSDM_ChannelInit+0x17c>)
 8003a20:	4313      	orrs	r3, r2
 8003a22:	600b      	str	r3, [r1, #0]
                                             DFSDM_CHCFGR1_CKOUTDIV_Pos);
    }

    /* enable the DFSDM global interface */
    DFSDM1_Channel0->CHCFGR1 |= DFSDM_CHCFGR1_DFSDMEN;
 8003a24:	4b3d      	ldr	r3, [pc, #244]	; (8003b1c <HAL_DFSDM_ChannelInit+0x17c>)
 8003a26:	681b      	ldr	r3, [r3, #0]
 8003a28:	4a3c      	ldr	r2, [pc, #240]	; (8003b1c <HAL_DFSDM_ChannelInit+0x17c>)
 8003a2a:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8003a2e:	6013      	str	r3, [r2, #0]
  }

  /* Set channel input parameters */
  hdfsdm_channel->Instance->CHCFGR1 &= ~(DFSDM_CHCFGR1_DATPACK | DFSDM_CHCFGR1_DATMPX |
 8003a30:	687b      	ldr	r3, [r7, #4]
 8003a32:	681b      	ldr	r3, [r3, #0]
 8003a34:	681a      	ldr	r2, [r3, #0]
 8003a36:	687b      	ldr	r3, [r7, #4]
 8003a38:	681b      	ldr	r3, [r3, #0]
 8003a3a:	f422 4271 	bic.w	r2, r2, #61696	; 0xf100
 8003a3e:	601a      	str	r2, [r3, #0]
                                         DFSDM_CHCFGR1_CHINSEL);
  hdfsdm_channel->Instance->CHCFGR1 |= (hdfsdm_channel->Init.Input.Multiplexer |
 8003a40:	687b      	ldr	r3, [r7, #4]
 8003a42:	681b      	ldr	r3, [r3, #0]
 8003a44:	6819      	ldr	r1, [r3, #0]
 8003a46:	687b      	ldr	r3, [r7, #4]
 8003a48:	691a      	ldr	r2, [r3, #16]
                                        hdfsdm_channel->Init.Input.DataPacking |
 8003a4a:	687b      	ldr	r3, [r7, #4]
 8003a4c:	695b      	ldr	r3, [r3, #20]
  hdfsdm_channel->Instance->CHCFGR1 |= (hdfsdm_channel->Init.Input.Multiplexer |
 8003a4e:	431a      	orrs	r2, r3
                                        hdfsdm_channel->Init.Input.Pins);
 8003a50:	687b      	ldr	r3, [r7, #4]
 8003a52:	699b      	ldr	r3, [r3, #24]
                                        hdfsdm_channel->Init.Input.DataPacking |
 8003a54:	431a      	orrs	r2, r3
  hdfsdm_channel->Instance->CHCFGR1 |= (hdfsdm_channel->Init.Input.Multiplexer |
 8003a56:	687b      	ldr	r3, [r7, #4]
 8003a58:	681b      	ldr	r3, [r3, #0]
 8003a5a:	430a      	orrs	r2, r1
 8003a5c:	601a      	str	r2, [r3, #0]

  /* Set serial interface parameters */
  hdfsdm_channel->Instance->CHCFGR1 &= ~(DFSDM_CHCFGR1_SITP | DFSDM_CHCFGR1_SPICKSEL);
 8003a5e:	687b      	ldr	r3, [r7, #4]
 8003a60:	681b      	ldr	r3, [r3, #0]
 8003a62:	681a      	ldr	r2, [r3, #0]
 8003a64:	687b      	ldr	r3, [r7, #4]
 8003a66:	681b      	ldr	r3, [r3, #0]
 8003a68:	f022 020f 	bic.w	r2, r2, #15
 8003a6c:	601a      	str	r2, [r3, #0]
  hdfsdm_channel->Instance->CHCFGR1 |= (hdfsdm_channel->Init.SerialInterface.Type |
 8003a6e:	687b      	ldr	r3, [r7, #4]
 8003a70:	681b      	ldr	r3, [r3, #0]
 8003a72:	6819      	ldr	r1, [r3, #0]
 8003a74:	687b      	ldr	r3, [r7, #4]
 8003a76:	69da      	ldr	r2, [r3, #28]
                                        hdfsdm_channel->Init.SerialInterface.SpiClock);
 8003a78:	687b      	ldr	r3, [r7, #4]
 8003a7a:	6a1b      	ldr	r3, [r3, #32]
  hdfsdm_channel->Instance->CHCFGR1 |= (hdfsdm_channel->Init.SerialInterface.Type |
 8003a7c:	431a      	orrs	r2, r3
 8003a7e:	687b      	ldr	r3, [r7, #4]
 8003a80:	681b      	ldr	r3, [r3, #0]
 8003a82:	430a      	orrs	r2, r1
 8003a84:	601a      	str	r2, [r3, #0]

  /* Set analog watchdog parameters */
  hdfsdm_channel->Instance->CHAWSCDR &= ~(DFSDM_CHAWSCDR_AWFORD | DFSDM_CHAWSCDR_AWFOSR);
 8003a86:	687b      	ldr	r3, [r7, #4]
 8003a88:	681b      	ldr	r3, [r3, #0]
 8003a8a:	689a      	ldr	r2, [r3, #8]
 8003a8c:	687b      	ldr	r3, [r7, #4]
 8003a8e:	681b      	ldr	r3, [r3, #0]
 8003a90:	f422 025f 	bic.w	r2, r2, #14614528	; 0xdf0000
 8003a94:	609a      	str	r2, [r3, #8]
  hdfsdm_channel->Instance->CHAWSCDR |= (hdfsdm_channel->Init.Awd.FilterOrder |
 8003a96:	687b      	ldr	r3, [r7, #4]
 8003a98:	681b      	ldr	r3, [r3, #0]
 8003a9a:	6899      	ldr	r1, [r3, #8]
 8003a9c:	687b      	ldr	r3, [r7, #4]
 8003a9e:	6a5a      	ldr	r2, [r3, #36]	; 0x24
                                         ((hdfsdm_channel->Init.Awd.Oversampling - 1U) << DFSDM_CHAWSCDR_AWFOSR_Pos));
 8003aa0:	687b      	ldr	r3, [r7, #4]
 8003aa2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003aa4:	3b01      	subs	r3, #1
 8003aa6:	041b      	lsls	r3, r3, #16
  hdfsdm_channel->Instance->CHAWSCDR |= (hdfsdm_channel->Init.Awd.FilterOrder |
 8003aa8:	431a      	orrs	r2, r3
 8003aaa:	687b      	ldr	r3, [r7, #4]
 8003aac:	681b      	ldr	r3, [r3, #0]
 8003aae:	430a      	orrs	r2, r1
 8003ab0:	609a      	str	r2, [r3, #8]

  /* Set channel offset and right bit shift */
  hdfsdm_channel->Instance->CHCFGR2 &= ~(DFSDM_CHCFGR2_OFFSET | DFSDM_CHCFGR2_DTRBS);
 8003ab2:	687b      	ldr	r3, [r7, #4]
 8003ab4:	681b      	ldr	r3, [r3, #0]
 8003ab6:	685a      	ldr	r2, [r3, #4]
 8003ab8:	687b      	ldr	r3, [r7, #4]
 8003aba:	681b      	ldr	r3, [r3, #0]
 8003abc:	f002 0207 	and.w	r2, r2, #7
 8003ac0:	605a      	str	r2, [r3, #4]
  hdfsdm_channel->Instance->CHCFGR2 |= (((uint32_t) hdfsdm_channel->Init.Offset << DFSDM_CHCFGR2_OFFSET_Pos) |
 8003ac2:	687b      	ldr	r3, [r7, #4]
 8003ac4:	681b      	ldr	r3, [r3, #0]
 8003ac6:	6859      	ldr	r1, [r3, #4]
 8003ac8:	687b      	ldr	r3, [r7, #4]
 8003aca:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003acc:	021a      	lsls	r2, r3, #8
                                        (hdfsdm_channel->Init.RightBitShift << DFSDM_CHCFGR2_DTRBS_Pos));
 8003ace:	687b      	ldr	r3, [r7, #4]
 8003ad0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003ad2:	00db      	lsls	r3, r3, #3
  hdfsdm_channel->Instance->CHCFGR2 |= (((uint32_t) hdfsdm_channel->Init.Offset << DFSDM_CHCFGR2_OFFSET_Pos) |
 8003ad4:	431a      	orrs	r2, r3
 8003ad6:	687b      	ldr	r3, [r7, #4]
 8003ad8:	681b      	ldr	r3, [r3, #0]
 8003ada:	430a      	orrs	r2, r1
 8003adc:	605a      	str	r2, [r3, #4]

  /* Enable DFSDM channel */
  hdfsdm_channel->Instance->CHCFGR1 |= DFSDM_CHCFGR1_CHEN;
 8003ade:	687b      	ldr	r3, [r7, #4]
 8003ae0:	681b      	ldr	r3, [r3, #0]
 8003ae2:	681a      	ldr	r2, [r3, #0]
 8003ae4:	687b      	ldr	r3, [r7, #4]
 8003ae6:	681b      	ldr	r3, [r3, #0]
 8003ae8:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8003aec:	601a      	str	r2, [r3, #0]

  /* Set DFSDM Channel to ready state */
  hdfsdm_channel->State = HAL_DFSDM_CHANNEL_STATE_READY;
 8003aee:	687b      	ldr	r3, [r7, #4]
 8003af0:	2201      	movs	r2, #1
 8003af2:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  /* Store channel handle in DFSDM channel handle table */
  a_dfsdm1ChannelHandle[DFSDM_GetChannelFromInstance(hdfsdm_channel->Instance)] = hdfsdm_channel;
 8003af6:	687b      	ldr	r3, [r7, #4]
 8003af8:	681b      	ldr	r3, [r3, #0]
 8003afa:	4618      	mov	r0, r3
 8003afc:	f000 f810 	bl	8003b20 <DFSDM_GetChannelFromInstance>
 8003b00:	4602      	mov	r2, r0
 8003b02:	4904      	ldr	r1, [pc, #16]	; (8003b14 <HAL_DFSDM_ChannelInit+0x174>)
 8003b04:	687b      	ldr	r3, [r7, #4]
 8003b06:	f841 3022 	str.w	r3, [r1, r2, lsl #2]

  return HAL_OK;
 8003b0a:	2300      	movs	r3, #0
}
 8003b0c:	4618      	mov	r0, r3
 8003b0e:	3708      	adds	r7, #8
 8003b10:	46bd      	mov	sp, r7
 8003b12:	bd80      	pop	{r7, pc}
 8003b14:	20001194 	.word	0x20001194
 8003b18:	20001190 	.word	0x20001190
 8003b1c:	40016000 	.word	0x40016000

08003b20 <DFSDM_GetChannelFromInstance>:
  * @brief  This function allows to get the channel number from channel instance.
  * @param  Instance DFSDM channel instance.
  * @retval Channel number.
  */
static uint32_t DFSDM_GetChannelFromInstance(const DFSDM_Channel_TypeDef *Instance)
{
 8003b20:	b480      	push	{r7}
 8003b22:	b085      	sub	sp, #20
 8003b24:	af00      	add	r7, sp, #0
 8003b26:	6078      	str	r0, [r7, #4]
  uint32_t channel;

  /* Get channel from instance */
  if (Instance == DFSDM1_Channel0)
 8003b28:	687b      	ldr	r3, [r7, #4]
 8003b2a:	4a1c      	ldr	r2, [pc, #112]	; (8003b9c <DFSDM_GetChannelFromInstance+0x7c>)
 8003b2c:	4293      	cmp	r3, r2
 8003b2e:	d102      	bne.n	8003b36 <DFSDM_GetChannelFromInstance+0x16>
  {
    channel = 0;
 8003b30:	2300      	movs	r3, #0
 8003b32:	60fb      	str	r3, [r7, #12]
 8003b34:	e02b      	b.n	8003b8e <DFSDM_GetChannelFromInstance+0x6e>
  }
  else if (Instance == DFSDM1_Channel1)
 8003b36:	687b      	ldr	r3, [r7, #4]
 8003b38:	4a19      	ldr	r2, [pc, #100]	; (8003ba0 <DFSDM_GetChannelFromInstance+0x80>)
 8003b3a:	4293      	cmp	r3, r2
 8003b3c:	d102      	bne.n	8003b44 <DFSDM_GetChannelFromInstance+0x24>
  {
    channel = 1;
 8003b3e:	2301      	movs	r3, #1
 8003b40:	60fb      	str	r3, [r7, #12]
 8003b42:	e024      	b.n	8003b8e <DFSDM_GetChannelFromInstance+0x6e>
  }
  else if (Instance == DFSDM1_Channel2)
 8003b44:	687b      	ldr	r3, [r7, #4]
 8003b46:	4a17      	ldr	r2, [pc, #92]	; (8003ba4 <DFSDM_GetChannelFromInstance+0x84>)
 8003b48:	4293      	cmp	r3, r2
 8003b4a:	d102      	bne.n	8003b52 <DFSDM_GetChannelFromInstance+0x32>
  {
    channel = 2;
 8003b4c:	2302      	movs	r3, #2
 8003b4e:	60fb      	str	r3, [r7, #12]
 8003b50:	e01d      	b.n	8003b8e <DFSDM_GetChannelFromInstance+0x6e>
  }
#if defined(STM32L471xx) || defined(STM32L475xx) || defined(STM32L476xx) || defined(STM32L485xx) || defined(STM32L486xx) || \
    defined(STM32L496xx) || defined(STM32L4A6xx) || \
    defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
  else if (Instance == DFSDM1_Channel4)
 8003b52:	687b      	ldr	r3, [r7, #4]
 8003b54:	4a14      	ldr	r2, [pc, #80]	; (8003ba8 <DFSDM_GetChannelFromInstance+0x88>)
 8003b56:	4293      	cmp	r3, r2
 8003b58:	d102      	bne.n	8003b60 <DFSDM_GetChannelFromInstance+0x40>
  {
    channel = 4;
 8003b5a:	2304      	movs	r3, #4
 8003b5c:	60fb      	str	r3, [r7, #12]
 8003b5e:	e016      	b.n	8003b8e <DFSDM_GetChannelFromInstance+0x6e>
  }
  else if (Instance == DFSDM1_Channel5)
 8003b60:	687b      	ldr	r3, [r7, #4]
 8003b62:	4a12      	ldr	r2, [pc, #72]	; (8003bac <DFSDM_GetChannelFromInstance+0x8c>)
 8003b64:	4293      	cmp	r3, r2
 8003b66:	d102      	bne.n	8003b6e <DFSDM_GetChannelFromInstance+0x4e>
  {
    channel = 5;
 8003b68:	2305      	movs	r3, #5
 8003b6a:	60fb      	str	r3, [r7, #12]
 8003b6c:	e00f      	b.n	8003b8e <DFSDM_GetChannelFromInstance+0x6e>
  }
  else if (Instance == DFSDM1_Channel6)
 8003b6e:	687b      	ldr	r3, [r7, #4]
 8003b70:	4a0f      	ldr	r2, [pc, #60]	; (8003bb0 <DFSDM_GetChannelFromInstance+0x90>)
 8003b72:	4293      	cmp	r3, r2
 8003b74:	d102      	bne.n	8003b7c <DFSDM_GetChannelFromInstance+0x5c>
  {
    channel = 6;
 8003b76:	2306      	movs	r3, #6
 8003b78:	60fb      	str	r3, [r7, #12]
 8003b7a:	e008      	b.n	8003b8e <DFSDM_GetChannelFromInstance+0x6e>
  }
  else if (Instance == DFSDM1_Channel7)
 8003b7c:	687b      	ldr	r3, [r7, #4]
 8003b7e:	4a0d      	ldr	r2, [pc, #52]	; (8003bb4 <DFSDM_GetChannelFromInstance+0x94>)
 8003b80:	4293      	cmp	r3, r2
 8003b82:	d102      	bne.n	8003b8a <DFSDM_GetChannelFromInstance+0x6a>
  {
    channel = 7;
 8003b84:	2307      	movs	r3, #7
 8003b86:	60fb      	str	r3, [r7, #12]
 8003b88:	e001      	b.n	8003b8e <DFSDM_GetChannelFromInstance+0x6e>
  }
#endif /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L485xx || STM32L486xx || STM32L496xx || STM32L4A6xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
  else /* DFSDM1_Channel3 */
  {
    channel = 3;
 8003b8a:	2303      	movs	r3, #3
 8003b8c:	60fb      	str	r3, [r7, #12]
  }

  return channel;
 8003b8e:	68fb      	ldr	r3, [r7, #12]
}
 8003b90:	4618      	mov	r0, r3
 8003b92:	3714      	adds	r7, #20
 8003b94:	46bd      	mov	sp, r7
 8003b96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b9a:	4770      	bx	lr
 8003b9c:	40016000 	.word	0x40016000
 8003ba0:	40016020 	.word	0x40016020
 8003ba4:	40016040 	.word	0x40016040
 8003ba8:	40016080 	.word	0x40016080
 8003bac:	400160a0 	.word	0x400160a0
 8003bb0:	400160c0 	.word	0x400160c0
 8003bb4:	400160e0 	.word	0x400160e0

08003bb8 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8003bb8:	b480      	push	{r7}
 8003bba:	b087      	sub	sp, #28
 8003bbc:	af00      	add	r7, sp, #0
 8003bbe:	6078      	str	r0, [r7, #4]
 8003bc0:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8003bc2:	2300      	movs	r3, #0
 8003bc4:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8003bc6:	e17f      	b.n	8003ec8 <HAL_GPIO_Init+0x310>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8003bc8:	683b      	ldr	r3, [r7, #0]
 8003bca:	681a      	ldr	r2, [r3, #0]
 8003bcc:	2101      	movs	r1, #1
 8003bce:	697b      	ldr	r3, [r7, #20]
 8003bd0:	fa01 f303 	lsl.w	r3, r1, r3
 8003bd4:	4013      	ands	r3, r2
 8003bd6:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8003bd8:	68fb      	ldr	r3, [r7, #12]
 8003bda:	2b00      	cmp	r3, #0
 8003bdc:	f000 8171 	beq.w	8003ec2 <HAL_GPIO_Init+0x30a>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8003be0:	683b      	ldr	r3, [r7, #0]
 8003be2:	685b      	ldr	r3, [r3, #4]
 8003be4:	f003 0303 	and.w	r3, r3, #3
 8003be8:	2b01      	cmp	r3, #1
 8003bea:	d005      	beq.n	8003bf8 <HAL_GPIO_Init+0x40>
 8003bec:	683b      	ldr	r3, [r7, #0]
 8003bee:	685b      	ldr	r3, [r3, #4]
 8003bf0:	f003 0303 	and.w	r3, r3, #3
 8003bf4:	2b02      	cmp	r3, #2
 8003bf6:	d130      	bne.n	8003c5a <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8003bf8:	687b      	ldr	r3, [r7, #4]
 8003bfa:	689b      	ldr	r3, [r3, #8]
 8003bfc:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 8003bfe:	697b      	ldr	r3, [r7, #20]
 8003c00:	005b      	lsls	r3, r3, #1
 8003c02:	2203      	movs	r2, #3
 8003c04:	fa02 f303 	lsl.w	r3, r2, r3
 8003c08:	43db      	mvns	r3, r3
 8003c0a:	693a      	ldr	r2, [r7, #16]
 8003c0c:	4013      	ands	r3, r2
 8003c0e:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8003c10:	683b      	ldr	r3, [r7, #0]
 8003c12:	68da      	ldr	r2, [r3, #12]
 8003c14:	697b      	ldr	r3, [r7, #20]
 8003c16:	005b      	lsls	r3, r3, #1
 8003c18:	fa02 f303 	lsl.w	r3, r2, r3
 8003c1c:	693a      	ldr	r2, [r7, #16]
 8003c1e:	4313      	orrs	r3, r2
 8003c20:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8003c22:	687b      	ldr	r3, [r7, #4]
 8003c24:	693a      	ldr	r2, [r7, #16]
 8003c26:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8003c28:	687b      	ldr	r3, [r7, #4]
 8003c2a:	685b      	ldr	r3, [r3, #4]
 8003c2c:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8003c2e:	2201      	movs	r2, #1
 8003c30:	697b      	ldr	r3, [r7, #20]
 8003c32:	fa02 f303 	lsl.w	r3, r2, r3
 8003c36:	43db      	mvns	r3, r3
 8003c38:	693a      	ldr	r2, [r7, #16]
 8003c3a:	4013      	ands	r3, r2
 8003c3c:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8003c3e:	683b      	ldr	r3, [r7, #0]
 8003c40:	685b      	ldr	r3, [r3, #4]
 8003c42:	091b      	lsrs	r3, r3, #4
 8003c44:	f003 0201 	and.w	r2, r3, #1
 8003c48:	697b      	ldr	r3, [r7, #20]
 8003c4a:	fa02 f303 	lsl.w	r3, r2, r3
 8003c4e:	693a      	ldr	r2, [r7, #16]
 8003c50:	4313      	orrs	r3, r2
 8003c52:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8003c54:	687b      	ldr	r3, [r7, #4]
 8003c56:	693a      	ldr	r2, [r7, #16]
 8003c58:	605a      	str	r2, [r3, #4]
      }

#if defined(STM32L471xx) || defined(STM32L475xx) || defined(STM32L476xx) || defined(STM32L485xx) || defined(STM32L486xx)

      /* In case of Analog mode, check if ADC control mode is selected */
      if((GPIO_Init->Mode & GPIO_MODE_ANALOG) == GPIO_MODE_ANALOG)
 8003c5a:	683b      	ldr	r3, [r7, #0]
 8003c5c:	685b      	ldr	r3, [r3, #4]
 8003c5e:	f003 0303 	and.w	r3, r3, #3
 8003c62:	2b03      	cmp	r3, #3
 8003c64:	d118      	bne.n	8003c98 <HAL_GPIO_Init+0xe0>
      {
        /* Configure the IO Output Type */
        temp = GPIOx->ASCR;
 8003c66:	687b      	ldr	r3, [r7, #4]
 8003c68:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003c6a:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_ASCR_ASC0 << position) ;
 8003c6c:	2201      	movs	r2, #1
 8003c6e:	697b      	ldr	r3, [r7, #20]
 8003c70:	fa02 f303 	lsl.w	r3, r2, r3
 8003c74:	43db      	mvns	r3, r3
 8003c76:	693a      	ldr	r2, [r7, #16]
 8003c78:	4013      	ands	r3, r2
 8003c7a:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & GPIO_MODE_ANALOG_ADC_CONTROL) >> 3) << position);
 8003c7c:	683b      	ldr	r3, [r7, #0]
 8003c7e:	685b      	ldr	r3, [r3, #4]
 8003c80:	08db      	lsrs	r3, r3, #3
 8003c82:	f003 0201 	and.w	r2, r3, #1
 8003c86:	697b      	ldr	r3, [r7, #20]
 8003c88:	fa02 f303 	lsl.w	r3, r2, r3
 8003c8c:	693a      	ldr	r2, [r7, #16]
 8003c8e:	4313      	orrs	r3, r2
 8003c90:	613b      	str	r3, [r7, #16]
        GPIOx->ASCR = temp;
 8003c92:	687b      	ldr	r3, [r7, #4]
 8003c94:	693a      	ldr	r2, [r7, #16]
 8003c96:	62da      	str	r2, [r3, #44]	; 0x2c
      }

#endif /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L485xx || STM32L486xx */

      /* Activate the Pull-up or Pull down resistor for the current IO */
      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8003c98:	683b      	ldr	r3, [r7, #0]
 8003c9a:	685b      	ldr	r3, [r3, #4]
 8003c9c:	f003 0303 	and.w	r3, r3, #3
 8003ca0:	2b03      	cmp	r3, #3
 8003ca2:	d017      	beq.n	8003cd4 <HAL_GPIO_Init+0x11c>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        temp = GPIOx->PUPDR;
 8003ca4:	687b      	ldr	r3, [r7, #4]
 8003ca6:	68db      	ldr	r3, [r3, #12]
 8003ca8:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8003caa:	697b      	ldr	r3, [r7, #20]
 8003cac:	005b      	lsls	r3, r3, #1
 8003cae:	2203      	movs	r2, #3
 8003cb0:	fa02 f303 	lsl.w	r3, r2, r3
 8003cb4:	43db      	mvns	r3, r3
 8003cb6:	693a      	ldr	r2, [r7, #16]
 8003cb8:	4013      	ands	r3, r2
 8003cba:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8003cbc:	683b      	ldr	r3, [r7, #0]
 8003cbe:	689a      	ldr	r2, [r3, #8]
 8003cc0:	697b      	ldr	r3, [r7, #20]
 8003cc2:	005b      	lsls	r3, r3, #1
 8003cc4:	fa02 f303 	lsl.w	r3, r2, r3
 8003cc8:	693a      	ldr	r2, [r7, #16]
 8003cca:	4313      	orrs	r3, r2
 8003ccc:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8003cce:	687b      	ldr	r3, [r7, #4]
 8003cd0:	693a      	ldr	r2, [r7, #16]
 8003cd2:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8003cd4:	683b      	ldr	r3, [r7, #0]
 8003cd6:	685b      	ldr	r3, [r3, #4]
 8003cd8:	f003 0303 	and.w	r3, r3, #3
 8003cdc:	2b02      	cmp	r3, #2
 8003cde:	d123      	bne.n	8003d28 <HAL_GPIO_Init+0x170>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 8003ce0:	697b      	ldr	r3, [r7, #20]
 8003ce2:	08da      	lsrs	r2, r3, #3
 8003ce4:	687b      	ldr	r3, [r7, #4]
 8003ce6:	3208      	adds	r2, #8
 8003ce8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8003cec:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8003cee:	697b      	ldr	r3, [r7, #20]
 8003cf0:	f003 0307 	and.w	r3, r3, #7
 8003cf4:	009b      	lsls	r3, r3, #2
 8003cf6:	220f      	movs	r2, #15
 8003cf8:	fa02 f303 	lsl.w	r3, r2, r3
 8003cfc:	43db      	mvns	r3, r3
 8003cfe:	693a      	ldr	r2, [r7, #16]
 8003d00:	4013      	ands	r3, r2
 8003d02:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8003d04:	683b      	ldr	r3, [r7, #0]
 8003d06:	691a      	ldr	r2, [r3, #16]
 8003d08:	697b      	ldr	r3, [r7, #20]
 8003d0a:	f003 0307 	and.w	r3, r3, #7
 8003d0e:	009b      	lsls	r3, r3, #2
 8003d10:	fa02 f303 	lsl.w	r3, r2, r3
 8003d14:	693a      	ldr	r2, [r7, #16]
 8003d16:	4313      	orrs	r3, r2
 8003d18:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8003d1a:	697b      	ldr	r3, [r7, #20]
 8003d1c:	08da      	lsrs	r2, r3, #3
 8003d1e:	687b      	ldr	r3, [r7, #4]
 8003d20:	3208      	adds	r2, #8
 8003d22:	6939      	ldr	r1, [r7, #16]
 8003d24:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8003d28:	687b      	ldr	r3, [r7, #4]
 8003d2a:	681b      	ldr	r3, [r3, #0]
 8003d2c:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 8003d2e:	697b      	ldr	r3, [r7, #20]
 8003d30:	005b      	lsls	r3, r3, #1
 8003d32:	2203      	movs	r2, #3
 8003d34:	fa02 f303 	lsl.w	r3, r2, r3
 8003d38:	43db      	mvns	r3, r3
 8003d3a:	693a      	ldr	r2, [r7, #16]
 8003d3c:	4013      	ands	r3, r2
 8003d3e:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8003d40:	683b      	ldr	r3, [r7, #0]
 8003d42:	685b      	ldr	r3, [r3, #4]
 8003d44:	f003 0203 	and.w	r2, r3, #3
 8003d48:	697b      	ldr	r3, [r7, #20]
 8003d4a:	005b      	lsls	r3, r3, #1
 8003d4c:	fa02 f303 	lsl.w	r3, r2, r3
 8003d50:	693a      	ldr	r2, [r7, #16]
 8003d52:	4313      	orrs	r3, r2
 8003d54:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8003d56:	687b      	ldr	r3, [r7, #4]
 8003d58:	693a      	ldr	r2, [r7, #16]
 8003d5a:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8003d5c:	683b      	ldr	r3, [r7, #0]
 8003d5e:	685b      	ldr	r3, [r3, #4]
 8003d60:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8003d64:	2b00      	cmp	r3, #0
 8003d66:	f000 80ac 	beq.w	8003ec2 <HAL_GPIO_Init+0x30a>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8003d6a:	4b5f      	ldr	r3, [pc, #380]	; (8003ee8 <HAL_GPIO_Init+0x330>)
 8003d6c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003d6e:	4a5e      	ldr	r2, [pc, #376]	; (8003ee8 <HAL_GPIO_Init+0x330>)
 8003d70:	f043 0301 	orr.w	r3, r3, #1
 8003d74:	6613      	str	r3, [r2, #96]	; 0x60
 8003d76:	4b5c      	ldr	r3, [pc, #368]	; (8003ee8 <HAL_GPIO_Init+0x330>)
 8003d78:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003d7a:	f003 0301 	and.w	r3, r3, #1
 8003d7e:	60bb      	str	r3, [r7, #8]
 8003d80:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 8003d82:	4a5a      	ldr	r2, [pc, #360]	; (8003eec <HAL_GPIO_Init+0x334>)
 8003d84:	697b      	ldr	r3, [r7, #20]
 8003d86:	089b      	lsrs	r3, r3, #2
 8003d88:	3302      	adds	r3, #2
 8003d8a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003d8e:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 8003d90:	697b      	ldr	r3, [r7, #20]
 8003d92:	f003 0303 	and.w	r3, r3, #3
 8003d96:	009b      	lsls	r3, r3, #2
 8003d98:	220f      	movs	r2, #15
 8003d9a:	fa02 f303 	lsl.w	r3, r2, r3
 8003d9e:	43db      	mvns	r3, r3
 8003da0:	693a      	ldr	r2, [r7, #16]
 8003da2:	4013      	ands	r3, r2
 8003da4:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8003da6:	687b      	ldr	r3, [r7, #4]
 8003da8:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 8003dac:	d025      	beq.n	8003dfa <HAL_GPIO_Init+0x242>
 8003dae:	687b      	ldr	r3, [r7, #4]
 8003db0:	4a4f      	ldr	r2, [pc, #316]	; (8003ef0 <HAL_GPIO_Init+0x338>)
 8003db2:	4293      	cmp	r3, r2
 8003db4:	d01f      	beq.n	8003df6 <HAL_GPIO_Init+0x23e>
 8003db6:	687b      	ldr	r3, [r7, #4]
 8003db8:	4a4e      	ldr	r2, [pc, #312]	; (8003ef4 <HAL_GPIO_Init+0x33c>)
 8003dba:	4293      	cmp	r3, r2
 8003dbc:	d019      	beq.n	8003df2 <HAL_GPIO_Init+0x23a>
 8003dbe:	687b      	ldr	r3, [r7, #4]
 8003dc0:	4a4d      	ldr	r2, [pc, #308]	; (8003ef8 <HAL_GPIO_Init+0x340>)
 8003dc2:	4293      	cmp	r3, r2
 8003dc4:	d013      	beq.n	8003dee <HAL_GPIO_Init+0x236>
 8003dc6:	687b      	ldr	r3, [r7, #4]
 8003dc8:	4a4c      	ldr	r2, [pc, #304]	; (8003efc <HAL_GPIO_Init+0x344>)
 8003dca:	4293      	cmp	r3, r2
 8003dcc:	d00d      	beq.n	8003dea <HAL_GPIO_Init+0x232>
 8003dce:	687b      	ldr	r3, [r7, #4]
 8003dd0:	4a4b      	ldr	r2, [pc, #300]	; (8003f00 <HAL_GPIO_Init+0x348>)
 8003dd2:	4293      	cmp	r3, r2
 8003dd4:	d007      	beq.n	8003de6 <HAL_GPIO_Init+0x22e>
 8003dd6:	687b      	ldr	r3, [r7, #4]
 8003dd8:	4a4a      	ldr	r2, [pc, #296]	; (8003f04 <HAL_GPIO_Init+0x34c>)
 8003dda:	4293      	cmp	r3, r2
 8003ddc:	d101      	bne.n	8003de2 <HAL_GPIO_Init+0x22a>
 8003dde:	2306      	movs	r3, #6
 8003de0:	e00c      	b.n	8003dfc <HAL_GPIO_Init+0x244>
 8003de2:	2307      	movs	r3, #7
 8003de4:	e00a      	b.n	8003dfc <HAL_GPIO_Init+0x244>
 8003de6:	2305      	movs	r3, #5
 8003de8:	e008      	b.n	8003dfc <HAL_GPIO_Init+0x244>
 8003dea:	2304      	movs	r3, #4
 8003dec:	e006      	b.n	8003dfc <HAL_GPIO_Init+0x244>
 8003dee:	2303      	movs	r3, #3
 8003df0:	e004      	b.n	8003dfc <HAL_GPIO_Init+0x244>
 8003df2:	2302      	movs	r3, #2
 8003df4:	e002      	b.n	8003dfc <HAL_GPIO_Init+0x244>
 8003df6:	2301      	movs	r3, #1
 8003df8:	e000      	b.n	8003dfc <HAL_GPIO_Init+0x244>
 8003dfa:	2300      	movs	r3, #0
 8003dfc:	697a      	ldr	r2, [r7, #20]
 8003dfe:	f002 0203 	and.w	r2, r2, #3
 8003e02:	0092      	lsls	r2, r2, #2
 8003e04:	4093      	lsls	r3, r2
 8003e06:	693a      	ldr	r2, [r7, #16]
 8003e08:	4313      	orrs	r3, r2
 8003e0a:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 8003e0c:	4937      	ldr	r1, [pc, #220]	; (8003eec <HAL_GPIO_Init+0x334>)
 8003e0e:	697b      	ldr	r3, [r7, #20]
 8003e10:	089b      	lsrs	r3, r3, #2
 8003e12:	3302      	adds	r3, #2
 8003e14:	693a      	ldr	r2, [r7, #16]
 8003e16:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8003e1a:	4b3b      	ldr	r3, [pc, #236]	; (8003f08 <HAL_GPIO_Init+0x350>)
 8003e1c:	689b      	ldr	r3, [r3, #8]
 8003e1e:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8003e20:	68fb      	ldr	r3, [r7, #12]
 8003e22:	43db      	mvns	r3, r3
 8003e24:	693a      	ldr	r2, [r7, #16]
 8003e26:	4013      	ands	r3, r2
 8003e28:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8003e2a:	683b      	ldr	r3, [r7, #0]
 8003e2c:	685b      	ldr	r3, [r3, #4]
 8003e2e:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8003e32:	2b00      	cmp	r3, #0
 8003e34:	d003      	beq.n	8003e3e <HAL_GPIO_Init+0x286>
        {
          temp |= iocurrent;
 8003e36:	693a      	ldr	r2, [r7, #16]
 8003e38:	68fb      	ldr	r3, [r7, #12]
 8003e3a:	4313      	orrs	r3, r2
 8003e3c:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 8003e3e:	4a32      	ldr	r2, [pc, #200]	; (8003f08 <HAL_GPIO_Init+0x350>)
 8003e40:	693b      	ldr	r3, [r7, #16]
 8003e42:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 8003e44:	4b30      	ldr	r3, [pc, #192]	; (8003f08 <HAL_GPIO_Init+0x350>)
 8003e46:	68db      	ldr	r3, [r3, #12]
 8003e48:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8003e4a:	68fb      	ldr	r3, [r7, #12]
 8003e4c:	43db      	mvns	r3, r3
 8003e4e:	693a      	ldr	r2, [r7, #16]
 8003e50:	4013      	ands	r3, r2
 8003e52:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8003e54:	683b      	ldr	r3, [r7, #0]
 8003e56:	685b      	ldr	r3, [r3, #4]
 8003e58:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8003e5c:	2b00      	cmp	r3, #0
 8003e5e:	d003      	beq.n	8003e68 <HAL_GPIO_Init+0x2b0>
        {
          temp |= iocurrent;
 8003e60:	693a      	ldr	r2, [r7, #16]
 8003e62:	68fb      	ldr	r3, [r7, #12]
 8003e64:	4313      	orrs	r3, r2
 8003e66:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 8003e68:	4a27      	ldr	r2, [pc, #156]	; (8003f08 <HAL_GPIO_Init+0x350>)
 8003e6a:	693b      	ldr	r3, [r7, #16]
 8003e6c:	60d3      	str	r3, [r2, #12]

        /* Clear EXTI line configuration */
        temp = EXTI->EMR1;
 8003e6e:	4b26      	ldr	r3, [pc, #152]	; (8003f08 <HAL_GPIO_Init+0x350>)
 8003e70:	685b      	ldr	r3, [r3, #4]
 8003e72:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8003e74:	68fb      	ldr	r3, [r7, #12]
 8003e76:	43db      	mvns	r3, r3
 8003e78:	693a      	ldr	r2, [r7, #16]
 8003e7a:	4013      	ands	r3, r2
 8003e7c:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8003e7e:	683b      	ldr	r3, [r7, #0]
 8003e80:	685b      	ldr	r3, [r3, #4]
 8003e82:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003e86:	2b00      	cmp	r3, #0
 8003e88:	d003      	beq.n	8003e92 <HAL_GPIO_Init+0x2da>
        {
          temp |= iocurrent;
 8003e8a:	693a      	ldr	r2, [r7, #16]
 8003e8c:	68fb      	ldr	r3, [r7, #12]
 8003e8e:	4313      	orrs	r3, r2
 8003e90:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 8003e92:	4a1d      	ldr	r2, [pc, #116]	; (8003f08 <HAL_GPIO_Init+0x350>)
 8003e94:	693b      	ldr	r3, [r7, #16]
 8003e96:	6053      	str	r3, [r2, #4]

        temp = EXTI->IMR1;
 8003e98:	4b1b      	ldr	r3, [pc, #108]	; (8003f08 <HAL_GPIO_Init+0x350>)
 8003e9a:	681b      	ldr	r3, [r3, #0]
 8003e9c:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8003e9e:	68fb      	ldr	r3, [r7, #12]
 8003ea0:	43db      	mvns	r3, r3
 8003ea2:	693a      	ldr	r2, [r7, #16]
 8003ea4:	4013      	ands	r3, r2
 8003ea6:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8003ea8:	683b      	ldr	r3, [r7, #0]
 8003eaa:	685b      	ldr	r3, [r3, #4]
 8003eac:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003eb0:	2b00      	cmp	r3, #0
 8003eb2:	d003      	beq.n	8003ebc <HAL_GPIO_Init+0x304>
        {
          temp |= iocurrent;
 8003eb4:	693a      	ldr	r2, [r7, #16]
 8003eb6:	68fb      	ldr	r3, [r7, #12]
 8003eb8:	4313      	orrs	r3, r2
 8003eba:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 8003ebc:	4a12      	ldr	r2, [pc, #72]	; (8003f08 <HAL_GPIO_Init+0x350>)
 8003ebe:	693b      	ldr	r3, [r7, #16]
 8003ec0:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 8003ec2:	697b      	ldr	r3, [r7, #20]
 8003ec4:	3301      	adds	r3, #1
 8003ec6:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8003ec8:	683b      	ldr	r3, [r7, #0]
 8003eca:	681a      	ldr	r2, [r3, #0]
 8003ecc:	697b      	ldr	r3, [r7, #20]
 8003ece:	fa22 f303 	lsr.w	r3, r2, r3
 8003ed2:	2b00      	cmp	r3, #0
 8003ed4:	f47f ae78 	bne.w	8003bc8 <HAL_GPIO_Init+0x10>
  }
}
 8003ed8:	bf00      	nop
 8003eda:	bf00      	nop
 8003edc:	371c      	adds	r7, #28
 8003ede:	46bd      	mov	sp, r7
 8003ee0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ee4:	4770      	bx	lr
 8003ee6:	bf00      	nop
 8003ee8:	40021000 	.word	0x40021000
 8003eec:	40010000 	.word	0x40010000
 8003ef0:	48000400 	.word	0x48000400
 8003ef4:	48000800 	.word	0x48000800
 8003ef8:	48000c00 	.word	0x48000c00
 8003efc:	48001000 	.word	0x48001000
 8003f00:	48001400 	.word	0x48001400
 8003f04:	48001800 	.word	0x48001800
 8003f08:	40010400 	.word	0x40010400

08003f0c <HAL_GPIO_DeInit>:
  * @param  GPIO_Pin specifies the port bit to be written.
  *         This parameter can be any combination of GPIO_Pin_x where x can be (0..15).
  * @retval None
  */
void HAL_GPIO_DeInit(GPIO_TypeDef  *GPIOx, uint32_t GPIO_Pin)
{
 8003f0c:	b480      	push	{r7}
 8003f0e:	b087      	sub	sp, #28
 8003f10:	af00      	add	r7, sp, #0
 8003f12:	6078      	str	r0, [r7, #4]
 8003f14:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8003f16:	2300      	movs	r3, #0
 8003f18:	617b      	str	r3, [r7, #20]
  /* Check the parameters */
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* Configure the port pins */
  while ((GPIO_Pin >> position) != 0x00u)
 8003f1a:	e0cd      	b.n	80040b8 <HAL_GPIO_DeInit+0x1ac>
  {
    /* Get current io position */
    iocurrent = (GPIO_Pin) & (1uL << position);
 8003f1c:	2201      	movs	r2, #1
 8003f1e:	697b      	ldr	r3, [r7, #20]
 8003f20:	fa02 f303 	lsl.w	r3, r2, r3
 8003f24:	683a      	ldr	r2, [r7, #0]
 8003f26:	4013      	ands	r3, r2
 8003f28:	613b      	str	r3, [r7, #16]

    if (iocurrent != 0x00u)
 8003f2a:	693b      	ldr	r3, [r7, #16]
 8003f2c:	2b00      	cmp	r3, #0
 8003f2e:	f000 80c0 	beq.w	80040b2 <HAL_GPIO_DeInit+0x1a6>
    {
      /*------------------------- EXTI Mode Configuration --------------------*/
      /* Clear the External Interrupt or Event for the current IO */

      tmp = SYSCFG->EXTICR[position >> 2u];
 8003f32:	4a68      	ldr	r2, [pc, #416]	; (80040d4 <HAL_GPIO_DeInit+0x1c8>)
 8003f34:	697b      	ldr	r3, [r7, #20]
 8003f36:	089b      	lsrs	r3, r3, #2
 8003f38:	3302      	adds	r3, #2
 8003f3a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003f3e:	60fb      	str	r3, [r7, #12]
      tmp &= (0x0FuL << (4u * (position & 0x03u)));
 8003f40:	697b      	ldr	r3, [r7, #20]
 8003f42:	f003 0303 	and.w	r3, r3, #3
 8003f46:	009b      	lsls	r3, r3, #2
 8003f48:	220f      	movs	r2, #15
 8003f4a:	fa02 f303 	lsl.w	r3, r2, r3
 8003f4e:	68fa      	ldr	r2, [r7, #12]
 8003f50:	4013      	ands	r3, r2
 8003f52:	60fb      	str	r3, [r7, #12]
      if (tmp == (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u))))
 8003f54:	687b      	ldr	r3, [r7, #4]
 8003f56:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 8003f5a:	d025      	beq.n	8003fa8 <HAL_GPIO_DeInit+0x9c>
 8003f5c:	687b      	ldr	r3, [r7, #4]
 8003f5e:	4a5e      	ldr	r2, [pc, #376]	; (80040d8 <HAL_GPIO_DeInit+0x1cc>)
 8003f60:	4293      	cmp	r3, r2
 8003f62:	d01f      	beq.n	8003fa4 <HAL_GPIO_DeInit+0x98>
 8003f64:	687b      	ldr	r3, [r7, #4]
 8003f66:	4a5d      	ldr	r2, [pc, #372]	; (80040dc <HAL_GPIO_DeInit+0x1d0>)
 8003f68:	4293      	cmp	r3, r2
 8003f6a:	d019      	beq.n	8003fa0 <HAL_GPIO_DeInit+0x94>
 8003f6c:	687b      	ldr	r3, [r7, #4]
 8003f6e:	4a5c      	ldr	r2, [pc, #368]	; (80040e0 <HAL_GPIO_DeInit+0x1d4>)
 8003f70:	4293      	cmp	r3, r2
 8003f72:	d013      	beq.n	8003f9c <HAL_GPIO_DeInit+0x90>
 8003f74:	687b      	ldr	r3, [r7, #4]
 8003f76:	4a5b      	ldr	r2, [pc, #364]	; (80040e4 <HAL_GPIO_DeInit+0x1d8>)
 8003f78:	4293      	cmp	r3, r2
 8003f7a:	d00d      	beq.n	8003f98 <HAL_GPIO_DeInit+0x8c>
 8003f7c:	687b      	ldr	r3, [r7, #4]
 8003f7e:	4a5a      	ldr	r2, [pc, #360]	; (80040e8 <HAL_GPIO_DeInit+0x1dc>)
 8003f80:	4293      	cmp	r3, r2
 8003f82:	d007      	beq.n	8003f94 <HAL_GPIO_DeInit+0x88>
 8003f84:	687b      	ldr	r3, [r7, #4]
 8003f86:	4a59      	ldr	r2, [pc, #356]	; (80040ec <HAL_GPIO_DeInit+0x1e0>)
 8003f88:	4293      	cmp	r3, r2
 8003f8a:	d101      	bne.n	8003f90 <HAL_GPIO_DeInit+0x84>
 8003f8c:	2306      	movs	r3, #6
 8003f8e:	e00c      	b.n	8003faa <HAL_GPIO_DeInit+0x9e>
 8003f90:	2307      	movs	r3, #7
 8003f92:	e00a      	b.n	8003faa <HAL_GPIO_DeInit+0x9e>
 8003f94:	2305      	movs	r3, #5
 8003f96:	e008      	b.n	8003faa <HAL_GPIO_DeInit+0x9e>
 8003f98:	2304      	movs	r3, #4
 8003f9a:	e006      	b.n	8003faa <HAL_GPIO_DeInit+0x9e>
 8003f9c:	2303      	movs	r3, #3
 8003f9e:	e004      	b.n	8003faa <HAL_GPIO_DeInit+0x9e>
 8003fa0:	2302      	movs	r3, #2
 8003fa2:	e002      	b.n	8003faa <HAL_GPIO_DeInit+0x9e>
 8003fa4:	2301      	movs	r3, #1
 8003fa6:	e000      	b.n	8003faa <HAL_GPIO_DeInit+0x9e>
 8003fa8:	2300      	movs	r3, #0
 8003faa:	697a      	ldr	r2, [r7, #20]
 8003fac:	f002 0203 	and.w	r2, r2, #3
 8003fb0:	0092      	lsls	r2, r2, #2
 8003fb2:	4093      	lsls	r3, r2
 8003fb4:	68fa      	ldr	r2, [r7, #12]
 8003fb6:	429a      	cmp	r2, r3
 8003fb8:	d132      	bne.n	8004020 <HAL_GPIO_DeInit+0x114>
      {
        /* Clear EXTI line configuration */
        EXTI->IMR1 &= ~(iocurrent);
 8003fba:	4b4d      	ldr	r3, [pc, #308]	; (80040f0 <HAL_GPIO_DeInit+0x1e4>)
 8003fbc:	681a      	ldr	r2, [r3, #0]
 8003fbe:	693b      	ldr	r3, [r7, #16]
 8003fc0:	43db      	mvns	r3, r3
 8003fc2:	494b      	ldr	r1, [pc, #300]	; (80040f0 <HAL_GPIO_DeInit+0x1e4>)
 8003fc4:	4013      	ands	r3, r2
 8003fc6:	600b      	str	r3, [r1, #0]
        EXTI->EMR1 &= ~(iocurrent);
 8003fc8:	4b49      	ldr	r3, [pc, #292]	; (80040f0 <HAL_GPIO_DeInit+0x1e4>)
 8003fca:	685a      	ldr	r2, [r3, #4]
 8003fcc:	693b      	ldr	r3, [r7, #16]
 8003fce:	43db      	mvns	r3, r3
 8003fd0:	4947      	ldr	r1, [pc, #284]	; (80040f0 <HAL_GPIO_DeInit+0x1e4>)
 8003fd2:	4013      	ands	r3, r2
 8003fd4:	604b      	str	r3, [r1, #4]

        /* Clear Rising Falling edge configuration */
        EXTI->FTSR1 &= ~(iocurrent);
 8003fd6:	4b46      	ldr	r3, [pc, #280]	; (80040f0 <HAL_GPIO_DeInit+0x1e4>)
 8003fd8:	68da      	ldr	r2, [r3, #12]
 8003fda:	693b      	ldr	r3, [r7, #16]
 8003fdc:	43db      	mvns	r3, r3
 8003fde:	4944      	ldr	r1, [pc, #272]	; (80040f0 <HAL_GPIO_DeInit+0x1e4>)
 8003fe0:	4013      	ands	r3, r2
 8003fe2:	60cb      	str	r3, [r1, #12]
        EXTI->RTSR1 &= ~(iocurrent);
 8003fe4:	4b42      	ldr	r3, [pc, #264]	; (80040f0 <HAL_GPIO_DeInit+0x1e4>)
 8003fe6:	689a      	ldr	r2, [r3, #8]
 8003fe8:	693b      	ldr	r3, [r7, #16]
 8003fea:	43db      	mvns	r3, r3
 8003fec:	4940      	ldr	r1, [pc, #256]	; (80040f0 <HAL_GPIO_DeInit+0x1e4>)
 8003fee:	4013      	ands	r3, r2
 8003ff0:	608b      	str	r3, [r1, #8]

        tmp = 0x0FuL << (4u * (position & 0x03u));
 8003ff2:	697b      	ldr	r3, [r7, #20]
 8003ff4:	f003 0303 	and.w	r3, r3, #3
 8003ff8:	009b      	lsls	r3, r3, #2
 8003ffa:	220f      	movs	r2, #15
 8003ffc:	fa02 f303 	lsl.w	r3, r2, r3
 8004000:	60fb      	str	r3, [r7, #12]
        SYSCFG->EXTICR[position >> 2u] &= ~tmp;
 8004002:	4a34      	ldr	r2, [pc, #208]	; (80040d4 <HAL_GPIO_DeInit+0x1c8>)
 8004004:	697b      	ldr	r3, [r7, #20]
 8004006:	089b      	lsrs	r3, r3, #2
 8004008:	3302      	adds	r3, #2
 800400a:	f852 1023 	ldr.w	r1, [r2, r3, lsl #2]
 800400e:	68fb      	ldr	r3, [r7, #12]
 8004010:	43da      	mvns	r2, r3
 8004012:	4830      	ldr	r0, [pc, #192]	; (80040d4 <HAL_GPIO_DeInit+0x1c8>)
 8004014:	697b      	ldr	r3, [r7, #20]
 8004016:	089b      	lsrs	r3, r3, #2
 8004018:	400a      	ands	r2, r1
 800401a:	3302      	adds	r3, #2
 800401c:	f840 2023 	str.w	r2, [r0, r3, lsl #2]
      }

      /*------------------------- GPIO Mode Configuration --------------------*/
      /* Configure IO in Analog Mode */
      GPIOx->MODER |= (GPIO_MODER_MODE0 << (position * 2u));
 8004020:	687b      	ldr	r3, [r7, #4]
 8004022:	681a      	ldr	r2, [r3, #0]
 8004024:	697b      	ldr	r3, [r7, #20]
 8004026:	005b      	lsls	r3, r3, #1
 8004028:	2103      	movs	r1, #3
 800402a:	fa01 f303 	lsl.w	r3, r1, r3
 800402e:	431a      	orrs	r2, r3
 8004030:	687b      	ldr	r3, [r7, #4]
 8004032:	601a      	str	r2, [r3, #0]

      /* Configure the default Alternate Function in current IO */
      GPIOx->AFR[position >> 3u] &= ~(0xFu << ((position & 0x07u) * 4u)) ;
 8004034:	697b      	ldr	r3, [r7, #20]
 8004036:	08da      	lsrs	r2, r3, #3
 8004038:	687b      	ldr	r3, [r7, #4]
 800403a:	3208      	adds	r2, #8
 800403c:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8004040:	697b      	ldr	r3, [r7, #20]
 8004042:	f003 0307 	and.w	r3, r3, #7
 8004046:	009b      	lsls	r3, r3, #2
 8004048:	220f      	movs	r2, #15
 800404a:	fa02 f303 	lsl.w	r3, r2, r3
 800404e:	43db      	mvns	r3, r3
 8004050:	697a      	ldr	r2, [r7, #20]
 8004052:	08d2      	lsrs	r2, r2, #3
 8004054:	4019      	ands	r1, r3
 8004056:	687b      	ldr	r3, [r7, #4]
 8004058:	3208      	adds	r2, #8
 800405a:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

      /* Configure the default value for IO Speed */
      GPIOx->OSPEEDR &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 800405e:	687b      	ldr	r3, [r7, #4]
 8004060:	689a      	ldr	r2, [r3, #8]
 8004062:	697b      	ldr	r3, [r7, #20]
 8004064:	005b      	lsls	r3, r3, #1
 8004066:	2103      	movs	r1, #3
 8004068:	fa01 f303 	lsl.w	r3, r1, r3
 800406c:	43db      	mvns	r3, r3
 800406e:	401a      	ands	r2, r3
 8004070:	687b      	ldr	r3, [r7, #4]
 8004072:	609a      	str	r2, [r3, #8]

      /* Configure the default value IO Output Type */
      GPIOx->OTYPER  &= ~(GPIO_OTYPER_OT0 << position) ;
 8004074:	687b      	ldr	r3, [r7, #4]
 8004076:	685a      	ldr	r2, [r3, #4]
 8004078:	2101      	movs	r1, #1
 800407a:	697b      	ldr	r3, [r7, #20]
 800407c:	fa01 f303 	lsl.w	r3, r1, r3
 8004080:	43db      	mvns	r3, r3
 8004082:	401a      	ands	r2, r3
 8004084:	687b      	ldr	r3, [r7, #4]
 8004086:	605a      	str	r2, [r3, #4]

      /* Deactivate the Pull-up and Pull-down resistor for the current IO */
      GPIOx->PUPDR &= ~(GPIO_PUPDR_PUPD0 << (position * 2u));
 8004088:	687b      	ldr	r3, [r7, #4]
 800408a:	68da      	ldr	r2, [r3, #12]
 800408c:	697b      	ldr	r3, [r7, #20]
 800408e:	005b      	lsls	r3, r3, #1
 8004090:	2103      	movs	r1, #3
 8004092:	fa01 f303 	lsl.w	r3, r1, r3
 8004096:	43db      	mvns	r3, r3
 8004098:	401a      	ands	r2, r3
 800409a:	687b      	ldr	r3, [r7, #4]
 800409c:	60da      	str	r2, [r3, #12]

#if defined(STM32L471xx) || defined(STM32L475xx) || defined(STM32L476xx) || defined(STM32L485xx) || defined(STM32L486xx)
      /* Deactivate the Control bit of Analog mode for the current IO */
      GPIOx->ASCR &= ~(GPIO_ASCR_ASC0<< position);
 800409e:	687b      	ldr	r3, [r7, #4]
 80040a0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80040a2:	2101      	movs	r1, #1
 80040a4:	697b      	ldr	r3, [r7, #20]
 80040a6:	fa01 f303 	lsl.w	r3, r1, r3
 80040aa:	43db      	mvns	r3, r3
 80040ac:	401a      	ands	r2, r3
 80040ae:	687b      	ldr	r3, [r7, #4]
 80040b0:	62da      	str	r2, [r3, #44]	; 0x2c
#endif /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L485xx || STM32L486xx */
    }

    position++;
 80040b2:	697b      	ldr	r3, [r7, #20]
 80040b4:	3301      	adds	r3, #1
 80040b6:	617b      	str	r3, [r7, #20]
  while ((GPIO_Pin >> position) != 0x00u)
 80040b8:	683a      	ldr	r2, [r7, #0]
 80040ba:	697b      	ldr	r3, [r7, #20]
 80040bc:	fa22 f303 	lsr.w	r3, r2, r3
 80040c0:	2b00      	cmp	r3, #0
 80040c2:	f47f af2b 	bne.w	8003f1c <HAL_GPIO_DeInit+0x10>
  }
}
 80040c6:	bf00      	nop
 80040c8:	bf00      	nop
 80040ca:	371c      	adds	r7, #28
 80040cc:	46bd      	mov	sp, r7
 80040ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80040d2:	4770      	bx	lr
 80040d4:	40010000 	.word	0x40010000
 80040d8:	48000400 	.word	0x48000400
 80040dc:	48000800 	.word	0x48000800
 80040e0:	48000c00 	.word	0x48000c00
 80040e4:	48001000 	.word	0x48001000
 80040e8:	48001400 	.word	0x48001400
 80040ec:	48001800 	.word	0x48001800
 80040f0:	40010400 	.word	0x40010400

080040f4 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80040f4:	b480      	push	{r7}
 80040f6:	b083      	sub	sp, #12
 80040f8:	af00      	add	r7, sp, #0
 80040fa:	6078      	str	r0, [r7, #4]
 80040fc:	460b      	mov	r3, r1
 80040fe:	807b      	strh	r3, [r7, #2]
 8004100:	4613      	mov	r3, r2
 8004102:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8004104:	787b      	ldrb	r3, [r7, #1]
 8004106:	2b00      	cmp	r3, #0
 8004108:	d003      	beq.n	8004112 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 800410a:	887a      	ldrh	r2, [r7, #2]
 800410c:	687b      	ldr	r3, [r7, #4]
 800410e:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8004110:	e002      	b.n	8004118 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8004112:	887a      	ldrh	r2, [r7, #2]
 8004114:	687b      	ldr	r3, [r7, #4]
 8004116:	629a      	str	r2, [r3, #40]	; 0x28
}
 8004118:	bf00      	nop
 800411a:	370c      	adds	r7, #12
 800411c:	46bd      	mov	sp, r7
 800411e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004122:	4770      	bx	lr

08004124 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  Handle EXTI interrupt request.
  * @param  GPIO_Pin Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8004124:	b580      	push	{r7, lr}
 8004126:	b082      	sub	sp, #8
 8004128:	af00      	add	r7, sp, #0
 800412a:	4603      	mov	r3, r0
 800412c:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00u)
 800412e:	4b08      	ldr	r3, [pc, #32]	; (8004150 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8004130:	695a      	ldr	r2, [r3, #20]
 8004132:	88fb      	ldrh	r3, [r7, #6]
 8004134:	4013      	ands	r3, r2
 8004136:	2b00      	cmp	r3, #0
 8004138:	d006      	beq.n	8004148 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 800413a:	4a05      	ldr	r2, [pc, #20]	; (8004150 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 800413c:	88fb      	ldrh	r3, [r7, #6]
 800413e:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8004140:	88fb      	ldrh	r3, [r7, #6]
 8004142:	4618      	mov	r0, r3
 8004144:	f7fd ffe8 	bl	8002118 <HAL_GPIO_EXTI_Callback>
  }
}
 8004148:	bf00      	nop
 800414a:	3708      	adds	r7, #8
 800414c:	46bd      	mov	sp, r7
 800414e:	bd80      	pop	{r7, pc}
 8004150:	40010400 	.word	0x40010400

08004154 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8004154:	b580      	push	{r7, lr}
 8004156:	b082      	sub	sp, #8
 8004158:	af00      	add	r7, sp, #0
 800415a:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 800415c:	687b      	ldr	r3, [r7, #4]
 800415e:	2b00      	cmp	r3, #0
 8004160:	d101      	bne.n	8004166 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8004162:	2301      	movs	r3, #1
 8004164:	e081      	b.n	800426a <HAL_I2C_Init+0x116>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8004166:	687b      	ldr	r3, [r7, #4]
 8004168:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800416c:	b2db      	uxtb	r3, r3
 800416e:	2b00      	cmp	r3, #0
 8004170:	d106      	bne.n	8004180 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8004172:	687b      	ldr	r3, [r7, #4]
 8004174:	2200      	movs	r2, #0
 8004176:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 800417a:	6878      	ldr	r0, [r7, #4]
 800417c:	f7fe faac 	bl	80026d8 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8004180:	687b      	ldr	r3, [r7, #4]
 8004182:	2224      	movs	r2, #36	; 0x24
 8004184:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8004188:	687b      	ldr	r3, [r7, #4]
 800418a:	681b      	ldr	r3, [r3, #0]
 800418c:	681a      	ldr	r2, [r3, #0]
 800418e:	687b      	ldr	r3, [r7, #4]
 8004190:	681b      	ldr	r3, [r3, #0]
 8004192:	f022 0201 	bic.w	r2, r2, #1
 8004196:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 8004198:	687b      	ldr	r3, [r7, #4]
 800419a:	685a      	ldr	r2, [r3, #4]
 800419c:	687b      	ldr	r3, [r7, #4]
 800419e:	681b      	ldr	r3, [r3, #0]
 80041a0:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 80041a4:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 80041a6:	687b      	ldr	r3, [r7, #4]
 80041a8:	681b      	ldr	r3, [r3, #0]
 80041aa:	689a      	ldr	r2, [r3, #8]
 80041ac:	687b      	ldr	r3, [r7, #4]
 80041ae:	681b      	ldr	r3, [r3, #0]
 80041b0:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 80041b4:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 80041b6:	687b      	ldr	r3, [r7, #4]
 80041b8:	68db      	ldr	r3, [r3, #12]
 80041ba:	2b01      	cmp	r3, #1
 80041bc:	d107      	bne.n	80041ce <HAL_I2C_Init+0x7a>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 80041be:	687b      	ldr	r3, [r7, #4]
 80041c0:	689a      	ldr	r2, [r3, #8]
 80041c2:	687b      	ldr	r3, [r7, #4]
 80041c4:	681b      	ldr	r3, [r3, #0]
 80041c6:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 80041ca:	609a      	str	r2, [r3, #8]
 80041cc:	e006      	b.n	80041dc <HAL_I2C_Init+0x88>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 80041ce:	687b      	ldr	r3, [r7, #4]
 80041d0:	689a      	ldr	r2, [r3, #8]
 80041d2:	687b      	ldr	r3, [r7, #4]
 80041d4:	681b      	ldr	r3, [r3, #0]
 80041d6:	f442 4204 	orr.w	r2, r2, #33792	; 0x8400
 80041da:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 80041dc:	687b      	ldr	r3, [r7, #4]
 80041de:	68db      	ldr	r3, [r3, #12]
 80041e0:	2b02      	cmp	r3, #2
 80041e2:	d104      	bne.n	80041ee <HAL_I2C_Init+0x9a>
  {
    hi2c->Instance->CR2 = (I2C_CR2_ADD10);
 80041e4:	687b      	ldr	r3, [r7, #4]
 80041e6:	681b      	ldr	r3, [r3, #0]
 80041e8:	f44f 6200 	mov.w	r2, #2048	; 0x800
 80041ec:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 80041ee:	687b      	ldr	r3, [r7, #4]
 80041f0:	681b      	ldr	r3, [r3, #0]
 80041f2:	685b      	ldr	r3, [r3, #4]
 80041f4:	687a      	ldr	r2, [r7, #4]
 80041f6:	6812      	ldr	r2, [r2, #0]
 80041f8:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 80041fc:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8004200:	6053      	str	r3, [r2, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 8004202:	687b      	ldr	r3, [r7, #4]
 8004204:	681b      	ldr	r3, [r3, #0]
 8004206:	68da      	ldr	r2, [r3, #12]
 8004208:	687b      	ldr	r3, [r7, #4]
 800420a:	681b      	ldr	r3, [r3, #0]
 800420c:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8004210:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8004212:	687b      	ldr	r3, [r7, #4]
 8004214:	691a      	ldr	r2, [r3, #16]
 8004216:	687b      	ldr	r3, [r7, #4]
 8004218:	695b      	ldr	r3, [r3, #20]
 800421a:	ea42 0103 	orr.w	r1, r2, r3
                          (hi2c->Init.OwnAddress2Masks << 8));
 800421e:	687b      	ldr	r3, [r7, #4]
 8004220:	699b      	ldr	r3, [r3, #24]
 8004222:	021a      	lsls	r2, r3, #8
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8004224:	687b      	ldr	r3, [r7, #4]
 8004226:	681b      	ldr	r3, [r3, #0]
 8004228:	430a      	orrs	r2, r1
 800422a:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 800422c:	687b      	ldr	r3, [r7, #4]
 800422e:	69d9      	ldr	r1, [r3, #28]
 8004230:	687b      	ldr	r3, [r7, #4]
 8004232:	6a1a      	ldr	r2, [r3, #32]
 8004234:	687b      	ldr	r3, [r7, #4]
 8004236:	681b      	ldr	r3, [r3, #0]
 8004238:	430a      	orrs	r2, r1
 800423a:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 800423c:	687b      	ldr	r3, [r7, #4]
 800423e:	681b      	ldr	r3, [r3, #0]
 8004240:	681a      	ldr	r2, [r3, #0]
 8004242:	687b      	ldr	r3, [r7, #4]
 8004244:	681b      	ldr	r3, [r3, #0]
 8004246:	f042 0201 	orr.w	r2, r2, #1
 800424a:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800424c:	687b      	ldr	r3, [r7, #4]
 800424e:	2200      	movs	r2, #0
 8004250:	645a      	str	r2, [r3, #68]	; 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 8004252:	687b      	ldr	r3, [r7, #4]
 8004254:	2220      	movs	r2, #32
 8004256:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 800425a:	687b      	ldr	r3, [r7, #4]
 800425c:	2200      	movs	r2, #0
 800425e:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8004260:	687b      	ldr	r3, [r7, #4]
 8004262:	2200      	movs	r2, #0
 8004264:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

  return HAL_OK;
 8004268:	2300      	movs	r3, #0
}
 800426a:	4618      	mov	r0, r3
 800426c:	3708      	adds	r7, #8
 800426e:	46bd      	mov	sp, r7
 8004270:	bd80      	pop	{r7, pc}

08004272 <HAL_I2C_DeInit>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_DeInit(I2C_HandleTypeDef *hi2c)
{
 8004272:	b580      	push	{r7, lr}
 8004274:	b082      	sub	sp, #8
 8004276:	af00      	add	r7, sp, #0
 8004278:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 800427a:	687b      	ldr	r3, [r7, #4]
 800427c:	2b00      	cmp	r3, #0
 800427e:	d101      	bne.n	8004284 <HAL_I2C_DeInit+0x12>
  {
    return HAL_ERROR;
 8004280:	2301      	movs	r3, #1
 8004282:	e021      	b.n	80042c8 <HAL_I2C_DeInit+0x56>
  }

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));

  hi2c->State = HAL_I2C_STATE_BUSY;
 8004284:	687b      	ldr	r3, [r7, #4]
 8004286:	2224      	movs	r2, #36	; 0x24
 8004288:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the I2C Peripheral Clock */
  __HAL_I2C_DISABLE(hi2c);
 800428c:	687b      	ldr	r3, [r7, #4]
 800428e:	681b      	ldr	r3, [r3, #0]
 8004290:	681a      	ldr	r2, [r3, #0]
 8004292:	687b      	ldr	r3, [r7, #4]
 8004294:	681b      	ldr	r3, [r3, #0]
 8004296:	f022 0201 	bic.w	r2, r2, #1
 800429a:	601a      	str	r2, [r3, #0]

  /* DeInit the low level hardware: GPIO, CLOCK, NVIC */
  hi2c->MspDeInitCallback(hi2c);
#else
  /* DeInit the low level hardware: GPIO, CLOCK, NVIC */
  HAL_I2C_MspDeInit(hi2c);
 800429c:	6878      	ldr	r0, [r7, #4]
 800429e:	f7fe fabd 	bl	800281c <HAL_I2C_MspDeInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80042a2:	687b      	ldr	r3, [r7, #4]
 80042a4:	2200      	movs	r2, #0
 80042a6:	645a      	str	r2, [r3, #68]	; 0x44
  hi2c->State = HAL_I2C_STATE_RESET;
 80042a8:	687b      	ldr	r3, [r7, #4]
 80042aa:	2200      	movs	r2, #0
 80042ac:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 80042b0:	687b      	ldr	r3, [r7, #4]
 80042b2:	2200      	movs	r2, #0
 80042b4:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 80042b6:	687b      	ldr	r3, [r7, #4]
 80042b8:	2200      	movs	r2, #0
 80042ba:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

  /* Release Lock */
  __HAL_UNLOCK(hi2c);
 80042be:	687b      	ldr	r3, [r7, #4]
 80042c0:	2200      	movs	r2, #0
 80042c2:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

  return HAL_OK;
 80042c6:	2300      	movs	r3, #0
}
 80042c8:	4618      	mov	r0, r3
 80042ca:	3708      	adds	r7, #8
 80042cc:	46bd      	mov	sp, r7
 80042ce:	bd80      	pop	{r7, pc}

080042d0 <HAL_I2C_Mem_Write>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Write(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress,
                                    uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80042d0:	b580      	push	{r7, lr}
 80042d2:	b088      	sub	sp, #32
 80042d4:	af02      	add	r7, sp, #8
 80042d6:	60f8      	str	r0, [r7, #12]
 80042d8:	4608      	mov	r0, r1
 80042da:	4611      	mov	r1, r2
 80042dc:	461a      	mov	r2, r3
 80042de:	4603      	mov	r3, r0
 80042e0:	817b      	strh	r3, [r7, #10]
 80042e2:	460b      	mov	r3, r1
 80042e4:	813b      	strh	r3, [r7, #8]
 80042e6:	4613      	mov	r3, r2
 80042e8:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80042ea:	68fb      	ldr	r3, [r7, #12]
 80042ec:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80042f0:	b2db      	uxtb	r3, r3
 80042f2:	2b20      	cmp	r3, #32
 80042f4:	f040 80f9 	bne.w	80044ea <HAL_I2C_Mem_Write+0x21a>
  {
    if ((pData == NULL) || (Size == 0U))
 80042f8:	6a3b      	ldr	r3, [r7, #32]
 80042fa:	2b00      	cmp	r3, #0
 80042fc:	d002      	beq.n	8004304 <HAL_I2C_Mem_Write+0x34>
 80042fe:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8004300:	2b00      	cmp	r3, #0
 8004302:	d105      	bne.n	8004310 <HAL_I2C_Mem_Write+0x40>
    {
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
 8004304:	68fb      	ldr	r3, [r7, #12]
 8004306:	f44f 7200 	mov.w	r2, #512	; 0x200
 800430a:	645a      	str	r2, [r3, #68]	; 0x44
      return  HAL_ERROR;
 800430c:	2301      	movs	r3, #1
 800430e:	e0ed      	b.n	80044ec <HAL_I2C_Mem_Write+0x21c>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8004310:	68fb      	ldr	r3, [r7, #12]
 8004312:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8004316:	2b01      	cmp	r3, #1
 8004318:	d101      	bne.n	800431e <HAL_I2C_Mem_Write+0x4e>
 800431a:	2302      	movs	r3, #2
 800431c:	e0e6      	b.n	80044ec <HAL_I2C_Mem_Write+0x21c>
 800431e:	68fb      	ldr	r3, [r7, #12]
 8004320:	2201      	movs	r2, #1
 8004322:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 8004326:	f7ff f9f9 	bl	800371c <HAL_GetTick>
 800432a:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 800432c:	697b      	ldr	r3, [r7, #20]
 800432e:	9300      	str	r3, [sp, #0]
 8004330:	2319      	movs	r3, #25
 8004332:	2201      	movs	r2, #1
 8004334:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8004338:	68f8      	ldr	r0, [r7, #12]
 800433a:	f000 fac3 	bl	80048c4 <I2C_WaitOnFlagUntilTimeout>
 800433e:	4603      	mov	r3, r0
 8004340:	2b00      	cmp	r3, #0
 8004342:	d001      	beq.n	8004348 <HAL_I2C_Mem_Write+0x78>
    {
      return HAL_ERROR;
 8004344:	2301      	movs	r3, #1
 8004346:	e0d1      	b.n	80044ec <HAL_I2C_Mem_Write+0x21c>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 8004348:	68fb      	ldr	r3, [r7, #12]
 800434a:	2221      	movs	r2, #33	; 0x21
 800434c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8004350:	68fb      	ldr	r3, [r7, #12]
 8004352:	2240      	movs	r2, #64	; 0x40
 8004354:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8004358:	68fb      	ldr	r3, [r7, #12]
 800435a:	2200      	movs	r2, #0
 800435c:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 800435e:	68fb      	ldr	r3, [r7, #12]
 8004360:	6a3a      	ldr	r2, [r7, #32]
 8004362:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount = Size;
 8004364:	68fb      	ldr	r3, [r7, #12]
 8004366:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 8004368:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 800436a:	68fb      	ldr	r3, [r7, #12]
 800436c:	2200      	movs	r2, #0
 800436e:	635a      	str	r2, [r3, #52]	; 0x34

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8004370:	88f8      	ldrh	r0, [r7, #6]
 8004372:	893a      	ldrh	r2, [r7, #8]
 8004374:	8979      	ldrh	r1, [r7, #10]
 8004376:	697b      	ldr	r3, [r7, #20]
 8004378:	9301      	str	r3, [sp, #4]
 800437a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800437c:	9300      	str	r3, [sp, #0]
 800437e:	4603      	mov	r3, r0
 8004380:	68f8      	ldr	r0, [r7, #12]
 8004382:	f000 f9d3 	bl	800472c <I2C_RequestMemoryWrite>
 8004386:	4603      	mov	r3, r0
 8004388:	2b00      	cmp	r3, #0
 800438a:	d005      	beq.n	8004398 <HAL_I2C_Mem_Write+0xc8>
    {
      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 800438c:	68fb      	ldr	r3, [r7, #12]
 800438e:	2200      	movs	r2, #0
 8004390:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
      return HAL_ERROR;
 8004394:	2301      	movs	r3, #1
 8004396:	e0a9      	b.n	80044ec <HAL_I2C_Mem_Write+0x21c>
    }

    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8004398:	68fb      	ldr	r3, [r7, #12]
 800439a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800439c:	b29b      	uxth	r3, r3
 800439e:	2bff      	cmp	r3, #255	; 0xff
 80043a0:	d90e      	bls.n	80043c0 <HAL_I2C_Mem_Write+0xf0>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 80043a2:	68fb      	ldr	r3, [r7, #12]
 80043a4:	22ff      	movs	r2, #255	; 0xff
 80043a6:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE, I2C_NO_STARTSTOP);
 80043a8:	68fb      	ldr	r3, [r7, #12]
 80043aa:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80043ac:	b2da      	uxtb	r2, r3
 80043ae:	8979      	ldrh	r1, [r7, #10]
 80043b0:	2300      	movs	r3, #0
 80043b2:	9300      	str	r3, [sp, #0]
 80043b4:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 80043b8:	68f8      	ldr	r0, [r7, #12]
 80043ba:	f000 fc2b 	bl	8004c14 <I2C_TransferConfig>
 80043be:	e00f      	b.n	80043e0 <HAL_I2C_Mem_Write+0x110>
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 80043c0:	68fb      	ldr	r3, [r7, #12]
 80043c2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80043c4:	b29a      	uxth	r2, r3
 80043c6:	68fb      	ldr	r3, [r7, #12]
 80043c8:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
 80043ca:	68fb      	ldr	r3, [r7, #12]
 80043cc:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80043ce:	b2da      	uxtb	r2, r3
 80043d0:	8979      	ldrh	r1, [r7, #10]
 80043d2:	2300      	movs	r3, #0
 80043d4:	9300      	str	r3, [sp, #0]
 80043d6:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 80043da:	68f8      	ldr	r0, [r7, #12]
 80043dc:	f000 fc1a 	bl	8004c14 <I2C_TransferConfig>
    }

    do
    {
      /* Wait until TXIS flag is set */
      if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80043e0:	697a      	ldr	r2, [r7, #20]
 80043e2:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 80043e4:	68f8      	ldr	r0, [r7, #12]
 80043e6:	f000 faad 	bl	8004944 <I2C_WaitOnTXISFlagUntilTimeout>
 80043ea:	4603      	mov	r3, r0
 80043ec:	2b00      	cmp	r3, #0
 80043ee:	d001      	beq.n	80043f4 <HAL_I2C_Mem_Write+0x124>
      {
        return HAL_ERROR;
 80043f0:	2301      	movs	r3, #1
 80043f2:	e07b      	b.n	80044ec <HAL_I2C_Mem_Write+0x21c>
      }

      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 80043f4:	68fb      	ldr	r3, [r7, #12]
 80043f6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80043f8:	781a      	ldrb	r2, [r3, #0]
 80043fa:	68fb      	ldr	r3, [r7, #12]
 80043fc:	681b      	ldr	r3, [r3, #0]
 80043fe:	629a      	str	r2, [r3, #40]	; 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8004400:	68fb      	ldr	r3, [r7, #12]
 8004402:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004404:	1c5a      	adds	r2, r3, #1
 8004406:	68fb      	ldr	r3, [r7, #12]
 8004408:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferCount--;
 800440a:	68fb      	ldr	r3, [r7, #12]
 800440c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800440e:	b29b      	uxth	r3, r3
 8004410:	3b01      	subs	r3, #1
 8004412:	b29a      	uxth	r2, r3
 8004414:	68fb      	ldr	r3, [r7, #12]
 8004416:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 8004418:	68fb      	ldr	r3, [r7, #12]
 800441a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800441c:	3b01      	subs	r3, #1
 800441e:	b29a      	uxth	r2, r3
 8004420:	68fb      	ldr	r3, [r7, #12]
 8004422:	851a      	strh	r2, [r3, #40]	; 0x28

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8004424:	68fb      	ldr	r3, [r7, #12]
 8004426:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004428:	b29b      	uxth	r3, r3
 800442a:	2b00      	cmp	r3, #0
 800442c:	d034      	beq.n	8004498 <HAL_I2C_Mem_Write+0x1c8>
 800442e:	68fb      	ldr	r3, [r7, #12]
 8004430:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004432:	2b00      	cmp	r3, #0
 8004434:	d130      	bne.n	8004498 <HAL_I2C_Mem_Write+0x1c8>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 8004436:	697b      	ldr	r3, [r7, #20]
 8004438:	9300      	str	r3, [sp, #0]
 800443a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800443c:	2200      	movs	r2, #0
 800443e:	2180      	movs	r1, #128	; 0x80
 8004440:	68f8      	ldr	r0, [r7, #12]
 8004442:	f000 fa3f 	bl	80048c4 <I2C_WaitOnFlagUntilTimeout>
 8004446:	4603      	mov	r3, r0
 8004448:	2b00      	cmp	r3, #0
 800444a:	d001      	beq.n	8004450 <HAL_I2C_Mem_Write+0x180>
        {
          return HAL_ERROR;
 800444c:	2301      	movs	r3, #1
 800444e:	e04d      	b.n	80044ec <HAL_I2C_Mem_Write+0x21c>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8004450:	68fb      	ldr	r3, [r7, #12]
 8004452:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004454:	b29b      	uxth	r3, r3
 8004456:	2bff      	cmp	r3, #255	; 0xff
 8004458:	d90e      	bls.n	8004478 <HAL_I2C_Mem_Write+0x1a8>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 800445a:	68fb      	ldr	r3, [r7, #12]
 800445c:	22ff      	movs	r2, #255	; 0xff
 800445e:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 8004460:	68fb      	ldr	r3, [r7, #12]
 8004462:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004464:	b2da      	uxtb	r2, r3
 8004466:	8979      	ldrh	r1, [r7, #10]
 8004468:	2300      	movs	r3, #0
 800446a:	9300      	str	r3, [sp, #0]
 800446c:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8004470:	68f8      	ldr	r0, [r7, #12]
 8004472:	f000 fbcf 	bl	8004c14 <I2C_TransferConfig>
 8004476:	e00f      	b.n	8004498 <HAL_I2C_Mem_Write+0x1c8>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 8004478:	68fb      	ldr	r3, [r7, #12]
 800447a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800447c:	b29a      	uxth	r2, r3
 800447e:	68fb      	ldr	r3, [r7, #12]
 8004480:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8004482:	68fb      	ldr	r3, [r7, #12]
 8004484:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004486:	b2da      	uxtb	r2, r3
 8004488:	8979      	ldrh	r1, [r7, #10]
 800448a:	2300      	movs	r3, #0
 800448c:	9300      	str	r3, [sp, #0]
 800448e:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8004492:	68f8      	ldr	r0, [r7, #12]
 8004494:	f000 fbbe 	bl	8004c14 <I2C_TransferConfig>
                             I2C_NO_STARTSTOP);
        }
      }

    } while (hi2c->XferCount > 0U);
 8004498:	68fb      	ldr	r3, [r7, #12]
 800449a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800449c:	b29b      	uxth	r3, r3
 800449e:	2b00      	cmp	r3, #0
 80044a0:	d19e      	bne.n	80043e0 <HAL_I2C_Mem_Write+0x110>

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is reset */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80044a2:	697a      	ldr	r2, [r7, #20]
 80044a4:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 80044a6:	68f8      	ldr	r0, [r7, #12]
 80044a8:	f000 fa8c 	bl	80049c4 <I2C_WaitOnSTOPFlagUntilTimeout>
 80044ac:	4603      	mov	r3, r0
 80044ae:	2b00      	cmp	r3, #0
 80044b0:	d001      	beq.n	80044b6 <HAL_I2C_Mem_Write+0x1e6>
    {
      return HAL_ERROR;
 80044b2:	2301      	movs	r3, #1
 80044b4:	e01a      	b.n	80044ec <HAL_I2C_Mem_Write+0x21c>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 80044b6:	68fb      	ldr	r3, [r7, #12]
 80044b8:	681b      	ldr	r3, [r3, #0]
 80044ba:	2220      	movs	r2, #32
 80044bc:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 80044be:	68fb      	ldr	r3, [r7, #12]
 80044c0:	681b      	ldr	r3, [r3, #0]
 80044c2:	6859      	ldr	r1, [r3, #4]
 80044c4:	68fb      	ldr	r3, [r7, #12]
 80044c6:	681a      	ldr	r2, [r3, #0]
 80044c8:	4b0a      	ldr	r3, [pc, #40]	; (80044f4 <HAL_I2C_Mem_Write+0x224>)
 80044ca:	400b      	ands	r3, r1
 80044cc:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 80044ce:	68fb      	ldr	r3, [r7, #12]
 80044d0:	2220      	movs	r2, #32
 80044d2:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 80044d6:	68fb      	ldr	r3, [r7, #12]
 80044d8:	2200      	movs	r2, #0
 80044da:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80044de:	68fb      	ldr	r3, [r7, #12]
 80044e0:	2200      	movs	r2, #0
 80044e2:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 80044e6:	2300      	movs	r3, #0
 80044e8:	e000      	b.n	80044ec <HAL_I2C_Mem_Write+0x21c>
  }
  else
  {
    return HAL_BUSY;
 80044ea:	2302      	movs	r3, #2
  }
}
 80044ec:	4618      	mov	r0, r3
 80044ee:	3718      	adds	r7, #24
 80044f0:	46bd      	mov	sp, r7
 80044f2:	bd80      	pop	{r7, pc}
 80044f4:	fe00e800 	.word	0xfe00e800

080044f8 <HAL_I2C_Mem_Read>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Read(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress,
                                   uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80044f8:	b580      	push	{r7, lr}
 80044fa:	b088      	sub	sp, #32
 80044fc:	af02      	add	r7, sp, #8
 80044fe:	60f8      	str	r0, [r7, #12]
 8004500:	4608      	mov	r0, r1
 8004502:	4611      	mov	r1, r2
 8004504:	461a      	mov	r2, r3
 8004506:	4603      	mov	r3, r0
 8004508:	817b      	strh	r3, [r7, #10]
 800450a:	460b      	mov	r3, r1
 800450c:	813b      	strh	r3, [r7, #8]
 800450e:	4613      	mov	r3, r2
 8004510:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8004512:	68fb      	ldr	r3, [r7, #12]
 8004514:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8004518:	b2db      	uxtb	r3, r3
 800451a:	2b20      	cmp	r3, #32
 800451c:	f040 80fd 	bne.w	800471a <HAL_I2C_Mem_Read+0x222>
  {
    if ((pData == NULL) || (Size == 0U))
 8004520:	6a3b      	ldr	r3, [r7, #32]
 8004522:	2b00      	cmp	r3, #0
 8004524:	d002      	beq.n	800452c <HAL_I2C_Mem_Read+0x34>
 8004526:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8004528:	2b00      	cmp	r3, #0
 800452a:	d105      	bne.n	8004538 <HAL_I2C_Mem_Read+0x40>
    {
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
 800452c:	68fb      	ldr	r3, [r7, #12]
 800452e:	f44f 7200 	mov.w	r2, #512	; 0x200
 8004532:	645a      	str	r2, [r3, #68]	; 0x44
      return  HAL_ERROR;
 8004534:	2301      	movs	r3, #1
 8004536:	e0f1      	b.n	800471c <HAL_I2C_Mem_Read+0x224>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8004538:	68fb      	ldr	r3, [r7, #12]
 800453a:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800453e:	2b01      	cmp	r3, #1
 8004540:	d101      	bne.n	8004546 <HAL_I2C_Mem_Read+0x4e>
 8004542:	2302      	movs	r3, #2
 8004544:	e0ea      	b.n	800471c <HAL_I2C_Mem_Read+0x224>
 8004546:	68fb      	ldr	r3, [r7, #12]
 8004548:	2201      	movs	r2, #1
 800454a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 800454e:	f7ff f8e5 	bl	800371c <HAL_GetTick>
 8004552:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 8004554:	697b      	ldr	r3, [r7, #20]
 8004556:	9300      	str	r3, [sp, #0]
 8004558:	2319      	movs	r3, #25
 800455a:	2201      	movs	r2, #1
 800455c:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8004560:	68f8      	ldr	r0, [r7, #12]
 8004562:	f000 f9af 	bl	80048c4 <I2C_WaitOnFlagUntilTimeout>
 8004566:	4603      	mov	r3, r0
 8004568:	2b00      	cmp	r3, #0
 800456a:	d001      	beq.n	8004570 <HAL_I2C_Mem_Read+0x78>
    {
      return HAL_ERROR;
 800456c:	2301      	movs	r3, #1
 800456e:	e0d5      	b.n	800471c <HAL_I2C_Mem_Read+0x224>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 8004570:	68fb      	ldr	r3, [r7, #12]
 8004572:	2222      	movs	r2, #34	; 0x22
 8004574:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8004578:	68fb      	ldr	r3, [r7, #12]
 800457a:	2240      	movs	r2, #64	; 0x40
 800457c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8004580:	68fb      	ldr	r3, [r7, #12]
 8004582:	2200      	movs	r2, #0
 8004584:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 8004586:	68fb      	ldr	r3, [r7, #12]
 8004588:	6a3a      	ldr	r2, [r7, #32]
 800458a:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount = Size;
 800458c:	68fb      	ldr	r3, [r7, #12]
 800458e:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 8004590:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 8004592:	68fb      	ldr	r3, [r7, #12]
 8004594:	2200      	movs	r2, #0
 8004596:	635a      	str	r2, [r3, #52]	; 0x34

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8004598:	88f8      	ldrh	r0, [r7, #6]
 800459a:	893a      	ldrh	r2, [r7, #8]
 800459c:	8979      	ldrh	r1, [r7, #10]
 800459e:	697b      	ldr	r3, [r7, #20]
 80045a0:	9301      	str	r3, [sp, #4]
 80045a2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80045a4:	9300      	str	r3, [sp, #0]
 80045a6:	4603      	mov	r3, r0
 80045a8:	68f8      	ldr	r0, [r7, #12]
 80045aa:	f000 f913 	bl	80047d4 <I2C_RequestMemoryRead>
 80045ae:	4603      	mov	r3, r0
 80045b0:	2b00      	cmp	r3, #0
 80045b2:	d005      	beq.n	80045c0 <HAL_I2C_Mem_Read+0xc8>
    {
      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 80045b4:	68fb      	ldr	r3, [r7, #12]
 80045b6:	2200      	movs	r2, #0
 80045b8:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
      return HAL_ERROR;
 80045bc:	2301      	movs	r3, #1
 80045be:	e0ad      	b.n	800471c <HAL_I2C_Mem_Read+0x224>
    }

    /* Send Slave Address */
    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 80045c0:	68fb      	ldr	r3, [r7, #12]
 80045c2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80045c4:	b29b      	uxth	r3, r3
 80045c6:	2bff      	cmp	r3, #255	; 0xff
 80045c8:	d90e      	bls.n	80045e8 <HAL_I2C_Mem_Read+0xf0>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 80045ca:	68fb      	ldr	r3, [r7, #12]
 80045cc:	22ff      	movs	r2, #255	; 0xff
 80045ce:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 80045d0:	68fb      	ldr	r3, [r7, #12]
 80045d2:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80045d4:	b2da      	uxtb	r2, r3
 80045d6:	8979      	ldrh	r1, [r7, #10]
 80045d8:	4b52      	ldr	r3, [pc, #328]	; (8004724 <HAL_I2C_Mem_Read+0x22c>)
 80045da:	9300      	str	r3, [sp, #0]
 80045dc:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 80045e0:	68f8      	ldr	r0, [r7, #12]
 80045e2:	f000 fb17 	bl	8004c14 <I2C_TransferConfig>
 80045e6:	e00f      	b.n	8004608 <HAL_I2C_Mem_Read+0x110>
                         I2C_GENERATE_START_READ);
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 80045e8:	68fb      	ldr	r3, [r7, #12]
 80045ea:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80045ec:	b29a      	uxth	r2, r3
 80045ee:	68fb      	ldr	r3, [r7, #12]
 80045f0:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 80045f2:	68fb      	ldr	r3, [r7, #12]
 80045f4:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80045f6:	b2da      	uxtb	r2, r3
 80045f8:	8979      	ldrh	r1, [r7, #10]
 80045fa:	4b4a      	ldr	r3, [pc, #296]	; (8004724 <HAL_I2C_Mem_Read+0x22c>)
 80045fc:	9300      	str	r3, [sp, #0]
 80045fe:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8004602:	68f8      	ldr	r0, [r7, #12]
 8004604:	f000 fb06 	bl	8004c14 <I2C_TransferConfig>
    }

    do
    {
      /* Wait until RXNE flag is set */
      if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_RXNE, RESET, Timeout, tickstart) != HAL_OK)
 8004608:	697b      	ldr	r3, [r7, #20]
 800460a:	9300      	str	r3, [sp, #0]
 800460c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800460e:	2200      	movs	r2, #0
 8004610:	2104      	movs	r1, #4
 8004612:	68f8      	ldr	r0, [r7, #12]
 8004614:	f000 f956 	bl	80048c4 <I2C_WaitOnFlagUntilTimeout>
 8004618:	4603      	mov	r3, r0
 800461a:	2b00      	cmp	r3, #0
 800461c:	d001      	beq.n	8004622 <HAL_I2C_Mem_Read+0x12a>
      {
        return HAL_ERROR;
 800461e:	2301      	movs	r3, #1
 8004620:	e07c      	b.n	800471c <HAL_I2C_Mem_Read+0x224>
      }

      /* Read data from RXDR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 8004622:	68fb      	ldr	r3, [r7, #12]
 8004624:	681b      	ldr	r3, [r3, #0]
 8004626:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8004628:	68fb      	ldr	r3, [r7, #12]
 800462a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800462c:	b2d2      	uxtb	r2, r2
 800462e:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8004630:	68fb      	ldr	r3, [r7, #12]
 8004632:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004634:	1c5a      	adds	r2, r3, #1
 8004636:	68fb      	ldr	r3, [r7, #12]
 8004638:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferSize--;
 800463a:	68fb      	ldr	r3, [r7, #12]
 800463c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800463e:	3b01      	subs	r3, #1
 8004640:	b29a      	uxth	r2, r3
 8004642:	68fb      	ldr	r3, [r7, #12]
 8004644:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 8004646:	68fb      	ldr	r3, [r7, #12]
 8004648:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800464a:	b29b      	uxth	r3, r3
 800464c:	3b01      	subs	r3, #1
 800464e:	b29a      	uxth	r2, r3
 8004650:	68fb      	ldr	r3, [r7, #12]
 8004652:	855a      	strh	r2, [r3, #42]	; 0x2a

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8004654:	68fb      	ldr	r3, [r7, #12]
 8004656:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004658:	b29b      	uxth	r3, r3
 800465a:	2b00      	cmp	r3, #0
 800465c:	d034      	beq.n	80046c8 <HAL_I2C_Mem_Read+0x1d0>
 800465e:	68fb      	ldr	r3, [r7, #12]
 8004660:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004662:	2b00      	cmp	r3, #0
 8004664:	d130      	bne.n	80046c8 <HAL_I2C_Mem_Read+0x1d0>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 8004666:	697b      	ldr	r3, [r7, #20]
 8004668:	9300      	str	r3, [sp, #0]
 800466a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800466c:	2200      	movs	r2, #0
 800466e:	2180      	movs	r1, #128	; 0x80
 8004670:	68f8      	ldr	r0, [r7, #12]
 8004672:	f000 f927 	bl	80048c4 <I2C_WaitOnFlagUntilTimeout>
 8004676:	4603      	mov	r3, r0
 8004678:	2b00      	cmp	r3, #0
 800467a:	d001      	beq.n	8004680 <HAL_I2C_Mem_Read+0x188>
        {
          return HAL_ERROR;
 800467c:	2301      	movs	r3, #1
 800467e:	e04d      	b.n	800471c <HAL_I2C_Mem_Read+0x224>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8004680:	68fb      	ldr	r3, [r7, #12]
 8004682:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004684:	b29b      	uxth	r3, r3
 8004686:	2bff      	cmp	r3, #255	; 0xff
 8004688:	d90e      	bls.n	80046a8 <HAL_I2C_Mem_Read+0x1b0>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 800468a:	68fb      	ldr	r3, [r7, #12]
 800468c:	22ff      	movs	r2, #255	; 0xff
 800468e:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t) hi2c->XferSize, I2C_RELOAD_MODE,
 8004690:	68fb      	ldr	r3, [r7, #12]
 8004692:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004694:	b2da      	uxtb	r2, r3
 8004696:	8979      	ldrh	r1, [r7, #10]
 8004698:	2300      	movs	r3, #0
 800469a:	9300      	str	r3, [sp, #0]
 800469c:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 80046a0:	68f8      	ldr	r0, [r7, #12]
 80046a2:	f000 fab7 	bl	8004c14 <I2C_TransferConfig>
 80046a6:	e00f      	b.n	80046c8 <HAL_I2C_Mem_Read+0x1d0>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 80046a8:	68fb      	ldr	r3, [r7, #12]
 80046aa:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80046ac:	b29a      	uxth	r2, r3
 80046ae:	68fb      	ldr	r3, [r7, #12]
 80046b0:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 80046b2:	68fb      	ldr	r3, [r7, #12]
 80046b4:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80046b6:	b2da      	uxtb	r2, r3
 80046b8:	8979      	ldrh	r1, [r7, #10]
 80046ba:	2300      	movs	r3, #0
 80046bc:	9300      	str	r3, [sp, #0]
 80046be:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 80046c2:	68f8      	ldr	r0, [r7, #12]
 80046c4:	f000 faa6 	bl	8004c14 <I2C_TransferConfig>
                             I2C_NO_STARTSTOP);
        }
      }
    } while (hi2c->XferCount > 0U);
 80046c8:	68fb      	ldr	r3, [r7, #12]
 80046ca:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80046cc:	b29b      	uxth	r3, r3
 80046ce:	2b00      	cmp	r3, #0
 80046d0:	d19a      	bne.n	8004608 <HAL_I2C_Mem_Read+0x110>

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is reset */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80046d2:	697a      	ldr	r2, [r7, #20]
 80046d4:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 80046d6:	68f8      	ldr	r0, [r7, #12]
 80046d8:	f000 f974 	bl	80049c4 <I2C_WaitOnSTOPFlagUntilTimeout>
 80046dc:	4603      	mov	r3, r0
 80046de:	2b00      	cmp	r3, #0
 80046e0:	d001      	beq.n	80046e6 <HAL_I2C_Mem_Read+0x1ee>
    {
      return HAL_ERROR;
 80046e2:	2301      	movs	r3, #1
 80046e4:	e01a      	b.n	800471c <HAL_I2C_Mem_Read+0x224>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 80046e6:	68fb      	ldr	r3, [r7, #12]
 80046e8:	681b      	ldr	r3, [r3, #0]
 80046ea:	2220      	movs	r2, #32
 80046ec:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 80046ee:	68fb      	ldr	r3, [r7, #12]
 80046f0:	681b      	ldr	r3, [r3, #0]
 80046f2:	6859      	ldr	r1, [r3, #4]
 80046f4:	68fb      	ldr	r3, [r7, #12]
 80046f6:	681a      	ldr	r2, [r3, #0]
 80046f8:	4b0b      	ldr	r3, [pc, #44]	; (8004728 <HAL_I2C_Mem_Read+0x230>)
 80046fa:	400b      	ands	r3, r1
 80046fc:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 80046fe:	68fb      	ldr	r3, [r7, #12]
 8004700:	2220      	movs	r2, #32
 8004702:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 8004706:	68fb      	ldr	r3, [r7, #12]
 8004708:	2200      	movs	r2, #0
 800470a:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800470e:	68fb      	ldr	r3, [r7, #12]
 8004710:	2200      	movs	r2, #0
 8004712:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8004716:	2300      	movs	r3, #0
 8004718:	e000      	b.n	800471c <HAL_I2C_Mem_Read+0x224>
  }
  else
  {
    return HAL_BUSY;
 800471a:	2302      	movs	r3, #2
  }
}
 800471c:	4618      	mov	r0, r3
 800471e:	3718      	adds	r7, #24
 8004720:	46bd      	mov	sp, r7
 8004722:	bd80      	pop	{r7, pc}
 8004724:	80002400 	.word	0x80002400
 8004728:	fe00e800 	.word	0xfe00e800

0800472c <I2C_RequestMemoryWrite>:
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress,
                                                uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout,
                                                uint32_t Tickstart)
{
 800472c:	b580      	push	{r7, lr}
 800472e:	b086      	sub	sp, #24
 8004730:	af02      	add	r7, sp, #8
 8004732:	60f8      	str	r0, [r7, #12]
 8004734:	4608      	mov	r0, r1
 8004736:	4611      	mov	r1, r2
 8004738:	461a      	mov	r2, r3
 800473a:	4603      	mov	r3, r0
 800473c:	817b      	strh	r3, [r7, #10]
 800473e:	460b      	mov	r3, r1
 8004740:	813b      	strh	r3, [r7, #8]
 8004742:	4613      	mov	r3, r2
 8004744:	80fb      	strh	r3, [r7, #6]
  I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_RELOAD_MODE, I2C_GENERATE_START_WRITE);
 8004746:	88fb      	ldrh	r3, [r7, #6]
 8004748:	b2da      	uxtb	r2, r3
 800474a:	8979      	ldrh	r1, [r7, #10]
 800474c:	4b20      	ldr	r3, [pc, #128]	; (80047d0 <I2C_RequestMemoryWrite+0xa4>)
 800474e:	9300      	str	r3, [sp, #0]
 8004750:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8004754:	68f8      	ldr	r0, [r7, #12]
 8004756:	f000 fa5d 	bl	8004c14 <I2C_TransferConfig>

  /* Wait until TXIS flag is set */
  if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800475a:	69fa      	ldr	r2, [r7, #28]
 800475c:	69b9      	ldr	r1, [r7, #24]
 800475e:	68f8      	ldr	r0, [r7, #12]
 8004760:	f000 f8f0 	bl	8004944 <I2C_WaitOnTXISFlagUntilTimeout>
 8004764:	4603      	mov	r3, r0
 8004766:	2b00      	cmp	r3, #0
 8004768:	d001      	beq.n	800476e <I2C_RequestMemoryWrite+0x42>
  {
    return HAL_ERROR;
 800476a:	2301      	movs	r3, #1
 800476c:	e02c      	b.n	80047c8 <I2C_RequestMemoryWrite+0x9c>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 800476e:	88fb      	ldrh	r3, [r7, #6]
 8004770:	2b01      	cmp	r3, #1
 8004772:	d105      	bne.n	8004780 <I2C_RequestMemoryWrite+0x54>
  {
    /* Send Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8004774:	893b      	ldrh	r3, [r7, #8]
 8004776:	b2da      	uxtb	r2, r3
 8004778:	68fb      	ldr	r3, [r7, #12]
 800477a:	681b      	ldr	r3, [r3, #0]
 800477c:	629a      	str	r2, [r3, #40]	; 0x28
 800477e:	e015      	b.n	80047ac <I2C_RequestMemoryWrite+0x80>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_MSB(MemAddress);
 8004780:	893b      	ldrh	r3, [r7, #8]
 8004782:	0a1b      	lsrs	r3, r3, #8
 8004784:	b29b      	uxth	r3, r3
 8004786:	b2da      	uxtb	r2, r3
 8004788:	68fb      	ldr	r3, [r7, #12]
 800478a:	681b      	ldr	r3, [r3, #0]
 800478c:	629a      	str	r2, [r3, #40]	; 0x28

    /* Wait until TXIS flag is set */
    if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800478e:	69fa      	ldr	r2, [r7, #28]
 8004790:	69b9      	ldr	r1, [r7, #24]
 8004792:	68f8      	ldr	r0, [r7, #12]
 8004794:	f000 f8d6 	bl	8004944 <I2C_WaitOnTXISFlagUntilTimeout>
 8004798:	4603      	mov	r3, r0
 800479a:	2b00      	cmp	r3, #0
 800479c:	d001      	beq.n	80047a2 <I2C_RequestMemoryWrite+0x76>
    {
      return HAL_ERROR;
 800479e:	2301      	movs	r3, #1
 80047a0:	e012      	b.n	80047c8 <I2C_RequestMemoryWrite+0x9c>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 80047a2:	893b      	ldrh	r3, [r7, #8]
 80047a4:	b2da      	uxtb	r2, r3
 80047a6:	68fb      	ldr	r3, [r7, #12]
 80047a8:	681b      	ldr	r3, [r3, #0]
 80047aa:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Wait until TCR flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, Tickstart) != HAL_OK)
 80047ac:	69fb      	ldr	r3, [r7, #28]
 80047ae:	9300      	str	r3, [sp, #0]
 80047b0:	69bb      	ldr	r3, [r7, #24]
 80047b2:	2200      	movs	r2, #0
 80047b4:	2180      	movs	r1, #128	; 0x80
 80047b6:	68f8      	ldr	r0, [r7, #12]
 80047b8:	f000 f884 	bl	80048c4 <I2C_WaitOnFlagUntilTimeout>
 80047bc:	4603      	mov	r3, r0
 80047be:	2b00      	cmp	r3, #0
 80047c0:	d001      	beq.n	80047c6 <I2C_RequestMemoryWrite+0x9a>
  {
    return HAL_ERROR;
 80047c2:	2301      	movs	r3, #1
 80047c4:	e000      	b.n	80047c8 <I2C_RequestMemoryWrite+0x9c>
  }

  return HAL_OK;
 80047c6:	2300      	movs	r3, #0
}
 80047c8:	4618      	mov	r0, r3
 80047ca:	3710      	adds	r7, #16
 80047cc:	46bd      	mov	sp, r7
 80047ce:	bd80      	pop	{r7, pc}
 80047d0:	80002000 	.word	0x80002000

080047d4 <I2C_RequestMemoryRead>:
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress,
                                               uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout,
                                               uint32_t Tickstart)
{
 80047d4:	b580      	push	{r7, lr}
 80047d6:	b086      	sub	sp, #24
 80047d8:	af02      	add	r7, sp, #8
 80047da:	60f8      	str	r0, [r7, #12]
 80047dc:	4608      	mov	r0, r1
 80047de:	4611      	mov	r1, r2
 80047e0:	461a      	mov	r2, r3
 80047e2:	4603      	mov	r3, r0
 80047e4:	817b      	strh	r3, [r7, #10]
 80047e6:	460b      	mov	r3, r1
 80047e8:	813b      	strh	r3, [r7, #8]
 80047ea:	4613      	mov	r3, r2
 80047ec:	80fb      	strh	r3, [r7, #6]
  I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_SOFTEND_MODE, I2C_GENERATE_START_WRITE);
 80047ee:	88fb      	ldrh	r3, [r7, #6]
 80047f0:	b2da      	uxtb	r2, r3
 80047f2:	8979      	ldrh	r1, [r7, #10]
 80047f4:	4b20      	ldr	r3, [pc, #128]	; (8004878 <I2C_RequestMemoryRead+0xa4>)
 80047f6:	9300      	str	r3, [sp, #0]
 80047f8:	2300      	movs	r3, #0
 80047fa:	68f8      	ldr	r0, [r7, #12]
 80047fc:	f000 fa0a 	bl	8004c14 <I2C_TransferConfig>

  /* Wait until TXIS flag is set */
  if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8004800:	69fa      	ldr	r2, [r7, #28]
 8004802:	69b9      	ldr	r1, [r7, #24]
 8004804:	68f8      	ldr	r0, [r7, #12]
 8004806:	f000 f89d 	bl	8004944 <I2C_WaitOnTXISFlagUntilTimeout>
 800480a:	4603      	mov	r3, r0
 800480c:	2b00      	cmp	r3, #0
 800480e:	d001      	beq.n	8004814 <I2C_RequestMemoryRead+0x40>
  {
    return HAL_ERROR;
 8004810:	2301      	movs	r3, #1
 8004812:	e02c      	b.n	800486e <I2C_RequestMemoryRead+0x9a>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8004814:	88fb      	ldrh	r3, [r7, #6]
 8004816:	2b01      	cmp	r3, #1
 8004818:	d105      	bne.n	8004826 <I2C_RequestMemoryRead+0x52>
  {
    /* Send Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 800481a:	893b      	ldrh	r3, [r7, #8]
 800481c:	b2da      	uxtb	r2, r3
 800481e:	68fb      	ldr	r3, [r7, #12]
 8004820:	681b      	ldr	r3, [r3, #0]
 8004822:	629a      	str	r2, [r3, #40]	; 0x28
 8004824:	e015      	b.n	8004852 <I2C_RequestMemoryRead+0x7e>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_MSB(MemAddress);
 8004826:	893b      	ldrh	r3, [r7, #8]
 8004828:	0a1b      	lsrs	r3, r3, #8
 800482a:	b29b      	uxth	r3, r3
 800482c:	b2da      	uxtb	r2, r3
 800482e:	68fb      	ldr	r3, [r7, #12]
 8004830:	681b      	ldr	r3, [r3, #0]
 8004832:	629a      	str	r2, [r3, #40]	; 0x28

    /* Wait until TXIS flag is set */
    if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8004834:	69fa      	ldr	r2, [r7, #28]
 8004836:	69b9      	ldr	r1, [r7, #24]
 8004838:	68f8      	ldr	r0, [r7, #12]
 800483a:	f000 f883 	bl	8004944 <I2C_WaitOnTXISFlagUntilTimeout>
 800483e:	4603      	mov	r3, r0
 8004840:	2b00      	cmp	r3, #0
 8004842:	d001      	beq.n	8004848 <I2C_RequestMemoryRead+0x74>
    {
      return HAL_ERROR;
 8004844:	2301      	movs	r3, #1
 8004846:	e012      	b.n	800486e <I2C_RequestMemoryRead+0x9a>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8004848:	893b      	ldrh	r3, [r7, #8]
 800484a:	b2da      	uxtb	r2, r3
 800484c:	68fb      	ldr	r3, [r7, #12]
 800484e:	681b      	ldr	r3, [r3, #0]
 8004850:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Wait until TC flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TC, RESET, Timeout, Tickstart) != HAL_OK)
 8004852:	69fb      	ldr	r3, [r7, #28]
 8004854:	9300      	str	r3, [sp, #0]
 8004856:	69bb      	ldr	r3, [r7, #24]
 8004858:	2200      	movs	r2, #0
 800485a:	2140      	movs	r1, #64	; 0x40
 800485c:	68f8      	ldr	r0, [r7, #12]
 800485e:	f000 f831 	bl	80048c4 <I2C_WaitOnFlagUntilTimeout>
 8004862:	4603      	mov	r3, r0
 8004864:	2b00      	cmp	r3, #0
 8004866:	d001      	beq.n	800486c <I2C_RequestMemoryRead+0x98>
  {
    return HAL_ERROR;
 8004868:	2301      	movs	r3, #1
 800486a:	e000      	b.n	800486e <I2C_RequestMemoryRead+0x9a>
  }

  return HAL_OK;
 800486c:	2300      	movs	r3, #0
}
 800486e:	4618      	mov	r0, r3
 8004870:	3710      	adds	r7, #16
 8004872:	46bd      	mov	sp, r7
 8004874:	bd80      	pop	{r7, pc}
 8004876:	bf00      	nop
 8004878:	80002000 	.word	0x80002000

0800487c <I2C_Flush_TXDR>:
  * @brief  I2C Tx data register flush process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_Flush_TXDR(I2C_HandleTypeDef *hi2c)
{
 800487c:	b480      	push	{r7}
 800487e:	b083      	sub	sp, #12
 8004880:	af00      	add	r7, sp, #0
 8004882:	6078      	str	r0, [r7, #4]
  /* If a pending TXIS flag is set */
  /* Write a dummy data in TXDR to clear it */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) != RESET)
 8004884:	687b      	ldr	r3, [r7, #4]
 8004886:	681b      	ldr	r3, [r3, #0]
 8004888:	699b      	ldr	r3, [r3, #24]
 800488a:	f003 0302 	and.w	r3, r3, #2
 800488e:	2b02      	cmp	r3, #2
 8004890:	d103      	bne.n	800489a <I2C_Flush_TXDR+0x1e>
  {
    hi2c->Instance->TXDR = 0x00U;
 8004892:	687b      	ldr	r3, [r7, #4]
 8004894:	681b      	ldr	r3, [r3, #0]
 8004896:	2200      	movs	r2, #0
 8004898:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Flush TX register if not empty */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 800489a:	687b      	ldr	r3, [r7, #4]
 800489c:	681b      	ldr	r3, [r3, #0]
 800489e:	699b      	ldr	r3, [r3, #24]
 80048a0:	f003 0301 	and.w	r3, r3, #1
 80048a4:	2b01      	cmp	r3, #1
 80048a6:	d007      	beq.n	80048b8 <I2C_Flush_TXDR+0x3c>
  {
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_TXE);
 80048a8:	687b      	ldr	r3, [r7, #4]
 80048aa:	681b      	ldr	r3, [r3, #0]
 80048ac:	699a      	ldr	r2, [r3, #24]
 80048ae:	687b      	ldr	r3, [r7, #4]
 80048b0:	681b      	ldr	r3, [r3, #0]
 80048b2:	f042 0201 	orr.w	r2, r2, #1
 80048b6:	619a      	str	r2, [r3, #24]
  }
}
 80048b8:	bf00      	nop
 80048ba:	370c      	adds	r7, #12
 80048bc:	46bd      	mov	sp, r7
 80048be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80048c2:	4770      	bx	lr

080048c4 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status,
                                                    uint32_t Timeout, uint32_t Tickstart)
{
 80048c4:	b580      	push	{r7, lr}
 80048c6:	b084      	sub	sp, #16
 80048c8:	af00      	add	r7, sp, #0
 80048ca:	60f8      	str	r0, [r7, #12]
 80048cc:	60b9      	str	r1, [r7, #8]
 80048ce:	603b      	str	r3, [r7, #0]
 80048d0:	4613      	mov	r3, r2
 80048d2:	71fb      	strb	r3, [r7, #7]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 80048d4:	e022      	b.n	800491c <I2C_WaitOnFlagUntilTimeout+0x58>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80048d6:	683b      	ldr	r3, [r7, #0]
 80048d8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80048dc:	d01e      	beq.n	800491c <I2C_WaitOnFlagUntilTimeout+0x58>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80048de:	f7fe ff1d 	bl	800371c <HAL_GetTick>
 80048e2:	4602      	mov	r2, r0
 80048e4:	69bb      	ldr	r3, [r7, #24]
 80048e6:	1ad3      	subs	r3, r2, r3
 80048e8:	683a      	ldr	r2, [r7, #0]
 80048ea:	429a      	cmp	r2, r3
 80048ec:	d302      	bcc.n	80048f4 <I2C_WaitOnFlagUntilTimeout+0x30>
 80048ee:	683b      	ldr	r3, [r7, #0]
 80048f0:	2b00      	cmp	r3, #0
 80048f2:	d113      	bne.n	800491c <I2C_WaitOnFlagUntilTimeout+0x58>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 80048f4:	68fb      	ldr	r3, [r7, #12]
 80048f6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80048f8:	f043 0220 	orr.w	r2, r3, #32
 80048fc:	68fb      	ldr	r3, [r7, #12]
 80048fe:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 8004900:	68fb      	ldr	r3, [r7, #12]
 8004902:	2220      	movs	r2, #32
 8004904:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8004908:	68fb      	ldr	r3, [r7, #12]
 800490a:	2200      	movs	r2, #0
 800490c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8004910:	68fb      	ldr	r3, [r7, #12]
 8004912:	2200      	movs	r2, #0
 8004914:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
        return HAL_ERROR;
 8004918:	2301      	movs	r3, #1
 800491a:	e00f      	b.n	800493c <I2C_WaitOnFlagUntilTimeout+0x78>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 800491c:	68fb      	ldr	r3, [r7, #12]
 800491e:	681b      	ldr	r3, [r3, #0]
 8004920:	699a      	ldr	r2, [r3, #24]
 8004922:	68bb      	ldr	r3, [r7, #8]
 8004924:	4013      	ands	r3, r2
 8004926:	68ba      	ldr	r2, [r7, #8]
 8004928:	429a      	cmp	r2, r3
 800492a:	bf0c      	ite	eq
 800492c:	2301      	moveq	r3, #1
 800492e:	2300      	movne	r3, #0
 8004930:	b2db      	uxtb	r3, r3
 8004932:	461a      	mov	r2, r3
 8004934:	79fb      	ldrb	r3, [r7, #7]
 8004936:	429a      	cmp	r2, r3
 8004938:	d0cd      	beq.n	80048d6 <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 800493a:	2300      	movs	r3, #0
}
 800493c:	4618      	mov	r0, r3
 800493e:	3710      	adds	r7, #16
 8004940:	46bd      	mov	sp, r7
 8004942:	bd80      	pop	{r7, pc}

08004944 <I2C_WaitOnTXISFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXISFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 8004944:	b580      	push	{r7, lr}
 8004946:	b084      	sub	sp, #16
 8004948:	af00      	add	r7, sp, #0
 800494a:	60f8      	str	r0, [r7, #12]
 800494c:	60b9      	str	r1, [r7, #8]
 800494e:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 8004950:	e02c      	b.n	80049ac <I2C_WaitOnTXISFlagUntilTimeout+0x68>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 8004952:	687a      	ldr	r2, [r7, #4]
 8004954:	68b9      	ldr	r1, [r7, #8]
 8004956:	68f8      	ldr	r0, [r7, #12]
 8004958:	f000 f870 	bl	8004a3c <I2C_IsErrorOccurred>
 800495c:	4603      	mov	r3, r0
 800495e:	2b00      	cmp	r3, #0
 8004960:	d001      	beq.n	8004966 <I2C_WaitOnTXISFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 8004962:	2301      	movs	r3, #1
 8004964:	e02a      	b.n	80049bc <I2C_WaitOnTXISFlagUntilTimeout+0x78>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8004966:	68bb      	ldr	r3, [r7, #8]
 8004968:	f1b3 3fff 	cmp.w	r3, #4294967295
 800496c:	d01e      	beq.n	80049ac <I2C_WaitOnTXISFlagUntilTimeout+0x68>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800496e:	f7fe fed5 	bl	800371c <HAL_GetTick>
 8004972:	4602      	mov	r2, r0
 8004974:	687b      	ldr	r3, [r7, #4]
 8004976:	1ad3      	subs	r3, r2, r3
 8004978:	68ba      	ldr	r2, [r7, #8]
 800497a:	429a      	cmp	r2, r3
 800497c:	d302      	bcc.n	8004984 <I2C_WaitOnTXISFlagUntilTimeout+0x40>
 800497e:	68bb      	ldr	r3, [r7, #8]
 8004980:	2b00      	cmp	r3, #0
 8004982:	d113      	bne.n	80049ac <I2C_WaitOnTXISFlagUntilTimeout+0x68>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8004984:	68fb      	ldr	r3, [r7, #12]
 8004986:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004988:	f043 0220 	orr.w	r2, r3, #32
 800498c:	68fb      	ldr	r3, [r7, #12]
 800498e:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 8004990:	68fb      	ldr	r3, [r7, #12]
 8004992:	2220      	movs	r2, #32
 8004994:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8004998:	68fb      	ldr	r3, [r7, #12]
 800499a:	2200      	movs	r2, #0
 800499c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80049a0:	68fb      	ldr	r3, [r7, #12]
 80049a2:	2200      	movs	r2, #0
 80049a4:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

        return HAL_ERROR;
 80049a8:	2301      	movs	r3, #1
 80049aa:	e007      	b.n	80049bc <I2C_WaitOnTXISFlagUntilTimeout+0x78>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 80049ac:	68fb      	ldr	r3, [r7, #12]
 80049ae:	681b      	ldr	r3, [r3, #0]
 80049b0:	699b      	ldr	r3, [r3, #24]
 80049b2:	f003 0302 	and.w	r3, r3, #2
 80049b6:	2b02      	cmp	r3, #2
 80049b8:	d1cb      	bne.n	8004952 <I2C_WaitOnTXISFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 80049ba:	2300      	movs	r3, #0
}
 80049bc:	4618      	mov	r0, r3
 80049be:	3710      	adds	r7, #16
 80049c0:	46bd      	mov	sp, r7
 80049c2:	bd80      	pop	{r7, pc}

080049c4 <I2C_WaitOnSTOPFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnSTOPFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 80049c4:	b580      	push	{r7, lr}
 80049c6:	b084      	sub	sp, #16
 80049c8:	af00      	add	r7, sp, #0
 80049ca:	60f8      	str	r0, [r7, #12]
 80049cc:	60b9      	str	r1, [r7, #8]
 80049ce:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 80049d0:	e028      	b.n	8004a24 <I2C_WaitOnSTOPFlagUntilTimeout+0x60>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 80049d2:	687a      	ldr	r2, [r7, #4]
 80049d4:	68b9      	ldr	r1, [r7, #8]
 80049d6:	68f8      	ldr	r0, [r7, #12]
 80049d8:	f000 f830 	bl	8004a3c <I2C_IsErrorOccurred>
 80049dc:	4603      	mov	r3, r0
 80049de:	2b00      	cmp	r3, #0
 80049e0:	d001      	beq.n	80049e6 <I2C_WaitOnSTOPFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 80049e2:	2301      	movs	r3, #1
 80049e4:	e026      	b.n	8004a34 <I2C_WaitOnSTOPFlagUntilTimeout+0x70>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80049e6:	f7fe fe99 	bl	800371c <HAL_GetTick>
 80049ea:	4602      	mov	r2, r0
 80049ec:	687b      	ldr	r3, [r7, #4]
 80049ee:	1ad3      	subs	r3, r2, r3
 80049f0:	68ba      	ldr	r2, [r7, #8]
 80049f2:	429a      	cmp	r2, r3
 80049f4:	d302      	bcc.n	80049fc <I2C_WaitOnSTOPFlagUntilTimeout+0x38>
 80049f6:	68bb      	ldr	r3, [r7, #8]
 80049f8:	2b00      	cmp	r3, #0
 80049fa:	d113      	bne.n	8004a24 <I2C_WaitOnSTOPFlagUntilTimeout+0x60>
    {
      hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 80049fc:	68fb      	ldr	r3, [r7, #12]
 80049fe:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004a00:	f043 0220 	orr.w	r2, r3, #32
 8004a04:	68fb      	ldr	r3, [r7, #12]
 8004a06:	645a      	str	r2, [r3, #68]	; 0x44
      hi2c->State = HAL_I2C_STATE_READY;
 8004a08:	68fb      	ldr	r3, [r7, #12]
 8004a0a:	2220      	movs	r2, #32
 8004a0c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8004a10:	68fb      	ldr	r3, [r7, #12]
 8004a12:	2200      	movs	r2, #0
 8004a14:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8004a18:	68fb      	ldr	r3, [r7, #12]
 8004a1a:	2200      	movs	r2, #0
 8004a1c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

      return HAL_ERROR;
 8004a20:	2301      	movs	r3, #1
 8004a22:	e007      	b.n	8004a34 <I2C_WaitOnSTOPFlagUntilTimeout+0x70>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8004a24:	68fb      	ldr	r3, [r7, #12]
 8004a26:	681b      	ldr	r3, [r3, #0]
 8004a28:	699b      	ldr	r3, [r3, #24]
 8004a2a:	f003 0320 	and.w	r3, r3, #32
 8004a2e:	2b20      	cmp	r3, #32
 8004a30:	d1cf      	bne.n	80049d2 <I2C_WaitOnSTOPFlagUntilTimeout+0xe>
    }
  }
  return HAL_OK;
 8004a32:	2300      	movs	r3, #0
}
 8004a34:	4618      	mov	r0, r3
 8004a36:	3710      	adds	r7, #16
 8004a38:	46bd      	mov	sp, r7
 8004a3a:	bd80      	pop	{r7, pc}

08004a3c <I2C_IsErrorOccurred>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsErrorOccurred(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8004a3c:	b580      	push	{r7, lr}
 8004a3e:	b08a      	sub	sp, #40	; 0x28
 8004a40:	af00      	add	r7, sp, #0
 8004a42:	60f8      	str	r0, [r7, #12]
 8004a44:	60b9      	str	r1, [r7, #8]
 8004a46:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8004a48:	2300      	movs	r3, #0
 8004a4a:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  uint32_t itflag   = hi2c->Instance->ISR;
 8004a4e:	68fb      	ldr	r3, [r7, #12]
 8004a50:	681b      	ldr	r3, [r3, #0]
 8004a52:	699b      	ldr	r3, [r3, #24]
 8004a54:	61bb      	str	r3, [r7, #24]
  uint32_t error_code = 0;
 8004a56:	2300      	movs	r3, #0
 8004a58:	623b      	str	r3, [r7, #32]
  uint32_t tickstart = Tickstart;
 8004a5a:	687b      	ldr	r3, [r7, #4]
 8004a5c:	61fb      	str	r3, [r7, #28]
  uint32_t tmp1;
  HAL_I2C_ModeTypeDef tmp2;

  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_AF))
 8004a5e:	69bb      	ldr	r3, [r7, #24]
 8004a60:	f003 0310 	and.w	r3, r3, #16
 8004a64:	2b00      	cmp	r3, #0
 8004a66:	d075      	beq.n	8004b54 <I2C_IsErrorOccurred+0x118>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8004a68:	68fb      	ldr	r3, [r7, #12]
 8004a6a:	681b      	ldr	r3, [r3, #0]
 8004a6c:	2210      	movs	r2, #16
 8004a6e:	61da      	str	r2, [r3, #28]

    /* Wait until STOP Flag is set or timeout occurred */
    /* AutoEnd should be initiate after AF */
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 8004a70:	e056      	b.n	8004b20 <I2C_IsErrorOccurred+0xe4>
    {
      /* Check for the Timeout */
      if (Timeout != HAL_MAX_DELAY)
 8004a72:	68bb      	ldr	r3, [r7, #8]
 8004a74:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004a78:	d052      	beq.n	8004b20 <I2C_IsErrorOccurred+0xe4>
      {
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 8004a7a:	f7fe fe4f 	bl	800371c <HAL_GetTick>
 8004a7e:	4602      	mov	r2, r0
 8004a80:	69fb      	ldr	r3, [r7, #28]
 8004a82:	1ad3      	subs	r3, r2, r3
 8004a84:	68ba      	ldr	r2, [r7, #8]
 8004a86:	429a      	cmp	r2, r3
 8004a88:	d302      	bcc.n	8004a90 <I2C_IsErrorOccurred+0x54>
 8004a8a:	68bb      	ldr	r3, [r7, #8]
 8004a8c:	2b00      	cmp	r3, #0
 8004a8e:	d147      	bne.n	8004b20 <I2C_IsErrorOccurred+0xe4>
        {
          tmp1 = (uint32_t)(hi2c->Instance->CR2 & I2C_CR2_STOP);
 8004a90:	68fb      	ldr	r3, [r7, #12]
 8004a92:	681b      	ldr	r3, [r3, #0]
 8004a94:	685b      	ldr	r3, [r3, #4]
 8004a96:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8004a9a:	617b      	str	r3, [r7, #20]
          tmp2 = hi2c->Mode;
 8004a9c:	68fb      	ldr	r3, [r7, #12]
 8004a9e:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8004aa2:	74fb      	strb	r3, [r7, #19]

          /* In case of I2C still busy, try to regenerate a STOP manually */
          if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) != RESET) && \
 8004aa4:	68fb      	ldr	r3, [r7, #12]
 8004aa6:	681b      	ldr	r3, [r3, #0]
 8004aa8:	699b      	ldr	r3, [r3, #24]
 8004aaa:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8004aae:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8004ab2:	d12e      	bne.n	8004b12 <I2C_IsErrorOccurred+0xd6>
 8004ab4:	697b      	ldr	r3, [r7, #20]
 8004ab6:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8004aba:	d02a      	beq.n	8004b12 <I2C_IsErrorOccurred+0xd6>
              (tmp1 != I2C_CR2_STOP) && \
 8004abc:	7cfb      	ldrb	r3, [r7, #19]
 8004abe:	2b20      	cmp	r3, #32
 8004ac0:	d027      	beq.n	8004b12 <I2C_IsErrorOccurred+0xd6>
              (tmp2 != HAL_I2C_MODE_SLAVE))
          {
            /* Generate Stop */
            hi2c->Instance->CR2 |= I2C_CR2_STOP;
 8004ac2:	68fb      	ldr	r3, [r7, #12]
 8004ac4:	681b      	ldr	r3, [r3, #0]
 8004ac6:	685a      	ldr	r2, [r3, #4]
 8004ac8:	68fb      	ldr	r3, [r7, #12]
 8004aca:	681b      	ldr	r3, [r3, #0]
 8004acc:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8004ad0:	605a      	str	r2, [r3, #4]

            /* Update Tick with new reference */
            tickstart = HAL_GetTick();
 8004ad2:	f7fe fe23 	bl	800371c <HAL_GetTick>
 8004ad6:	61f8      	str	r0, [r7, #28]
          }

          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8004ad8:	e01b      	b.n	8004b12 <I2C_IsErrorOccurred+0xd6>
          {
            /* Check for the Timeout */
            if ((HAL_GetTick() - tickstart) > I2C_TIMEOUT_STOPF)
 8004ada:	f7fe fe1f 	bl	800371c <HAL_GetTick>
 8004ade:	4602      	mov	r2, r0
 8004ae0:	69fb      	ldr	r3, [r7, #28]
 8004ae2:	1ad3      	subs	r3, r2, r3
 8004ae4:	2b19      	cmp	r3, #25
 8004ae6:	d914      	bls.n	8004b12 <I2C_IsErrorOccurred+0xd6>
            {
              hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8004ae8:	68fb      	ldr	r3, [r7, #12]
 8004aea:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004aec:	f043 0220 	orr.w	r2, r3, #32
 8004af0:	68fb      	ldr	r3, [r7, #12]
 8004af2:	645a      	str	r2, [r3, #68]	; 0x44
              hi2c->State = HAL_I2C_STATE_READY;
 8004af4:	68fb      	ldr	r3, [r7, #12]
 8004af6:	2220      	movs	r2, #32
 8004af8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
              hi2c->Mode = HAL_I2C_MODE_NONE;
 8004afc:	68fb      	ldr	r3, [r7, #12]
 8004afe:	2200      	movs	r2, #0
 8004b00:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

              /* Process Unlocked */
              __HAL_UNLOCK(hi2c);
 8004b04:	68fb      	ldr	r3, [r7, #12]
 8004b06:	2200      	movs	r2, #0
 8004b08:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

              status = HAL_ERROR;
 8004b0c:	2301      	movs	r3, #1
 8004b0e:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8004b12:	68fb      	ldr	r3, [r7, #12]
 8004b14:	681b      	ldr	r3, [r3, #0]
 8004b16:	699b      	ldr	r3, [r3, #24]
 8004b18:	f003 0320 	and.w	r3, r3, #32
 8004b1c:	2b20      	cmp	r3, #32
 8004b1e:	d1dc      	bne.n	8004ada <I2C_IsErrorOccurred+0x9e>
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 8004b20:	68fb      	ldr	r3, [r7, #12]
 8004b22:	681b      	ldr	r3, [r3, #0]
 8004b24:	699b      	ldr	r3, [r3, #24]
 8004b26:	f003 0320 	and.w	r3, r3, #32
 8004b2a:	2b20      	cmp	r3, #32
 8004b2c:	d003      	beq.n	8004b36 <I2C_IsErrorOccurred+0xfa>
 8004b2e:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8004b32:	2b00      	cmp	r3, #0
 8004b34:	d09d      	beq.n	8004a72 <I2C_IsErrorOccurred+0x36>
        }
      }
    }

    /* In case STOP Flag is detected, clear it */
    if (status == HAL_OK)
 8004b36:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8004b3a:	2b00      	cmp	r3, #0
 8004b3c:	d103      	bne.n	8004b46 <I2C_IsErrorOccurred+0x10a>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8004b3e:	68fb      	ldr	r3, [r7, #12]
 8004b40:	681b      	ldr	r3, [r3, #0]
 8004b42:	2220      	movs	r2, #32
 8004b44:	61da      	str	r2, [r3, #28]
    }

    error_code |= HAL_I2C_ERROR_AF;
 8004b46:	6a3b      	ldr	r3, [r7, #32]
 8004b48:	f043 0304 	orr.w	r3, r3, #4
 8004b4c:	623b      	str	r3, [r7, #32]

    status = HAL_ERROR;
 8004b4e:	2301      	movs	r3, #1
 8004b50:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  /* Refresh Content of Status register */
  itflag = hi2c->Instance->ISR;
 8004b54:	68fb      	ldr	r3, [r7, #12]
 8004b56:	681b      	ldr	r3, [r3, #0]
 8004b58:	699b      	ldr	r3, [r3, #24]
 8004b5a:	61bb      	str	r3, [r7, #24]

  /* Then verify if an additional errors occurs */
  /* Check if a Bus error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_BERR))
 8004b5c:	69bb      	ldr	r3, [r7, #24]
 8004b5e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004b62:	2b00      	cmp	r3, #0
 8004b64:	d00b      	beq.n	8004b7e <I2C_IsErrorOccurred+0x142>
  {
    error_code |= HAL_I2C_ERROR_BERR;
 8004b66:	6a3b      	ldr	r3, [r7, #32]
 8004b68:	f043 0301 	orr.w	r3, r3, #1
 8004b6c:	623b      	str	r3, [r7, #32]

    /* Clear BERR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_BERR);
 8004b6e:	68fb      	ldr	r3, [r7, #12]
 8004b70:	681b      	ldr	r3, [r3, #0]
 8004b72:	f44f 7280 	mov.w	r2, #256	; 0x100
 8004b76:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 8004b78:	2301      	movs	r3, #1
 8004b7a:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  /* Check if an Over-Run/Under-Run error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_OVR))
 8004b7e:	69bb      	ldr	r3, [r7, #24]
 8004b80:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004b84:	2b00      	cmp	r3, #0
 8004b86:	d00b      	beq.n	8004ba0 <I2C_IsErrorOccurred+0x164>
  {
    error_code |= HAL_I2C_ERROR_OVR;
 8004b88:	6a3b      	ldr	r3, [r7, #32]
 8004b8a:	f043 0308 	orr.w	r3, r3, #8
 8004b8e:	623b      	str	r3, [r7, #32]

    /* Clear OVR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_OVR);
 8004b90:	68fb      	ldr	r3, [r7, #12]
 8004b92:	681b      	ldr	r3, [r3, #0]
 8004b94:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8004b98:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 8004b9a:	2301      	movs	r3, #1
 8004b9c:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  /* Check if an Arbitration Loss error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_ARLO))
 8004ba0:	69bb      	ldr	r3, [r7, #24]
 8004ba2:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8004ba6:	2b00      	cmp	r3, #0
 8004ba8:	d00b      	beq.n	8004bc2 <I2C_IsErrorOccurred+0x186>
  {
    error_code |= HAL_I2C_ERROR_ARLO;
 8004baa:	6a3b      	ldr	r3, [r7, #32]
 8004bac:	f043 0302 	orr.w	r3, r3, #2
 8004bb0:	623b      	str	r3, [r7, #32]

    /* Clear ARLO flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ARLO);
 8004bb2:	68fb      	ldr	r3, [r7, #12]
 8004bb4:	681b      	ldr	r3, [r3, #0]
 8004bb6:	f44f 7200 	mov.w	r2, #512	; 0x200
 8004bba:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 8004bbc:	2301      	movs	r3, #1
 8004bbe:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  if (status != HAL_OK)
 8004bc2:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8004bc6:	2b00      	cmp	r3, #0
 8004bc8:	d01c      	beq.n	8004c04 <I2C_IsErrorOccurred+0x1c8>
  {
    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 8004bca:	68f8      	ldr	r0, [r7, #12]
 8004bcc:	f7ff fe56 	bl	800487c <I2C_Flush_TXDR>

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8004bd0:	68fb      	ldr	r3, [r7, #12]
 8004bd2:	681b      	ldr	r3, [r3, #0]
 8004bd4:	6859      	ldr	r1, [r3, #4]
 8004bd6:	68fb      	ldr	r3, [r7, #12]
 8004bd8:	681a      	ldr	r2, [r3, #0]
 8004bda:	4b0d      	ldr	r3, [pc, #52]	; (8004c10 <I2C_IsErrorOccurred+0x1d4>)
 8004bdc:	400b      	ands	r3, r1
 8004bde:	6053      	str	r3, [r2, #4]

    hi2c->ErrorCode |= error_code;
 8004be0:	68fb      	ldr	r3, [r7, #12]
 8004be2:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8004be4:	6a3b      	ldr	r3, [r7, #32]
 8004be6:	431a      	orrs	r2, r3
 8004be8:	68fb      	ldr	r3, [r7, #12]
 8004bea:	645a      	str	r2, [r3, #68]	; 0x44
    hi2c->State = HAL_I2C_STATE_READY;
 8004bec:	68fb      	ldr	r3, [r7, #12]
 8004bee:	2220      	movs	r2, #32
 8004bf0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8004bf4:	68fb      	ldr	r3, [r7, #12]
 8004bf6:	2200      	movs	r2, #0
 8004bf8:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8004bfc:	68fb      	ldr	r3, [r7, #12]
 8004bfe:	2200      	movs	r2, #0
 8004c00:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
  }

  return status;
 8004c04:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
}
 8004c08:	4618      	mov	r0, r3
 8004c0a:	3728      	adds	r7, #40	; 0x28
 8004c0c:	46bd      	mov	sp, r7
 8004c0e:	bd80      	pop	{r7, pc}
 8004c10:	fe00e800 	.word	0xfe00e800

08004c14 <I2C_TransferConfig>:
  *     @arg @ref I2C_GENERATE_START_WRITE Generate Restart for write request.
  * @retval None
  */
static void I2C_TransferConfig(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t Size, uint32_t Mode,
                               uint32_t Request)
{
 8004c14:	b480      	push	{r7}
 8004c16:	b087      	sub	sp, #28
 8004c18:	af00      	add	r7, sp, #0
 8004c1a:	60f8      	str	r0, [r7, #12]
 8004c1c:	607b      	str	r3, [r7, #4]
 8004c1e:	460b      	mov	r3, r1
 8004c20:	817b      	strh	r3, [r7, #10]
 8004c22:	4613      	mov	r3, r2
 8004c24:	727b      	strb	r3, [r7, #9]
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_TRANSFER_MODE(Mode));
  assert_param(IS_TRANSFER_REQUEST(Request));

  /* Declaration of tmp to prevent undefined behavior of volatile usage */
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8004c26:	897b      	ldrh	r3, [r7, #10]
 8004c28:	f3c3 0209 	ubfx	r2, r3, #0, #10
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 8004c2c:	7a7b      	ldrb	r3, [r7, #9]
 8004c2e:	041b      	lsls	r3, r3, #16
 8004c30:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8004c34:	431a      	orrs	r2, r3
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 8004c36:	687b      	ldr	r3, [r7, #4]
 8004c38:	431a      	orrs	r2, r3
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8004c3a:	6a3b      	ldr	r3, [r7, #32]
 8004c3c:	4313      	orrs	r3, r2
 8004c3e:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8004c42:	617b      	str	r3, [r7, #20]
                             (uint32_t)Mode | (uint32_t)Request) & (~0x80000000U));

  /* update CR2 register */
  MODIFY_REG(hi2c->Instance->CR2, \
 8004c44:	68fb      	ldr	r3, [r7, #12]
 8004c46:	681b      	ldr	r3, [r3, #0]
 8004c48:	685a      	ldr	r2, [r3, #4]
 8004c4a:	6a3b      	ldr	r3, [r7, #32]
 8004c4c:	0d5b      	lsrs	r3, r3, #21
 8004c4e:	f403 6180 	and.w	r1, r3, #1024	; 0x400
 8004c52:	4b08      	ldr	r3, [pc, #32]	; (8004c74 <I2C_TransferConfig+0x60>)
 8004c54:	430b      	orrs	r3, r1
 8004c56:	43db      	mvns	r3, r3
 8004c58:	ea02 0103 	and.w	r1, r2, r3
 8004c5c:	68fb      	ldr	r3, [r7, #12]
 8004c5e:	681b      	ldr	r3, [r3, #0]
 8004c60:	697a      	ldr	r2, [r7, #20]
 8004c62:	430a      	orrs	r2, r1
 8004c64:	605a      	str	r2, [r3, #4]
             ((I2C_CR2_SADD | I2C_CR2_NBYTES | I2C_CR2_RELOAD | I2C_CR2_AUTOEND | \
               (I2C_CR2_RD_WRN & (uint32_t)(Request >> (31U - I2C_CR2_RD_WRN_Pos))) | \
               I2C_CR2_START | I2C_CR2_STOP)), tmp);
}
 8004c66:	bf00      	nop
 8004c68:	371c      	adds	r7, #28
 8004c6a:	46bd      	mov	sp, r7
 8004c6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c70:	4770      	bx	lr
 8004c72:	bf00      	nop
 8004c74:	03ff63ff 	.word	0x03ff63ff

08004c78 <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 8004c78:	b480      	push	{r7}
 8004c7a:	b083      	sub	sp, #12
 8004c7c:	af00      	add	r7, sp, #0
 8004c7e:	6078      	str	r0, [r7, #4]
 8004c80:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8004c82:	687b      	ldr	r3, [r7, #4]
 8004c84:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8004c88:	b2db      	uxtb	r3, r3
 8004c8a:	2b20      	cmp	r3, #32
 8004c8c:	d138      	bne.n	8004d00 <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8004c8e:	687b      	ldr	r3, [r7, #4]
 8004c90:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8004c94:	2b01      	cmp	r3, #1
 8004c96:	d101      	bne.n	8004c9c <HAL_I2CEx_ConfigAnalogFilter+0x24>
 8004c98:	2302      	movs	r3, #2
 8004c9a:	e032      	b.n	8004d02 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 8004c9c:	687b      	ldr	r3, [r7, #4]
 8004c9e:	2201      	movs	r2, #1
 8004ca0:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8004ca4:	687b      	ldr	r3, [r7, #4]
 8004ca6:	2224      	movs	r2, #36	; 0x24
 8004ca8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8004cac:	687b      	ldr	r3, [r7, #4]
 8004cae:	681b      	ldr	r3, [r3, #0]
 8004cb0:	681a      	ldr	r2, [r3, #0]
 8004cb2:	687b      	ldr	r3, [r7, #4]
 8004cb4:	681b      	ldr	r3, [r3, #0]
 8004cb6:	f022 0201 	bic.w	r2, r2, #1
 8004cba:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 8004cbc:	687b      	ldr	r3, [r7, #4]
 8004cbe:	681b      	ldr	r3, [r3, #0]
 8004cc0:	681a      	ldr	r2, [r3, #0]
 8004cc2:	687b      	ldr	r3, [r7, #4]
 8004cc4:	681b      	ldr	r3, [r3, #0]
 8004cc6:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8004cca:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 8004ccc:	687b      	ldr	r3, [r7, #4]
 8004cce:	681b      	ldr	r3, [r3, #0]
 8004cd0:	6819      	ldr	r1, [r3, #0]
 8004cd2:	687b      	ldr	r3, [r7, #4]
 8004cd4:	681b      	ldr	r3, [r3, #0]
 8004cd6:	683a      	ldr	r2, [r7, #0]
 8004cd8:	430a      	orrs	r2, r1
 8004cda:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8004cdc:	687b      	ldr	r3, [r7, #4]
 8004cde:	681b      	ldr	r3, [r3, #0]
 8004ce0:	681a      	ldr	r2, [r3, #0]
 8004ce2:	687b      	ldr	r3, [r7, #4]
 8004ce4:	681b      	ldr	r3, [r3, #0]
 8004ce6:	f042 0201 	orr.w	r2, r2, #1
 8004cea:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8004cec:	687b      	ldr	r3, [r7, #4]
 8004cee:	2220      	movs	r2, #32
 8004cf0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8004cf4:	687b      	ldr	r3, [r7, #4]
 8004cf6:	2200      	movs	r2, #0
 8004cf8:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8004cfc:	2300      	movs	r3, #0
 8004cfe:	e000      	b.n	8004d02 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 8004d00:	2302      	movs	r3, #2
  }
}
 8004d02:	4618      	mov	r0, r3
 8004d04:	370c      	adds	r7, #12
 8004d06:	46bd      	mov	sp, r7
 8004d08:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d0c:	4770      	bx	lr

08004d0e <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 8004d0e:	b480      	push	{r7}
 8004d10:	b085      	sub	sp, #20
 8004d12:	af00      	add	r7, sp, #0
 8004d14:	6078      	str	r0, [r7, #4]
 8004d16:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8004d18:	687b      	ldr	r3, [r7, #4]
 8004d1a:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8004d1e:	b2db      	uxtb	r3, r3
 8004d20:	2b20      	cmp	r3, #32
 8004d22:	d139      	bne.n	8004d98 <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8004d24:	687b      	ldr	r3, [r7, #4]
 8004d26:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8004d2a:	2b01      	cmp	r3, #1
 8004d2c:	d101      	bne.n	8004d32 <HAL_I2CEx_ConfigDigitalFilter+0x24>
 8004d2e:	2302      	movs	r3, #2
 8004d30:	e033      	b.n	8004d9a <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 8004d32:	687b      	ldr	r3, [r7, #4]
 8004d34:	2201      	movs	r2, #1
 8004d36:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8004d3a:	687b      	ldr	r3, [r7, #4]
 8004d3c:	2224      	movs	r2, #36	; 0x24
 8004d3e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8004d42:	687b      	ldr	r3, [r7, #4]
 8004d44:	681b      	ldr	r3, [r3, #0]
 8004d46:	681a      	ldr	r2, [r3, #0]
 8004d48:	687b      	ldr	r3, [r7, #4]
 8004d4a:	681b      	ldr	r3, [r3, #0]
 8004d4c:	f022 0201 	bic.w	r2, r2, #1
 8004d50:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 8004d52:	687b      	ldr	r3, [r7, #4]
 8004d54:	681b      	ldr	r3, [r3, #0]
 8004d56:	681b      	ldr	r3, [r3, #0]
 8004d58:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 8004d5a:	68fb      	ldr	r3, [r7, #12]
 8004d5c:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 8004d60:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 8004d62:	683b      	ldr	r3, [r7, #0]
 8004d64:	021b      	lsls	r3, r3, #8
 8004d66:	68fa      	ldr	r2, [r7, #12]
 8004d68:	4313      	orrs	r3, r2
 8004d6a:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 8004d6c:	687b      	ldr	r3, [r7, #4]
 8004d6e:	681b      	ldr	r3, [r3, #0]
 8004d70:	68fa      	ldr	r2, [r7, #12]
 8004d72:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8004d74:	687b      	ldr	r3, [r7, #4]
 8004d76:	681b      	ldr	r3, [r3, #0]
 8004d78:	681a      	ldr	r2, [r3, #0]
 8004d7a:	687b      	ldr	r3, [r7, #4]
 8004d7c:	681b      	ldr	r3, [r3, #0]
 8004d7e:	f042 0201 	orr.w	r2, r2, #1
 8004d82:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8004d84:	687b      	ldr	r3, [r7, #4]
 8004d86:	2220      	movs	r2, #32
 8004d88:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8004d8c:	687b      	ldr	r3, [r7, #4]
 8004d8e:	2200      	movs	r2, #0
 8004d90:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8004d94:	2300      	movs	r3, #0
 8004d96:	e000      	b.n	8004d9a <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 8004d98:	2302      	movs	r3, #2
  }
}
 8004d9a:	4618      	mov	r0, r3
 8004d9c:	3714      	adds	r7, #20
 8004d9e:	46bd      	mov	sp, r7
 8004da0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004da4:	4770      	bx	lr

08004da6 <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 8004da6:	b5f0      	push	{r4, r5, r6, r7, lr}
 8004da8:	b08f      	sub	sp, #60	; 0x3c
 8004daa:	af0a      	add	r7, sp, #40	; 0x28
 8004dac:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx;
#endif /* defined (USB_OTG_FS) */
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 8004dae:	687b      	ldr	r3, [r7, #4]
 8004db0:	2b00      	cmp	r3, #0
 8004db2:	d101      	bne.n	8004db8 <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 8004db4:	2301      	movs	r3, #1
 8004db6:	e116      	b.n	8004fe6 <HAL_PCD_Init+0x240>

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

#if defined (USB_OTG_FS)
  USBx = hpcd->Instance;
 8004db8:	687b      	ldr	r3, [r7, #4]
 8004dba:	681b      	ldr	r3, [r3, #0]
 8004dbc:	60bb      	str	r3, [r7, #8]
#endif /* defined (USB_OTG_FS) */

  if (hpcd->State == HAL_PCD_STATE_RESET)
 8004dbe:	687b      	ldr	r3, [r7, #4]
 8004dc0:	f893 34bd 	ldrb.w	r3, [r3, #1213]	; 0x4bd
 8004dc4:	b2db      	uxtb	r3, r3
 8004dc6:	2b00      	cmp	r3, #0
 8004dc8:	d106      	bne.n	8004dd8 <HAL_PCD_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 8004dca:	687b      	ldr	r3, [r7, #4]
 8004dcc:	2200      	movs	r2, #0
 8004dce:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 8004dd2:	6878      	ldr	r0, [r7, #4]
 8004dd4:	f7fd fecc 	bl	8002b70 <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 8004dd8:	687b      	ldr	r3, [r7, #4]
 8004dda:	2203      	movs	r2, #3
 8004ddc:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd

#if defined (USB_OTG_FS)
  /* Disable DMA mode for FS instance */
  if ((USBx->CID & (0x1U << 8)) == 0U)
 8004de0:	68bb      	ldr	r3, [r7, #8]
 8004de2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004de4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004de8:	2b00      	cmp	r3, #0
 8004dea:	d102      	bne.n	8004df2 <HAL_PCD_Init+0x4c>
  {
    hpcd->Init.dma_enable = 0U;
 8004dec:	687b      	ldr	r3, [r7, #4]
 8004dee:	2200      	movs	r2, #0
 8004df0:	611a      	str	r2, [r3, #16]
  }
#endif /* defined (USB_OTG_FS) */

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 8004df2:	687b      	ldr	r3, [r7, #4]
 8004df4:	681b      	ldr	r3, [r3, #0]
 8004df6:	4618      	mov	r0, r3
 8004df8:	f002 fb43 	bl	8007482 <USB_DisableGlobalInt>

  /*Init the Core (common init.) */
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8004dfc:	687b      	ldr	r3, [r7, #4]
 8004dfe:	681b      	ldr	r3, [r3, #0]
 8004e00:	603b      	str	r3, [r7, #0]
 8004e02:	687e      	ldr	r6, [r7, #4]
 8004e04:	466d      	mov	r5, sp
 8004e06:	f106 0410 	add.w	r4, r6, #16
 8004e0a:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8004e0c:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8004e0e:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8004e10:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8004e12:	e894 0003 	ldmia.w	r4, {r0, r1}
 8004e16:	e885 0003 	stmia.w	r5, {r0, r1}
 8004e1a:	1d33      	adds	r3, r6, #4
 8004e1c:	cb0e      	ldmia	r3, {r1, r2, r3}
 8004e1e:	6838      	ldr	r0, [r7, #0]
 8004e20:	f002 fb03 	bl	800742a <USB_CoreInit>
 8004e24:	4603      	mov	r3, r0
 8004e26:	2b00      	cmp	r3, #0
 8004e28:	d005      	beq.n	8004e36 <HAL_PCD_Init+0x90>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8004e2a:	687b      	ldr	r3, [r7, #4]
 8004e2c:	2202      	movs	r2, #2
 8004e2e:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd
    return HAL_ERROR;
 8004e32:	2301      	movs	r3, #1
 8004e34:	e0d7      	b.n	8004fe6 <HAL_PCD_Init+0x240>
  }

  /* Force Device Mode*/
  (void)USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE);
 8004e36:	687b      	ldr	r3, [r7, #4]
 8004e38:	681b      	ldr	r3, [r3, #0]
 8004e3a:	2100      	movs	r1, #0
 8004e3c:	4618      	mov	r0, r3
 8004e3e:	f002 fb31 	bl	80074a4 <USB_SetCurrentMode>

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8004e42:	2300      	movs	r3, #0
 8004e44:	73fb      	strb	r3, [r7, #15]
 8004e46:	e04a      	b.n	8004ede <HAL_PCD_Init+0x138>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 8004e48:	7bfa      	ldrb	r2, [r7, #15]
 8004e4a:	6879      	ldr	r1, [r7, #4]
 8004e4c:	4613      	mov	r3, r2
 8004e4e:	00db      	lsls	r3, r3, #3
 8004e50:	4413      	add	r3, r2
 8004e52:	009b      	lsls	r3, r3, #2
 8004e54:	440b      	add	r3, r1
 8004e56:	333d      	adds	r3, #61	; 0x3d
 8004e58:	2201      	movs	r2, #1
 8004e5a:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 8004e5c:	7bfa      	ldrb	r2, [r7, #15]
 8004e5e:	6879      	ldr	r1, [r7, #4]
 8004e60:	4613      	mov	r3, r2
 8004e62:	00db      	lsls	r3, r3, #3
 8004e64:	4413      	add	r3, r2
 8004e66:	009b      	lsls	r3, r3, #2
 8004e68:	440b      	add	r3, r1
 8004e6a:	333c      	adds	r3, #60	; 0x3c
 8004e6c:	7bfa      	ldrb	r2, [r7, #15]
 8004e6e:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].tx_fifo_num = i;
 8004e70:	7bfa      	ldrb	r2, [r7, #15]
 8004e72:	7bfb      	ldrb	r3, [r7, #15]
 8004e74:	b298      	uxth	r0, r3
 8004e76:	6879      	ldr	r1, [r7, #4]
 8004e78:	4613      	mov	r3, r2
 8004e7a:	00db      	lsls	r3, r3, #3
 8004e7c:	4413      	add	r3, r2
 8004e7e:	009b      	lsls	r3, r3, #2
 8004e80:	440b      	add	r3, r1
 8004e82:	3344      	adds	r3, #68	; 0x44
 8004e84:	4602      	mov	r2, r0
 8004e86:	801a      	strh	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 8004e88:	7bfa      	ldrb	r2, [r7, #15]
 8004e8a:	6879      	ldr	r1, [r7, #4]
 8004e8c:	4613      	mov	r3, r2
 8004e8e:	00db      	lsls	r3, r3, #3
 8004e90:	4413      	add	r3, r2
 8004e92:	009b      	lsls	r3, r3, #2
 8004e94:	440b      	add	r3, r1
 8004e96:	3340      	adds	r3, #64	; 0x40
 8004e98:	2200      	movs	r2, #0
 8004e9a:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 8004e9c:	7bfa      	ldrb	r2, [r7, #15]
 8004e9e:	6879      	ldr	r1, [r7, #4]
 8004ea0:	4613      	mov	r3, r2
 8004ea2:	00db      	lsls	r3, r3, #3
 8004ea4:	4413      	add	r3, r2
 8004ea6:	009b      	lsls	r3, r3, #2
 8004ea8:	440b      	add	r3, r1
 8004eaa:	3348      	adds	r3, #72	; 0x48
 8004eac:	2200      	movs	r2, #0
 8004eae:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 8004eb0:	7bfa      	ldrb	r2, [r7, #15]
 8004eb2:	6879      	ldr	r1, [r7, #4]
 8004eb4:	4613      	mov	r3, r2
 8004eb6:	00db      	lsls	r3, r3, #3
 8004eb8:	4413      	add	r3, r2
 8004eba:	009b      	lsls	r3, r3, #2
 8004ebc:	440b      	add	r3, r1
 8004ebe:	334c      	adds	r3, #76	; 0x4c
 8004ec0:	2200      	movs	r2, #0
 8004ec2:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 8004ec4:	7bfa      	ldrb	r2, [r7, #15]
 8004ec6:	6879      	ldr	r1, [r7, #4]
 8004ec8:	4613      	mov	r3, r2
 8004eca:	00db      	lsls	r3, r3, #3
 8004ecc:	4413      	add	r3, r2
 8004ece:	009b      	lsls	r3, r3, #2
 8004ed0:	440b      	add	r3, r1
 8004ed2:	3354      	adds	r3, #84	; 0x54
 8004ed4:	2200      	movs	r2, #0
 8004ed6:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8004ed8:	7bfb      	ldrb	r3, [r7, #15]
 8004eda:	3301      	adds	r3, #1
 8004edc:	73fb      	strb	r3, [r7, #15]
 8004ede:	7bfa      	ldrb	r2, [r7, #15]
 8004ee0:	687b      	ldr	r3, [r7, #4]
 8004ee2:	685b      	ldr	r3, [r3, #4]
 8004ee4:	429a      	cmp	r2, r3
 8004ee6:	d3af      	bcc.n	8004e48 <HAL_PCD_Init+0xa2>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8004ee8:	2300      	movs	r3, #0
 8004eea:	73fb      	strb	r3, [r7, #15]
 8004eec:	e044      	b.n	8004f78 <HAL_PCD_Init+0x1d2>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 8004eee:	7bfa      	ldrb	r2, [r7, #15]
 8004ef0:	6879      	ldr	r1, [r7, #4]
 8004ef2:	4613      	mov	r3, r2
 8004ef4:	00db      	lsls	r3, r3, #3
 8004ef6:	4413      	add	r3, r2
 8004ef8:	009b      	lsls	r3, r3, #2
 8004efa:	440b      	add	r3, r1
 8004efc:	f203 237d 	addw	r3, r3, #637	; 0x27d
 8004f00:	2200      	movs	r2, #0
 8004f02:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 8004f04:	7bfa      	ldrb	r2, [r7, #15]
 8004f06:	6879      	ldr	r1, [r7, #4]
 8004f08:	4613      	mov	r3, r2
 8004f0a:	00db      	lsls	r3, r3, #3
 8004f0c:	4413      	add	r3, r2
 8004f0e:	009b      	lsls	r3, r3, #2
 8004f10:	440b      	add	r3, r1
 8004f12:	f503 731f 	add.w	r3, r3, #636	; 0x27c
 8004f16:	7bfa      	ldrb	r2, [r7, #15]
 8004f18:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 8004f1a:	7bfa      	ldrb	r2, [r7, #15]
 8004f1c:	6879      	ldr	r1, [r7, #4]
 8004f1e:	4613      	mov	r3, r2
 8004f20:	00db      	lsls	r3, r3, #3
 8004f22:	4413      	add	r3, r2
 8004f24:	009b      	lsls	r3, r3, #2
 8004f26:	440b      	add	r3, r1
 8004f28:	f503 7320 	add.w	r3, r3, #640	; 0x280
 8004f2c:	2200      	movs	r2, #0
 8004f2e:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 8004f30:	7bfa      	ldrb	r2, [r7, #15]
 8004f32:	6879      	ldr	r1, [r7, #4]
 8004f34:	4613      	mov	r3, r2
 8004f36:	00db      	lsls	r3, r3, #3
 8004f38:	4413      	add	r3, r2
 8004f3a:	009b      	lsls	r3, r3, #2
 8004f3c:	440b      	add	r3, r1
 8004f3e:	f503 7322 	add.w	r3, r3, #648	; 0x288
 8004f42:	2200      	movs	r2, #0
 8004f44:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 8004f46:	7bfa      	ldrb	r2, [r7, #15]
 8004f48:	6879      	ldr	r1, [r7, #4]
 8004f4a:	4613      	mov	r3, r2
 8004f4c:	00db      	lsls	r3, r3, #3
 8004f4e:	4413      	add	r3, r2
 8004f50:	009b      	lsls	r3, r3, #2
 8004f52:	440b      	add	r3, r1
 8004f54:	f503 7323 	add.w	r3, r3, #652	; 0x28c
 8004f58:	2200      	movs	r2, #0
 8004f5a:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 8004f5c:	7bfa      	ldrb	r2, [r7, #15]
 8004f5e:	6879      	ldr	r1, [r7, #4]
 8004f60:	4613      	mov	r3, r2
 8004f62:	00db      	lsls	r3, r3, #3
 8004f64:	4413      	add	r3, r2
 8004f66:	009b      	lsls	r3, r3, #2
 8004f68:	440b      	add	r3, r1
 8004f6a:	f503 7325 	add.w	r3, r3, #660	; 0x294
 8004f6e:	2200      	movs	r2, #0
 8004f70:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8004f72:	7bfb      	ldrb	r3, [r7, #15]
 8004f74:	3301      	adds	r3, #1
 8004f76:	73fb      	strb	r3, [r7, #15]
 8004f78:	7bfa      	ldrb	r2, [r7, #15]
 8004f7a:	687b      	ldr	r3, [r7, #4]
 8004f7c:	685b      	ldr	r3, [r3, #4]
 8004f7e:	429a      	cmp	r2, r3
 8004f80:	d3b5      	bcc.n	8004eee <HAL_PCD_Init+0x148>
  }

  /* Init Device */
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8004f82:	687b      	ldr	r3, [r7, #4]
 8004f84:	681b      	ldr	r3, [r3, #0]
 8004f86:	603b      	str	r3, [r7, #0]
 8004f88:	687e      	ldr	r6, [r7, #4]
 8004f8a:	466d      	mov	r5, sp
 8004f8c:	f106 0410 	add.w	r4, r6, #16
 8004f90:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8004f92:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8004f94:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8004f96:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8004f98:	e894 0003 	ldmia.w	r4, {r0, r1}
 8004f9c:	e885 0003 	stmia.w	r5, {r0, r1}
 8004fa0:	1d33      	adds	r3, r6, #4
 8004fa2:	cb0e      	ldmia	r3, {r1, r2, r3}
 8004fa4:	6838      	ldr	r0, [r7, #0]
 8004fa6:	f002 fac9 	bl	800753c <USB_DevInit>
 8004faa:	4603      	mov	r3, r0
 8004fac:	2b00      	cmp	r3, #0
 8004fae:	d005      	beq.n	8004fbc <HAL_PCD_Init+0x216>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8004fb0:	687b      	ldr	r3, [r7, #4]
 8004fb2:	2202      	movs	r2, #2
 8004fb4:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd
    return HAL_ERROR;
 8004fb8:	2301      	movs	r3, #1
 8004fba:	e014      	b.n	8004fe6 <HAL_PCD_Init+0x240>
  }

  hpcd->USB_Address = 0U;
 8004fbc:	687b      	ldr	r3, [r7, #4]
 8004fbe:	2200      	movs	r2, #0
 8004fc0:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  hpcd->State = HAL_PCD_STATE_READY;
 8004fc4:	687b      	ldr	r3, [r7, #4]
 8004fc6:	2201      	movs	r2, #1
 8004fc8:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd

  /* Activate LPM */
  if (hpcd->Init.lpm_enable == 1U)
 8004fcc:	687b      	ldr	r3, [r7, #4]
 8004fce:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004fd0:	2b01      	cmp	r3, #1
 8004fd2:	d102      	bne.n	8004fda <HAL_PCD_Init+0x234>
  {
    (void)HAL_PCDEx_ActivateLPM(hpcd);
 8004fd4:	6878      	ldr	r0, [r7, #4]
 8004fd6:	f000 f80a 	bl	8004fee <HAL_PCDEx_ActivateLPM>
  }

  (void)USB_DevDisconnect(hpcd->Instance);
 8004fda:	687b      	ldr	r3, [r7, #4]
 8004fdc:	681b      	ldr	r3, [r3, #0]
 8004fde:	4618      	mov	r0, r3
 8004fe0:	f002 fc75 	bl	80078ce <USB_DevDisconnect>

  return HAL_OK;
 8004fe4:	2300      	movs	r3, #0
}
 8004fe6:	4618      	mov	r0, r3
 8004fe8:	3714      	adds	r7, #20
 8004fea:	46bd      	mov	sp, r7
 8004fec:	bdf0      	pop	{r4, r5, r6, r7, pc}

08004fee <HAL_PCDEx_ActivateLPM>:
  * @brief  Activate LPM feature.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_ActivateLPM(PCD_HandleTypeDef *hpcd)
{
 8004fee:	b480      	push	{r7}
 8004ff0:	b085      	sub	sp, #20
 8004ff2:	af00      	add	r7, sp, #0
 8004ff4:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8004ff6:	687b      	ldr	r3, [r7, #4]
 8004ff8:	681b      	ldr	r3, [r3, #0]
 8004ffa:	60fb      	str	r3, [r7, #12]

  hpcd->lpm_active = 1U;
 8004ffc:	687b      	ldr	r3, [r7, #4]
 8004ffe:	2201      	movs	r2, #1
 8005000:	f8c3 2500 	str.w	r2, [r3, #1280]	; 0x500
  hpcd->LPM_State = LPM_L0;
 8005004:	687b      	ldr	r3, [r7, #4]
 8005006:	2200      	movs	r2, #0
 8005008:	f883 24f4 	strb.w	r2, [r3, #1268]	; 0x4f4
  USBx->GINTMSK |= USB_OTG_GINTMSK_LPMINTM;
 800500c:	68fb      	ldr	r3, [r7, #12]
 800500e:	699b      	ldr	r3, [r3, #24]
 8005010:	f043 6200 	orr.w	r2, r3, #134217728	; 0x8000000
 8005014:	68fb      	ldr	r3, [r7, #12]
 8005016:	619a      	str	r2, [r3, #24]
  USBx->GLPMCFG |= (USB_OTG_GLPMCFG_LPMEN | USB_OTG_GLPMCFG_LPMACK | USB_OTG_GLPMCFG_ENBESL);
 8005018:	68fb      	ldr	r3, [r7, #12]
 800501a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800501c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8005020:	f043 0303 	orr.w	r3, r3, #3
 8005024:	68fa      	ldr	r2, [r7, #12]
 8005026:	6553      	str	r3, [r2, #84]	; 0x54

  return HAL_OK;
 8005028:	2300      	movs	r3, #0
}
 800502a:	4618      	mov	r0, r3
 800502c:	3714      	adds	r7, #20
 800502e:	46bd      	mov	sp, r7
 8005030:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005034:	4770      	bx	lr
	...

08005038 <HAL_PWR_EnableBkUpAccess>:
  * @note  LSEON bit that switches on and off the LSE crystal belongs as well to the
  *        back-up domain.
  * @retval None
  */
void HAL_PWR_EnableBkUpAccess(void)
{
 8005038:	b480      	push	{r7}
 800503a:	af00      	add	r7, sp, #0
  SET_BIT(PWR->CR1, PWR_CR1_DBP);
 800503c:	4b05      	ldr	r3, [pc, #20]	; (8005054 <HAL_PWR_EnableBkUpAccess+0x1c>)
 800503e:	681b      	ldr	r3, [r3, #0]
 8005040:	4a04      	ldr	r2, [pc, #16]	; (8005054 <HAL_PWR_EnableBkUpAccess+0x1c>)
 8005042:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8005046:	6013      	str	r3, [r2, #0]
}
 8005048:	bf00      	nop
 800504a:	46bd      	mov	sp, r7
 800504c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005050:	4770      	bx	lr
 8005052:	bf00      	nop
 8005054:	40007000 	.word	0x40007000

08005058 <HAL_PWREx_GetVoltageRange>:
  * @brief Return Voltage Scaling Range.
  * @retval VOS bit field (PWR_REGULATOR_VOLTAGE_SCALE1 or PWR_REGULATOR_VOLTAGE_SCALE2
  *         or PWR_REGULATOR_VOLTAGE_SCALE1_BOOST when applicable)
  */
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 8005058:	b480      	push	{r7}
 800505a:	af00      	add	r7, sp, #0
    else
    {
      return PWR_REGULATOR_VOLTAGE_SCALE1_BOOST;
    }
#else
  return  (PWR->CR1 & PWR_CR1_VOS);
 800505c:	4b04      	ldr	r3, [pc, #16]	; (8005070 <HAL_PWREx_GetVoltageRange+0x18>)
 800505e:	681b      	ldr	r3, [r3, #0]
 8005060:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
#endif
}
 8005064:	4618      	mov	r0, r3
 8005066:	46bd      	mov	sp, r7
 8005068:	f85d 7b04 	ldr.w	r7, [sp], #4
 800506c:	4770      	bx	lr
 800506e:	bf00      	nop
 8005070:	40007000 	.word	0x40007000

08005074 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 8005074:	b480      	push	{r7}
 8005076:	b085      	sub	sp, #20
 8005078:	af00      	add	r7, sp, #0
 800507a:	6078      	str	r0, [r7, #4]
  }

#else

  /* If Set Range 1 */
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 800507c:	687b      	ldr	r3, [r7, #4]
 800507e:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8005082:	d130      	bne.n	80050e6 <HAL_PWREx_ControlVoltageScaling+0x72>
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE1)
 8005084:	4b23      	ldr	r3, [pc, #140]	; (8005114 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8005086:	681b      	ldr	r3, [r3, #0]
 8005088:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 800508c:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8005090:	d038      	beq.n	8005104 <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8005092:	4b20      	ldr	r3, [pc, #128]	; (8005114 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8005094:	681b      	ldr	r3, [r3, #0]
 8005096:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 800509a:	4a1e      	ldr	r2, [pc, #120]	; (8005114 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 800509c:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80050a0:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 80050a2:	4b1d      	ldr	r3, [pc, #116]	; (8005118 <HAL_PWREx_ControlVoltageScaling+0xa4>)
 80050a4:	681b      	ldr	r3, [r3, #0]
 80050a6:	2232      	movs	r2, #50	; 0x32
 80050a8:	fb02 f303 	mul.w	r3, r2, r3
 80050ac:	4a1b      	ldr	r2, [pc, #108]	; (800511c <HAL_PWREx_ControlVoltageScaling+0xa8>)
 80050ae:	fba2 2303 	umull	r2, r3, r2, r3
 80050b2:	0c9b      	lsrs	r3, r3, #18
 80050b4:	3301      	adds	r3, #1
 80050b6:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 80050b8:	e002      	b.n	80050c0 <HAL_PWREx_ControlVoltageScaling+0x4c>
      {
        wait_loop_index--;
 80050ba:	68fb      	ldr	r3, [r7, #12]
 80050bc:	3b01      	subs	r3, #1
 80050be:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 80050c0:	4b14      	ldr	r3, [pc, #80]	; (8005114 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80050c2:	695b      	ldr	r3, [r3, #20]
 80050c4:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80050c8:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80050cc:	d102      	bne.n	80050d4 <HAL_PWREx_ControlVoltageScaling+0x60>
 80050ce:	68fb      	ldr	r3, [r7, #12]
 80050d0:	2b00      	cmp	r3, #0
 80050d2:	d1f2      	bne.n	80050ba <HAL_PWREx_ControlVoltageScaling+0x46>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 80050d4:	4b0f      	ldr	r3, [pc, #60]	; (8005114 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80050d6:	695b      	ldr	r3, [r3, #20]
 80050d8:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80050dc:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80050e0:	d110      	bne.n	8005104 <HAL_PWREx_ControlVoltageScaling+0x90>
      {
        return HAL_TIMEOUT;
 80050e2:	2303      	movs	r3, #3
 80050e4:	e00f      	b.n	8005106 <HAL_PWREx_ControlVoltageScaling+0x92>
      }
    }
  }
  else
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE2)
 80050e6:	4b0b      	ldr	r3, [pc, #44]	; (8005114 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80050e8:	681b      	ldr	r3, [r3, #0]
 80050ea:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 80050ee:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80050f2:	d007      	beq.n	8005104 <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 2 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 80050f4:	4b07      	ldr	r3, [pc, #28]	; (8005114 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80050f6:	681b      	ldr	r3, [r3, #0]
 80050f8:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 80050fc:	4a05      	ldr	r2, [pc, #20]	; (8005114 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80050fe:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8005102:	6013      	str	r3, [r2, #0]
      /* No need to wait for VOSF to be cleared for this transition */
    }
  }
#endif

  return HAL_OK;
 8005104:	2300      	movs	r3, #0
}
 8005106:	4618      	mov	r0, r3
 8005108:	3714      	adds	r7, #20
 800510a:	46bd      	mov	sp, r7
 800510c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005110:	4770      	bx	lr
 8005112:	bf00      	nop
 8005114:	40007000 	.word	0x40007000
 8005118:	20000134 	.word	0x20000134
 800511c:	431bde83 	.word	0x431bde83

08005120 <HAL_PWREx_EnableVddUSB>:
  * @brief Enable VDDUSB supply.
  * @note  Remove VDDUSB electrical and logical isolation, once VDDUSB supply is present.
  * @retval None
  */
void HAL_PWREx_EnableVddUSB(void)
{
 8005120:	b480      	push	{r7}
 8005122:	af00      	add	r7, sp, #0
  SET_BIT(PWR->CR2, PWR_CR2_USV);
 8005124:	4b05      	ldr	r3, [pc, #20]	; (800513c <HAL_PWREx_EnableVddUSB+0x1c>)
 8005126:	685b      	ldr	r3, [r3, #4]
 8005128:	4a04      	ldr	r2, [pc, #16]	; (800513c <HAL_PWREx_EnableVddUSB+0x1c>)
 800512a:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 800512e:	6053      	str	r3, [r2, #4]
}
 8005130:	bf00      	nop
 8005132:	46bd      	mov	sp, r7
 8005134:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005138:	4770      	bx	lr
 800513a:	bf00      	nop
 800513c:	40007000 	.word	0x40007000

08005140 <HAL_QSPI_Init>:
  *        in the QSPI_InitTypeDef and initialize the associated handle.
  * @param hqspi QSPI handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_QSPI_Init(QSPI_HandleTypeDef *hqspi)
{
 8005140:	b580      	push	{r7, lr}
 8005142:	b086      	sub	sp, #24
 8005144:	af02      	add	r7, sp, #8
 8005146:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status;
  uint32_t tickstart = HAL_GetTick();
 8005148:	f7fe fae8 	bl	800371c <HAL_GetTick>
 800514c:	60f8      	str	r0, [r7, #12]

  /* Check the QSPI handle allocation */
  if(hqspi == NULL)
 800514e:	687b      	ldr	r3, [r7, #4]
 8005150:	2b00      	cmp	r3, #0
 8005152:	d101      	bne.n	8005158 <HAL_QSPI_Init+0x18>
  {
    return HAL_ERROR;
 8005154:	2301      	movs	r3, #1
 8005156:	e063      	b.n	8005220 <HAL_QSPI_Init+0xe0>
  {
    assert_param(IS_QSPI_FLASH_ID(hqspi->Init.FlashID));
  }
#endif

  if(hqspi->State == HAL_QSPI_STATE_RESET)
 8005158:	687b      	ldr	r3, [r7, #4]
 800515a:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 800515e:	b2db      	uxtb	r3, r3
 8005160:	2b00      	cmp	r3, #0
 8005162:	d10b      	bne.n	800517c <HAL_QSPI_Init+0x3c>
  {
    /* Allocate lock resource and initialize it */
    hqspi->Lock = HAL_UNLOCKED;
 8005164:	687b      	ldr	r3, [r7, #4]
 8005166:	2200      	movs	r2, #0
 8005168:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    /* Init the low level hardware */
    hqspi->MspInitCallback(hqspi);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_QSPI_MspInit(hqspi);
 800516c:	6878      	ldr	r0, [r7, #4]
 800516e:	f7fd fb91 	bl	8002894 <HAL_QSPI_MspInit>
#endif

    /* Configure the default timeout for the QSPI memory access */
    HAL_QSPI_SetTimeout(hqspi, HAL_QSPI_TIMEOUT_DEFAULT_VALUE);
 8005172:	f241 3188 	movw	r1, #5000	; 0x1388
 8005176:	6878      	ldr	r0, [r7, #4]
 8005178:	f000 f858 	bl	800522c <HAL_QSPI_SetTimeout>
  }

  /* Configure QSPI FIFO Threshold */
  MODIFY_REG(hqspi->Instance->CR, QUADSPI_CR_FTHRES,
 800517c:	687b      	ldr	r3, [r7, #4]
 800517e:	681b      	ldr	r3, [r3, #0]
 8005180:	681b      	ldr	r3, [r3, #0]
 8005182:	f423 6170 	bic.w	r1, r3, #3840	; 0xf00
 8005186:	687b      	ldr	r3, [r7, #4]
 8005188:	689b      	ldr	r3, [r3, #8]
 800518a:	3b01      	subs	r3, #1
 800518c:	021a      	lsls	r2, r3, #8
 800518e:	687b      	ldr	r3, [r7, #4]
 8005190:	681b      	ldr	r3, [r3, #0]
 8005192:	430a      	orrs	r2, r1
 8005194:	601a      	str	r2, [r3, #0]
             ((hqspi->Init.FifoThreshold - 1U) << QUADSPI_CR_FTHRES_Pos));

  /* Wait till BUSY flag reset */
  status = QSPI_WaitFlagStateUntilTimeout(hqspi, QSPI_FLAG_BUSY, RESET, tickstart, hqspi->Timeout);
 8005196:	687b      	ldr	r3, [r7, #4]
 8005198:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800519a:	9300      	str	r3, [sp, #0]
 800519c:	68fb      	ldr	r3, [r7, #12]
 800519e:	2200      	movs	r2, #0
 80051a0:	2120      	movs	r1, #32
 80051a2:	6878      	ldr	r0, [r7, #4]
 80051a4:	f000 f850 	bl	8005248 <QSPI_WaitFlagStateUntilTimeout>
 80051a8:	4603      	mov	r3, r0
 80051aa:	72fb      	strb	r3, [r7, #11]

  if(status == HAL_OK)
 80051ac:	7afb      	ldrb	r3, [r7, #11]
 80051ae:	2b00      	cmp	r3, #0
 80051b0:	d131      	bne.n	8005216 <HAL_QSPI_Init+0xd6>
#if defined(QUADSPI_CR_DFM)
    MODIFY_REG(hqspi->Instance->CR, (QUADSPI_CR_PRESCALER | QUADSPI_CR_SSHIFT | QUADSPI_CR_FSEL | QUADSPI_CR_DFM),
               ((hqspi->Init.ClockPrescaler << QUADSPI_CR_PRESCALER_Pos) |
                hqspi->Init.SampleShifting  | hqspi->Init.FlashID | hqspi->Init.DualFlash));
#else
    MODIFY_REG(hqspi->Instance->CR, (QUADSPI_CR_PRESCALER | QUADSPI_CR_SSHIFT),
 80051b2:	687b      	ldr	r3, [r7, #4]
 80051b4:	681b      	ldr	r3, [r3, #0]
 80051b6:	681b      	ldr	r3, [r3, #0]
 80051b8:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
 80051bc:	f023 0310 	bic.w	r3, r3, #16
 80051c0:	687a      	ldr	r2, [r7, #4]
 80051c2:	6852      	ldr	r2, [r2, #4]
 80051c4:	0611      	lsls	r1, r2, #24
 80051c6:	687a      	ldr	r2, [r7, #4]
 80051c8:	68d2      	ldr	r2, [r2, #12]
 80051ca:	4311      	orrs	r1, r2
 80051cc:	687a      	ldr	r2, [r7, #4]
 80051ce:	6812      	ldr	r2, [r2, #0]
 80051d0:	430b      	orrs	r3, r1
 80051d2:	6013      	str	r3, [r2, #0]
               ((hqspi->Init.ClockPrescaler << QUADSPI_CR_PRESCALER_Pos) |
                hqspi->Init.SampleShifting));
#endif

    /* Configure QSPI Flash Size, CS High Time and Clock Mode */
    MODIFY_REG(hqspi->Instance->DCR, (QUADSPI_DCR_FSIZE | QUADSPI_DCR_CSHT | QUADSPI_DCR_CKMODE),
 80051d4:	687b      	ldr	r3, [r7, #4]
 80051d6:	681b      	ldr	r3, [r3, #0]
 80051d8:	685a      	ldr	r2, [r3, #4]
 80051da:	4b13      	ldr	r3, [pc, #76]	; (8005228 <HAL_QSPI_Init+0xe8>)
 80051dc:	4013      	ands	r3, r2
 80051de:	687a      	ldr	r2, [r7, #4]
 80051e0:	6912      	ldr	r2, [r2, #16]
 80051e2:	0411      	lsls	r1, r2, #16
 80051e4:	687a      	ldr	r2, [r7, #4]
 80051e6:	6952      	ldr	r2, [r2, #20]
 80051e8:	4311      	orrs	r1, r2
 80051ea:	687a      	ldr	r2, [r7, #4]
 80051ec:	6992      	ldr	r2, [r2, #24]
 80051ee:	4311      	orrs	r1, r2
 80051f0:	687a      	ldr	r2, [r7, #4]
 80051f2:	6812      	ldr	r2, [r2, #0]
 80051f4:	430b      	orrs	r3, r1
 80051f6:	6053      	str	r3, [r2, #4]
               ((hqspi->Init.FlashSize << QUADSPI_DCR_FSIZE_Pos) |
                hqspi->Init.ChipSelectHighTime | hqspi->Init.ClockMode));

    /* Enable the QSPI peripheral */
    __HAL_QSPI_ENABLE(hqspi);
 80051f8:	687b      	ldr	r3, [r7, #4]
 80051fa:	681b      	ldr	r3, [r3, #0]
 80051fc:	681a      	ldr	r2, [r3, #0]
 80051fe:	687b      	ldr	r3, [r7, #4]
 8005200:	681b      	ldr	r3, [r3, #0]
 8005202:	f042 0201 	orr.w	r2, r2, #1
 8005206:	601a      	str	r2, [r3, #0]

    /* Set QSPI error code to none */
    hqspi->ErrorCode = HAL_QSPI_ERROR_NONE;
 8005208:	687b      	ldr	r3, [r7, #4]
 800520a:	2200      	movs	r2, #0
 800520c:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Initialize the QSPI state */
    hqspi->State = HAL_QSPI_STATE_READY;
 800520e:	687b      	ldr	r3, [r7, #4]
 8005210:	2201      	movs	r2, #1
 8005212:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
  }

  /* Release Lock */
  __HAL_UNLOCK(hqspi);
 8005216:	687b      	ldr	r3, [r7, #4]
 8005218:	2200      	movs	r2, #0
 800521a:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

  /* Return function status */
  return status;
 800521e:	7afb      	ldrb	r3, [r7, #11]
}
 8005220:	4618      	mov	r0, r3
 8005222:	3710      	adds	r7, #16
 8005224:	46bd      	mov	sp, r7
 8005226:	bd80      	pop	{r7, pc}
 8005228:	ffe0f8fe 	.word	0xffe0f8fe

0800522c <HAL_QSPI_SetTimeout>:
  * @param  hqspi QSPI handle.
  * @param  Timeout Timeout for the QSPI memory access.
  * @retval None
  */
void HAL_QSPI_SetTimeout(QSPI_HandleTypeDef *hqspi, uint32_t Timeout)
{
 800522c:	b480      	push	{r7}
 800522e:	b083      	sub	sp, #12
 8005230:	af00      	add	r7, sp, #0
 8005232:	6078      	str	r0, [r7, #4]
 8005234:	6039      	str	r1, [r7, #0]
  hqspi->Timeout = Timeout;
 8005236:	687b      	ldr	r3, [r7, #4]
 8005238:	683a      	ldr	r2, [r7, #0]
 800523a:	641a      	str	r2, [r3, #64]	; 0x40
}
 800523c:	bf00      	nop
 800523e:	370c      	adds	r7, #12
 8005240:	46bd      	mov	sp, r7
 8005242:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005246:	4770      	bx	lr

08005248 <QSPI_WaitFlagStateUntilTimeout>:
  * @param  Timeout Duration of the timeout
  * @retval HAL status
  */
static HAL_StatusTypeDef QSPI_WaitFlagStateUntilTimeout(QSPI_HandleTypeDef *hqspi, uint32_t Flag,
                                                        FlagStatus State, uint32_t Tickstart, uint32_t Timeout)
{
 8005248:	b580      	push	{r7, lr}
 800524a:	b084      	sub	sp, #16
 800524c:	af00      	add	r7, sp, #0
 800524e:	60f8      	str	r0, [r7, #12]
 8005250:	60b9      	str	r1, [r7, #8]
 8005252:	603b      	str	r3, [r7, #0]
 8005254:	4613      	mov	r3, r2
 8005256:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is in expected state */
  while((__HAL_QSPI_GET_FLAG(hqspi, Flag)) != State)
 8005258:	e01a      	b.n	8005290 <QSPI_WaitFlagStateUntilTimeout+0x48>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800525a:	69bb      	ldr	r3, [r7, #24]
 800525c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005260:	d016      	beq.n	8005290 <QSPI_WaitFlagStateUntilTimeout+0x48>
    {
      if(((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8005262:	f7fe fa5b 	bl	800371c <HAL_GetTick>
 8005266:	4602      	mov	r2, r0
 8005268:	683b      	ldr	r3, [r7, #0]
 800526a:	1ad3      	subs	r3, r2, r3
 800526c:	69ba      	ldr	r2, [r7, #24]
 800526e:	429a      	cmp	r2, r3
 8005270:	d302      	bcc.n	8005278 <QSPI_WaitFlagStateUntilTimeout+0x30>
 8005272:	69bb      	ldr	r3, [r7, #24]
 8005274:	2b00      	cmp	r3, #0
 8005276:	d10b      	bne.n	8005290 <QSPI_WaitFlagStateUntilTimeout+0x48>
      {
        hqspi->State     = HAL_QSPI_STATE_ERROR;
 8005278:	68fb      	ldr	r3, [r7, #12]
 800527a:	2204      	movs	r2, #4
 800527c:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
        hqspi->ErrorCode |= HAL_QSPI_ERROR_TIMEOUT;
 8005280:	68fb      	ldr	r3, [r7, #12]
 8005282:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005284:	f043 0201 	orr.w	r2, r3, #1
 8005288:	68fb      	ldr	r3, [r7, #12]
 800528a:	63da      	str	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 800528c:	2301      	movs	r3, #1
 800528e:	e00e      	b.n	80052ae <QSPI_WaitFlagStateUntilTimeout+0x66>
  while((__HAL_QSPI_GET_FLAG(hqspi, Flag)) != State)
 8005290:	68fb      	ldr	r3, [r7, #12]
 8005292:	681b      	ldr	r3, [r3, #0]
 8005294:	689a      	ldr	r2, [r3, #8]
 8005296:	68bb      	ldr	r3, [r7, #8]
 8005298:	4013      	ands	r3, r2
 800529a:	2b00      	cmp	r3, #0
 800529c:	bf14      	ite	ne
 800529e:	2301      	movne	r3, #1
 80052a0:	2300      	moveq	r3, #0
 80052a2:	b2db      	uxtb	r3, r3
 80052a4:	461a      	mov	r2, r3
 80052a6:	79fb      	ldrb	r3, [r7, #7]
 80052a8:	429a      	cmp	r2, r3
 80052aa:	d1d6      	bne.n	800525a <QSPI_WaitFlagStateUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 80052ac:	2300      	movs	r3, #0
}
 80052ae:	4618      	mov	r0, r3
 80052b0:	3710      	adds	r7, #16
 80052b2:	46bd      	mov	sp, r7
 80052b4:	bd80      	pop	{r7, pc}
	...

080052b8 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80052b8:	b580      	push	{r7, lr}
 80052ba:	b088      	sub	sp, #32
 80052bc:	af00      	add	r7, sp, #0
 80052be:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 80052c0:	687b      	ldr	r3, [r7, #4]
 80052c2:	2b00      	cmp	r3, #0
 80052c4:	d101      	bne.n	80052ca <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80052c6:	2301      	movs	r3, #1
 80052c8:	e3ca      	b.n	8005a60 <HAL_RCC_OscConfig+0x7a8>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 80052ca:	4b97      	ldr	r3, [pc, #604]	; (8005528 <HAL_RCC_OscConfig+0x270>)
 80052cc:	689b      	ldr	r3, [r3, #8]
 80052ce:	f003 030c 	and.w	r3, r3, #12
 80052d2:	61bb      	str	r3, [r7, #24]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 80052d4:	4b94      	ldr	r3, [pc, #592]	; (8005528 <HAL_RCC_OscConfig+0x270>)
 80052d6:	68db      	ldr	r3, [r3, #12]
 80052d8:	f003 0303 	and.w	r3, r3, #3
 80052dc:	617b      	str	r3, [r7, #20]

  /*----------------------------- MSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 80052de:	687b      	ldr	r3, [r7, #4]
 80052e0:	681b      	ldr	r3, [r3, #0]
 80052e2:	f003 0310 	and.w	r3, r3, #16
 80052e6:	2b00      	cmp	r3, #0
 80052e8:	f000 80e4 	beq.w	80054b4 <HAL_RCC_OscConfig+0x1fc>
    assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));
    assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

    /* Check if MSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 80052ec:	69bb      	ldr	r3, [r7, #24]
 80052ee:	2b00      	cmp	r3, #0
 80052f0:	d007      	beq.n	8005302 <HAL_RCC_OscConfig+0x4a>
 80052f2:	69bb      	ldr	r3, [r7, #24]
 80052f4:	2b0c      	cmp	r3, #12
 80052f6:	f040 808b 	bne.w	8005410 <HAL_RCC_OscConfig+0x158>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_MSI)))
 80052fa:	697b      	ldr	r3, [r7, #20]
 80052fc:	2b01      	cmp	r3, #1
 80052fe:	f040 8087 	bne.w	8005410 <HAL_RCC_OscConfig+0x158>
    {
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8005302:	4b89      	ldr	r3, [pc, #548]	; (8005528 <HAL_RCC_OscConfig+0x270>)
 8005304:	681b      	ldr	r3, [r3, #0]
 8005306:	f003 0302 	and.w	r3, r3, #2
 800530a:	2b00      	cmp	r3, #0
 800530c:	d005      	beq.n	800531a <HAL_RCC_OscConfig+0x62>
 800530e:	687b      	ldr	r3, [r7, #4]
 8005310:	699b      	ldr	r3, [r3, #24]
 8005312:	2b00      	cmp	r3, #0
 8005314:	d101      	bne.n	800531a <HAL_RCC_OscConfig+0x62>
      {
        return HAL_ERROR;
 8005316:	2301      	movs	r3, #1
 8005318:	e3a2      	b.n	8005a60 <HAL_RCC_OscConfig+0x7a8>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the CPU clock
           (HCLK) and the supply voltage of the device. */
        if(RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 800531a:	687b      	ldr	r3, [r7, #4]
 800531c:	6a1a      	ldr	r2, [r3, #32]
 800531e:	4b82      	ldr	r3, [pc, #520]	; (8005528 <HAL_RCC_OscConfig+0x270>)
 8005320:	681b      	ldr	r3, [r3, #0]
 8005322:	f003 0308 	and.w	r3, r3, #8
 8005326:	2b00      	cmp	r3, #0
 8005328:	d004      	beq.n	8005334 <HAL_RCC_OscConfig+0x7c>
 800532a:	4b7f      	ldr	r3, [pc, #508]	; (8005528 <HAL_RCC_OscConfig+0x270>)
 800532c:	681b      	ldr	r3, [r3, #0]
 800532e:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8005332:	e005      	b.n	8005340 <HAL_RCC_OscConfig+0x88>
 8005334:	4b7c      	ldr	r3, [pc, #496]	; (8005528 <HAL_RCC_OscConfig+0x270>)
 8005336:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800533a:	091b      	lsrs	r3, r3, #4
 800533c:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8005340:	4293      	cmp	r3, r2
 8005342:	d223      	bcs.n	800538c <HAL_RCC_OscConfig+0xd4>
        {
          /* First increase number of wait states update if necessary */
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8005344:	687b      	ldr	r3, [r7, #4]
 8005346:	6a1b      	ldr	r3, [r3, #32]
 8005348:	4618      	mov	r0, r3
 800534a:	f000 fd55 	bl	8005df8 <RCC_SetFlashLatencyFromMSIRange>
 800534e:	4603      	mov	r3, r0
 8005350:	2b00      	cmp	r3, #0
 8005352:	d001      	beq.n	8005358 <HAL_RCC_OscConfig+0xa0>
          {
            return HAL_ERROR;
 8005354:	2301      	movs	r3, #1
 8005356:	e383      	b.n	8005a60 <HAL_RCC_OscConfig+0x7a8>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8005358:	4b73      	ldr	r3, [pc, #460]	; (8005528 <HAL_RCC_OscConfig+0x270>)
 800535a:	681b      	ldr	r3, [r3, #0]
 800535c:	4a72      	ldr	r2, [pc, #456]	; (8005528 <HAL_RCC_OscConfig+0x270>)
 800535e:	f043 0308 	orr.w	r3, r3, #8
 8005362:	6013      	str	r3, [r2, #0]
 8005364:	4b70      	ldr	r3, [pc, #448]	; (8005528 <HAL_RCC_OscConfig+0x270>)
 8005366:	681b      	ldr	r3, [r3, #0]
 8005368:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 800536c:	687b      	ldr	r3, [r7, #4]
 800536e:	6a1b      	ldr	r3, [r3, #32]
 8005370:	496d      	ldr	r1, [pc, #436]	; (8005528 <HAL_RCC_OscConfig+0x270>)
 8005372:	4313      	orrs	r3, r2
 8005374:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8005376:	4b6c      	ldr	r3, [pc, #432]	; (8005528 <HAL_RCC_OscConfig+0x270>)
 8005378:	685b      	ldr	r3, [r3, #4]
 800537a:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 800537e:	687b      	ldr	r3, [r7, #4]
 8005380:	69db      	ldr	r3, [r3, #28]
 8005382:	021b      	lsls	r3, r3, #8
 8005384:	4968      	ldr	r1, [pc, #416]	; (8005528 <HAL_RCC_OscConfig+0x270>)
 8005386:	4313      	orrs	r3, r2
 8005388:	604b      	str	r3, [r1, #4]
 800538a:	e025      	b.n	80053d8 <HAL_RCC_OscConfig+0x120>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 800538c:	4b66      	ldr	r3, [pc, #408]	; (8005528 <HAL_RCC_OscConfig+0x270>)
 800538e:	681b      	ldr	r3, [r3, #0]
 8005390:	4a65      	ldr	r2, [pc, #404]	; (8005528 <HAL_RCC_OscConfig+0x270>)
 8005392:	f043 0308 	orr.w	r3, r3, #8
 8005396:	6013      	str	r3, [r2, #0]
 8005398:	4b63      	ldr	r3, [pc, #396]	; (8005528 <HAL_RCC_OscConfig+0x270>)
 800539a:	681b      	ldr	r3, [r3, #0]
 800539c:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80053a0:	687b      	ldr	r3, [r7, #4]
 80053a2:	6a1b      	ldr	r3, [r3, #32]
 80053a4:	4960      	ldr	r1, [pc, #384]	; (8005528 <HAL_RCC_OscConfig+0x270>)
 80053a6:	4313      	orrs	r3, r2
 80053a8:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 80053aa:	4b5f      	ldr	r3, [pc, #380]	; (8005528 <HAL_RCC_OscConfig+0x270>)
 80053ac:	685b      	ldr	r3, [r3, #4]
 80053ae:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 80053b2:	687b      	ldr	r3, [r7, #4]
 80053b4:	69db      	ldr	r3, [r3, #28]
 80053b6:	021b      	lsls	r3, r3, #8
 80053b8:	495b      	ldr	r1, [pc, #364]	; (8005528 <HAL_RCC_OscConfig+0x270>)
 80053ba:	4313      	orrs	r3, r2
 80053bc:	604b      	str	r3, [r1, #4]

          /* Decrease number of wait states update if necessary */
          /* Only possible when MSI is the System clock source  */
          if(sysclk_source == RCC_CFGR_SWS_MSI)
 80053be:	69bb      	ldr	r3, [r7, #24]
 80053c0:	2b00      	cmp	r3, #0
 80053c2:	d109      	bne.n	80053d8 <HAL_RCC_OscConfig+0x120>
          {
            if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 80053c4:	687b      	ldr	r3, [r7, #4]
 80053c6:	6a1b      	ldr	r3, [r3, #32]
 80053c8:	4618      	mov	r0, r3
 80053ca:	f000 fd15 	bl	8005df8 <RCC_SetFlashLatencyFromMSIRange>
 80053ce:	4603      	mov	r3, r0
 80053d0:	2b00      	cmp	r3, #0
 80053d2:	d001      	beq.n	80053d8 <HAL_RCC_OscConfig+0x120>
            {
              return HAL_ERROR;
 80053d4:	2301      	movs	r3, #1
 80053d6:	e343      	b.n	8005a60 <HAL_RCC_OscConfig+0x7a8>
            }
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 80053d8:	f000 fc4a 	bl	8005c70 <HAL_RCC_GetSysClockFreq>
 80053dc:	4602      	mov	r2, r0
 80053de:	4b52      	ldr	r3, [pc, #328]	; (8005528 <HAL_RCC_OscConfig+0x270>)
 80053e0:	689b      	ldr	r3, [r3, #8]
 80053e2:	091b      	lsrs	r3, r3, #4
 80053e4:	f003 030f 	and.w	r3, r3, #15
 80053e8:	4950      	ldr	r1, [pc, #320]	; (800552c <HAL_RCC_OscConfig+0x274>)
 80053ea:	5ccb      	ldrb	r3, [r1, r3]
 80053ec:	f003 031f 	and.w	r3, r3, #31
 80053f0:	fa22 f303 	lsr.w	r3, r2, r3
 80053f4:	4a4e      	ldr	r2, [pc, #312]	; (8005530 <HAL_RCC_OscConfig+0x278>)
 80053f6:	6013      	str	r3, [r2, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick(uwTickPrio);
 80053f8:	4b4e      	ldr	r3, [pc, #312]	; (8005534 <HAL_RCC_OscConfig+0x27c>)
 80053fa:	681b      	ldr	r3, [r3, #0]
 80053fc:	4618      	mov	r0, r3
 80053fe:	f7fe f93d 	bl	800367c <HAL_InitTick>
 8005402:	4603      	mov	r3, r0
 8005404:	73fb      	strb	r3, [r7, #15]
        if(status != HAL_OK)
 8005406:	7bfb      	ldrb	r3, [r7, #15]
 8005408:	2b00      	cmp	r3, #0
 800540a:	d052      	beq.n	80054b2 <HAL_RCC_OscConfig+0x1fa>
        {
          return status;
 800540c:	7bfb      	ldrb	r3, [r7, #15]
 800540e:	e327      	b.n	8005a60 <HAL_RCC_OscConfig+0x7a8>
      }
    }
    else
    {
      /* Check the MSI State */
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 8005410:	687b      	ldr	r3, [r7, #4]
 8005412:	699b      	ldr	r3, [r3, #24]
 8005414:	2b00      	cmp	r3, #0
 8005416:	d032      	beq.n	800547e <HAL_RCC_OscConfig+0x1c6>
      {
        /* Enable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 8005418:	4b43      	ldr	r3, [pc, #268]	; (8005528 <HAL_RCC_OscConfig+0x270>)
 800541a:	681b      	ldr	r3, [r3, #0]
 800541c:	4a42      	ldr	r2, [pc, #264]	; (8005528 <HAL_RCC_OscConfig+0x270>)
 800541e:	f043 0301 	orr.w	r3, r3, #1
 8005422:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 8005424:	f7fe f97a 	bl	800371c <HAL_GetTick>
 8005428:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 800542a:	e008      	b.n	800543e <HAL_RCC_OscConfig+0x186>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 800542c:	f7fe f976 	bl	800371c <HAL_GetTick>
 8005430:	4602      	mov	r2, r0
 8005432:	693b      	ldr	r3, [r7, #16]
 8005434:	1ad3      	subs	r3, r2, r3
 8005436:	2b02      	cmp	r3, #2
 8005438:	d901      	bls.n	800543e <HAL_RCC_OscConfig+0x186>
          {
            return HAL_TIMEOUT;
 800543a:	2303      	movs	r3, #3
 800543c:	e310      	b.n	8005a60 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 800543e:	4b3a      	ldr	r3, [pc, #232]	; (8005528 <HAL_RCC_OscConfig+0x270>)
 8005440:	681b      	ldr	r3, [r3, #0]
 8005442:	f003 0302 	and.w	r3, r3, #2
 8005446:	2b00      	cmp	r3, #0
 8005448:	d0f0      	beq.n	800542c <HAL_RCC_OscConfig+0x174>
          }
        }
         /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 800544a:	4b37      	ldr	r3, [pc, #220]	; (8005528 <HAL_RCC_OscConfig+0x270>)
 800544c:	681b      	ldr	r3, [r3, #0]
 800544e:	4a36      	ldr	r2, [pc, #216]	; (8005528 <HAL_RCC_OscConfig+0x270>)
 8005450:	f043 0308 	orr.w	r3, r3, #8
 8005454:	6013      	str	r3, [r2, #0]
 8005456:	4b34      	ldr	r3, [pc, #208]	; (8005528 <HAL_RCC_OscConfig+0x270>)
 8005458:	681b      	ldr	r3, [r3, #0]
 800545a:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 800545e:	687b      	ldr	r3, [r7, #4]
 8005460:	6a1b      	ldr	r3, [r3, #32]
 8005462:	4931      	ldr	r1, [pc, #196]	; (8005528 <HAL_RCC_OscConfig+0x270>)
 8005464:	4313      	orrs	r3, r2
 8005466:	600b      	str	r3, [r1, #0]
         /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8005468:	4b2f      	ldr	r3, [pc, #188]	; (8005528 <HAL_RCC_OscConfig+0x270>)
 800546a:	685b      	ldr	r3, [r3, #4]
 800546c:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8005470:	687b      	ldr	r3, [r7, #4]
 8005472:	69db      	ldr	r3, [r3, #28]
 8005474:	021b      	lsls	r3, r3, #8
 8005476:	492c      	ldr	r1, [pc, #176]	; (8005528 <HAL_RCC_OscConfig+0x270>)
 8005478:	4313      	orrs	r3, r2
 800547a:	604b      	str	r3, [r1, #4]
 800547c:	e01a      	b.n	80054b4 <HAL_RCC_OscConfig+0x1fc>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 800547e:	4b2a      	ldr	r3, [pc, #168]	; (8005528 <HAL_RCC_OscConfig+0x270>)
 8005480:	681b      	ldr	r3, [r3, #0]
 8005482:	4a29      	ldr	r2, [pc, #164]	; (8005528 <HAL_RCC_OscConfig+0x270>)
 8005484:	f023 0301 	bic.w	r3, r3, #1
 8005488:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 800548a:	f7fe f947 	bl	800371c <HAL_GetTick>
 800548e:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8005490:	e008      	b.n	80054a4 <HAL_RCC_OscConfig+0x1ec>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8005492:	f7fe f943 	bl	800371c <HAL_GetTick>
 8005496:	4602      	mov	r2, r0
 8005498:	693b      	ldr	r3, [r7, #16]
 800549a:	1ad3      	subs	r3, r2, r3
 800549c:	2b02      	cmp	r3, #2
 800549e:	d901      	bls.n	80054a4 <HAL_RCC_OscConfig+0x1ec>
          {
            return HAL_TIMEOUT;
 80054a0:	2303      	movs	r3, #3
 80054a2:	e2dd      	b.n	8005a60 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 80054a4:	4b20      	ldr	r3, [pc, #128]	; (8005528 <HAL_RCC_OscConfig+0x270>)
 80054a6:	681b      	ldr	r3, [r3, #0]
 80054a8:	f003 0302 	and.w	r3, r3, #2
 80054ac:	2b00      	cmp	r3, #0
 80054ae:	d1f0      	bne.n	8005492 <HAL_RCC_OscConfig+0x1da>
 80054b0:	e000      	b.n	80054b4 <HAL_RCC_OscConfig+0x1fc>
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 80054b2:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80054b4:	687b      	ldr	r3, [r7, #4]
 80054b6:	681b      	ldr	r3, [r3, #0]
 80054b8:	f003 0301 	and.w	r3, r3, #1
 80054bc:	2b00      	cmp	r3, #0
 80054be:	d074      	beq.n	80055aa <HAL_RCC_OscConfig+0x2f2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((sysclk_source == RCC_CFGR_SWS_HSE) ||
 80054c0:	69bb      	ldr	r3, [r7, #24]
 80054c2:	2b08      	cmp	r3, #8
 80054c4:	d005      	beq.n	80054d2 <HAL_RCC_OscConfig+0x21a>
 80054c6:	69bb      	ldr	r3, [r7, #24]
 80054c8:	2b0c      	cmp	r3, #12
 80054ca:	d10e      	bne.n	80054ea <HAL_RCC_OscConfig+0x232>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSE)))
 80054cc:	697b      	ldr	r3, [r7, #20]
 80054ce:	2b03      	cmp	r3, #3
 80054d0:	d10b      	bne.n	80054ea <HAL_RCC_OscConfig+0x232>
    {
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80054d2:	4b15      	ldr	r3, [pc, #84]	; (8005528 <HAL_RCC_OscConfig+0x270>)
 80054d4:	681b      	ldr	r3, [r3, #0]
 80054d6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80054da:	2b00      	cmp	r3, #0
 80054dc:	d064      	beq.n	80055a8 <HAL_RCC_OscConfig+0x2f0>
 80054de:	687b      	ldr	r3, [r7, #4]
 80054e0:	685b      	ldr	r3, [r3, #4]
 80054e2:	2b00      	cmp	r3, #0
 80054e4:	d160      	bne.n	80055a8 <HAL_RCC_OscConfig+0x2f0>
      {
        return HAL_ERROR;
 80054e6:	2301      	movs	r3, #1
 80054e8:	e2ba      	b.n	8005a60 <HAL_RCC_OscConfig+0x7a8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80054ea:	687b      	ldr	r3, [r7, #4]
 80054ec:	685b      	ldr	r3, [r3, #4]
 80054ee:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80054f2:	d106      	bne.n	8005502 <HAL_RCC_OscConfig+0x24a>
 80054f4:	4b0c      	ldr	r3, [pc, #48]	; (8005528 <HAL_RCC_OscConfig+0x270>)
 80054f6:	681b      	ldr	r3, [r3, #0]
 80054f8:	4a0b      	ldr	r2, [pc, #44]	; (8005528 <HAL_RCC_OscConfig+0x270>)
 80054fa:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80054fe:	6013      	str	r3, [r2, #0]
 8005500:	e026      	b.n	8005550 <HAL_RCC_OscConfig+0x298>
 8005502:	687b      	ldr	r3, [r7, #4]
 8005504:	685b      	ldr	r3, [r3, #4]
 8005506:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 800550a:	d115      	bne.n	8005538 <HAL_RCC_OscConfig+0x280>
 800550c:	4b06      	ldr	r3, [pc, #24]	; (8005528 <HAL_RCC_OscConfig+0x270>)
 800550e:	681b      	ldr	r3, [r3, #0]
 8005510:	4a05      	ldr	r2, [pc, #20]	; (8005528 <HAL_RCC_OscConfig+0x270>)
 8005512:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8005516:	6013      	str	r3, [r2, #0]
 8005518:	4b03      	ldr	r3, [pc, #12]	; (8005528 <HAL_RCC_OscConfig+0x270>)
 800551a:	681b      	ldr	r3, [r3, #0]
 800551c:	4a02      	ldr	r2, [pc, #8]	; (8005528 <HAL_RCC_OscConfig+0x270>)
 800551e:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8005522:	6013      	str	r3, [r2, #0]
 8005524:	e014      	b.n	8005550 <HAL_RCC_OscConfig+0x298>
 8005526:	bf00      	nop
 8005528:	40021000 	.word	0x40021000
 800552c:	08009910 	.word	0x08009910
 8005530:	20000134 	.word	0x20000134
 8005534:	2000017c 	.word	0x2000017c
 8005538:	4ba0      	ldr	r3, [pc, #640]	; (80057bc <HAL_RCC_OscConfig+0x504>)
 800553a:	681b      	ldr	r3, [r3, #0]
 800553c:	4a9f      	ldr	r2, [pc, #636]	; (80057bc <HAL_RCC_OscConfig+0x504>)
 800553e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8005542:	6013      	str	r3, [r2, #0]
 8005544:	4b9d      	ldr	r3, [pc, #628]	; (80057bc <HAL_RCC_OscConfig+0x504>)
 8005546:	681b      	ldr	r3, [r3, #0]
 8005548:	4a9c      	ldr	r2, [pc, #624]	; (80057bc <HAL_RCC_OscConfig+0x504>)
 800554a:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800554e:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8005550:	687b      	ldr	r3, [r7, #4]
 8005552:	685b      	ldr	r3, [r3, #4]
 8005554:	2b00      	cmp	r3, #0
 8005556:	d013      	beq.n	8005580 <HAL_RCC_OscConfig+0x2c8>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005558:	f7fe f8e0 	bl	800371c <HAL_GetTick>
 800555c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 800555e:	e008      	b.n	8005572 <HAL_RCC_OscConfig+0x2ba>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8005560:	f7fe f8dc 	bl	800371c <HAL_GetTick>
 8005564:	4602      	mov	r2, r0
 8005566:	693b      	ldr	r3, [r7, #16]
 8005568:	1ad3      	subs	r3, r2, r3
 800556a:	2b64      	cmp	r3, #100	; 0x64
 800556c:	d901      	bls.n	8005572 <HAL_RCC_OscConfig+0x2ba>
          {
            return HAL_TIMEOUT;
 800556e:	2303      	movs	r3, #3
 8005570:	e276      	b.n	8005a60 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8005572:	4b92      	ldr	r3, [pc, #584]	; (80057bc <HAL_RCC_OscConfig+0x504>)
 8005574:	681b      	ldr	r3, [r3, #0]
 8005576:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800557a:	2b00      	cmp	r3, #0
 800557c:	d0f0      	beq.n	8005560 <HAL_RCC_OscConfig+0x2a8>
 800557e:	e014      	b.n	80055aa <HAL_RCC_OscConfig+0x2f2>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005580:	f7fe f8cc 	bl	800371c <HAL_GetTick>
 8005584:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8005586:	e008      	b.n	800559a <HAL_RCC_OscConfig+0x2e2>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8005588:	f7fe f8c8 	bl	800371c <HAL_GetTick>
 800558c:	4602      	mov	r2, r0
 800558e:	693b      	ldr	r3, [r7, #16]
 8005590:	1ad3      	subs	r3, r2, r3
 8005592:	2b64      	cmp	r3, #100	; 0x64
 8005594:	d901      	bls.n	800559a <HAL_RCC_OscConfig+0x2e2>
          {
            return HAL_TIMEOUT;
 8005596:	2303      	movs	r3, #3
 8005598:	e262      	b.n	8005a60 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 800559a:	4b88      	ldr	r3, [pc, #544]	; (80057bc <HAL_RCC_OscConfig+0x504>)
 800559c:	681b      	ldr	r3, [r3, #0]
 800559e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80055a2:	2b00      	cmp	r3, #0
 80055a4:	d1f0      	bne.n	8005588 <HAL_RCC_OscConfig+0x2d0>
 80055a6:	e000      	b.n	80055aa <HAL_RCC_OscConfig+0x2f2>
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80055a8:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80055aa:	687b      	ldr	r3, [r7, #4]
 80055ac:	681b      	ldr	r3, [r3, #0]
 80055ae:	f003 0302 	and.w	r3, r3, #2
 80055b2:	2b00      	cmp	r3, #0
 80055b4:	d060      	beq.n	8005678 <HAL_RCC_OscConfig+0x3c0>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_HSI) ||
 80055b6:	69bb      	ldr	r3, [r7, #24]
 80055b8:	2b04      	cmp	r3, #4
 80055ba:	d005      	beq.n	80055c8 <HAL_RCC_OscConfig+0x310>
 80055bc:	69bb      	ldr	r3, [r7, #24]
 80055be:	2b0c      	cmp	r3, #12
 80055c0:	d119      	bne.n	80055f6 <HAL_RCC_OscConfig+0x33e>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSI)))
 80055c2:	697b      	ldr	r3, [r7, #20]
 80055c4:	2b02      	cmp	r3, #2
 80055c6:	d116      	bne.n	80055f6 <HAL_RCC_OscConfig+0x33e>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80055c8:	4b7c      	ldr	r3, [pc, #496]	; (80057bc <HAL_RCC_OscConfig+0x504>)
 80055ca:	681b      	ldr	r3, [r3, #0]
 80055cc:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80055d0:	2b00      	cmp	r3, #0
 80055d2:	d005      	beq.n	80055e0 <HAL_RCC_OscConfig+0x328>
 80055d4:	687b      	ldr	r3, [r7, #4]
 80055d6:	68db      	ldr	r3, [r3, #12]
 80055d8:	2b00      	cmp	r3, #0
 80055da:	d101      	bne.n	80055e0 <HAL_RCC_OscConfig+0x328>
      {
        return HAL_ERROR;
 80055dc:	2301      	movs	r3, #1
 80055de:	e23f      	b.n	8005a60 <HAL_RCC_OscConfig+0x7a8>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80055e0:	4b76      	ldr	r3, [pc, #472]	; (80057bc <HAL_RCC_OscConfig+0x504>)
 80055e2:	685b      	ldr	r3, [r3, #4]
 80055e4:	f023 52f8 	bic.w	r2, r3, #520093696	; 0x1f000000
 80055e8:	687b      	ldr	r3, [r7, #4]
 80055ea:	691b      	ldr	r3, [r3, #16]
 80055ec:	061b      	lsls	r3, r3, #24
 80055ee:	4973      	ldr	r1, [pc, #460]	; (80057bc <HAL_RCC_OscConfig+0x504>)
 80055f0:	4313      	orrs	r3, r2
 80055f2:	604b      	str	r3, [r1, #4]
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80055f4:	e040      	b.n	8005678 <HAL_RCC_OscConfig+0x3c0>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 80055f6:	687b      	ldr	r3, [r7, #4]
 80055f8:	68db      	ldr	r3, [r3, #12]
 80055fa:	2b00      	cmp	r3, #0
 80055fc:	d023      	beq.n	8005646 <HAL_RCC_OscConfig+0x38e>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80055fe:	4b6f      	ldr	r3, [pc, #444]	; (80057bc <HAL_RCC_OscConfig+0x504>)
 8005600:	681b      	ldr	r3, [r3, #0]
 8005602:	4a6e      	ldr	r2, [pc, #440]	; (80057bc <HAL_RCC_OscConfig+0x504>)
 8005604:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8005608:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800560a:	f7fe f887 	bl	800371c <HAL_GetTick>
 800560e:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8005610:	e008      	b.n	8005624 <HAL_RCC_OscConfig+0x36c>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8005612:	f7fe f883 	bl	800371c <HAL_GetTick>
 8005616:	4602      	mov	r2, r0
 8005618:	693b      	ldr	r3, [r7, #16]
 800561a:	1ad3      	subs	r3, r2, r3
 800561c:	2b02      	cmp	r3, #2
 800561e:	d901      	bls.n	8005624 <HAL_RCC_OscConfig+0x36c>
          {
            return HAL_TIMEOUT;
 8005620:	2303      	movs	r3, #3
 8005622:	e21d      	b.n	8005a60 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8005624:	4b65      	ldr	r3, [pc, #404]	; (80057bc <HAL_RCC_OscConfig+0x504>)
 8005626:	681b      	ldr	r3, [r3, #0]
 8005628:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800562c:	2b00      	cmp	r3, #0
 800562e:	d0f0      	beq.n	8005612 <HAL_RCC_OscConfig+0x35a>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8005630:	4b62      	ldr	r3, [pc, #392]	; (80057bc <HAL_RCC_OscConfig+0x504>)
 8005632:	685b      	ldr	r3, [r3, #4]
 8005634:	f023 52f8 	bic.w	r2, r3, #520093696	; 0x1f000000
 8005638:	687b      	ldr	r3, [r7, #4]
 800563a:	691b      	ldr	r3, [r3, #16]
 800563c:	061b      	lsls	r3, r3, #24
 800563e:	495f      	ldr	r1, [pc, #380]	; (80057bc <HAL_RCC_OscConfig+0x504>)
 8005640:	4313      	orrs	r3, r2
 8005642:	604b      	str	r3, [r1, #4]
 8005644:	e018      	b.n	8005678 <HAL_RCC_OscConfig+0x3c0>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8005646:	4b5d      	ldr	r3, [pc, #372]	; (80057bc <HAL_RCC_OscConfig+0x504>)
 8005648:	681b      	ldr	r3, [r3, #0]
 800564a:	4a5c      	ldr	r2, [pc, #368]	; (80057bc <HAL_RCC_OscConfig+0x504>)
 800564c:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8005650:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005652:	f7fe f863 	bl	800371c <HAL_GetTick>
 8005656:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8005658:	e008      	b.n	800566c <HAL_RCC_OscConfig+0x3b4>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800565a:	f7fe f85f 	bl	800371c <HAL_GetTick>
 800565e:	4602      	mov	r2, r0
 8005660:	693b      	ldr	r3, [r7, #16]
 8005662:	1ad3      	subs	r3, r2, r3
 8005664:	2b02      	cmp	r3, #2
 8005666:	d901      	bls.n	800566c <HAL_RCC_OscConfig+0x3b4>
          {
            return HAL_TIMEOUT;
 8005668:	2303      	movs	r3, #3
 800566a:	e1f9      	b.n	8005a60 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 800566c:	4b53      	ldr	r3, [pc, #332]	; (80057bc <HAL_RCC_OscConfig+0x504>)
 800566e:	681b      	ldr	r3, [r3, #0]
 8005670:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8005674:	2b00      	cmp	r3, #0
 8005676:	d1f0      	bne.n	800565a <HAL_RCC_OscConfig+0x3a2>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8005678:	687b      	ldr	r3, [r7, #4]
 800567a:	681b      	ldr	r3, [r3, #0]
 800567c:	f003 0308 	and.w	r3, r3, #8
 8005680:	2b00      	cmp	r3, #0
 8005682:	d03c      	beq.n	80056fe <HAL_RCC_OscConfig+0x446>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8005684:	687b      	ldr	r3, [r7, #4]
 8005686:	695b      	ldr	r3, [r3, #20]
 8005688:	2b00      	cmp	r3, #0
 800568a:	d01c      	beq.n	80056c6 <HAL_RCC_OscConfig+0x40e>
        MODIFY_REG(RCC->CSR, RCC_CSR_LSIPREDIV, RCC_OscInitStruct->LSIDiv);
      }
#endif /* RCC_CSR_LSIPREDIV */

      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800568c:	4b4b      	ldr	r3, [pc, #300]	; (80057bc <HAL_RCC_OscConfig+0x504>)
 800568e:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8005692:	4a4a      	ldr	r2, [pc, #296]	; (80057bc <HAL_RCC_OscConfig+0x504>)
 8005694:	f043 0301 	orr.w	r3, r3, #1
 8005698:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800569c:	f7fe f83e 	bl	800371c <HAL_GetTick>
 80056a0:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 80056a2:	e008      	b.n	80056b6 <HAL_RCC_OscConfig+0x3fe>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80056a4:	f7fe f83a 	bl	800371c <HAL_GetTick>
 80056a8:	4602      	mov	r2, r0
 80056aa:	693b      	ldr	r3, [r7, #16]
 80056ac:	1ad3      	subs	r3, r2, r3
 80056ae:	2b02      	cmp	r3, #2
 80056b0:	d901      	bls.n	80056b6 <HAL_RCC_OscConfig+0x3fe>
        {
          return HAL_TIMEOUT;
 80056b2:	2303      	movs	r3, #3
 80056b4:	e1d4      	b.n	8005a60 <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 80056b6:	4b41      	ldr	r3, [pc, #260]	; (80057bc <HAL_RCC_OscConfig+0x504>)
 80056b8:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80056bc:	f003 0302 	and.w	r3, r3, #2
 80056c0:	2b00      	cmp	r3, #0
 80056c2:	d0ef      	beq.n	80056a4 <HAL_RCC_OscConfig+0x3ec>
 80056c4:	e01b      	b.n	80056fe <HAL_RCC_OscConfig+0x446>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80056c6:	4b3d      	ldr	r3, [pc, #244]	; (80057bc <HAL_RCC_OscConfig+0x504>)
 80056c8:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80056cc:	4a3b      	ldr	r2, [pc, #236]	; (80057bc <HAL_RCC_OscConfig+0x504>)
 80056ce:	f023 0301 	bic.w	r3, r3, #1
 80056d2:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80056d6:	f7fe f821 	bl	800371c <HAL_GetTick>
 80056da:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 80056dc:	e008      	b.n	80056f0 <HAL_RCC_OscConfig+0x438>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80056de:	f7fe f81d 	bl	800371c <HAL_GetTick>
 80056e2:	4602      	mov	r2, r0
 80056e4:	693b      	ldr	r3, [r7, #16]
 80056e6:	1ad3      	subs	r3, r2, r3
 80056e8:	2b02      	cmp	r3, #2
 80056ea:	d901      	bls.n	80056f0 <HAL_RCC_OscConfig+0x438>
        {
          return HAL_TIMEOUT;
 80056ec:	2303      	movs	r3, #3
 80056ee:	e1b7      	b.n	8005a60 <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 80056f0:	4b32      	ldr	r3, [pc, #200]	; (80057bc <HAL_RCC_OscConfig+0x504>)
 80056f2:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80056f6:	f003 0302 	and.w	r3, r3, #2
 80056fa:	2b00      	cmp	r3, #0
 80056fc:	d1ef      	bne.n	80056de <HAL_RCC_OscConfig+0x426>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80056fe:	687b      	ldr	r3, [r7, #4]
 8005700:	681b      	ldr	r3, [r3, #0]
 8005702:	f003 0304 	and.w	r3, r3, #4
 8005706:	2b00      	cmp	r3, #0
 8005708:	f000 80a6 	beq.w	8005858 <HAL_RCC_OscConfig+0x5a0>
  {
    FlagStatus       pwrclkchanged = RESET;
 800570c:	2300      	movs	r3, #0
 800570e:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(HAL_IS_BIT_CLR(RCC->APB1ENR1, RCC_APB1ENR1_PWREN))
 8005710:	4b2a      	ldr	r3, [pc, #168]	; (80057bc <HAL_RCC_OscConfig+0x504>)
 8005712:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005714:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8005718:	2b00      	cmp	r3, #0
 800571a:	d10d      	bne.n	8005738 <HAL_RCC_OscConfig+0x480>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800571c:	4b27      	ldr	r3, [pc, #156]	; (80057bc <HAL_RCC_OscConfig+0x504>)
 800571e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005720:	4a26      	ldr	r2, [pc, #152]	; (80057bc <HAL_RCC_OscConfig+0x504>)
 8005722:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8005726:	6593      	str	r3, [r2, #88]	; 0x58
 8005728:	4b24      	ldr	r3, [pc, #144]	; (80057bc <HAL_RCC_OscConfig+0x504>)
 800572a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800572c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8005730:	60bb      	str	r3, [r7, #8]
 8005732:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8005734:	2301      	movs	r3, #1
 8005736:	77fb      	strb	r3, [r7, #31]
    }

    if(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8005738:	4b21      	ldr	r3, [pc, #132]	; (80057c0 <HAL_RCC_OscConfig+0x508>)
 800573a:	681b      	ldr	r3, [r3, #0]
 800573c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005740:	2b00      	cmp	r3, #0
 8005742:	d118      	bne.n	8005776 <HAL_RCC_OscConfig+0x4be>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8005744:	4b1e      	ldr	r3, [pc, #120]	; (80057c0 <HAL_RCC_OscConfig+0x508>)
 8005746:	681b      	ldr	r3, [r3, #0]
 8005748:	4a1d      	ldr	r2, [pc, #116]	; (80057c0 <HAL_RCC_OscConfig+0x508>)
 800574a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800574e:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8005750:	f7fd ffe4 	bl	800371c <HAL_GetTick>
 8005754:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8005756:	e008      	b.n	800576a <HAL_RCC_OscConfig+0x4b2>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8005758:	f7fd ffe0 	bl	800371c <HAL_GetTick>
 800575c:	4602      	mov	r2, r0
 800575e:	693b      	ldr	r3, [r7, #16]
 8005760:	1ad3      	subs	r3, r2, r3
 8005762:	2b02      	cmp	r3, #2
 8005764:	d901      	bls.n	800576a <HAL_RCC_OscConfig+0x4b2>
        {
          return HAL_TIMEOUT;
 8005766:	2303      	movs	r3, #3
 8005768:	e17a      	b.n	8005a60 <HAL_RCC_OscConfig+0x7a8>
      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800576a:	4b15      	ldr	r3, [pc, #84]	; (80057c0 <HAL_RCC_OscConfig+0x508>)
 800576c:	681b      	ldr	r3, [r3, #0]
 800576e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005772:	2b00      	cmp	r3, #0
 8005774:	d0f0      	beq.n	8005758 <HAL_RCC_OscConfig+0x4a0>
    {
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
    }
#else
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8005776:	687b      	ldr	r3, [r7, #4]
 8005778:	689b      	ldr	r3, [r3, #8]
 800577a:	2b01      	cmp	r3, #1
 800577c:	d108      	bne.n	8005790 <HAL_RCC_OscConfig+0x4d8>
 800577e:	4b0f      	ldr	r3, [pc, #60]	; (80057bc <HAL_RCC_OscConfig+0x504>)
 8005780:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005784:	4a0d      	ldr	r2, [pc, #52]	; (80057bc <HAL_RCC_OscConfig+0x504>)
 8005786:	f043 0301 	orr.w	r3, r3, #1
 800578a:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 800578e:	e029      	b.n	80057e4 <HAL_RCC_OscConfig+0x52c>
 8005790:	687b      	ldr	r3, [r7, #4]
 8005792:	689b      	ldr	r3, [r3, #8]
 8005794:	2b05      	cmp	r3, #5
 8005796:	d115      	bne.n	80057c4 <HAL_RCC_OscConfig+0x50c>
 8005798:	4b08      	ldr	r3, [pc, #32]	; (80057bc <HAL_RCC_OscConfig+0x504>)
 800579a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800579e:	4a07      	ldr	r2, [pc, #28]	; (80057bc <HAL_RCC_OscConfig+0x504>)
 80057a0:	f043 0304 	orr.w	r3, r3, #4
 80057a4:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 80057a8:	4b04      	ldr	r3, [pc, #16]	; (80057bc <HAL_RCC_OscConfig+0x504>)
 80057aa:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80057ae:	4a03      	ldr	r2, [pc, #12]	; (80057bc <HAL_RCC_OscConfig+0x504>)
 80057b0:	f043 0301 	orr.w	r3, r3, #1
 80057b4:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 80057b8:	e014      	b.n	80057e4 <HAL_RCC_OscConfig+0x52c>
 80057ba:	bf00      	nop
 80057bc:	40021000 	.word	0x40021000
 80057c0:	40007000 	.word	0x40007000
 80057c4:	4b9c      	ldr	r3, [pc, #624]	; (8005a38 <HAL_RCC_OscConfig+0x780>)
 80057c6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80057ca:	4a9b      	ldr	r2, [pc, #620]	; (8005a38 <HAL_RCC_OscConfig+0x780>)
 80057cc:	f023 0301 	bic.w	r3, r3, #1
 80057d0:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 80057d4:	4b98      	ldr	r3, [pc, #608]	; (8005a38 <HAL_RCC_OscConfig+0x780>)
 80057d6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80057da:	4a97      	ldr	r2, [pc, #604]	; (8005a38 <HAL_RCC_OscConfig+0x780>)
 80057dc:	f023 0304 	bic.w	r3, r3, #4
 80057e0:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
#endif /* RCC_BDCR_LSESYSDIS */

    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 80057e4:	687b      	ldr	r3, [r7, #4]
 80057e6:	689b      	ldr	r3, [r3, #8]
 80057e8:	2b00      	cmp	r3, #0
 80057ea:	d016      	beq.n	800581a <HAL_RCC_OscConfig+0x562>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80057ec:	f7fd ff96 	bl	800371c <HAL_GetTick>
 80057f0:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80057f2:	e00a      	b.n	800580a <HAL_RCC_OscConfig+0x552>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80057f4:	f7fd ff92 	bl	800371c <HAL_GetTick>
 80057f8:	4602      	mov	r2, r0
 80057fa:	693b      	ldr	r3, [r7, #16]
 80057fc:	1ad3      	subs	r3, r2, r3
 80057fe:	f241 3288 	movw	r2, #5000	; 0x1388
 8005802:	4293      	cmp	r3, r2
 8005804:	d901      	bls.n	800580a <HAL_RCC_OscConfig+0x552>
        {
          return HAL_TIMEOUT;
 8005806:	2303      	movs	r3, #3
 8005808:	e12a      	b.n	8005a60 <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800580a:	4b8b      	ldr	r3, [pc, #556]	; (8005a38 <HAL_RCC_OscConfig+0x780>)
 800580c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005810:	f003 0302 	and.w	r3, r3, #2
 8005814:	2b00      	cmp	r3, #0
 8005816:	d0ed      	beq.n	80057f4 <HAL_RCC_OscConfig+0x53c>
 8005818:	e015      	b.n	8005846 <HAL_RCC_OscConfig+0x58e>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800581a:	f7fd ff7f 	bl	800371c <HAL_GetTick>
 800581e:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8005820:	e00a      	b.n	8005838 <HAL_RCC_OscConfig+0x580>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8005822:	f7fd ff7b 	bl	800371c <HAL_GetTick>
 8005826:	4602      	mov	r2, r0
 8005828:	693b      	ldr	r3, [r7, #16]
 800582a:	1ad3      	subs	r3, r2, r3
 800582c:	f241 3288 	movw	r2, #5000	; 0x1388
 8005830:	4293      	cmp	r3, r2
 8005832:	d901      	bls.n	8005838 <HAL_RCC_OscConfig+0x580>
        {
          return HAL_TIMEOUT;
 8005834:	2303      	movs	r3, #3
 8005836:	e113      	b.n	8005a60 <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8005838:	4b7f      	ldr	r3, [pc, #508]	; (8005a38 <HAL_RCC_OscConfig+0x780>)
 800583a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800583e:	f003 0302 	and.w	r3, r3, #2
 8005842:	2b00      	cmp	r3, #0
 8005844:	d1ed      	bne.n	8005822 <HAL_RCC_OscConfig+0x56a>
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSDIS);
#endif /* RCC_BDCR_LSESYSDIS */
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8005846:	7ffb      	ldrb	r3, [r7, #31]
 8005848:	2b01      	cmp	r3, #1
 800584a:	d105      	bne.n	8005858 <HAL_RCC_OscConfig+0x5a0>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800584c:	4b7a      	ldr	r3, [pc, #488]	; (8005a38 <HAL_RCC_OscConfig+0x780>)
 800584e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005850:	4a79      	ldr	r2, [pc, #484]	; (8005a38 <HAL_RCC_OscConfig+0x780>)
 8005852:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8005856:	6593      	str	r3, [r2, #88]	; 0x58
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if(RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 8005858:	687b      	ldr	r3, [r7, #4]
 800585a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800585c:	2b00      	cmp	r3, #0
 800585e:	f000 80fe 	beq.w	8005a5e <HAL_RCC_OscConfig+0x7a6>
  {
    /* PLL On ? */
    if(RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 8005862:	687b      	ldr	r3, [r7, #4]
 8005864:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005866:	2b02      	cmp	r3, #2
 8005868:	f040 80d0 	bne.w	8005a0c <HAL_RCC_OscConfig+0x754>
#endif /* RCC_PLLP_SUPPORT */
      assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
      assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

      /* Do nothing if PLL configuration is the unchanged */
      pll_config = RCC->PLLCFGR;
 800586c:	4b72      	ldr	r3, [pc, #456]	; (8005a38 <HAL_RCC_OscConfig+0x780>)
 800586e:	68db      	ldr	r3, [r3, #12]
 8005870:	617b      	str	r3, [r7, #20]
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8005872:	697b      	ldr	r3, [r7, #20]
 8005874:	f003 0203 	and.w	r2, r3, #3
 8005878:	687b      	ldr	r3, [r7, #4]
 800587a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800587c:	429a      	cmp	r2, r3
 800587e:	d130      	bne.n	80058e2 <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8005880:	697b      	ldr	r3, [r7, #20]
 8005882:	f003 0270 	and.w	r2, r3, #112	; 0x70
 8005886:	687b      	ldr	r3, [r7, #4]
 8005888:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800588a:	3b01      	subs	r3, #1
 800588c:	011b      	lsls	r3, r3, #4
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 800588e:	429a      	cmp	r2, r3
 8005890:	d127      	bne.n	80058e2 <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8005892:	697b      	ldr	r3, [r7, #20]
 8005894:	f403 42fe 	and.w	r2, r3, #32512	; 0x7f00
 8005898:	687b      	ldr	r3, [r7, #4]
 800589a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800589c:	021b      	lsls	r3, r3, #8
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 800589e:	429a      	cmp	r2, r3
 80058a0:	d11f      	bne.n	80058e2 <HAL_RCC_OscConfig+0x62a>
#if defined(RCC_PLLP_SUPPORT)
#if defined(RCC_PLLP_DIV_2_31_SUPPORT)
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
#else
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
 80058a2:	697b      	ldr	r3, [r7, #20]
 80058a4:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80058a8:	687a      	ldr	r2, [r7, #4]
 80058aa:	6b92      	ldr	r2, [r2, #56]	; 0x38
 80058ac:	2a07      	cmp	r2, #7
 80058ae:	bf14      	ite	ne
 80058b0:	2201      	movne	r2, #1
 80058b2:	2200      	moveq	r2, #0
 80058b4:	b2d2      	uxtb	r2, r2
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 80058b6:	4293      	cmp	r3, r2
 80058b8:	d113      	bne.n	80058e2 <HAL_RCC_OscConfig+0x62a>
#endif
#endif
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 80058ba:	697b      	ldr	r3, [r7, #20]
 80058bc:	f403 02c0 	and.w	r2, r3, #6291456	; 0x600000
 80058c0:	687b      	ldr	r3, [r7, #4]
 80058c2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80058c4:	085b      	lsrs	r3, r3, #1
 80058c6:	3b01      	subs	r3, #1
 80058c8:	055b      	lsls	r3, r3, #21
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
 80058ca:	429a      	cmp	r2, r3
 80058cc:	d109      	bne.n	80058e2 <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLR)    != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 80058ce:	697b      	ldr	r3, [r7, #20]
 80058d0:	f003 62c0 	and.w	r2, r3, #100663296	; 0x6000000
 80058d4:	687b      	ldr	r3, [r7, #4]
 80058d6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80058d8:	085b      	lsrs	r3, r3, #1
 80058da:	3b01      	subs	r3, #1
 80058dc:	065b      	lsls	r3, r3, #25
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 80058de:	429a      	cmp	r2, r3
 80058e0:	d06e      	beq.n	80059c0 <HAL_RCC_OscConfig+0x708>
      {
        /* Check if the PLL is used as system clock or not */
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 80058e2:	69bb      	ldr	r3, [r7, #24]
 80058e4:	2b0c      	cmp	r3, #12
 80058e6:	d069      	beq.n	80059bc <HAL_RCC_OscConfig+0x704>
        {
#if defined(RCC_PLLSAI1_SUPPORT) || defined(RCC_PLLSAI2_SUPPORT)
          /* Check if main PLL can be updated */
          /* Not possible if the source is shared by other enabled PLLSAIx */
          if((READ_BIT(RCC->CR, RCC_CR_PLLSAI1ON) != 0U)
 80058e8:	4b53      	ldr	r3, [pc, #332]	; (8005a38 <HAL_RCC_OscConfig+0x780>)
 80058ea:	681b      	ldr	r3, [r3, #0]
 80058ec:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 80058f0:	2b00      	cmp	r3, #0
 80058f2:	d105      	bne.n	8005900 <HAL_RCC_OscConfig+0x648>
#if defined(RCC_PLLSAI2_SUPPORT)
             || (READ_BIT(RCC->CR, RCC_CR_PLLSAI2ON) != 0U)
 80058f4:	4b50      	ldr	r3, [pc, #320]	; (8005a38 <HAL_RCC_OscConfig+0x780>)
 80058f6:	681b      	ldr	r3, [r3, #0]
 80058f8:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80058fc:	2b00      	cmp	r3, #0
 80058fe:	d001      	beq.n	8005904 <HAL_RCC_OscConfig+0x64c>
#endif
            )
          {
            return HAL_ERROR;
 8005900:	2301      	movs	r3, #1
 8005902:	e0ad      	b.n	8005a60 <HAL_RCC_OscConfig+0x7a8>
          }
          else
#endif /* RCC_PLLSAI1_SUPPORT || RCC_PLLSAI2_SUPPORT */
          {
            /* Disable the main PLL. */
            __HAL_RCC_PLL_DISABLE();
 8005904:	4b4c      	ldr	r3, [pc, #304]	; (8005a38 <HAL_RCC_OscConfig+0x780>)
 8005906:	681b      	ldr	r3, [r3, #0]
 8005908:	4a4b      	ldr	r2, [pc, #300]	; (8005a38 <HAL_RCC_OscConfig+0x780>)
 800590a:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 800590e:	6013      	str	r3, [r2, #0]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8005910:	f7fd ff04 	bl	800371c <HAL_GetTick>
 8005914:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8005916:	e008      	b.n	800592a <HAL_RCC_OscConfig+0x672>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8005918:	f7fd ff00 	bl	800371c <HAL_GetTick>
 800591c:	4602      	mov	r2, r0
 800591e:	693b      	ldr	r3, [r7, #16]
 8005920:	1ad3      	subs	r3, r2, r3
 8005922:	2b02      	cmp	r3, #2
 8005924:	d901      	bls.n	800592a <HAL_RCC_OscConfig+0x672>
              {
                return HAL_TIMEOUT;
 8005926:	2303      	movs	r3, #3
 8005928:	e09a      	b.n	8005a60 <HAL_RCC_OscConfig+0x7a8>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800592a:	4b43      	ldr	r3, [pc, #268]	; (8005a38 <HAL_RCC_OscConfig+0x780>)
 800592c:	681b      	ldr	r3, [r3, #0]
 800592e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005932:	2b00      	cmp	r3, #0
 8005934:	d1f0      	bne.n	8005918 <HAL_RCC_OscConfig+0x660>
              }
            }

            /* Configure the main PLL clock source, multiplication and division factors. */
#if defined(RCC_PLLP_SUPPORT)
            __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8005936:	4b40      	ldr	r3, [pc, #256]	; (8005a38 <HAL_RCC_OscConfig+0x780>)
 8005938:	68da      	ldr	r2, [r3, #12]
 800593a:	4b40      	ldr	r3, [pc, #256]	; (8005a3c <HAL_RCC_OscConfig+0x784>)
 800593c:	4013      	ands	r3, r2
 800593e:	687a      	ldr	r2, [r7, #4]
 8005940:	6ad1      	ldr	r1, [r2, #44]	; 0x2c
 8005942:	687a      	ldr	r2, [r7, #4]
 8005944:	6b12      	ldr	r2, [r2, #48]	; 0x30
 8005946:	3a01      	subs	r2, #1
 8005948:	0112      	lsls	r2, r2, #4
 800594a:	4311      	orrs	r1, r2
 800594c:	687a      	ldr	r2, [r7, #4]
 800594e:	6b52      	ldr	r2, [r2, #52]	; 0x34
 8005950:	0212      	lsls	r2, r2, #8
 8005952:	4311      	orrs	r1, r2
 8005954:	687a      	ldr	r2, [r7, #4]
 8005956:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 8005958:	0852      	lsrs	r2, r2, #1
 800595a:	3a01      	subs	r2, #1
 800595c:	0552      	lsls	r2, r2, #21
 800595e:	4311      	orrs	r1, r2
 8005960:	687a      	ldr	r2, [r7, #4]
 8005962:	6c12      	ldr	r2, [r2, #64]	; 0x40
 8005964:	0852      	lsrs	r2, r2, #1
 8005966:	3a01      	subs	r2, #1
 8005968:	0652      	lsls	r2, r2, #25
 800596a:	4311      	orrs	r1, r2
 800596c:	687a      	ldr	r2, [r7, #4]
 800596e:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8005970:	0912      	lsrs	r2, r2, #4
 8005972:	0452      	lsls	r2, r2, #17
 8005974:	430a      	orrs	r2, r1
 8005976:	4930      	ldr	r1, [pc, #192]	; (8005a38 <HAL_RCC_OscConfig+0x780>)
 8005978:	4313      	orrs	r3, r2
 800597a:	60cb      	str	r3, [r1, #12]
                                 RCC_OscInitStruct->PLL.PLLQ,
                                 RCC_OscInitStruct->PLL.PLLR);
#endif

            /* Enable the main PLL. */
            __HAL_RCC_PLL_ENABLE();
 800597c:	4b2e      	ldr	r3, [pc, #184]	; (8005a38 <HAL_RCC_OscConfig+0x780>)
 800597e:	681b      	ldr	r3, [r3, #0]
 8005980:	4a2d      	ldr	r2, [pc, #180]	; (8005a38 <HAL_RCC_OscConfig+0x780>)
 8005982:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8005986:	6013      	str	r3, [r2, #0]

            /* Enable PLL System Clock output. */
            __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8005988:	4b2b      	ldr	r3, [pc, #172]	; (8005a38 <HAL_RCC_OscConfig+0x780>)
 800598a:	68db      	ldr	r3, [r3, #12]
 800598c:	4a2a      	ldr	r2, [pc, #168]	; (8005a38 <HAL_RCC_OscConfig+0x780>)
 800598e:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8005992:	60d3      	str	r3, [r2, #12]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8005994:	f7fd fec2 	bl	800371c <HAL_GetTick>
 8005998:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800599a:	e008      	b.n	80059ae <HAL_RCC_OscConfig+0x6f6>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800599c:	f7fd febe 	bl	800371c <HAL_GetTick>
 80059a0:	4602      	mov	r2, r0
 80059a2:	693b      	ldr	r3, [r7, #16]
 80059a4:	1ad3      	subs	r3, r2, r3
 80059a6:	2b02      	cmp	r3, #2
 80059a8:	d901      	bls.n	80059ae <HAL_RCC_OscConfig+0x6f6>
              {
                return HAL_TIMEOUT;
 80059aa:	2303      	movs	r3, #3
 80059ac:	e058      	b.n	8005a60 <HAL_RCC_OscConfig+0x7a8>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80059ae:	4b22      	ldr	r3, [pc, #136]	; (8005a38 <HAL_RCC_OscConfig+0x780>)
 80059b0:	681b      	ldr	r3, [r3, #0]
 80059b2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80059b6:	2b00      	cmp	r3, #0
 80059b8:	d0f0      	beq.n	800599c <HAL_RCC_OscConfig+0x6e4>
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 80059ba:	e050      	b.n	8005a5e <HAL_RCC_OscConfig+0x7a6>
          }
        }
        else
        {
          /* PLL is already used as System core clock */
          return HAL_ERROR;
 80059bc:	2301      	movs	r3, #1
 80059be:	e04f      	b.n	8005a60 <HAL_RCC_OscConfig+0x7a8>
      }
      else
      {
        /* PLL configuration is unchanged */
        /* Re-enable PLL if it was disabled (ie. low power mode) */
        if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80059c0:	4b1d      	ldr	r3, [pc, #116]	; (8005a38 <HAL_RCC_OscConfig+0x780>)
 80059c2:	681b      	ldr	r3, [r3, #0]
 80059c4:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80059c8:	2b00      	cmp	r3, #0
 80059ca:	d148      	bne.n	8005a5e <HAL_RCC_OscConfig+0x7a6>
        {
          /* Enable the main PLL. */
          __HAL_RCC_PLL_ENABLE();
 80059cc:	4b1a      	ldr	r3, [pc, #104]	; (8005a38 <HAL_RCC_OscConfig+0x780>)
 80059ce:	681b      	ldr	r3, [r3, #0]
 80059d0:	4a19      	ldr	r2, [pc, #100]	; (8005a38 <HAL_RCC_OscConfig+0x780>)
 80059d2:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80059d6:	6013      	str	r3, [r2, #0]

          /* Enable PLL System Clock output. */
          __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 80059d8:	4b17      	ldr	r3, [pc, #92]	; (8005a38 <HAL_RCC_OscConfig+0x780>)
 80059da:	68db      	ldr	r3, [r3, #12]
 80059dc:	4a16      	ldr	r2, [pc, #88]	; (8005a38 <HAL_RCC_OscConfig+0x780>)
 80059de:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80059e2:	60d3      	str	r3, [r2, #12]

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 80059e4:	f7fd fe9a 	bl	800371c <HAL_GetTick>
 80059e8:	6138      	str	r0, [r7, #16]

          /* Wait till PLL is ready */
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80059ea:	e008      	b.n	80059fe <HAL_RCC_OscConfig+0x746>
          {
            if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80059ec:	f7fd fe96 	bl	800371c <HAL_GetTick>
 80059f0:	4602      	mov	r2, r0
 80059f2:	693b      	ldr	r3, [r7, #16]
 80059f4:	1ad3      	subs	r3, r2, r3
 80059f6:	2b02      	cmp	r3, #2
 80059f8:	d901      	bls.n	80059fe <HAL_RCC_OscConfig+0x746>
            {
              return HAL_TIMEOUT;
 80059fa:	2303      	movs	r3, #3
 80059fc:	e030      	b.n	8005a60 <HAL_RCC_OscConfig+0x7a8>
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80059fe:	4b0e      	ldr	r3, [pc, #56]	; (8005a38 <HAL_RCC_OscConfig+0x780>)
 8005a00:	681b      	ldr	r3, [r3, #0]
 8005a02:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005a06:	2b00      	cmp	r3, #0
 8005a08:	d0f0      	beq.n	80059ec <HAL_RCC_OscConfig+0x734>
 8005a0a:	e028      	b.n	8005a5e <HAL_RCC_OscConfig+0x7a6>
      }
    }
    else
    {
      /* Check that PLL is not used as system clock or not */
      if(sysclk_source != RCC_CFGR_SWS_PLL)
 8005a0c:	69bb      	ldr	r3, [r7, #24]
 8005a0e:	2b0c      	cmp	r3, #12
 8005a10:	d023      	beq.n	8005a5a <HAL_RCC_OscConfig+0x7a2>
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8005a12:	4b09      	ldr	r3, [pc, #36]	; (8005a38 <HAL_RCC_OscConfig+0x780>)
 8005a14:	681b      	ldr	r3, [r3, #0]
 8005a16:	4a08      	ldr	r2, [pc, #32]	; (8005a38 <HAL_RCC_OscConfig+0x780>)
 8005a18:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8005a1c:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005a1e:	f7fd fe7d 	bl	800371c <HAL_GetTick>
 8005a22:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8005a24:	e00c      	b.n	8005a40 <HAL_RCC_OscConfig+0x788>
        {
          if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8005a26:	f7fd fe79 	bl	800371c <HAL_GetTick>
 8005a2a:	4602      	mov	r2, r0
 8005a2c:	693b      	ldr	r3, [r7, #16]
 8005a2e:	1ad3      	subs	r3, r2, r3
 8005a30:	2b02      	cmp	r3, #2
 8005a32:	d905      	bls.n	8005a40 <HAL_RCC_OscConfig+0x788>
          {
            return HAL_TIMEOUT;
 8005a34:	2303      	movs	r3, #3
 8005a36:	e013      	b.n	8005a60 <HAL_RCC_OscConfig+0x7a8>
 8005a38:	40021000 	.word	0x40021000
 8005a3c:	f99d808c 	.word	0xf99d808c
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8005a40:	4b09      	ldr	r3, [pc, #36]	; (8005a68 <HAL_RCC_OscConfig+0x7b0>)
 8005a42:	681b      	ldr	r3, [r3, #0]
 8005a44:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005a48:	2b00      	cmp	r3, #0
 8005a4a:	d1ec      	bne.n	8005a26 <HAL_RCC_OscConfig+0x76e>
          }
        }
        /* Unselect main PLL clock source and disable main PLL outputs to save power */
#if defined(RCC_PLLSAI2_SUPPORT)
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI3CLK);
 8005a4c:	4b06      	ldr	r3, [pc, #24]	; (8005a68 <HAL_RCC_OscConfig+0x7b0>)
 8005a4e:	68da      	ldr	r2, [r3, #12]
 8005a50:	4905      	ldr	r1, [pc, #20]	; (8005a68 <HAL_RCC_OscConfig+0x7b0>)
 8005a52:	4b06      	ldr	r3, [pc, #24]	; (8005a6c <HAL_RCC_OscConfig+0x7b4>)
 8005a54:	4013      	ands	r3, r2
 8005a56:	60cb      	str	r3, [r1, #12]
 8005a58:	e001      	b.n	8005a5e <HAL_RCC_OscConfig+0x7a6>
#endif /* RCC_PLLSAI2_SUPPORT */
      }
      else
      {
        /* PLL is already used as System core clock */
        return HAL_ERROR;
 8005a5a:	2301      	movs	r3, #1
 8005a5c:	e000      	b.n	8005a60 <HAL_RCC_OscConfig+0x7a8>
      }
    }
  }
  return HAL_OK;
 8005a5e:	2300      	movs	r3, #0
}
 8005a60:	4618      	mov	r0, r3
 8005a62:	3720      	adds	r7, #32
 8005a64:	46bd      	mov	sp, r7
 8005a66:	bd80      	pop	{r7, pc}
 8005a68:	40021000 	.word	0x40021000
 8005a6c:	feeefffc 	.word	0xfeeefffc

08005a70 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8005a70:	b580      	push	{r7, lr}
 8005a72:	b084      	sub	sp, #16
 8005a74:	af00      	add	r7, sp, #0
 8005a76:	6078      	str	r0, [r7, #4]
 8005a78:	6039      	str	r1, [r7, #0]
  uint32_t hpre = RCC_SYSCLK_DIV1;
#endif
  HAL_StatusTypeDef status;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8005a7a:	687b      	ldr	r3, [r7, #4]
 8005a7c:	2b00      	cmp	r3, #0
 8005a7e:	d101      	bne.n	8005a84 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8005a80:	2301      	movs	r3, #1
 8005a82:	e0e7      	b.n	8005c54 <HAL_RCC_ClockConfig+0x1e4>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8005a84:	4b75      	ldr	r3, [pc, #468]	; (8005c5c <HAL_RCC_ClockConfig+0x1ec>)
 8005a86:	681b      	ldr	r3, [r3, #0]
 8005a88:	f003 0307 	and.w	r3, r3, #7
 8005a8c:	683a      	ldr	r2, [r7, #0]
 8005a8e:	429a      	cmp	r2, r3
 8005a90:	d910      	bls.n	8005ab4 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8005a92:	4b72      	ldr	r3, [pc, #456]	; (8005c5c <HAL_RCC_ClockConfig+0x1ec>)
 8005a94:	681b      	ldr	r3, [r3, #0]
 8005a96:	f023 0207 	bic.w	r2, r3, #7
 8005a9a:	4970      	ldr	r1, [pc, #448]	; (8005c5c <HAL_RCC_ClockConfig+0x1ec>)
 8005a9c:	683b      	ldr	r3, [r7, #0]
 8005a9e:	4313      	orrs	r3, r2
 8005aa0:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8005aa2:	4b6e      	ldr	r3, [pc, #440]	; (8005c5c <HAL_RCC_ClockConfig+0x1ec>)
 8005aa4:	681b      	ldr	r3, [r3, #0]
 8005aa6:	f003 0307 	and.w	r3, r3, #7
 8005aaa:	683a      	ldr	r2, [r7, #0]
 8005aac:	429a      	cmp	r2, r3
 8005aae:	d001      	beq.n	8005ab4 <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 8005ab0:	2301      	movs	r3, #1
 8005ab2:	e0cf      	b.n	8005c54 <HAL_RCC_ClockConfig+0x1e4>
    }
  }

  /*----------------- HCLK Configuration prior to SYSCLK----------------------*/
  /* Apply higher HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is increased */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8005ab4:	687b      	ldr	r3, [r7, #4]
 8005ab6:	681b      	ldr	r3, [r3, #0]
 8005ab8:	f003 0302 	and.w	r3, r3, #2
 8005abc:	2b00      	cmp	r3, #0
 8005abe:	d010      	beq.n	8005ae2 <HAL_RCC_ClockConfig+0x72>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));

    if(RCC_ClkInitStruct->AHBCLKDivider > READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 8005ac0:	687b      	ldr	r3, [r7, #4]
 8005ac2:	689a      	ldr	r2, [r3, #8]
 8005ac4:	4b66      	ldr	r3, [pc, #408]	; (8005c60 <HAL_RCC_ClockConfig+0x1f0>)
 8005ac6:	689b      	ldr	r3, [r3, #8]
 8005ac8:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8005acc:	429a      	cmp	r2, r3
 8005ace:	d908      	bls.n	8005ae2 <HAL_RCC_ClockConfig+0x72>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8005ad0:	4b63      	ldr	r3, [pc, #396]	; (8005c60 <HAL_RCC_ClockConfig+0x1f0>)
 8005ad2:	689b      	ldr	r3, [r3, #8]
 8005ad4:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8005ad8:	687b      	ldr	r3, [r7, #4]
 8005ada:	689b      	ldr	r3, [r3, #8]
 8005adc:	4960      	ldr	r1, [pc, #384]	; (8005c60 <HAL_RCC_ClockConfig+0x1f0>)
 8005ade:	4313      	orrs	r3, r2
 8005ae0:	608b      	str	r3, [r1, #8]
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8005ae2:	687b      	ldr	r3, [r7, #4]
 8005ae4:	681b      	ldr	r3, [r3, #0]
 8005ae6:	f003 0301 	and.w	r3, r3, #1
 8005aea:	2b00      	cmp	r3, #0
 8005aec:	d04c      	beq.n	8005b88 <HAL_RCC_ClockConfig+0x118>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8005aee:	687b      	ldr	r3, [r7, #4]
 8005af0:	685b      	ldr	r3, [r3, #4]
 8005af2:	2b03      	cmp	r3, #3
 8005af4:	d107      	bne.n	8005b06 <HAL_RCC_ClockConfig+0x96>
    {
      /* Check the PLL ready flag */
      if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8005af6:	4b5a      	ldr	r3, [pc, #360]	; (8005c60 <HAL_RCC_ClockConfig+0x1f0>)
 8005af8:	681b      	ldr	r3, [r3, #0]
 8005afa:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005afe:	2b00      	cmp	r3, #0
 8005b00:	d121      	bne.n	8005b46 <HAL_RCC_ClockConfig+0xd6>
      {
        return HAL_ERROR;
 8005b02:	2301      	movs	r3, #1
 8005b04:	e0a6      	b.n	8005c54 <HAL_RCC_ClockConfig+0x1e4>
#endif
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8005b06:	687b      	ldr	r3, [r7, #4]
 8005b08:	685b      	ldr	r3, [r3, #4]
 8005b0a:	2b02      	cmp	r3, #2
 8005b0c:	d107      	bne.n	8005b1e <HAL_RCC_ClockConfig+0xae>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8005b0e:	4b54      	ldr	r3, [pc, #336]	; (8005c60 <HAL_RCC_ClockConfig+0x1f0>)
 8005b10:	681b      	ldr	r3, [r3, #0]
 8005b12:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005b16:	2b00      	cmp	r3, #0
 8005b18:	d115      	bne.n	8005b46 <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 8005b1a:	2301      	movs	r3, #1
 8005b1c:	e09a      	b.n	8005c54 <HAL_RCC_ClockConfig+0x1e4>
        }
      }
      /* MSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 8005b1e:	687b      	ldr	r3, [r7, #4]
 8005b20:	685b      	ldr	r3, [r3, #4]
 8005b22:	2b00      	cmp	r3, #0
 8005b24:	d107      	bne.n	8005b36 <HAL_RCC_ClockConfig+0xc6>
      {
        /* Check the MSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8005b26:	4b4e      	ldr	r3, [pc, #312]	; (8005c60 <HAL_RCC_ClockConfig+0x1f0>)
 8005b28:	681b      	ldr	r3, [r3, #0]
 8005b2a:	f003 0302 	and.w	r3, r3, #2
 8005b2e:	2b00      	cmp	r3, #0
 8005b30:	d109      	bne.n	8005b46 <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 8005b32:	2301      	movs	r3, #1
 8005b34:	e08e      	b.n	8005c54 <HAL_RCC_ClockConfig+0x1e4>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8005b36:	4b4a      	ldr	r3, [pc, #296]	; (8005c60 <HAL_RCC_ClockConfig+0x1f0>)
 8005b38:	681b      	ldr	r3, [r3, #0]
 8005b3a:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8005b3e:	2b00      	cmp	r3, #0
 8005b40:	d101      	bne.n	8005b46 <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 8005b42:	2301      	movs	r3, #1
 8005b44:	e086      	b.n	8005c54 <HAL_RCC_ClockConfig+0x1e4>
      }
#endif

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8005b46:	4b46      	ldr	r3, [pc, #280]	; (8005c60 <HAL_RCC_ClockConfig+0x1f0>)
 8005b48:	689b      	ldr	r3, [r3, #8]
 8005b4a:	f023 0203 	bic.w	r2, r3, #3
 8005b4e:	687b      	ldr	r3, [r7, #4]
 8005b50:	685b      	ldr	r3, [r3, #4]
 8005b52:	4943      	ldr	r1, [pc, #268]	; (8005c60 <HAL_RCC_ClockConfig+0x1f0>)
 8005b54:	4313      	orrs	r3, r2
 8005b56:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8005b58:	f7fd fde0 	bl	800371c <HAL_GetTick>
 8005b5c:	60f8      	str	r0, [r7, #12]

    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8005b5e:	e00a      	b.n	8005b76 <HAL_RCC_ClockConfig+0x106>
    {
      if((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8005b60:	f7fd fddc 	bl	800371c <HAL_GetTick>
 8005b64:	4602      	mov	r2, r0
 8005b66:	68fb      	ldr	r3, [r7, #12]
 8005b68:	1ad3      	subs	r3, r2, r3
 8005b6a:	f241 3288 	movw	r2, #5000	; 0x1388
 8005b6e:	4293      	cmp	r3, r2
 8005b70:	d901      	bls.n	8005b76 <HAL_RCC_ClockConfig+0x106>
      {
        return HAL_TIMEOUT;
 8005b72:	2303      	movs	r3, #3
 8005b74:	e06e      	b.n	8005c54 <HAL_RCC_ClockConfig+0x1e4>
    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8005b76:	4b3a      	ldr	r3, [pc, #232]	; (8005c60 <HAL_RCC_ClockConfig+0x1f0>)
 8005b78:	689b      	ldr	r3, [r3, #8]
 8005b7a:	f003 020c 	and.w	r2, r3, #12
 8005b7e:	687b      	ldr	r3, [r7, #4]
 8005b80:	685b      	ldr	r3, [r3, #4]
 8005b82:	009b      	lsls	r3, r3, #2
 8005b84:	429a      	cmp	r2, r3
 8005b86:	d1eb      	bne.n	8005b60 <HAL_RCC_ClockConfig+0xf0>
  }
#endif

  /*----------------- HCLK Configuration after SYSCLK-------------------------*/
  /* Apply lower HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is set */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8005b88:	687b      	ldr	r3, [r7, #4]
 8005b8a:	681b      	ldr	r3, [r3, #0]
 8005b8c:	f003 0302 	and.w	r3, r3, #2
 8005b90:	2b00      	cmp	r3, #0
 8005b92:	d010      	beq.n	8005bb6 <HAL_RCC_ClockConfig+0x146>
  {
    if(RCC_ClkInitStruct->AHBCLKDivider < READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 8005b94:	687b      	ldr	r3, [r7, #4]
 8005b96:	689a      	ldr	r2, [r3, #8]
 8005b98:	4b31      	ldr	r3, [pc, #196]	; (8005c60 <HAL_RCC_ClockConfig+0x1f0>)
 8005b9a:	689b      	ldr	r3, [r3, #8]
 8005b9c:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8005ba0:	429a      	cmp	r2, r3
 8005ba2:	d208      	bcs.n	8005bb6 <HAL_RCC_ClockConfig+0x146>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8005ba4:	4b2e      	ldr	r3, [pc, #184]	; (8005c60 <HAL_RCC_ClockConfig+0x1f0>)
 8005ba6:	689b      	ldr	r3, [r3, #8]
 8005ba8:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8005bac:	687b      	ldr	r3, [r7, #4]
 8005bae:	689b      	ldr	r3, [r3, #8]
 8005bb0:	492b      	ldr	r1, [pc, #172]	; (8005c60 <HAL_RCC_ClockConfig+0x1f0>)
 8005bb2:	4313      	orrs	r3, r2
 8005bb4:	608b      	str	r3, [r1, #8]
    }
  }

  /* Allow decreasing of the number of wait states (because of lower CPU frequency expected) */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8005bb6:	4b29      	ldr	r3, [pc, #164]	; (8005c5c <HAL_RCC_ClockConfig+0x1ec>)
 8005bb8:	681b      	ldr	r3, [r3, #0]
 8005bba:	f003 0307 	and.w	r3, r3, #7
 8005bbe:	683a      	ldr	r2, [r7, #0]
 8005bc0:	429a      	cmp	r2, r3
 8005bc2:	d210      	bcs.n	8005be6 <HAL_RCC_ClockConfig+0x176>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8005bc4:	4b25      	ldr	r3, [pc, #148]	; (8005c5c <HAL_RCC_ClockConfig+0x1ec>)
 8005bc6:	681b      	ldr	r3, [r3, #0]
 8005bc8:	f023 0207 	bic.w	r2, r3, #7
 8005bcc:	4923      	ldr	r1, [pc, #140]	; (8005c5c <HAL_RCC_ClockConfig+0x1ec>)
 8005bce:	683b      	ldr	r3, [r7, #0]
 8005bd0:	4313      	orrs	r3, r2
 8005bd2:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8005bd4:	4b21      	ldr	r3, [pc, #132]	; (8005c5c <HAL_RCC_ClockConfig+0x1ec>)
 8005bd6:	681b      	ldr	r3, [r3, #0]
 8005bd8:	f003 0307 	and.w	r3, r3, #7
 8005bdc:	683a      	ldr	r2, [r7, #0]
 8005bde:	429a      	cmp	r2, r3
 8005be0:	d001      	beq.n	8005be6 <HAL_RCC_ClockConfig+0x176>
    {
      return HAL_ERROR;
 8005be2:	2301      	movs	r3, #1
 8005be4:	e036      	b.n	8005c54 <HAL_RCC_ClockConfig+0x1e4>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8005be6:	687b      	ldr	r3, [r7, #4]
 8005be8:	681b      	ldr	r3, [r3, #0]
 8005bea:	f003 0304 	and.w	r3, r3, #4
 8005bee:	2b00      	cmp	r3, #0
 8005bf0:	d008      	beq.n	8005c04 <HAL_RCC_ClockConfig+0x194>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8005bf2:	4b1b      	ldr	r3, [pc, #108]	; (8005c60 <HAL_RCC_ClockConfig+0x1f0>)
 8005bf4:	689b      	ldr	r3, [r3, #8]
 8005bf6:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8005bfa:	687b      	ldr	r3, [r7, #4]
 8005bfc:	68db      	ldr	r3, [r3, #12]
 8005bfe:	4918      	ldr	r1, [pc, #96]	; (8005c60 <HAL_RCC_ClockConfig+0x1f0>)
 8005c00:	4313      	orrs	r3, r2
 8005c02:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8005c04:	687b      	ldr	r3, [r7, #4]
 8005c06:	681b      	ldr	r3, [r3, #0]
 8005c08:	f003 0308 	and.w	r3, r3, #8
 8005c0c:	2b00      	cmp	r3, #0
 8005c0e:	d009      	beq.n	8005c24 <HAL_RCC_ClockConfig+0x1b4>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8005c10:	4b13      	ldr	r3, [pc, #76]	; (8005c60 <HAL_RCC_ClockConfig+0x1f0>)
 8005c12:	689b      	ldr	r3, [r3, #8]
 8005c14:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8005c18:	687b      	ldr	r3, [r7, #4]
 8005c1a:	691b      	ldr	r3, [r3, #16]
 8005c1c:	00db      	lsls	r3, r3, #3
 8005c1e:	4910      	ldr	r1, [pc, #64]	; (8005c60 <HAL_RCC_ClockConfig+0x1f0>)
 8005c20:	4313      	orrs	r3, r2
 8005c22:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8005c24:	f000 f824 	bl	8005c70 <HAL_RCC_GetSysClockFreq>
 8005c28:	4602      	mov	r2, r0
 8005c2a:	4b0d      	ldr	r3, [pc, #52]	; (8005c60 <HAL_RCC_ClockConfig+0x1f0>)
 8005c2c:	689b      	ldr	r3, [r3, #8]
 8005c2e:	091b      	lsrs	r3, r3, #4
 8005c30:	f003 030f 	and.w	r3, r3, #15
 8005c34:	490b      	ldr	r1, [pc, #44]	; (8005c64 <HAL_RCC_ClockConfig+0x1f4>)
 8005c36:	5ccb      	ldrb	r3, [r1, r3]
 8005c38:	f003 031f 	and.w	r3, r3, #31
 8005c3c:	fa22 f303 	lsr.w	r3, r2, r3
 8005c40:	4a09      	ldr	r2, [pc, #36]	; (8005c68 <HAL_RCC_ClockConfig+0x1f8>)
 8005c42:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 8005c44:	4b09      	ldr	r3, [pc, #36]	; (8005c6c <HAL_RCC_ClockConfig+0x1fc>)
 8005c46:	681b      	ldr	r3, [r3, #0]
 8005c48:	4618      	mov	r0, r3
 8005c4a:	f7fd fd17 	bl	800367c <HAL_InitTick>
 8005c4e:	4603      	mov	r3, r0
 8005c50:	72fb      	strb	r3, [r7, #11]

  return status;
 8005c52:	7afb      	ldrb	r3, [r7, #11]
}
 8005c54:	4618      	mov	r0, r3
 8005c56:	3710      	adds	r7, #16
 8005c58:	46bd      	mov	sp, r7
 8005c5a:	bd80      	pop	{r7, pc}
 8005c5c:	40022000 	.word	0x40022000
 8005c60:	40021000 	.word	0x40021000
 8005c64:	08009910 	.word	0x08009910
 8005c68:	20000134 	.word	0x20000134
 8005c6c:	2000017c 	.word	0x2000017c

08005c70 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8005c70:	b480      	push	{r7}
 8005c72:	b089      	sub	sp, #36	; 0x24
 8005c74:	af00      	add	r7, sp, #0
  uint32_t msirange = 0U, sysclockfreq = 0U;
 8005c76:	2300      	movs	r3, #0
 8005c78:	61fb      	str	r3, [r7, #28]
 8005c7a:	2300      	movs	r3, #0
 8005c7c:	61bb      	str	r3, [r7, #24]
  uint32_t pllvco, pllsource, pllr, pllm;    /* no init needed */
  uint32_t sysclk_source, pll_oscsource;

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8005c7e:	4b3e      	ldr	r3, [pc, #248]	; (8005d78 <HAL_RCC_GetSysClockFreq+0x108>)
 8005c80:	689b      	ldr	r3, [r3, #8]
 8005c82:	f003 030c 	and.w	r3, r3, #12
 8005c86:	613b      	str	r3, [r7, #16]
  pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 8005c88:	4b3b      	ldr	r3, [pc, #236]	; (8005d78 <HAL_RCC_GetSysClockFreq+0x108>)
 8005c8a:	68db      	ldr	r3, [r3, #12]
 8005c8c:	f003 0303 	and.w	r3, r3, #3
 8005c90:	60fb      	str	r3, [r7, #12]

  if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 8005c92:	693b      	ldr	r3, [r7, #16]
 8005c94:	2b00      	cmp	r3, #0
 8005c96:	d005      	beq.n	8005ca4 <HAL_RCC_GetSysClockFreq+0x34>
 8005c98:	693b      	ldr	r3, [r7, #16]
 8005c9a:	2b0c      	cmp	r3, #12
 8005c9c:	d121      	bne.n	8005ce2 <HAL_RCC_GetSysClockFreq+0x72>
     ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_oscsource == RCC_PLLSOURCE_MSI)))
 8005c9e:	68fb      	ldr	r3, [r7, #12]
 8005ca0:	2b01      	cmp	r3, #1
 8005ca2:	d11e      	bne.n	8005ce2 <HAL_RCC_GetSysClockFreq+0x72>
  {
    /* MSI or PLL with MSI source used as system clock source */

    /* Get SYSCLK source */
    if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 8005ca4:	4b34      	ldr	r3, [pc, #208]	; (8005d78 <HAL_RCC_GetSysClockFreq+0x108>)
 8005ca6:	681b      	ldr	r3, [r3, #0]
 8005ca8:	f003 0308 	and.w	r3, r3, #8
 8005cac:	2b00      	cmp	r3, #0
 8005cae:	d107      	bne.n	8005cc0 <HAL_RCC_GetSysClockFreq+0x50>
    { /* MSISRANGE from RCC_CSR applies */
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 8005cb0:	4b31      	ldr	r3, [pc, #196]	; (8005d78 <HAL_RCC_GetSysClockFreq+0x108>)
 8005cb2:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8005cb6:	0a1b      	lsrs	r3, r3, #8
 8005cb8:	f003 030f 	and.w	r3, r3, #15
 8005cbc:	61fb      	str	r3, [r7, #28]
 8005cbe:	e005      	b.n	8005ccc <HAL_RCC_GetSysClockFreq+0x5c>
    }
    else
    { /* MSIRANGE from RCC_CR applies */
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 8005cc0:	4b2d      	ldr	r3, [pc, #180]	; (8005d78 <HAL_RCC_GetSysClockFreq+0x108>)
 8005cc2:	681b      	ldr	r3, [r3, #0]
 8005cc4:	091b      	lsrs	r3, r3, #4
 8005cc6:	f003 030f 	and.w	r3, r3, #15
 8005cca:	61fb      	str	r3, [r7, #28]
    }
    /*MSI frequency range in HZ*/
    msirange = MSIRangeTable[msirange];
 8005ccc:	4a2b      	ldr	r2, [pc, #172]	; (8005d7c <HAL_RCC_GetSysClockFreq+0x10c>)
 8005cce:	69fb      	ldr	r3, [r7, #28]
 8005cd0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8005cd4:	61fb      	str	r3, [r7, #28]

    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8005cd6:	693b      	ldr	r3, [r7, #16]
 8005cd8:	2b00      	cmp	r3, #0
 8005cda:	d10d      	bne.n	8005cf8 <HAL_RCC_GetSysClockFreq+0x88>
    {
      /* MSI used as system clock source */
      sysclockfreq = msirange;
 8005cdc:	69fb      	ldr	r3, [r7, #28]
 8005cde:	61bb      	str	r3, [r7, #24]
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8005ce0:	e00a      	b.n	8005cf8 <HAL_RCC_GetSysClockFreq+0x88>
    }
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSI)
 8005ce2:	693b      	ldr	r3, [r7, #16]
 8005ce4:	2b04      	cmp	r3, #4
 8005ce6:	d102      	bne.n	8005cee <HAL_RCC_GetSysClockFreq+0x7e>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 8005ce8:	4b25      	ldr	r3, [pc, #148]	; (8005d80 <HAL_RCC_GetSysClockFreq+0x110>)
 8005cea:	61bb      	str	r3, [r7, #24]
 8005cec:	e004      	b.n	8005cf8 <HAL_RCC_GetSysClockFreq+0x88>
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSE)
 8005cee:	693b      	ldr	r3, [r7, #16]
 8005cf0:	2b08      	cmp	r3, #8
 8005cf2:	d101      	bne.n	8005cf8 <HAL_RCC_GetSysClockFreq+0x88>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 8005cf4:	4b23      	ldr	r3, [pc, #140]	; (8005d84 <HAL_RCC_GetSysClockFreq+0x114>)
 8005cf6:	61bb      	str	r3, [r7, #24]
  else
  {
    /* unexpected case: sysclockfreq at 0 */
  }

  if(sysclk_source == RCC_CFGR_SWS_PLL)
 8005cf8:	693b      	ldr	r3, [r7, #16]
 8005cfa:	2b0c      	cmp	r3, #12
 8005cfc:	d134      	bne.n	8005d68 <HAL_RCC_GetSysClockFreq+0xf8>
    /* PLL used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE) * PLLN / PLLM
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8005cfe:	4b1e      	ldr	r3, [pc, #120]	; (8005d78 <HAL_RCC_GetSysClockFreq+0x108>)
 8005d00:	68db      	ldr	r3, [r3, #12]
 8005d02:	f003 0303 	and.w	r3, r3, #3
 8005d06:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 8005d08:	68bb      	ldr	r3, [r7, #8]
 8005d0a:	2b02      	cmp	r3, #2
 8005d0c:	d003      	beq.n	8005d16 <HAL_RCC_GetSysClockFreq+0xa6>
 8005d0e:	68bb      	ldr	r3, [r7, #8]
 8005d10:	2b03      	cmp	r3, #3
 8005d12:	d003      	beq.n	8005d1c <HAL_RCC_GetSysClockFreq+0xac>
 8005d14:	e005      	b.n	8005d22 <HAL_RCC_GetSysClockFreq+0xb2>
    {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
      pllvco = HSI_VALUE;
 8005d16:	4b1a      	ldr	r3, [pc, #104]	; (8005d80 <HAL_RCC_GetSysClockFreq+0x110>)
 8005d18:	617b      	str	r3, [r7, #20]
      break;
 8005d1a:	e005      	b.n	8005d28 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = HSE_VALUE;
 8005d1c:	4b19      	ldr	r3, [pc, #100]	; (8005d84 <HAL_RCC_GetSysClockFreq+0x114>)
 8005d1e:	617b      	str	r3, [r7, #20]
      break;
 8005d20:	e002      	b.n	8005d28 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
    default:
      pllvco = msirange;
 8005d22:	69fb      	ldr	r3, [r7, #28]
 8005d24:	617b      	str	r3, [r7, #20]
      break;
 8005d26:	bf00      	nop
    }
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8005d28:	4b13      	ldr	r3, [pc, #76]	; (8005d78 <HAL_RCC_GetSysClockFreq+0x108>)
 8005d2a:	68db      	ldr	r3, [r3, #12]
 8005d2c:	091b      	lsrs	r3, r3, #4
 8005d2e:	f003 0307 	and.w	r3, r3, #7
 8005d32:	3301      	adds	r3, #1
 8005d34:	607b      	str	r3, [r7, #4]
    pllvco = (pllvco * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)) / pllm;
 8005d36:	4b10      	ldr	r3, [pc, #64]	; (8005d78 <HAL_RCC_GetSysClockFreq+0x108>)
 8005d38:	68db      	ldr	r3, [r3, #12]
 8005d3a:	0a1b      	lsrs	r3, r3, #8
 8005d3c:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8005d40:	697a      	ldr	r2, [r7, #20]
 8005d42:	fb03 f202 	mul.w	r2, r3, r2
 8005d46:	687b      	ldr	r3, [r7, #4]
 8005d48:	fbb2 f3f3 	udiv	r3, r2, r3
 8005d4c:	617b      	str	r3, [r7, #20]
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8005d4e:	4b0a      	ldr	r3, [pc, #40]	; (8005d78 <HAL_RCC_GetSysClockFreq+0x108>)
 8005d50:	68db      	ldr	r3, [r3, #12]
 8005d52:	0e5b      	lsrs	r3, r3, #25
 8005d54:	f003 0303 	and.w	r3, r3, #3
 8005d58:	3301      	adds	r3, #1
 8005d5a:	005b      	lsls	r3, r3, #1
 8005d5c:	603b      	str	r3, [r7, #0]
    sysclockfreq = pllvco / pllr;
 8005d5e:	697a      	ldr	r2, [r7, #20]
 8005d60:	683b      	ldr	r3, [r7, #0]
 8005d62:	fbb2 f3f3 	udiv	r3, r2, r3
 8005d66:	61bb      	str	r3, [r7, #24]
  }

  return sysclockfreq;
 8005d68:	69bb      	ldr	r3, [r7, #24]
}
 8005d6a:	4618      	mov	r0, r3
 8005d6c:	3724      	adds	r7, #36	; 0x24
 8005d6e:	46bd      	mov	sp, r7
 8005d70:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d74:	4770      	bx	lr
 8005d76:	bf00      	nop
 8005d78:	40021000 	.word	0x40021000
 8005d7c:	08009928 	.word	0x08009928
 8005d80:	00f42400 	.word	0x00f42400
 8005d84:	007a1200 	.word	0x007a1200

08005d88 <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8005d88:	b480      	push	{r7}
 8005d8a:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8005d8c:	4b03      	ldr	r3, [pc, #12]	; (8005d9c <HAL_RCC_GetHCLKFreq+0x14>)
 8005d8e:	681b      	ldr	r3, [r3, #0]
}
 8005d90:	4618      	mov	r0, r3
 8005d92:	46bd      	mov	sp, r7
 8005d94:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d98:	4770      	bx	lr
 8005d9a:	bf00      	nop
 8005d9c:	20000134 	.word	0x20000134

08005da0 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8005da0:	b580      	push	{r7, lr}
 8005da2:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos] & 0x1FU));
 8005da4:	f7ff fff0 	bl	8005d88 <HAL_RCC_GetHCLKFreq>
 8005da8:	4602      	mov	r2, r0
 8005daa:	4b06      	ldr	r3, [pc, #24]	; (8005dc4 <HAL_RCC_GetPCLK1Freq+0x24>)
 8005dac:	689b      	ldr	r3, [r3, #8]
 8005dae:	0a1b      	lsrs	r3, r3, #8
 8005db0:	f003 0307 	and.w	r3, r3, #7
 8005db4:	4904      	ldr	r1, [pc, #16]	; (8005dc8 <HAL_RCC_GetPCLK1Freq+0x28>)
 8005db6:	5ccb      	ldrb	r3, [r1, r3]
 8005db8:	f003 031f 	and.w	r3, r3, #31
 8005dbc:	fa22 f303 	lsr.w	r3, r2, r3
}
 8005dc0:	4618      	mov	r0, r3
 8005dc2:	bd80      	pop	{r7, pc}
 8005dc4:	40021000 	.word	0x40021000
 8005dc8:	08009920 	.word	0x08009920

08005dcc <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8005dcc:	b580      	push	{r7, lr}
 8005dce:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos] & 0x1FU));
 8005dd0:	f7ff ffda 	bl	8005d88 <HAL_RCC_GetHCLKFreq>
 8005dd4:	4602      	mov	r2, r0
 8005dd6:	4b06      	ldr	r3, [pc, #24]	; (8005df0 <HAL_RCC_GetPCLK2Freq+0x24>)
 8005dd8:	689b      	ldr	r3, [r3, #8]
 8005dda:	0adb      	lsrs	r3, r3, #11
 8005ddc:	f003 0307 	and.w	r3, r3, #7
 8005de0:	4904      	ldr	r1, [pc, #16]	; (8005df4 <HAL_RCC_GetPCLK2Freq+0x28>)
 8005de2:	5ccb      	ldrb	r3, [r1, r3]
 8005de4:	f003 031f 	and.w	r3, r3, #31
 8005de8:	fa22 f303 	lsr.w	r3, r2, r3
}
 8005dec:	4618      	mov	r0, r3
 8005dee:	bd80      	pop	{r7, pc}
 8005df0:	40021000 	.word	0x40021000
 8005df4:	08009920 	.word	0x08009920

08005df8 <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  msirange  MSI range value from RCC_MSIRANGE_0 to RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t msirange)
{
 8005df8:	b580      	push	{r7, lr}
 8005dfa:	b086      	sub	sp, #24
 8005dfc:	af00      	add	r7, sp, #0
 8005dfe:	6078      	str	r0, [r7, #4]
  uint32_t vos;
  uint32_t latency = FLASH_LATENCY_0;  /* default value 0WS */
 8005e00:	2300      	movs	r3, #0
 8005e02:	613b      	str	r3, [r7, #16]

  if(__HAL_RCC_PWR_IS_CLK_ENABLED())
 8005e04:	4b2a      	ldr	r3, [pc, #168]	; (8005eb0 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8005e06:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005e08:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8005e0c:	2b00      	cmp	r3, #0
 8005e0e:	d003      	beq.n	8005e18 <RCC_SetFlashLatencyFromMSIRange+0x20>
  {
    vos = HAL_PWREx_GetVoltageRange();
 8005e10:	f7ff f922 	bl	8005058 <HAL_PWREx_GetVoltageRange>
 8005e14:	6178      	str	r0, [r7, #20]
 8005e16:	e014      	b.n	8005e42 <RCC_SetFlashLatencyFromMSIRange+0x4a>
  }
  else
  {
    __HAL_RCC_PWR_CLK_ENABLE();
 8005e18:	4b25      	ldr	r3, [pc, #148]	; (8005eb0 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8005e1a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005e1c:	4a24      	ldr	r2, [pc, #144]	; (8005eb0 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8005e1e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8005e22:	6593      	str	r3, [r2, #88]	; 0x58
 8005e24:	4b22      	ldr	r3, [pc, #136]	; (8005eb0 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8005e26:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005e28:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8005e2c:	60fb      	str	r3, [r7, #12]
 8005e2e:	68fb      	ldr	r3, [r7, #12]
    vos = HAL_PWREx_GetVoltageRange();
 8005e30:	f7ff f912 	bl	8005058 <HAL_PWREx_GetVoltageRange>
 8005e34:	6178      	str	r0, [r7, #20]
    __HAL_RCC_PWR_CLK_DISABLE();
 8005e36:	4b1e      	ldr	r3, [pc, #120]	; (8005eb0 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8005e38:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005e3a:	4a1d      	ldr	r2, [pc, #116]	; (8005eb0 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8005e3c:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8005e40:	6593      	str	r3, [r2, #88]	; 0x58
  }

  if(vos == PWR_REGULATOR_VOLTAGE_SCALE1)
 8005e42:	697b      	ldr	r3, [r7, #20]
 8005e44:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8005e48:	d10b      	bne.n	8005e62 <RCC_SetFlashLatencyFromMSIRange+0x6a>
  {
    if(msirange > RCC_MSIRANGE_8)
 8005e4a:	687b      	ldr	r3, [r7, #4]
 8005e4c:	2b80      	cmp	r3, #128	; 0x80
 8005e4e:	d919      	bls.n	8005e84 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    {
      /* MSI > 16Mhz */
      if(msirange > RCC_MSIRANGE_10)
 8005e50:	687b      	ldr	r3, [r7, #4]
 8005e52:	2ba0      	cmp	r3, #160	; 0xa0
 8005e54:	d902      	bls.n	8005e5c <RCC_SetFlashLatencyFromMSIRange+0x64>
      {
        /* MSI 48Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 8005e56:	2302      	movs	r3, #2
 8005e58:	613b      	str	r3, [r7, #16]
 8005e5a:	e013      	b.n	8005e84 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else
      {
        /* MSI 24Mhz or 32Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8005e5c:	2301      	movs	r3, #1
 8005e5e:	613b      	str	r3, [r7, #16]
 8005e60:	e010      	b.n	8005e84 <RCC_SetFlashLatencyFromMSIRange+0x8c>
        latency = FLASH_LATENCY_1; /* 1WS */
      }
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#else
    if(msirange > RCC_MSIRANGE_8)
 8005e62:	687b      	ldr	r3, [r7, #4]
 8005e64:	2b80      	cmp	r3, #128	; 0x80
 8005e66:	d902      	bls.n	8005e6e <RCC_SetFlashLatencyFromMSIRange+0x76>
    {
      /* MSI > 16Mhz */
      latency = FLASH_LATENCY_3; /* 3WS */
 8005e68:	2303      	movs	r3, #3
 8005e6a:	613b      	str	r3, [r7, #16]
 8005e6c:	e00a      	b.n	8005e84 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    }
    else
    {
      if(msirange == RCC_MSIRANGE_8)
 8005e6e:	687b      	ldr	r3, [r7, #4]
 8005e70:	2b80      	cmp	r3, #128	; 0x80
 8005e72:	d102      	bne.n	8005e7a <RCC_SetFlashLatencyFromMSIRange+0x82>
      {
        /* MSI 16Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 8005e74:	2302      	movs	r3, #2
 8005e76:	613b      	str	r3, [r7, #16]
 8005e78:	e004      	b.n	8005e84 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else if(msirange == RCC_MSIRANGE_7)
 8005e7a:	687b      	ldr	r3, [r7, #4]
 8005e7c:	2b70      	cmp	r3, #112	; 0x70
 8005e7e:	d101      	bne.n	8005e84 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      {
        /* MSI 8Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8005e80:	2301      	movs	r3, #1
 8005e82:	613b      	str	r3, [r7, #16]
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#endif
  }

  __HAL_FLASH_SET_LATENCY(latency);
 8005e84:	4b0b      	ldr	r3, [pc, #44]	; (8005eb4 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8005e86:	681b      	ldr	r3, [r3, #0]
 8005e88:	f023 0207 	bic.w	r2, r3, #7
 8005e8c:	4909      	ldr	r1, [pc, #36]	; (8005eb4 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8005e8e:	693b      	ldr	r3, [r7, #16]
 8005e90:	4313      	orrs	r3, r2
 8005e92:	600b      	str	r3, [r1, #0]

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  if(__HAL_FLASH_GET_LATENCY() != latency)
 8005e94:	4b07      	ldr	r3, [pc, #28]	; (8005eb4 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8005e96:	681b      	ldr	r3, [r3, #0]
 8005e98:	f003 0307 	and.w	r3, r3, #7
 8005e9c:	693a      	ldr	r2, [r7, #16]
 8005e9e:	429a      	cmp	r2, r3
 8005ea0:	d001      	beq.n	8005ea6 <RCC_SetFlashLatencyFromMSIRange+0xae>
  {
    return HAL_ERROR;
 8005ea2:	2301      	movs	r3, #1
 8005ea4:	e000      	b.n	8005ea8 <RCC_SetFlashLatencyFromMSIRange+0xb0>
  }

  return HAL_OK;
 8005ea6:	2300      	movs	r3, #0
}
 8005ea8:	4618      	mov	r0, r3
 8005eaa:	3718      	adds	r7, #24
 8005eac:	46bd      	mov	sp, r7
 8005eae:	bd80      	pop	{r7, pc}
 8005eb0:	40021000 	.word	0x40021000
 8005eb4:	40022000 	.word	0x40022000

08005eb8 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8005eb8:	b580      	push	{r7, lr}
 8005eba:	b086      	sub	sp, #24
 8005ebc:	af00      	add	r7, sp, #0
 8005ebe:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister, tickstart;     /* no init needed */
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8005ec0:	2300      	movs	r3, #0
 8005ec2:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8005ec4:	2300      	movs	r3, #0
 8005ec6:	74bb      	strb	r3, [r7, #18]
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

#if defined(SAI1)

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1))
 8005ec8:	687b      	ldr	r3, [r7, #4]
 8005eca:	681b      	ldr	r3, [r3, #0]
 8005ecc:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8005ed0:	2b00      	cmp	r3, #0
 8005ed2:	d041      	beq.n	8005f58 <HAL_RCCEx_PeriphCLKConfig+0xa0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLK(PeriphClkInit->Sai1ClockSelection));

    switch(PeriphClkInit->Sai1ClockSelection)
 8005ed4:	687b      	ldr	r3, [r7, #4]
 8005ed6:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8005ed8:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 8005edc:	d02a      	beq.n	8005f34 <HAL_RCCEx_PeriphCLKConfig+0x7c>
 8005ede:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 8005ee2:	d824      	bhi.n	8005f2e <HAL_RCCEx_PeriphCLKConfig+0x76>
 8005ee4:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8005ee8:	d008      	beq.n	8005efc <HAL_RCCEx_PeriphCLKConfig+0x44>
 8005eea:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8005eee:	d81e      	bhi.n	8005f2e <HAL_RCCEx_PeriphCLKConfig+0x76>
 8005ef0:	2b00      	cmp	r3, #0
 8005ef2:	d00a      	beq.n	8005f0a <HAL_RCCEx_PeriphCLKConfig+0x52>
 8005ef4:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8005ef8:	d010      	beq.n	8005f1c <HAL_RCCEx_PeriphCLKConfig+0x64>
 8005efa:	e018      	b.n	8005f2e <HAL_RCCEx_PeriphCLKConfig+0x76>
    {
    case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
      /* Enable SAI Clock output generated from System PLL . */
#if defined(RCC_PLLSAI2_SUPPORT)
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 8005efc:	4b86      	ldr	r3, [pc, #536]	; (8006118 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8005efe:	68db      	ldr	r3, [r3, #12]
 8005f00:	4a85      	ldr	r2, [pc, #532]	; (8006118 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8005f02:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8005f06:	60d3      	str	r3, [r2, #12]
#else
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI2CLK);
#endif /* RCC_PLLSAI2_SUPPORT */
      /* SAI1 clock source config set later after clock selection check */
      break;
 8005f08:	e015      	b.n	8005f36 <HAL_RCCEx_PeriphCLKConfig+0x7e>

    case RCC_SAI1CLKSOURCE_PLLSAI1:  /* PLLSAI1 is used as clock source for SAI1*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 8005f0a:	687b      	ldr	r3, [r7, #4]
 8005f0c:	3304      	adds	r3, #4
 8005f0e:	2100      	movs	r1, #0
 8005f10:	4618      	mov	r0, r3
 8005f12:	f000 facb 	bl	80064ac <RCCEx_PLLSAI1_Config>
 8005f16:	4603      	mov	r3, r0
 8005f18:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 8005f1a:	e00c      	b.n	8005f36 <HAL_RCCEx_PeriphCLKConfig+0x7e>

#if defined(RCC_PLLSAI2_SUPPORT)

    case RCC_SAI1CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI1*/
      /* PLLSAI2 input clock, parameters M, N & P configuration clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 8005f1c:	687b      	ldr	r3, [r7, #4]
 8005f1e:	3320      	adds	r3, #32
 8005f20:	2100      	movs	r1, #0
 8005f22:	4618      	mov	r0, r3
 8005f24:	f000 fbb6 	bl	8006694 <RCCEx_PLLSAI2_Config>
 8005f28:	4603      	mov	r3, r0
 8005f2a:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 8005f2c:	e003      	b.n	8005f36 <HAL_RCCEx_PeriphCLKConfig+0x7e>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI1 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8005f2e:	2301      	movs	r3, #1
 8005f30:	74fb      	strb	r3, [r7, #19]
      break;
 8005f32:	e000      	b.n	8005f36 <HAL_RCCEx_PeriphCLKConfig+0x7e>
      break;
 8005f34:	bf00      	nop
    }

    if(ret == HAL_OK)
 8005f36:	7cfb      	ldrb	r3, [r7, #19]
 8005f38:	2b00      	cmp	r3, #0
 8005f3a:	d10b      	bne.n	8005f54 <HAL_RCCEx_PeriphCLKConfig+0x9c>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8005f3c:	4b76      	ldr	r3, [pc, #472]	; (8006118 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8005f3e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005f42:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8005f46:	687b      	ldr	r3, [r7, #4]
 8005f48:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8005f4a:	4973      	ldr	r1, [pc, #460]	; (8006118 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8005f4c:	4313      	orrs	r3, r2
 8005f4e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
 8005f52:	e001      	b.n	8005f58 <HAL_RCCEx_PeriphCLKConfig+0xa0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005f54:	7cfb      	ldrb	r3, [r7, #19]
 8005f56:	74bb      	strb	r3, [r7, #18]
#endif /* SAI1 */

#if defined(SAI2)

  /*-------------------------- SAI2 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2))
 8005f58:	687b      	ldr	r3, [r7, #4]
 8005f5a:	681b      	ldr	r3, [r3, #0]
 8005f5c:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8005f60:	2b00      	cmp	r3, #0
 8005f62:	d041      	beq.n	8005fe8 <HAL_RCCEx_PeriphCLKConfig+0x130>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLK(PeriphClkInit->Sai2ClockSelection));

    switch(PeriphClkInit->Sai2ClockSelection)
 8005f64:	687b      	ldr	r3, [r7, #4]
 8005f66:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8005f68:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 8005f6c:	d02a      	beq.n	8005fc4 <HAL_RCCEx_PeriphCLKConfig+0x10c>
 8005f6e:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 8005f72:	d824      	bhi.n	8005fbe <HAL_RCCEx_PeriphCLKConfig+0x106>
 8005f74:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8005f78:	d008      	beq.n	8005f8c <HAL_RCCEx_PeriphCLKConfig+0xd4>
 8005f7a:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8005f7e:	d81e      	bhi.n	8005fbe <HAL_RCCEx_PeriphCLKConfig+0x106>
 8005f80:	2b00      	cmp	r3, #0
 8005f82:	d00a      	beq.n	8005f9a <HAL_RCCEx_PeriphCLKConfig+0xe2>
 8005f84:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8005f88:	d010      	beq.n	8005fac <HAL_RCCEx_PeriphCLKConfig+0xf4>
 8005f8a:	e018      	b.n	8005fbe <HAL_RCCEx_PeriphCLKConfig+0x106>
    {
    case RCC_SAI2CLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
      /* Enable SAI Clock output generated from System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 8005f8c:	4b62      	ldr	r3, [pc, #392]	; (8006118 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8005f8e:	68db      	ldr	r3, [r3, #12]
 8005f90:	4a61      	ldr	r2, [pc, #388]	; (8006118 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8005f92:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8005f96:	60d3      	str	r3, [r2, #12]
      /* SAI2 clock source config set later after clock selection check */
      break;
 8005f98:	e015      	b.n	8005fc6 <HAL_RCCEx_PeriphCLKConfig+0x10e>

    case RCC_SAI2CLKSOURCE_PLLSAI1: /* PLLSAI1 is used as clock source for SAI2*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 8005f9a:	687b      	ldr	r3, [r7, #4]
 8005f9c:	3304      	adds	r3, #4
 8005f9e:	2100      	movs	r1, #0
 8005fa0:	4618      	mov	r0, r3
 8005fa2:	f000 fa83 	bl	80064ac <RCCEx_PLLSAI1_Config>
 8005fa6:	4603      	mov	r3, r0
 8005fa8:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 8005faa:	e00c      	b.n	8005fc6 <HAL_RCCEx_PeriphCLKConfig+0x10e>

    case RCC_SAI2CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI2*/
      /* PLLSAI2 input clock, parameters M, N & P configuration and clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 8005fac:	687b      	ldr	r3, [r7, #4]
 8005fae:	3320      	adds	r3, #32
 8005fb0:	2100      	movs	r1, #0
 8005fb2:	4618      	mov	r0, r3
 8005fb4:	f000 fb6e 	bl	8006694 <RCCEx_PLLSAI2_Config>
 8005fb8:	4603      	mov	r3, r0
 8005fba:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 8005fbc:	e003      	b.n	8005fc6 <HAL_RCCEx_PeriphCLKConfig+0x10e>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI2 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8005fbe:	2301      	movs	r3, #1
 8005fc0:	74fb      	strb	r3, [r7, #19]
      break;
 8005fc2:	e000      	b.n	8005fc6 <HAL_RCCEx_PeriphCLKConfig+0x10e>
      break;
 8005fc4:	bf00      	nop
    }

    if(ret == HAL_OK)
 8005fc6:	7cfb      	ldrb	r3, [r7, #19]
 8005fc8:	2b00      	cmp	r3, #0
 8005fca:	d10b      	bne.n	8005fe4 <HAL_RCCEx_PeriphCLKConfig+0x12c>
    {
      /* Set the source of SAI2 clock*/
      __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 8005fcc:	4b52      	ldr	r3, [pc, #328]	; (8006118 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8005fce:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005fd2:	f023 7240 	bic.w	r2, r3, #50331648	; 0x3000000
 8005fd6:	687b      	ldr	r3, [r7, #4]
 8005fd8:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8005fda:	494f      	ldr	r1, [pc, #316]	; (8006118 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8005fdc:	4313      	orrs	r3, r2
 8005fde:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
 8005fe2:	e001      	b.n	8005fe8 <HAL_RCCEx_PeriphCLKConfig+0x130>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005fe4:	7cfb      	ldrb	r3, [r7, #19]
 8005fe6:	74bb      	strb	r3, [r7, #18]
    }
  }
#endif /* SAI2 */

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8005fe8:	687b      	ldr	r3, [r7, #4]
 8005fea:	681b      	ldr	r3, [r3, #0]
 8005fec:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005ff0:	2b00      	cmp	r3, #0
 8005ff2:	f000 80a0 	beq.w	8006136 <HAL_RCCEx_PeriphCLKConfig+0x27e>
  {
    FlagStatus       pwrclkchanged = RESET;
 8005ff6:	2300      	movs	r3, #0
 8005ff8:	747b      	strb	r3, [r7, #17]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 8005ffa:	4b47      	ldr	r3, [pc, #284]	; (8006118 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8005ffc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005ffe:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8006002:	2b00      	cmp	r3, #0
 8006004:	d101      	bne.n	800600a <HAL_RCCEx_PeriphCLKConfig+0x152>
 8006006:	2301      	movs	r3, #1
 8006008:	e000      	b.n	800600c <HAL_RCCEx_PeriphCLKConfig+0x154>
 800600a:	2300      	movs	r3, #0
 800600c:	2b00      	cmp	r3, #0
 800600e:	d00d      	beq.n	800602c <HAL_RCCEx_PeriphCLKConfig+0x174>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8006010:	4b41      	ldr	r3, [pc, #260]	; (8006118 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8006012:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006014:	4a40      	ldr	r2, [pc, #256]	; (8006118 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8006016:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800601a:	6593      	str	r3, [r2, #88]	; 0x58
 800601c:	4b3e      	ldr	r3, [pc, #248]	; (8006118 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800601e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006020:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8006024:	60bb      	str	r3, [r7, #8]
 8006026:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8006028:	2301      	movs	r3, #1
 800602a:	747b      	strb	r3, [r7, #17]
    }

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 800602c:	4b3b      	ldr	r3, [pc, #236]	; (800611c <HAL_RCCEx_PeriphCLKConfig+0x264>)
 800602e:	681b      	ldr	r3, [r3, #0]
 8006030:	4a3a      	ldr	r2, [pc, #232]	; (800611c <HAL_RCCEx_PeriphCLKConfig+0x264>)
 8006032:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8006036:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8006038:	f7fd fb70 	bl	800371c <HAL_GetTick>
 800603c:	60f8      	str	r0, [r7, #12]

    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 800603e:	e009      	b.n	8006054 <HAL_RCCEx_PeriphCLKConfig+0x19c>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8006040:	f7fd fb6c 	bl	800371c <HAL_GetTick>
 8006044:	4602      	mov	r2, r0
 8006046:	68fb      	ldr	r3, [r7, #12]
 8006048:	1ad3      	subs	r3, r2, r3
 800604a:	2b02      	cmp	r3, #2
 800604c:	d902      	bls.n	8006054 <HAL_RCCEx_PeriphCLKConfig+0x19c>
      {
        ret = HAL_TIMEOUT;
 800604e:	2303      	movs	r3, #3
 8006050:	74fb      	strb	r3, [r7, #19]
        break;
 8006052:	e005      	b.n	8006060 <HAL_RCCEx_PeriphCLKConfig+0x1a8>
    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 8006054:	4b31      	ldr	r3, [pc, #196]	; (800611c <HAL_RCCEx_PeriphCLKConfig+0x264>)
 8006056:	681b      	ldr	r3, [r3, #0]
 8006058:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800605c:	2b00      	cmp	r3, #0
 800605e:	d0ef      	beq.n	8006040 <HAL_RCCEx_PeriphCLKConfig+0x188>
      }
    }

    if(ret == HAL_OK)
 8006060:	7cfb      	ldrb	r3, [r7, #19]
 8006062:	2b00      	cmp	r3, #0
 8006064:	d15c      	bne.n	8006120 <HAL_RCCEx_PeriphCLKConfig+0x268>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 8006066:	4b2c      	ldr	r3, [pc, #176]	; (8006118 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8006068:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800606c:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8006070:	617b      	str	r3, [r7, #20]

      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 8006072:	697b      	ldr	r3, [r7, #20]
 8006074:	2b00      	cmp	r3, #0
 8006076:	d01f      	beq.n	80060b8 <HAL_RCCEx_PeriphCLKConfig+0x200>
 8006078:	687b      	ldr	r3, [r7, #4]
 800607a:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800607e:	697a      	ldr	r2, [r7, #20]
 8006080:	429a      	cmp	r2, r3
 8006082:	d019      	beq.n	80060b8 <HAL_RCCEx_PeriphCLKConfig+0x200>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 8006084:	4b24      	ldr	r3, [pc, #144]	; (8006118 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8006086:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800608a:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800608e:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8006090:	4b21      	ldr	r3, [pc, #132]	; (8006118 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8006092:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006096:	4a20      	ldr	r2, [pc, #128]	; (8006118 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8006098:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800609c:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 80060a0:	4b1d      	ldr	r3, [pc, #116]	; (8006118 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80060a2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80060a6:	4a1c      	ldr	r2, [pc, #112]	; (8006118 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80060a8:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80060ac:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 80060b0:	4a19      	ldr	r2, [pc, #100]	; (8006118 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80060b2:	697b      	ldr	r3, [r7, #20]
 80060b4:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 80060b8:	697b      	ldr	r3, [r7, #20]
 80060ba:	f003 0301 	and.w	r3, r3, #1
 80060be:	2b00      	cmp	r3, #0
 80060c0:	d016      	beq.n	80060f0 <HAL_RCCEx_PeriphCLKConfig+0x238>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80060c2:	f7fd fb2b 	bl	800371c <HAL_GetTick>
 80060c6:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80060c8:	e00b      	b.n	80060e2 <HAL_RCCEx_PeriphCLKConfig+0x22a>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80060ca:	f7fd fb27 	bl	800371c <HAL_GetTick>
 80060ce:	4602      	mov	r2, r0
 80060d0:	68fb      	ldr	r3, [r7, #12]
 80060d2:	1ad3      	subs	r3, r2, r3
 80060d4:	f241 3288 	movw	r2, #5000	; 0x1388
 80060d8:	4293      	cmp	r3, r2
 80060da:	d902      	bls.n	80060e2 <HAL_RCCEx_PeriphCLKConfig+0x22a>
          {
            ret = HAL_TIMEOUT;
 80060dc:	2303      	movs	r3, #3
 80060de:	74fb      	strb	r3, [r7, #19]
            break;
 80060e0:	e006      	b.n	80060f0 <HAL_RCCEx_PeriphCLKConfig+0x238>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80060e2:	4b0d      	ldr	r3, [pc, #52]	; (8006118 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80060e4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80060e8:	f003 0302 	and.w	r3, r3, #2
 80060ec:	2b00      	cmp	r3, #0
 80060ee:	d0ec      	beq.n	80060ca <HAL_RCCEx_PeriphCLKConfig+0x212>
          }
        }
      }

      if(ret == HAL_OK)
 80060f0:	7cfb      	ldrb	r3, [r7, #19]
 80060f2:	2b00      	cmp	r3, #0
 80060f4:	d10c      	bne.n	8006110 <HAL_RCCEx_PeriphCLKConfig+0x258>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 80060f6:	4b08      	ldr	r3, [pc, #32]	; (8006118 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80060f8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80060fc:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8006100:	687b      	ldr	r3, [r7, #4]
 8006102:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8006106:	4904      	ldr	r1, [pc, #16]	; (8006118 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8006108:	4313      	orrs	r3, r2
 800610a:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
 800610e:	e009      	b.n	8006124 <HAL_RCCEx_PeriphCLKConfig+0x26c>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8006110:	7cfb      	ldrb	r3, [r7, #19]
 8006112:	74bb      	strb	r3, [r7, #18]
 8006114:	e006      	b.n	8006124 <HAL_RCCEx_PeriphCLKConfig+0x26c>
 8006116:	bf00      	nop
 8006118:	40021000 	.word	0x40021000
 800611c:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006120:	7cfb      	ldrb	r3, [r7, #19]
 8006122:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8006124:	7c7b      	ldrb	r3, [r7, #17]
 8006126:	2b01      	cmp	r3, #1
 8006128:	d105      	bne.n	8006136 <HAL_RCCEx_PeriphCLKConfig+0x27e>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800612a:	4b9e      	ldr	r3, [pc, #632]	; (80063a4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800612c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800612e:	4a9d      	ldr	r2, [pc, #628]	; (80063a4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8006130:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8006134:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8006136:	687b      	ldr	r3, [r7, #4]
 8006138:	681b      	ldr	r3, [r3, #0]
 800613a:	f003 0301 	and.w	r3, r3, #1
 800613e:	2b00      	cmp	r3, #0
 8006140:	d00a      	beq.n	8006158 <HAL_RCCEx_PeriphCLKConfig+0x2a0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8006142:	4b98      	ldr	r3, [pc, #608]	; (80063a4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8006144:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006148:	f023 0203 	bic.w	r2, r3, #3
 800614c:	687b      	ldr	r3, [r7, #4]
 800614e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006150:	4994      	ldr	r1, [pc, #592]	; (80063a4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8006152:	4313      	orrs	r3, r2
 8006154:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8006158:	687b      	ldr	r3, [r7, #4]
 800615a:	681b      	ldr	r3, [r3, #0]
 800615c:	f003 0302 	and.w	r3, r3, #2
 8006160:	2b00      	cmp	r3, #0
 8006162:	d00a      	beq.n	800617a <HAL_RCCEx_PeriphCLKConfig+0x2c2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8006164:	4b8f      	ldr	r3, [pc, #572]	; (80063a4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8006166:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800616a:	f023 020c 	bic.w	r2, r3, #12
 800616e:	687b      	ldr	r3, [r7, #4]
 8006170:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006172:	498c      	ldr	r1, [pc, #560]	; (80063a4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8006174:	4313      	orrs	r3, r2
 8006176:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(USART3)

  /*-------------------------- USART3 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 800617a:	687b      	ldr	r3, [r7, #4]
 800617c:	681b      	ldr	r3, [r3, #0]
 800617e:	f003 0304 	and.w	r3, r3, #4
 8006182:	2b00      	cmp	r3, #0
 8006184:	d00a      	beq.n	800619c <HAL_RCCEx_PeriphCLKConfig+0x2e4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 8006186:	4b87      	ldr	r3, [pc, #540]	; (80063a4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8006188:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800618c:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 8006190:	687b      	ldr	r3, [r7, #4]
 8006192:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006194:	4983      	ldr	r1, [pc, #524]	; (80063a4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8006196:	4313      	orrs	r3, r2
 8006198:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* USART3 */

#if defined(UART4)

  /*-------------------------- UART4 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 800619c:	687b      	ldr	r3, [r7, #4]
 800619e:	681b      	ldr	r3, [r3, #0]
 80061a0:	f003 0308 	and.w	r3, r3, #8
 80061a4:	2b00      	cmp	r3, #0
 80061a6:	d00a      	beq.n	80061be <HAL_RCCEx_PeriphCLKConfig+0x306>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 80061a8:	4b7e      	ldr	r3, [pc, #504]	; (80063a4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80061aa:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80061ae:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 80061b2:	687b      	ldr	r3, [r7, #4]
 80061b4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80061b6:	497b      	ldr	r1, [pc, #492]	; (80063a4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80061b8:	4313      	orrs	r3, r2
 80061ba:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* UART4 */

#if defined(UART5)

  /*-------------------------- UART5 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 80061be:	687b      	ldr	r3, [r7, #4]
 80061c0:	681b      	ldr	r3, [r3, #0]
 80061c2:	f003 0310 	and.w	r3, r3, #16
 80061c6:	2b00      	cmp	r3, #0
 80061c8:	d00a      	beq.n	80061e0 <HAL_RCCEx_PeriphCLKConfig+0x328>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 80061ca:	4b76      	ldr	r3, [pc, #472]	; (80063a4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80061cc:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80061d0:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 80061d4:	687b      	ldr	r3, [r7, #4]
 80061d6:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80061d8:	4972      	ldr	r1, [pc, #456]	; (80063a4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80061da:	4313      	orrs	r3, r2
 80061dc:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 80061e0:	687b      	ldr	r3, [r7, #4]
 80061e2:	681b      	ldr	r3, [r3, #0]
 80061e4:	f003 0320 	and.w	r3, r3, #32
 80061e8:	2b00      	cmp	r3, #0
 80061ea:	d00a      	beq.n	8006202 <HAL_RCCEx_PeriphCLKConfig+0x34a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUART1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 80061ec:	4b6d      	ldr	r3, [pc, #436]	; (80063a4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80061ee:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80061f2:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 80061f6:	687b      	ldr	r3, [r7, #4]
 80061f8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80061fa:	496a      	ldr	r1, [pc, #424]	; (80063a4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80061fc:	4313      	orrs	r3, r2
 80061fe:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 8006202:	687b      	ldr	r3, [r7, #4]
 8006204:	681b      	ldr	r3, [r3, #0]
 8006206:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800620a:	2b00      	cmp	r3, #0
 800620c:	d00a      	beq.n	8006224 <HAL_RCCEx_PeriphCLKConfig+0x36c>
  {
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 800620e:	4b65      	ldr	r3, [pc, #404]	; (80063a4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8006210:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006214:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 8006218:	687b      	ldr	r3, [r7, #4]
 800621a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800621c:	4961      	ldr	r1, [pc, #388]	; (80063a4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800621e:	4313      	orrs	r3, r2
 8006220:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 8006224:	687b      	ldr	r3, [r7, #4]
 8006226:	681b      	ldr	r3, [r3, #0]
 8006228:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800622c:	2b00      	cmp	r3, #0
 800622e:	d00a      	beq.n	8006246 <HAL_RCCEx_PeriphCLKConfig+0x38e>
  {
    assert_param(IS_RCC_LPTIM2CLK(PeriphClkInit->Lptim2ClockSelection));
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 8006230:	4b5c      	ldr	r3, [pc, #368]	; (80063a4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8006232:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006236:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 800623a:	687b      	ldr	r3, [r7, #4]
 800623c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800623e:	4959      	ldr	r1, [pc, #356]	; (80063a4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8006240:	4313      	orrs	r3, r2
 8006242:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8006246:	687b      	ldr	r3, [r7, #4]
 8006248:	681b      	ldr	r3, [r3, #0]
 800624a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800624e:	2b00      	cmp	r3, #0
 8006250:	d00a      	beq.n	8006268 <HAL_RCCEx_PeriphCLKConfig+0x3b0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8006252:	4b54      	ldr	r3, [pc, #336]	; (80063a4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8006254:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006258:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 800625c:	687b      	ldr	r3, [r7, #4]
 800625e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8006260:	4950      	ldr	r1, [pc, #320]	; (80063a4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8006262:	4313      	orrs	r3, r2
 8006264:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(I2C2)

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8006268:	687b      	ldr	r3, [r7, #4]
 800626a:	681b      	ldr	r3, [r3, #0]
 800626c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006270:	2b00      	cmp	r3, #0
 8006272:	d00a      	beq.n	800628a <HAL_RCCEx_PeriphCLKConfig+0x3d2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8006274:	4b4b      	ldr	r3, [pc, #300]	; (80063a4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8006276:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800627a:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 800627e:	687b      	ldr	r3, [r7, #4]
 8006280:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006282:	4948      	ldr	r1, [pc, #288]	; (80063a4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8006284:	4313      	orrs	r3, r2
 8006286:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* I2C2 */

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 800628a:	687b      	ldr	r3, [r7, #4]
 800628c:	681b      	ldr	r3, [r3, #0]
 800628e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006292:	2b00      	cmp	r3, #0
 8006294:	d00a      	beq.n	80062ac <HAL_RCCEx_PeriphCLKConfig+0x3f4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8006296:	4b43      	ldr	r3, [pc, #268]	; (80063a4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8006298:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800629c:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 80062a0:	687b      	ldr	r3, [r7, #4]
 80062a2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80062a4:	493f      	ldr	r1, [pc, #252]	; (80063a4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80062a6:	4313      	orrs	r3, r2
 80062a8:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* I2C4 */

#if defined(USB_OTG_FS) || defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 80062ac:	687b      	ldr	r3, [r7, #4]
 80062ae:	681b      	ldr	r3, [r3, #0]
 80062b0:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80062b4:	2b00      	cmp	r3, #0
 80062b6:	d028      	beq.n	800630a <HAL_RCCEx_PeriphCLKConfig+0x452>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 80062b8:	4b3a      	ldr	r3, [pc, #232]	; (80063a4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80062ba:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80062be:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 80062c2:	687b      	ldr	r3, [r7, #4]
 80062c4:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80062c6:	4937      	ldr	r1, [pc, #220]	; (80063a4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80062c8:	4313      	orrs	r3, r2
 80062ca:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 80062ce:	687b      	ldr	r3, [r7, #4]
 80062d0:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80062d2:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 80062d6:	d106      	bne.n	80062e6 <HAL_RCCEx_PeriphCLKConfig+0x42e>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80062d8:	4b32      	ldr	r3, [pc, #200]	; (80063a4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80062da:	68db      	ldr	r3, [r3, #12]
 80062dc:	4a31      	ldr	r2, [pc, #196]	; (80063a4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80062de:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80062e2:	60d3      	str	r3, [r2, #12]
 80062e4:	e011      	b.n	800630a <HAL_RCCEx_PeriphCLKConfig+0x452>
    }
    else
    {
#if defined(RCC_PLLSAI1_SUPPORT)
      if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLLSAI1)
 80062e6:	687b      	ldr	r3, [r7, #4]
 80062e8:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80062ea:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 80062ee:	d10c      	bne.n	800630a <HAL_RCCEx_PeriphCLKConfig+0x452>
      {
        /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
        ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 80062f0:	687b      	ldr	r3, [r7, #4]
 80062f2:	3304      	adds	r3, #4
 80062f4:	2101      	movs	r1, #1
 80062f6:	4618      	mov	r0, r3
 80062f8:	f000 f8d8 	bl	80064ac <RCCEx_PLLSAI1_Config>
 80062fc:	4603      	mov	r3, r0
 80062fe:	74fb      	strb	r3, [r7, #19]

        if(ret != HAL_OK)
 8006300:	7cfb      	ldrb	r3, [r7, #19]
 8006302:	2b00      	cmp	r3, #0
 8006304:	d001      	beq.n	800630a <HAL_RCCEx_PeriphCLKConfig+0x452>
        {
          /* set overall return value */
          status = ret;
 8006306:	7cfb      	ldrb	r3, [r7, #19]
 8006308:	74bb      	strb	r3, [r7, #18]
#endif /* USB_OTG_FS || USB */

#if defined(SDMMC1)

  /*-------------------------- SDMMC1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == (RCC_PERIPHCLK_SDMMC1))
 800630a:	687b      	ldr	r3, [r7, #4]
 800630c:	681b      	ldr	r3, [r3, #0]
 800630e:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8006312:	2b00      	cmp	r3, #0
 8006314:	d028      	beq.n	8006368 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
  {
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 8006316:	4b23      	ldr	r3, [pc, #140]	; (80063a4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8006318:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800631c:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8006320:	687b      	ldr	r3, [r7, #4]
 8006322:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006324:	491f      	ldr	r1, [pc, #124]	; (80063a4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8006326:	4313      	orrs	r3, r2
 8006328:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLL)   /* PLL "Q" ? */
 800632c:	687b      	ldr	r3, [r7, #4]
 800632e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006330:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8006334:	d106      	bne.n	8006344 <HAL_RCCEx_PeriphCLKConfig+0x48c>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8006336:	4b1b      	ldr	r3, [pc, #108]	; (80063a4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8006338:	68db      	ldr	r3, [r3, #12]
 800633a:	4a1a      	ldr	r2, [pc, #104]	; (80063a4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800633c:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8006340:	60d3      	str	r3, [r2, #12]
 8006342:	e011      	b.n	8006368 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
    {
      /* Enable PLLSAI3CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
    }
#endif
    else if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLLSAI1)
 8006344:	687b      	ldr	r3, [r7, #4]
 8006346:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006348:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 800634c:	d10c      	bne.n	8006368 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 800634e:	687b      	ldr	r3, [r7, #4]
 8006350:	3304      	adds	r3, #4
 8006352:	2101      	movs	r1, #1
 8006354:	4618      	mov	r0, r3
 8006356:	f000 f8a9 	bl	80064ac <RCCEx_PLLSAI1_Config>
 800635a:	4603      	mov	r3, r0
 800635c:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 800635e:	7cfb      	ldrb	r3, [r7, #19]
 8006360:	2b00      	cmp	r3, #0
 8006362:	d001      	beq.n	8006368 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
      {
        /* set overall return value */
        status = ret;
 8006364:	7cfb      	ldrb	r3, [r7, #19]
 8006366:	74bb      	strb	r3, [r7, #18]
  }

#endif /* SDMMC1 */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 8006368:	687b      	ldr	r3, [r7, #4]
 800636a:	681b      	ldr	r3, [r3, #0]
 800636c:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8006370:	2b00      	cmp	r3, #0
 8006372:	d02b      	beq.n	80063cc <HAL_RCCEx_PeriphCLKConfig+0x514>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8006374:	4b0b      	ldr	r3, [pc, #44]	; (80063a4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8006376:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800637a:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 800637e:	687b      	ldr	r3, [r7, #4]
 8006380:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8006382:	4908      	ldr	r1, [pc, #32]	; (80063a4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8006384:	4313      	orrs	r3, r2
 8006386:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 800638a:	687b      	ldr	r3, [r7, #4]
 800638c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800638e:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8006392:	d109      	bne.n	80063a8 <HAL_RCCEx_PeriphCLKConfig+0x4f0>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8006394:	4b03      	ldr	r3, [pc, #12]	; (80063a4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8006396:	68db      	ldr	r3, [r3, #12]
 8006398:	4a02      	ldr	r2, [pc, #8]	; (80063a4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800639a:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800639e:	60d3      	str	r3, [r2, #12]
 80063a0:	e014      	b.n	80063cc <HAL_RCCEx_PeriphCLKConfig+0x514>
 80063a2:	bf00      	nop
 80063a4:	40021000 	.word	0x40021000
    }
#if defined(RCC_PLLSAI1_SUPPORT)
    else if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLLSAI1)
 80063a8:	687b      	ldr	r3, [r7, #4]
 80063aa:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80063ac:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 80063b0:	d10c      	bne.n	80063cc <HAL_RCCEx_PeriphCLKConfig+0x514>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 80063b2:	687b      	ldr	r3, [r7, #4]
 80063b4:	3304      	adds	r3, #4
 80063b6:	2101      	movs	r1, #1
 80063b8:	4618      	mov	r0, r3
 80063ba:	f000 f877 	bl	80064ac <RCCEx_PLLSAI1_Config>
 80063be:	4603      	mov	r3, r0
 80063c0:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 80063c2:	7cfb      	ldrb	r3, [r7, #19]
 80063c4:	2b00      	cmp	r3, #0
 80063c6:	d001      	beq.n	80063cc <HAL_RCCEx_PeriphCLKConfig+0x514>
      {
        /* set overall return value */
        status = ret;
 80063c8:	7cfb      	ldrb	r3, [r7, #19]
 80063ca:	74bb      	strb	r3, [r7, #18]
    }
  }

  /*-------------------------- ADC clock source configuration ----------------------*/
#if !defined(STM32L412xx) && !defined(STM32L422xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 80063cc:	687b      	ldr	r3, [r7, #4]
 80063ce:	681b      	ldr	r3, [r3, #0]
 80063d0:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80063d4:	2b00      	cmp	r3, #0
 80063d6:	d02f      	beq.n	8006438 <HAL_RCCEx_PeriphCLKConfig+0x580>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 80063d8:	4b2b      	ldr	r3, [pc, #172]	; (8006488 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 80063da:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80063de:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 80063e2:	687b      	ldr	r3, [r7, #4]
 80063e4:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80063e6:	4928      	ldr	r1, [pc, #160]	; (8006488 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 80063e8:	4313      	orrs	r3, r2
 80063ea:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

#if defined(RCC_PLLSAI1_SUPPORT)
    if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI1)
 80063ee:	687b      	ldr	r3, [r7, #4]
 80063f0:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80063f2:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 80063f6:	d10d      	bne.n	8006414 <HAL_RCCEx_PeriphCLKConfig+0x55c>
    {
      /* PLLSAI1 input clock, parameters M, N & R configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_R_UPDATE);
 80063f8:	687b      	ldr	r3, [r7, #4]
 80063fa:	3304      	adds	r3, #4
 80063fc:	2102      	movs	r1, #2
 80063fe:	4618      	mov	r0, r3
 8006400:	f000 f854 	bl	80064ac <RCCEx_PLLSAI1_Config>
 8006404:	4603      	mov	r3, r0
 8006406:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8006408:	7cfb      	ldrb	r3, [r7, #19]
 800640a:	2b00      	cmp	r3, #0
 800640c:	d014      	beq.n	8006438 <HAL_RCCEx_PeriphCLKConfig+0x580>
      {
        /* set overall return value */
        status = ret;
 800640e:	7cfb      	ldrb	r3, [r7, #19]
 8006410:	74bb      	strb	r3, [r7, #18]
 8006412:	e011      	b.n	8006438 <HAL_RCCEx_PeriphCLKConfig+0x580>
    }
#endif /* RCC_PLLSAI1_SUPPORT */

#if defined(STM32L471xx) || defined(STM32L475xx) || defined(STM32L476xx) || defined(STM32L485xx) || defined(STM32L486xx) || defined(STM32L496xx) || defined(STM32L4A6xx)

    else if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI2)
 8006414:	687b      	ldr	r3, [r7, #4]
 8006416:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8006418:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800641c:	d10c      	bne.n	8006438 <HAL_RCCEx_PeriphCLKConfig+0x580>
    {
      /* PLLSAI2 input clock, parameters M, N & R configuration and clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_R_UPDATE);
 800641e:	687b      	ldr	r3, [r7, #4]
 8006420:	3320      	adds	r3, #32
 8006422:	2102      	movs	r1, #2
 8006424:	4618      	mov	r0, r3
 8006426:	f000 f935 	bl	8006694 <RCCEx_PLLSAI2_Config>
 800642a:	4603      	mov	r3, r0
 800642c:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 800642e:	7cfb      	ldrb	r3, [r7, #19]
 8006430:	2b00      	cmp	r3, #0
 8006432:	d001      	beq.n	8006438 <HAL_RCCEx_PeriphCLKConfig+0x580>
      {
        /* set overall return value */
        status = ret;
 8006434:	7cfb      	ldrb	r3, [r7, #19]
 8006436:	74bb      	strb	r3, [r7, #18]
#endif /* !STM32L412xx && !STM32L422xx */

#if defined(SWPMI1)

  /*-------------------------- SWPMI1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 8006438:	687b      	ldr	r3, [r7, #4]
 800643a:	681b      	ldr	r3, [r3, #0]
 800643c:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8006440:	2b00      	cmp	r3, #0
 8006442:	d00a      	beq.n	800645a <HAL_RCCEx_PeriphCLKConfig+0x5a2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 8006444:	4b10      	ldr	r3, [pc, #64]	; (8006488 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8006446:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800644a:	f023 4280 	bic.w	r2, r3, #1073741824	; 0x40000000
 800644e:	687b      	ldr	r3, [r7, #4]
 8006450:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8006452:	490d      	ldr	r1, [pc, #52]	; (8006488 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8006454:	4313      	orrs	r3, r2
 8006456:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* SWPMI1 */

#if defined(DFSDM1_Filter0)

  /*-------------------------- DFSDM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 800645a:	687b      	ldr	r3, [r7, #4]
 800645c:	681b      	ldr	r3, [r3, #0]
 800645e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8006462:	2b00      	cmp	r3, #0
 8006464:	d00b      	beq.n	800647e <HAL_RCCEx_PeriphCLKConfig+0x5c6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 8006466:	4b08      	ldr	r3, [pc, #32]	; (8006488 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8006468:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800646c:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 8006470:	687b      	ldr	r3, [r7, #4]
 8006472:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8006476:	4904      	ldr	r1, [pc, #16]	; (8006488 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8006478:	4313      	orrs	r3, r2
 800647a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    }
  }

#endif /* OCTOSPI1 || OCTOSPI2 */

  return status;
 800647e:	7cbb      	ldrb	r3, [r7, #18]
}
 8006480:	4618      	mov	r0, r3
 8006482:	3718      	adds	r7, #24
 8006484:	46bd      	mov	sp, r7
 8006486:	bd80      	pop	{r7, pc}
 8006488:	40021000 	.word	0x40021000

0800648c <HAL_RCCEx_EnableMSIPLLMode>:
  * @note   Prior to enable the PLL-mode of the MSI for automatic hardware
  *         calibration LSE oscillator is to be enabled with HAL_RCC_OscConfig().
  * @retval None
  */
void HAL_RCCEx_EnableMSIPLLMode(void)
{
 800648c:	b480      	push	{r7}
 800648e:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_MSIPLLEN) ;
 8006490:	4b05      	ldr	r3, [pc, #20]	; (80064a8 <HAL_RCCEx_EnableMSIPLLMode+0x1c>)
 8006492:	681b      	ldr	r3, [r3, #0]
 8006494:	4a04      	ldr	r2, [pc, #16]	; (80064a8 <HAL_RCCEx_EnableMSIPLLMode+0x1c>)
 8006496:	f043 0304 	orr.w	r3, r3, #4
 800649a:	6013      	str	r3, [r2, #0]
}
 800649c:	bf00      	nop
 800649e:	46bd      	mov	sp, r7
 80064a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80064a4:	4770      	bx	lr
 80064a6:	bf00      	nop
 80064a8:	40021000 	.word	0x40021000

080064ac <RCCEx_PLLSAI1_Config>:
  * @note   PLLSAI1 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI1_Config(RCC_PLLSAI1InitTypeDef *PllSai1, uint32_t Divider)
{
 80064ac:	b580      	push	{r7, lr}
 80064ae:	b084      	sub	sp, #16
 80064b0:	af00      	add	r7, sp, #0
 80064b2:	6078      	str	r0, [r7, #4]
 80064b4:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 80064b6:	2300      	movs	r3, #0
 80064b8:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI1M_VALUE(PllSai1->PLLSAI1M));
  assert_param(IS_RCC_PLLSAI1N_VALUE(PllSai1->PLLSAI1N));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(PllSai1->PLLSAI1ClockOut));

  /* Check that PLLSAI1 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 80064ba:	4b75      	ldr	r3, [pc, #468]	; (8006690 <RCCEx_PLLSAI1_Config+0x1e4>)
 80064bc:	68db      	ldr	r3, [r3, #12]
 80064be:	f003 0303 	and.w	r3, r3, #3
 80064c2:	2b00      	cmp	r3, #0
 80064c4:	d018      	beq.n	80064f8 <RCCEx_PLLSAI1_Config+0x4c>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai1->PLLSAI1Source)
 80064c6:	4b72      	ldr	r3, [pc, #456]	; (8006690 <RCCEx_PLLSAI1_Config+0x1e4>)
 80064c8:	68db      	ldr	r3, [r3, #12]
 80064ca:	f003 0203 	and.w	r2, r3, #3
 80064ce:	687b      	ldr	r3, [r7, #4]
 80064d0:	681b      	ldr	r3, [r3, #0]
 80064d2:	429a      	cmp	r2, r3
 80064d4:	d10d      	bne.n	80064f2 <RCCEx_PLLSAI1_Config+0x46>
       ||
       (PllSai1->PLLSAI1Source == RCC_PLLSOURCE_NONE)
 80064d6:	687b      	ldr	r3, [r7, #4]
 80064d8:	681b      	ldr	r3, [r3, #0]
       ||
 80064da:	2b00      	cmp	r3, #0
 80064dc:	d009      	beq.n	80064f2 <RCCEx_PLLSAI1_Config+0x46>
#if !defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai1->PLLSAI1M)
 80064de:	4b6c      	ldr	r3, [pc, #432]	; (8006690 <RCCEx_PLLSAI1_Config+0x1e4>)
 80064e0:	68db      	ldr	r3, [r3, #12]
 80064e2:	091b      	lsrs	r3, r3, #4
 80064e4:	f003 0307 	and.w	r3, r3, #7
 80064e8:	1c5a      	adds	r2, r3, #1
 80064ea:	687b      	ldr	r3, [r7, #4]
 80064ec:	685b      	ldr	r3, [r3, #4]
       ||
 80064ee:	429a      	cmp	r2, r3
 80064f0:	d047      	beq.n	8006582 <RCCEx_PLLSAI1_Config+0xd6>
#endif
      )
    {
      status = HAL_ERROR;
 80064f2:	2301      	movs	r3, #1
 80064f4:	73fb      	strb	r3, [r7, #15]
 80064f6:	e044      	b.n	8006582 <RCCEx_PLLSAI1_Config+0xd6>
    }
  }
  else
  {
    /* Check PLLSAI1 clock source availability */
    switch(PllSai1->PLLSAI1Source)
 80064f8:	687b      	ldr	r3, [r7, #4]
 80064fa:	681b      	ldr	r3, [r3, #0]
 80064fc:	2b03      	cmp	r3, #3
 80064fe:	d018      	beq.n	8006532 <RCCEx_PLLSAI1_Config+0x86>
 8006500:	2b03      	cmp	r3, #3
 8006502:	d825      	bhi.n	8006550 <RCCEx_PLLSAI1_Config+0xa4>
 8006504:	2b01      	cmp	r3, #1
 8006506:	d002      	beq.n	800650e <RCCEx_PLLSAI1_Config+0x62>
 8006508:	2b02      	cmp	r3, #2
 800650a:	d009      	beq.n	8006520 <RCCEx_PLLSAI1_Config+0x74>
 800650c:	e020      	b.n	8006550 <RCCEx_PLLSAI1_Config+0xa4>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 800650e:	4b60      	ldr	r3, [pc, #384]	; (8006690 <RCCEx_PLLSAI1_Config+0x1e4>)
 8006510:	681b      	ldr	r3, [r3, #0]
 8006512:	f003 0302 	and.w	r3, r3, #2
 8006516:	2b00      	cmp	r3, #0
 8006518:	d11d      	bne.n	8006556 <RCCEx_PLLSAI1_Config+0xaa>
      {
        status = HAL_ERROR;
 800651a:	2301      	movs	r3, #1
 800651c:	73fb      	strb	r3, [r7, #15]
      }
      break;
 800651e:	e01a      	b.n	8006556 <RCCEx_PLLSAI1_Config+0xaa>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 8006520:	4b5b      	ldr	r3, [pc, #364]	; (8006690 <RCCEx_PLLSAI1_Config+0x1e4>)
 8006522:	681b      	ldr	r3, [r3, #0]
 8006524:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8006528:	2b00      	cmp	r3, #0
 800652a:	d116      	bne.n	800655a <RCCEx_PLLSAI1_Config+0xae>
      {
        status = HAL_ERROR;
 800652c:	2301      	movs	r3, #1
 800652e:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8006530:	e013      	b.n	800655a <RCCEx_PLLSAI1_Config+0xae>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 8006532:	4b57      	ldr	r3, [pc, #348]	; (8006690 <RCCEx_PLLSAI1_Config+0x1e4>)
 8006534:	681b      	ldr	r3, [r3, #0]
 8006536:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800653a:	2b00      	cmp	r3, #0
 800653c:	d10f      	bne.n	800655e <RCCEx_PLLSAI1_Config+0xb2>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 800653e:	4b54      	ldr	r3, [pc, #336]	; (8006690 <RCCEx_PLLSAI1_Config+0x1e4>)
 8006540:	681b      	ldr	r3, [r3, #0]
 8006542:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8006546:	2b00      	cmp	r3, #0
 8006548:	d109      	bne.n	800655e <RCCEx_PLLSAI1_Config+0xb2>
        {
          status = HAL_ERROR;
 800654a:	2301      	movs	r3, #1
 800654c:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 800654e:	e006      	b.n	800655e <RCCEx_PLLSAI1_Config+0xb2>
    default:
      status = HAL_ERROR;
 8006550:	2301      	movs	r3, #1
 8006552:	73fb      	strb	r3, [r7, #15]
      break;
 8006554:	e004      	b.n	8006560 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 8006556:	bf00      	nop
 8006558:	e002      	b.n	8006560 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 800655a:	bf00      	nop
 800655c:	e000      	b.n	8006560 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 800655e:	bf00      	nop
    }

    if(status == HAL_OK)
 8006560:	7bfb      	ldrb	r3, [r7, #15]
 8006562:	2b00      	cmp	r3, #0
 8006564:	d10d      	bne.n	8006582 <RCCEx_PLLSAI1_Config+0xd6>
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
      /* Set PLLSAI1 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai1->PLLSAI1Source);
#else
      /* Set PLLSAI1 clock source and divider M */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai1->PLLSAI1Source | (PllSai1->PLLSAI1M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 8006566:	4b4a      	ldr	r3, [pc, #296]	; (8006690 <RCCEx_PLLSAI1_Config+0x1e4>)
 8006568:	68db      	ldr	r3, [r3, #12]
 800656a:	f023 0273 	bic.w	r2, r3, #115	; 0x73
 800656e:	687b      	ldr	r3, [r7, #4]
 8006570:	6819      	ldr	r1, [r3, #0]
 8006572:	687b      	ldr	r3, [r7, #4]
 8006574:	685b      	ldr	r3, [r3, #4]
 8006576:	3b01      	subs	r3, #1
 8006578:	011b      	lsls	r3, r3, #4
 800657a:	430b      	orrs	r3, r1
 800657c:	4944      	ldr	r1, [pc, #272]	; (8006690 <RCCEx_PLLSAI1_Config+0x1e4>)
 800657e:	4313      	orrs	r3, r2
 8006580:	60cb      	str	r3, [r1, #12]
#endif
    }
  }

  if(status == HAL_OK)
 8006582:	7bfb      	ldrb	r3, [r7, #15]
 8006584:	2b00      	cmp	r3, #0
 8006586:	d17d      	bne.n	8006684 <RCCEx_PLLSAI1_Config+0x1d8>
  {
    /* Disable the PLLSAI1 */
    __HAL_RCC_PLLSAI1_DISABLE();
 8006588:	4b41      	ldr	r3, [pc, #260]	; (8006690 <RCCEx_PLLSAI1_Config+0x1e4>)
 800658a:	681b      	ldr	r3, [r3, #0]
 800658c:	4a40      	ldr	r2, [pc, #256]	; (8006690 <RCCEx_PLLSAI1_Config+0x1e4>)
 800658e:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 8006592:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8006594:	f7fd f8c2 	bl	800371c <HAL_GetTick>
 8006598:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI1 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 800659a:	e009      	b.n	80065b0 <RCCEx_PLLSAI1_Config+0x104>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 800659c:	f7fd f8be 	bl	800371c <HAL_GetTick>
 80065a0:	4602      	mov	r2, r0
 80065a2:	68bb      	ldr	r3, [r7, #8]
 80065a4:	1ad3      	subs	r3, r2, r3
 80065a6:	2b02      	cmp	r3, #2
 80065a8:	d902      	bls.n	80065b0 <RCCEx_PLLSAI1_Config+0x104>
      {
        status = HAL_TIMEOUT;
 80065aa:	2303      	movs	r3, #3
 80065ac:	73fb      	strb	r3, [r7, #15]
        break;
 80065ae:	e005      	b.n	80065bc <RCCEx_PLLSAI1_Config+0x110>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 80065b0:	4b37      	ldr	r3, [pc, #220]	; (8006690 <RCCEx_PLLSAI1_Config+0x1e4>)
 80065b2:	681b      	ldr	r3, [r3, #0]
 80065b4:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80065b8:	2b00      	cmp	r3, #0
 80065ba:	d1ef      	bne.n	800659c <RCCEx_PLLSAI1_Config+0xf0>
      }
    }

    if(status == HAL_OK)
 80065bc:	7bfb      	ldrb	r3, [r7, #15]
 80065be:	2b00      	cmp	r3, #0
 80065c0:	d160      	bne.n	8006684 <RCCEx_PLLSAI1_Config+0x1d8>
    {
      if(Divider == DIVIDER_P_UPDATE)
 80065c2:	683b      	ldr	r3, [r7, #0]
 80065c4:	2b00      	cmp	r3, #0
 80065c6:	d111      	bne.n	80065ec <RCCEx_PLLSAI1_Config+0x140>
        MODIFY_REG(RCC->PLLSAI1CFGR,
                   RCC_PLLSAI1CFGR_PLLSAI1N | RCC_PLLSAI1CFGR_PLLSAI1PDIV,
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (PllSai1->PLLSAI1P << RCC_PLLSAI1CFGR_PLLSAI1PDIV_Pos));
#else
        MODIFY_REG(RCC->PLLSAI1CFGR,
 80065c8:	4b31      	ldr	r3, [pc, #196]	; (8006690 <RCCEx_PLLSAI1_Config+0x1e4>)
 80065ca:	691b      	ldr	r3, [r3, #16]
 80065cc:	f423 331f 	bic.w	r3, r3, #162816	; 0x27c00
 80065d0:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80065d4:	687a      	ldr	r2, [r7, #4]
 80065d6:	6892      	ldr	r2, [r2, #8]
 80065d8:	0211      	lsls	r1, r2, #8
 80065da:	687a      	ldr	r2, [r7, #4]
 80065dc:	68d2      	ldr	r2, [r2, #12]
 80065de:	0912      	lsrs	r2, r2, #4
 80065e0:	0452      	lsls	r2, r2, #17
 80065e2:	430a      	orrs	r2, r1
 80065e4:	492a      	ldr	r1, [pc, #168]	; (8006690 <RCCEx_PLLSAI1_Config+0x1e4>)
 80065e6:	4313      	orrs	r3, r2
 80065e8:	610b      	str	r3, [r1, #16]
 80065ea:	e027      	b.n	800663c <RCCEx_PLLSAI1_Config+0x190>
                   ((PllSai1->PLLSAI1P >> 4U) << RCC_PLLSAI1CFGR_PLLSAI1P_Pos));
#endif /* RCC_PLLSAI1P_DIV_2_31_SUPPORT */

#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }
      else if(Divider == DIVIDER_Q_UPDATE)
 80065ec:	683b      	ldr	r3, [r7, #0]
 80065ee:	2b01      	cmp	r3, #1
 80065f0:	d112      	bne.n	8006618 <RCCEx_PLLSAI1_Config+0x16c>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1Q >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1Q_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor Q and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 80065f2:	4b27      	ldr	r3, [pc, #156]	; (8006690 <RCCEx_PLLSAI1_Config+0x1e4>)
 80065f4:	691b      	ldr	r3, [r3, #16]
 80065f6:	f423 03c0 	bic.w	r3, r3, #6291456	; 0x600000
 80065fa:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 80065fe:	687a      	ldr	r2, [r7, #4]
 8006600:	6892      	ldr	r2, [r2, #8]
 8006602:	0211      	lsls	r1, r2, #8
 8006604:	687a      	ldr	r2, [r7, #4]
 8006606:	6912      	ldr	r2, [r2, #16]
 8006608:	0852      	lsrs	r2, r2, #1
 800660a:	3a01      	subs	r2, #1
 800660c:	0552      	lsls	r2, r2, #21
 800660e:	430a      	orrs	r2, r1
 8006610:	491f      	ldr	r1, [pc, #124]	; (8006690 <RCCEx_PLLSAI1_Config+0x1e4>)
 8006612:	4313      	orrs	r3, r2
 8006614:	610b      	str	r3, [r1, #16]
 8006616:	e011      	b.n	800663c <RCCEx_PLLSAI1_Config+0x190>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8006618:	4b1d      	ldr	r3, [pc, #116]	; (8006690 <RCCEx_PLLSAI1_Config+0x1e4>)
 800661a:	691b      	ldr	r3, [r3, #16]
 800661c:	f023 63c0 	bic.w	r3, r3, #100663296	; 0x6000000
 8006620:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 8006624:	687a      	ldr	r2, [r7, #4]
 8006626:	6892      	ldr	r2, [r2, #8]
 8006628:	0211      	lsls	r1, r2, #8
 800662a:	687a      	ldr	r2, [r7, #4]
 800662c:	6952      	ldr	r2, [r2, #20]
 800662e:	0852      	lsrs	r2, r2, #1
 8006630:	3a01      	subs	r2, #1
 8006632:	0652      	lsls	r2, r2, #25
 8006634:	430a      	orrs	r2, r1
 8006636:	4916      	ldr	r1, [pc, #88]	; (8006690 <RCCEx_PLLSAI1_Config+0x1e4>)
 8006638:	4313      	orrs	r3, r2
 800663a:	610b      	str	r3, [r1, #16]
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos));
#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI1 again by setting PLLSAI1ON to 1*/
      __HAL_RCC_PLLSAI1_ENABLE();
 800663c:	4b14      	ldr	r3, [pc, #80]	; (8006690 <RCCEx_PLLSAI1_Config+0x1e4>)
 800663e:	681b      	ldr	r3, [r3, #0]
 8006640:	4a13      	ldr	r2, [pc, #76]	; (8006690 <RCCEx_PLLSAI1_Config+0x1e4>)
 8006642:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8006646:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8006648:	f7fd f868 	bl	800371c <HAL_GetTick>
 800664c:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI1 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 800664e:	e009      	b.n	8006664 <RCCEx_PLLSAI1_Config+0x1b8>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8006650:	f7fd f864 	bl	800371c <HAL_GetTick>
 8006654:	4602      	mov	r2, r0
 8006656:	68bb      	ldr	r3, [r7, #8]
 8006658:	1ad3      	subs	r3, r2, r3
 800665a:	2b02      	cmp	r3, #2
 800665c:	d902      	bls.n	8006664 <RCCEx_PLLSAI1_Config+0x1b8>
        {
          status = HAL_TIMEOUT;
 800665e:	2303      	movs	r3, #3
 8006660:	73fb      	strb	r3, [r7, #15]
          break;
 8006662:	e005      	b.n	8006670 <RCCEx_PLLSAI1_Config+0x1c4>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 8006664:	4b0a      	ldr	r3, [pc, #40]	; (8006690 <RCCEx_PLLSAI1_Config+0x1e4>)
 8006666:	681b      	ldr	r3, [r3, #0]
 8006668:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800666c:	2b00      	cmp	r3, #0
 800666e:	d0ef      	beq.n	8006650 <RCCEx_PLLSAI1_Config+0x1a4>
        }
      }

      if(status == HAL_OK)
 8006670:	7bfb      	ldrb	r3, [r7, #15]
 8006672:	2b00      	cmp	r3, #0
 8006674:	d106      	bne.n	8006684 <RCCEx_PLLSAI1_Config+0x1d8>
      {
        /* Configure the PLLSAI1 Clock output(s) */
        __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PllSai1->PLLSAI1ClockOut);
 8006676:	4b06      	ldr	r3, [pc, #24]	; (8006690 <RCCEx_PLLSAI1_Config+0x1e4>)
 8006678:	691a      	ldr	r2, [r3, #16]
 800667a:	687b      	ldr	r3, [r7, #4]
 800667c:	699b      	ldr	r3, [r3, #24]
 800667e:	4904      	ldr	r1, [pc, #16]	; (8006690 <RCCEx_PLLSAI1_Config+0x1e4>)
 8006680:	4313      	orrs	r3, r2
 8006682:	610b      	str	r3, [r1, #16]
      }
    }
  }

  return status;
 8006684:	7bfb      	ldrb	r3, [r7, #15]
}
 8006686:	4618      	mov	r0, r3
 8006688:	3710      	adds	r7, #16
 800668a:	46bd      	mov	sp, r7
 800668c:	bd80      	pop	{r7, pc}
 800668e:	bf00      	nop
 8006690:	40021000 	.word	0x40021000

08006694 <RCCEx_PLLSAI2_Config>:
  * @note   PLLSAI2 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI2_Config(RCC_PLLSAI2InitTypeDef *PllSai2, uint32_t Divider)
{
 8006694:	b580      	push	{r7, lr}
 8006696:	b084      	sub	sp, #16
 8006698:	af00      	add	r7, sp, #0
 800669a:	6078      	str	r0, [r7, #4]
 800669c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 800669e:	2300      	movs	r3, #0
 80066a0:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI2M_VALUE(PllSai2->PLLSAI2M));
  assert_param(IS_RCC_PLLSAI2N_VALUE(PllSai2->PLLSAI2N));
  assert_param(IS_RCC_PLLSAI2CLOCKOUT_VALUE(PllSai2->PLLSAI2ClockOut));

  /* Check that PLLSAI2 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 80066a2:	4b6a      	ldr	r3, [pc, #424]	; (800684c <RCCEx_PLLSAI2_Config+0x1b8>)
 80066a4:	68db      	ldr	r3, [r3, #12]
 80066a6:	f003 0303 	and.w	r3, r3, #3
 80066aa:	2b00      	cmp	r3, #0
 80066ac:	d018      	beq.n	80066e0 <RCCEx_PLLSAI2_Config+0x4c>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai2->PLLSAI2Source)
 80066ae:	4b67      	ldr	r3, [pc, #412]	; (800684c <RCCEx_PLLSAI2_Config+0x1b8>)
 80066b0:	68db      	ldr	r3, [r3, #12]
 80066b2:	f003 0203 	and.w	r2, r3, #3
 80066b6:	687b      	ldr	r3, [r7, #4]
 80066b8:	681b      	ldr	r3, [r3, #0]
 80066ba:	429a      	cmp	r2, r3
 80066bc:	d10d      	bne.n	80066da <RCCEx_PLLSAI2_Config+0x46>
       ||
       (PllSai2->PLLSAI2Source == RCC_PLLSOURCE_NONE)
 80066be:	687b      	ldr	r3, [r7, #4]
 80066c0:	681b      	ldr	r3, [r3, #0]
       ||
 80066c2:	2b00      	cmp	r3, #0
 80066c4:	d009      	beq.n	80066da <RCCEx_PLLSAI2_Config+0x46>
#if !defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai2->PLLSAI2M)
 80066c6:	4b61      	ldr	r3, [pc, #388]	; (800684c <RCCEx_PLLSAI2_Config+0x1b8>)
 80066c8:	68db      	ldr	r3, [r3, #12]
 80066ca:	091b      	lsrs	r3, r3, #4
 80066cc:	f003 0307 	and.w	r3, r3, #7
 80066d0:	1c5a      	adds	r2, r3, #1
 80066d2:	687b      	ldr	r3, [r7, #4]
 80066d4:	685b      	ldr	r3, [r3, #4]
       ||
 80066d6:	429a      	cmp	r2, r3
 80066d8:	d047      	beq.n	800676a <RCCEx_PLLSAI2_Config+0xd6>
#endif
      )
    {
      status = HAL_ERROR;
 80066da:	2301      	movs	r3, #1
 80066dc:	73fb      	strb	r3, [r7, #15]
 80066de:	e044      	b.n	800676a <RCCEx_PLLSAI2_Config+0xd6>
    }
  }
  else
  {
    /* Check PLLSAI2 clock source availability */
    switch(PllSai2->PLLSAI2Source)
 80066e0:	687b      	ldr	r3, [r7, #4]
 80066e2:	681b      	ldr	r3, [r3, #0]
 80066e4:	2b03      	cmp	r3, #3
 80066e6:	d018      	beq.n	800671a <RCCEx_PLLSAI2_Config+0x86>
 80066e8:	2b03      	cmp	r3, #3
 80066ea:	d825      	bhi.n	8006738 <RCCEx_PLLSAI2_Config+0xa4>
 80066ec:	2b01      	cmp	r3, #1
 80066ee:	d002      	beq.n	80066f6 <RCCEx_PLLSAI2_Config+0x62>
 80066f0:	2b02      	cmp	r3, #2
 80066f2:	d009      	beq.n	8006708 <RCCEx_PLLSAI2_Config+0x74>
 80066f4:	e020      	b.n	8006738 <RCCEx_PLLSAI2_Config+0xa4>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 80066f6:	4b55      	ldr	r3, [pc, #340]	; (800684c <RCCEx_PLLSAI2_Config+0x1b8>)
 80066f8:	681b      	ldr	r3, [r3, #0]
 80066fa:	f003 0302 	and.w	r3, r3, #2
 80066fe:	2b00      	cmp	r3, #0
 8006700:	d11d      	bne.n	800673e <RCCEx_PLLSAI2_Config+0xaa>
      {
        status = HAL_ERROR;
 8006702:	2301      	movs	r3, #1
 8006704:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8006706:	e01a      	b.n	800673e <RCCEx_PLLSAI2_Config+0xaa>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 8006708:	4b50      	ldr	r3, [pc, #320]	; (800684c <RCCEx_PLLSAI2_Config+0x1b8>)
 800670a:	681b      	ldr	r3, [r3, #0]
 800670c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8006710:	2b00      	cmp	r3, #0
 8006712:	d116      	bne.n	8006742 <RCCEx_PLLSAI2_Config+0xae>
      {
        status = HAL_ERROR;
 8006714:	2301      	movs	r3, #1
 8006716:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8006718:	e013      	b.n	8006742 <RCCEx_PLLSAI2_Config+0xae>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 800671a:	4b4c      	ldr	r3, [pc, #304]	; (800684c <RCCEx_PLLSAI2_Config+0x1b8>)
 800671c:	681b      	ldr	r3, [r3, #0]
 800671e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8006722:	2b00      	cmp	r3, #0
 8006724:	d10f      	bne.n	8006746 <RCCEx_PLLSAI2_Config+0xb2>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 8006726:	4b49      	ldr	r3, [pc, #292]	; (800684c <RCCEx_PLLSAI2_Config+0x1b8>)
 8006728:	681b      	ldr	r3, [r3, #0]
 800672a:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800672e:	2b00      	cmp	r3, #0
 8006730:	d109      	bne.n	8006746 <RCCEx_PLLSAI2_Config+0xb2>
        {
          status = HAL_ERROR;
 8006732:	2301      	movs	r3, #1
 8006734:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 8006736:	e006      	b.n	8006746 <RCCEx_PLLSAI2_Config+0xb2>
    default:
      status = HAL_ERROR;
 8006738:	2301      	movs	r3, #1
 800673a:	73fb      	strb	r3, [r7, #15]
      break;
 800673c:	e004      	b.n	8006748 <RCCEx_PLLSAI2_Config+0xb4>
      break;
 800673e:	bf00      	nop
 8006740:	e002      	b.n	8006748 <RCCEx_PLLSAI2_Config+0xb4>
      break;
 8006742:	bf00      	nop
 8006744:	e000      	b.n	8006748 <RCCEx_PLLSAI2_Config+0xb4>
      break;
 8006746:	bf00      	nop
    }

    if(status == HAL_OK)
 8006748:	7bfb      	ldrb	r3, [r7, #15]
 800674a:	2b00      	cmp	r3, #0
 800674c:	d10d      	bne.n	800676a <RCCEx_PLLSAI2_Config+0xd6>
#if defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
      /* Set PLLSAI2 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai2->PLLSAI2Source);
#else
      /* Set PLLSAI2 clock source and divider M */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai2->PLLSAI2Source | (PllSai2->PLLSAI2M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 800674e:	4b3f      	ldr	r3, [pc, #252]	; (800684c <RCCEx_PLLSAI2_Config+0x1b8>)
 8006750:	68db      	ldr	r3, [r3, #12]
 8006752:	f023 0273 	bic.w	r2, r3, #115	; 0x73
 8006756:	687b      	ldr	r3, [r7, #4]
 8006758:	6819      	ldr	r1, [r3, #0]
 800675a:	687b      	ldr	r3, [r7, #4]
 800675c:	685b      	ldr	r3, [r3, #4]
 800675e:	3b01      	subs	r3, #1
 8006760:	011b      	lsls	r3, r3, #4
 8006762:	430b      	orrs	r3, r1
 8006764:	4939      	ldr	r1, [pc, #228]	; (800684c <RCCEx_PLLSAI2_Config+0x1b8>)
 8006766:	4313      	orrs	r3, r2
 8006768:	60cb      	str	r3, [r1, #12]
#endif
    }
  }

  if(status == HAL_OK)
 800676a:	7bfb      	ldrb	r3, [r7, #15]
 800676c:	2b00      	cmp	r3, #0
 800676e:	d167      	bne.n	8006840 <RCCEx_PLLSAI2_Config+0x1ac>
  {
    /* Disable the PLLSAI2 */
    __HAL_RCC_PLLSAI2_DISABLE();
 8006770:	4b36      	ldr	r3, [pc, #216]	; (800684c <RCCEx_PLLSAI2_Config+0x1b8>)
 8006772:	681b      	ldr	r3, [r3, #0]
 8006774:	4a35      	ldr	r2, [pc, #212]	; (800684c <RCCEx_PLLSAI2_Config+0x1b8>)
 8006776:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800677a:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800677c:	f7fc ffce 	bl	800371c <HAL_GetTick>
 8006780:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI2 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 8006782:	e009      	b.n	8006798 <RCCEx_PLLSAI2_Config+0x104>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 8006784:	f7fc ffca 	bl	800371c <HAL_GetTick>
 8006788:	4602      	mov	r2, r0
 800678a:	68bb      	ldr	r3, [r7, #8]
 800678c:	1ad3      	subs	r3, r2, r3
 800678e:	2b02      	cmp	r3, #2
 8006790:	d902      	bls.n	8006798 <RCCEx_PLLSAI2_Config+0x104>
      {
        status = HAL_TIMEOUT;
 8006792:	2303      	movs	r3, #3
 8006794:	73fb      	strb	r3, [r7, #15]
        break;
 8006796:	e005      	b.n	80067a4 <RCCEx_PLLSAI2_Config+0x110>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 8006798:	4b2c      	ldr	r3, [pc, #176]	; (800684c <RCCEx_PLLSAI2_Config+0x1b8>)
 800679a:	681b      	ldr	r3, [r3, #0]
 800679c:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 80067a0:	2b00      	cmp	r3, #0
 80067a2:	d1ef      	bne.n	8006784 <RCCEx_PLLSAI2_Config+0xf0>
      }
    }

    if(status == HAL_OK)
 80067a4:	7bfb      	ldrb	r3, [r7, #15]
 80067a6:	2b00      	cmp	r3, #0
 80067a8:	d14a      	bne.n	8006840 <RCCEx_PLLSAI2_Config+0x1ac>
    {
      if(Divider == DIVIDER_P_UPDATE)
 80067aa:	683b      	ldr	r3, [r7, #0]
 80067ac:	2b00      	cmp	r3, #0
 80067ae:	d111      	bne.n	80067d4 <RCCEx_PLLSAI2_Config+0x140>
        MODIFY_REG(RCC->PLLSAI2CFGR,
                   RCC_PLLSAI2CFGR_PLLSAI2N | RCC_PLLSAI2CFGR_PLLSAI2PDIV,
                   (PllSai2->PLLSAI2N << RCC_PLLSAI2CFGR_PLLSAI2N_Pos) |
                   (PllSai2->PLLSAI2P << RCC_PLLSAI2CFGR_PLLSAI2PDIV_Pos));
#else
        MODIFY_REG(RCC->PLLSAI2CFGR,
 80067b0:	4b26      	ldr	r3, [pc, #152]	; (800684c <RCCEx_PLLSAI2_Config+0x1b8>)
 80067b2:	695b      	ldr	r3, [r3, #20]
 80067b4:	f423 331f 	bic.w	r3, r3, #162816	; 0x27c00
 80067b8:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80067bc:	687a      	ldr	r2, [r7, #4]
 80067be:	6892      	ldr	r2, [r2, #8]
 80067c0:	0211      	lsls	r1, r2, #8
 80067c2:	687a      	ldr	r2, [r7, #4]
 80067c4:	68d2      	ldr	r2, [r2, #12]
 80067c6:	0912      	lsrs	r2, r2, #4
 80067c8:	0452      	lsls	r2, r2, #17
 80067ca:	430a      	orrs	r2, r1
 80067cc:	491f      	ldr	r1, [pc, #124]	; (800684c <RCCEx_PLLSAI2_Config+0x1b8>)
 80067ce:	4313      	orrs	r3, r2
 80067d0:	614b      	str	r3, [r1, #20]
 80067d2:	e011      	b.n	80067f8 <RCCEx_PLLSAI2_Config+0x164>
                   (PllSai2->PLLSAI2N << RCC_PLLSAI2CFGR_PLLSAI2N_Pos) |
                   (((PllSai2->PLLSAI2R >> 1U) - 1U) << RCC_PLLSAI2CFGR_PLLSAI2R_Pos) |
                   ((PllSai2->PLLSAI2M - 1U) << RCC_PLLSAI2CFGR_PLLSAI2M_Pos));
#else
        /* Configure the PLLSAI2 Division factor R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI2CFGR,
 80067d4:	4b1d      	ldr	r3, [pc, #116]	; (800684c <RCCEx_PLLSAI2_Config+0x1b8>)
 80067d6:	695b      	ldr	r3, [r3, #20]
 80067d8:	f023 63c0 	bic.w	r3, r3, #100663296	; 0x6000000
 80067dc:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 80067e0:	687a      	ldr	r2, [r7, #4]
 80067e2:	6892      	ldr	r2, [r2, #8]
 80067e4:	0211      	lsls	r1, r2, #8
 80067e6:	687a      	ldr	r2, [r7, #4]
 80067e8:	6912      	ldr	r2, [r2, #16]
 80067ea:	0852      	lsrs	r2, r2, #1
 80067ec:	3a01      	subs	r2, #1
 80067ee:	0652      	lsls	r2, r2, #25
 80067f0:	430a      	orrs	r2, r1
 80067f2:	4916      	ldr	r1, [pc, #88]	; (800684c <RCCEx_PLLSAI2_Config+0x1b8>)
 80067f4:	4313      	orrs	r3, r2
 80067f6:	614b      	str	r3, [r1, #20]
                   (((PllSai2->PLLSAI2R >> 1U) - 1U) << RCC_PLLSAI2CFGR_PLLSAI2R_Pos));
#endif /* RCC_PLLSAI2M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI2 again by setting PLLSAI2ON to 1*/
      __HAL_RCC_PLLSAI2_ENABLE();
 80067f8:	4b14      	ldr	r3, [pc, #80]	; (800684c <RCCEx_PLLSAI2_Config+0x1b8>)
 80067fa:	681b      	ldr	r3, [r3, #0]
 80067fc:	4a13      	ldr	r2, [pc, #76]	; (800684c <RCCEx_PLLSAI2_Config+0x1b8>)
 80067fe:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8006802:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8006804:	f7fc ff8a 	bl	800371c <HAL_GetTick>
 8006808:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI2 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 800680a:	e009      	b.n	8006820 <RCCEx_PLLSAI2_Config+0x18c>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 800680c:	f7fc ff86 	bl	800371c <HAL_GetTick>
 8006810:	4602      	mov	r2, r0
 8006812:	68bb      	ldr	r3, [r7, #8]
 8006814:	1ad3      	subs	r3, r2, r3
 8006816:	2b02      	cmp	r3, #2
 8006818:	d902      	bls.n	8006820 <RCCEx_PLLSAI2_Config+0x18c>
        {
          status = HAL_TIMEOUT;
 800681a:	2303      	movs	r3, #3
 800681c:	73fb      	strb	r3, [r7, #15]
          break;
 800681e:	e005      	b.n	800682c <RCCEx_PLLSAI2_Config+0x198>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 8006820:	4b0a      	ldr	r3, [pc, #40]	; (800684c <RCCEx_PLLSAI2_Config+0x1b8>)
 8006822:	681b      	ldr	r3, [r3, #0]
 8006824:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8006828:	2b00      	cmp	r3, #0
 800682a:	d0ef      	beq.n	800680c <RCCEx_PLLSAI2_Config+0x178>
        }
      }

      if(status == HAL_OK)
 800682c:	7bfb      	ldrb	r3, [r7, #15]
 800682e:	2b00      	cmp	r3, #0
 8006830:	d106      	bne.n	8006840 <RCCEx_PLLSAI2_Config+0x1ac>
      {
        /* Configure the PLLSAI2 Clock output(s) */
        __HAL_RCC_PLLSAI2CLKOUT_ENABLE(PllSai2->PLLSAI2ClockOut);
 8006832:	4b06      	ldr	r3, [pc, #24]	; (800684c <RCCEx_PLLSAI2_Config+0x1b8>)
 8006834:	695a      	ldr	r2, [r3, #20]
 8006836:	687b      	ldr	r3, [r7, #4]
 8006838:	695b      	ldr	r3, [r3, #20]
 800683a:	4904      	ldr	r1, [pc, #16]	; (800684c <RCCEx_PLLSAI2_Config+0x1b8>)
 800683c:	4313      	orrs	r3, r2
 800683e:	614b      	str	r3, [r1, #20]
      }
    }
  }

  return status;
 8006840:	7bfb      	ldrb	r3, [r7, #15]
}
 8006842:	4618      	mov	r0, r3
 8006844:	3710      	adds	r7, #16
 8006846:	46bd      	mov	sp, r7
 8006848:	bd80      	pop	{r7, pc}
 800684a:	bf00      	nop
 800684c:	40021000 	.word	0x40021000

08006850 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8006850:	b580      	push	{r7, lr}
 8006852:	b084      	sub	sp, #16
 8006854:	af00      	add	r7, sp, #0
 8006856:	6078      	str	r0, [r7, #4]
  uint32_t frxth;

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8006858:	687b      	ldr	r3, [r7, #4]
 800685a:	2b00      	cmp	r3, #0
 800685c:	d101      	bne.n	8006862 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 800685e:	2301      	movs	r3, #1
 8006860:	e095      	b.n	800698e <HAL_SPI_Init+0x13e>
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_NSSP(hspi->Init.NSSPMode));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 8006862:	687b      	ldr	r3, [r7, #4]
 8006864:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006866:	2b00      	cmp	r3, #0
 8006868:	d108      	bne.n	800687c <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 800686a:	687b      	ldr	r3, [r7, #4]
 800686c:	685b      	ldr	r3, [r3, #4]
 800686e:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8006872:	d009      	beq.n	8006888 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8006874:	687b      	ldr	r3, [r7, #4]
 8006876:	2200      	movs	r2, #0
 8006878:	61da      	str	r2, [r3, #28]
 800687a:	e005      	b.n	8006888 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 800687c:	687b      	ldr	r3, [r7, #4]
 800687e:	2200      	movs	r2, #0
 8006880:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 8006882:	687b      	ldr	r3, [r7, #4]
 8006884:	2200      	movs	r2, #0
 8006886:	615a      	str	r2, [r3, #20]
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
    assert_param(IS_SPI_CRC_LENGTH(hspi->Init.CRCLength));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8006888:	687b      	ldr	r3, [r7, #4]
 800688a:	2200      	movs	r2, #0
 800688c:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 800688e:	687b      	ldr	r3, [r7, #4]
 8006890:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 8006894:	b2db      	uxtb	r3, r3
 8006896:	2b00      	cmp	r3, #0
 8006898:	d106      	bne.n	80068a8 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 800689a:	687b      	ldr	r3, [r7, #4]
 800689c:	2200      	movs	r2, #0
 800689e:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 80068a2:	6878      	ldr	r0, [r7, #4]
 80068a4:	f7fc f83a 	bl	800291c <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 80068a8:	687b      	ldr	r3, [r7, #4]
 80068aa:	2202      	movs	r2, #2
 80068ac:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 80068b0:	687b      	ldr	r3, [r7, #4]
 80068b2:	681b      	ldr	r3, [r3, #0]
 80068b4:	681a      	ldr	r2, [r3, #0]
 80068b6:	687b      	ldr	r3, [r7, #4]
 80068b8:	681b      	ldr	r3, [r3, #0]
 80068ba:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80068be:	601a      	str	r2, [r3, #0]

  /* Align by default the rs fifo threshold on the data size */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 80068c0:	687b      	ldr	r3, [r7, #4]
 80068c2:	68db      	ldr	r3, [r3, #12]
 80068c4:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 80068c8:	d902      	bls.n	80068d0 <HAL_SPI_Init+0x80>
  {
    frxth = SPI_RXFIFO_THRESHOLD_HF;
 80068ca:	2300      	movs	r3, #0
 80068cc:	60fb      	str	r3, [r7, #12]
 80068ce:	e002      	b.n	80068d6 <HAL_SPI_Init+0x86>
  }
  else
  {
    frxth = SPI_RXFIFO_THRESHOLD_QF;
 80068d0:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80068d4:	60fb      	str	r3, [r7, #12]
  }

  /* CRC calculation is valid only for 16Bit and 8 Bit */
  if ((hspi->Init.DataSize != SPI_DATASIZE_16BIT) && (hspi->Init.DataSize != SPI_DATASIZE_8BIT))
 80068d6:	687b      	ldr	r3, [r7, #4]
 80068d8:	68db      	ldr	r3, [r3, #12]
 80068da:	f5b3 6f70 	cmp.w	r3, #3840	; 0xf00
 80068de:	d007      	beq.n	80068f0 <HAL_SPI_Init+0xa0>
 80068e0:	687b      	ldr	r3, [r7, #4]
 80068e2:	68db      	ldr	r3, [r3, #12]
 80068e4:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 80068e8:	d002      	beq.n	80068f0 <HAL_SPI_Init+0xa0>
  {
    /* CRC must be disabled */
    hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80068ea:	687b      	ldr	r3, [r7, #4]
 80068ec:	2200      	movs	r2, #0
 80068ee:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 80068f0:	687b      	ldr	r3, [r7, #4]
 80068f2:	685b      	ldr	r3, [r3, #4]
 80068f4:	f403 7282 	and.w	r2, r3, #260	; 0x104
 80068f8:	687b      	ldr	r3, [r7, #4]
 80068fa:	689b      	ldr	r3, [r3, #8]
 80068fc:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 8006900:	431a      	orrs	r2, r3
 8006902:	687b      	ldr	r3, [r7, #4]
 8006904:	691b      	ldr	r3, [r3, #16]
 8006906:	f003 0302 	and.w	r3, r3, #2
 800690a:	431a      	orrs	r2, r3
 800690c:	687b      	ldr	r3, [r7, #4]
 800690e:	695b      	ldr	r3, [r3, #20]
 8006910:	f003 0301 	and.w	r3, r3, #1
 8006914:	431a      	orrs	r2, r3
 8006916:	687b      	ldr	r3, [r7, #4]
 8006918:	699b      	ldr	r3, [r3, #24]
 800691a:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800691e:	431a      	orrs	r2, r3
 8006920:	687b      	ldr	r3, [r7, #4]
 8006922:	69db      	ldr	r3, [r3, #28]
 8006924:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8006928:	431a      	orrs	r2, r3
 800692a:	687b      	ldr	r3, [r7, #4]
 800692c:	6a1b      	ldr	r3, [r3, #32]
 800692e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006932:	ea42 0103 	orr.w	r1, r2, r3
 8006936:	687b      	ldr	r3, [r7, #4]
 8006938:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800693a:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 800693e:	687b      	ldr	r3, [r7, #4]
 8006940:	681b      	ldr	r3, [r3, #0]
 8006942:	430a      	orrs	r2, r1
 8006944:	601a      	str	r2, [r3, #0]
    }
  }
#endif /* USE_SPI_CRC */

  /* Configure : NSS management, TI Mode, NSS Pulse, Data size and Rx Fifo threshold */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) |
 8006946:	687b      	ldr	r3, [r7, #4]
 8006948:	699b      	ldr	r3, [r3, #24]
 800694a:	0c1b      	lsrs	r3, r3, #16
 800694c:	f003 0204 	and.w	r2, r3, #4
 8006950:	687b      	ldr	r3, [r7, #4]
 8006952:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006954:	f003 0310 	and.w	r3, r3, #16
 8006958:	431a      	orrs	r2, r3
 800695a:	687b      	ldr	r3, [r7, #4]
 800695c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800695e:	f003 0308 	and.w	r3, r3, #8
 8006962:	431a      	orrs	r2, r3
 8006964:	687b      	ldr	r3, [r7, #4]
 8006966:	68db      	ldr	r3, [r3, #12]
 8006968:	f403 6370 	and.w	r3, r3, #3840	; 0xf00
 800696c:	ea42 0103 	orr.w	r1, r2, r3
 8006970:	68fb      	ldr	r3, [r7, #12]
 8006972:	f403 5280 	and.w	r2, r3, #4096	; 0x1000
 8006976:	687b      	ldr	r3, [r7, #4]
 8006978:	681b      	ldr	r3, [r3, #0]
 800697a:	430a      	orrs	r2, r1
 800697c:	605a      	str	r2, [r3, #4]
#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 800697e:	687b      	ldr	r3, [r7, #4]
 8006980:	2200      	movs	r2, #0
 8006982:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->State     = HAL_SPI_STATE_READY;
 8006984:	687b      	ldr	r3, [r7, #4]
 8006986:	2201      	movs	r2, #1
 8006988:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

  return HAL_OK;
 800698c:	2300      	movs	r3, #0
}
 800698e:	4618      	mov	r0, r3
 8006990:	3710      	adds	r7, #16
 8006992:	46bd      	mov	sp, r7
 8006994:	bd80      	pop	{r7, pc}

08006996 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8006996:	b580      	push	{r7, lr}
 8006998:	b082      	sub	sp, #8
 800699a:	af00      	add	r7, sp, #0
 800699c:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 800699e:	687b      	ldr	r3, [r7, #4]
 80069a0:	2b00      	cmp	r3, #0
 80069a2:	d101      	bne.n	80069a8 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80069a4:	2301      	movs	r3, #1
 80069a6:	e040      	b.n	8006a2a <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 80069a8:	687b      	ldr	r3, [r7, #4]
 80069aa:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80069ac:	2b00      	cmp	r3, #0
 80069ae:	d106      	bne.n	80069be <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80069b0:	687b      	ldr	r3, [r7, #4]
 80069b2:	2200      	movs	r2, #0
 80069b4:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80069b8:	6878      	ldr	r0, [r7, #4]
 80069ba:	f7fb fff3 	bl	80029a4 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80069be:	687b      	ldr	r3, [r7, #4]
 80069c0:	2224      	movs	r2, #36	; 0x24
 80069c2:	679a      	str	r2, [r3, #120]	; 0x78

  __HAL_UART_DISABLE(huart);
 80069c4:	687b      	ldr	r3, [r7, #4]
 80069c6:	681b      	ldr	r3, [r3, #0]
 80069c8:	681a      	ldr	r2, [r3, #0]
 80069ca:	687b      	ldr	r3, [r7, #4]
 80069cc:	681b      	ldr	r3, [r3, #0]
 80069ce:	f022 0201 	bic.w	r2, r2, #1
 80069d2:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 80069d4:	6878      	ldr	r0, [r7, #4]
 80069d6:	f000 f8c1 	bl	8006b5c <UART_SetConfig>
 80069da:	4603      	mov	r3, r0
 80069dc:	2b01      	cmp	r3, #1
 80069de:	d101      	bne.n	80069e4 <HAL_UART_Init+0x4e>
  {
    return HAL_ERROR;
 80069e0:	2301      	movs	r3, #1
 80069e2:	e022      	b.n	8006a2a <HAL_UART_Init+0x94>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 80069e4:	687b      	ldr	r3, [r7, #4]
 80069e6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80069e8:	2b00      	cmp	r3, #0
 80069ea:	d002      	beq.n	80069f2 <HAL_UART_Init+0x5c>
  {
    UART_AdvFeatureConfig(huart);
 80069ec:	6878      	ldr	r0, [r7, #4]
 80069ee:	f000 fb6d 	bl	80070cc <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80069f2:	687b      	ldr	r3, [r7, #4]
 80069f4:	681b      	ldr	r3, [r3, #0]
 80069f6:	685a      	ldr	r2, [r3, #4]
 80069f8:	687b      	ldr	r3, [r7, #4]
 80069fa:	681b      	ldr	r3, [r3, #0]
 80069fc:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8006a00:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8006a02:	687b      	ldr	r3, [r7, #4]
 8006a04:	681b      	ldr	r3, [r3, #0]
 8006a06:	689a      	ldr	r2, [r3, #8]
 8006a08:	687b      	ldr	r3, [r7, #4]
 8006a0a:	681b      	ldr	r3, [r3, #0]
 8006a0c:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8006a10:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8006a12:	687b      	ldr	r3, [r7, #4]
 8006a14:	681b      	ldr	r3, [r3, #0]
 8006a16:	681a      	ldr	r2, [r3, #0]
 8006a18:	687b      	ldr	r3, [r7, #4]
 8006a1a:	681b      	ldr	r3, [r3, #0]
 8006a1c:	f042 0201 	orr.w	r2, r2, #1
 8006a20:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8006a22:	6878      	ldr	r0, [r7, #4]
 8006a24:	f000 fbf4 	bl	8007210 <UART_CheckIdleState>
 8006a28:	4603      	mov	r3, r0
}
 8006a2a:	4618      	mov	r0, r3
 8006a2c:	3708      	adds	r7, #8
 8006a2e:	46bd      	mov	sp, r7
 8006a30:	bd80      	pop	{r7, pc}

08006a32 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8006a32:	b580      	push	{r7, lr}
 8006a34:	b08a      	sub	sp, #40	; 0x28
 8006a36:	af02      	add	r7, sp, #8
 8006a38:	60f8      	str	r0, [r7, #12]
 8006a3a:	60b9      	str	r1, [r7, #8]
 8006a3c:	603b      	str	r3, [r7, #0]
 8006a3e:	4613      	mov	r3, r2
 8006a40:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8006a42:	68fb      	ldr	r3, [r7, #12]
 8006a44:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8006a46:	2b20      	cmp	r3, #32
 8006a48:	f040 8082 	bne.w	8006b50 <HAL_UART_Transmit+0x11e>
  {
    if ((pData == NULL) || (Size == 0U))
 8006a4c:	68bb      	ldr	r3, [r7, #8]
 8006a4e:	2b00      	cmp	r3, #0
 8006a50:	d002      	beq.n	8006a58 <HAL_UART_Transmit+0x26>
 8006a52:	88fb      	ldrh	r3, [r7, #6]
 8006a54:	2b00      	cmp	r3, #0
 8006a56:	d101      	bne.n	8006a5c <HAL_UART_Transmit+0x2a>
    {
      return  HAL_ERROR;
 8006a58:	2301      	movs	r3, #1
 8006a5a:	e07a      	b.n	8006b52 <HAL_UART_Transmit+0x120>
    }

    __HAL_LOCK(huart);
 8006a5c:	68fb      	ldr	r3, [r7, #12]
 8006a5e:	f893 3074 	ldrb.w	r3, [r3, #116]	; 0x74
 8006a62:	2b01      	cmp	r3, #1
 8006a64:	d101      	bne.n	8006a6a <HAL_UART_Transmit+0x38>
 8006a66:	2302      	movs	r3, #2
 8006a68:	e073      	b.n	8006b52 <HAL_UART_Transmit+0x120>
 8006a6a:	68fb      	ldr	r3, [r7, #12]
 8006a6c:	2201      	movs	r2, #1
 8006a6e:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8006a72:	68fb      	ldr	r3, [r7, #12]
 8006a74:	2200      	movs	r2, #0
 8006a76:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8006a7a:	68fb      	ldr	r3, [r7, #12]
 8006a7c:	2221      	movs	r2, #33	; 0x21
 8006a7e:	679a      	str	r2, [r3, #120]	; 0x78

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8006a80:	f7fc fe4c 	bl	800371c <HAL_GetTick>
 8006a84:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 8006a86:	68fb      	ldr	r3, [r7, #12]
 8006a88:	88fa      	ldrh	r2, [r7, #6]
 8006a8a:	f8a3 2050 	strh.w	r2, [r3, #80]	; 0x50
    huart->TxXferCount = Size;
 8006a8e:	68fb      	ldr	r3, [r7, #12]
 8006a90:	88fa      	ldrh	r2, [r7, #6]
 8006a92:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8006a96:	68fb      	ldr	r3, [r7, #12]
 8006a98:	689b      	ldr	r3, [r3, #8]
 8006a9a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8006a9e:	d108      	bne.n	8006ab2 <HAL_UART_Transmit+0x80>
 8006aa0:	68fb      	ldr	r3, [r7, #12]
 8006aa2:	691b      	ldr	r3, [r3, #16]
 8006aa4:	2b00      	cmp	r3, #0
 8006aa6:	d104      	bne.n	8006ab2 <HAL_UART_Transmit+0x80>
    {
      pdata8bits  = NULL;
 8006aa8:	2300      	movs	r3, #0
 8006aaa:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8006aac:	68bb      	ldr	r3, [r7, #8]
 8006aae:	61bb      	str	r3, [r7, #24]
 8006ab0:	e003      	b.n	8006aba <HAL_UART_Transmit+0x88>
    }
    else
    {
      pdata8bits  = pData;
 8006ab2:	68bb      	ldr	r3, [r7, #8]
 8006ab4:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8006ab6:	2300      	movs	r3, #0
 8006ab8:	61bb      	str	r3, [r7, #24]
    }

    __HAL_UNLOCK(huart);
 8006aba:	68fb      	ldr	r3, [r7, #12]
 8006abc:	2200      	movs	r2, #0
 8006abe:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    while (huart->TxXferCount > 0U)
 8006ac2:	e02d      	b.n	8006b20 <HAL_UART_Transmit+0xee>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8006ac4:	683b      	ldr	r3, [r7, #0]
 8006ac6:	9300      	str	r3, [sp, #0]
 8006ac8:	697b      	ldr	r3, [r7, #20]
 8006aca:	2200      	movs	r2, #0
 8006acc:	2180      	movs	r1, #128	; 0x80
 8006ace:	68f8      	ldr	r0, [r7, #12]
 8006ad0:	f000 fbe7 	bl	80072a2 <UART_WaitOnFlagUntilTimeout>
 8006ad4:	4603      	mov	r3, r0
 8006ad6:	2b00      	cmp	r3, #0
 8006ad8:	d001      	beq.n	8006ade <HAL_UART_Transmit+0xac>
      {
        return HAL_TIMEOUT;
 8006ada:	2303      	movs	r3, #3
 8006adc:	e039      	b.n	8006b52 <HAL_UART_Transmit+0x120>
      }
      if (pdata8bits == NULL)
 8006ade:	69fb      	ldr	r3, [r7, #28]
 8006ae0:	2b00      	cmp	r3, #0
 8006ae2:	d10b      	bne.n	8006afc <HAL_UART_Transmit+0xca>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 8006ae4:	69bb      	ldr	r3, [r7, #24]
 8006ae6:	881a      	ldrh	r2, [r3, #0]
 8006ae8:	68fb      	ldr	r3, [r7, #12]
 8006aea:	681b      	ldr	r3, [r3, #0]
 8006aec:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8006af0:	b292      	uxth	r2, r2
 8006af2:	851a      	strh	r2, [r3, #40]	; 0x28
        pdata16bits++;
 8006af4:	69bb      	ldr	r3, [r7, #24]
 8006af6:	3302      	adds	r3, #2
 8006af8:	61bb      	str	r3, [r7, #24]
 8006afa:	e008      	b.n	8006b0e <HAL_UART_Transmit+0xdc>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 8006afc:	69fb      	ldr	r3, [r7, #28]
 8006afe:	781a      	ldrb	r2, [r3, #0]
 8006b00:	68fb      	ldr	r3, [r7, #12]
 8006b02:	681b      	ldr	r3, [r3, #0]
 8006b04:	b292      	uxth	r2, r2
 8006b06:	851a      	strh	r2, [r3, #40]	; 0x28
        pdata8bits++;
 8006b08:	69fb      	ldr	r3, [r7, #28]
 8006b0a:	3301      	adds	r3, #1
 8006b0c:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8006b0e:	68fb      	ldr	r3, [r7, #12]
 8006b10:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 8006b14:	b29b      	uxth	r3, r3
 8006b16:	3b01      	subs	r3, #1
 8006b18:	b29a      	uxth	r2, r3
 8006b1a:	68fb      	ldr	r3, [r7, #12]
 8006b1c:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
    while (huart->TxXferCount > 0U)
 8006b20:	68fb      	ldr	r3, [r7, #12]
 8006b22:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 8006b26:	b29b      	uxth	r3, r3
 8006b28:	2b00      	cmp	r3, #0
 8006b2a:	d1cb      	bne.n	8006ac4 <HAL_UART_Transmit+0x92>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8006b2c:	683b      	ldr	r3, [r7, #0]
 8006b2e:	9300      	str	r3, [sp, #0]
 8006b30:	697b      	ldr	r3, [r7, #20]
 8006b32:	2200      	movs	r2, #0
 8006b34:	2140      	movs	r1, #64	; 0x40
 8006b36:	68f8      	ldr	r0, [r7, #12]
 8006b38:	f000 fbb3 	bl	80072a2 <UART_WaitOnFlagUntilTimeout>
 8006b3c:	4603      	mov	r3, r0
 8006b3e:	2b00      	cmp	r3, #0
 8006b40:	d001      	beq.n	8006b46 <HAL_UART_Transmit+0x114>
    {
      return HAL_TIMEOUT;
 8006b42:	2303      	movs	r3, #3
 8006b44:	e005      	b.n	8006b52 <HAL_UART_Transmit+0x120>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8006b46:	68fb      	ldr	r3, [r7, #12]
 8006b48:	2220      	movs	r2, #32
 8006b4a:	679a      	str	r2, [r3, #120]	; 0x78

    return HAL_OK;
 8006b4c:	2300      	movs	r3, #0
 8006b4e:	e000      	b.n	8006b52 <HAL_UART_Transmit+0x120>
  }
  else
  {
    return HAL_BUSY;
 8006b50:	2302      	movs	r3, #2
  }
}
 8006b52:	4618      	mov	r0, r3
 8006b54:	3720      	adds	r7, #32
 8006b56:	46bd      	mov	sp, r7
 8006b58:	bd80      	pop	{r7, pc}
	...

08006b5c <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8006b5c:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8006b60:	b08a      	sub	sp, #40	; 0x28
 8006b62:	af00      	add	r7, sp, #0
 8006b64:	60f8      	str	r0, [r7, #12]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8006b66:	2300      	movs	r3, #0
 8006b68:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8006b6c:	68fb      	ldr	r3, [r7, #12]
 8006b6e:	689a      	ldr	r2, [r3, #8]
 8006b70:	68fb      	ldr	r3, [r7, #12]
 8006b72:	691b      	ldr	r3, [r3, #16]
 8006b74:	431a      	orrs	r2, r3
 8006b76:	68fb      	ldr	r3, [r7, #12]
 8006b78:	695b      	ldr	r3, [r3, #20]
 8006b7a:	431a      	orrs	r2, r3
 8006b7c:	68fb      	ldr	r3, [r7, #12]
 8006b7e:	69db      	ldr	r3, [r3, #28]
 8006b80:	4313      	orrs	r3, r2
 8006b82:	627b      	str	r3, [r7, #36]	; 0x24
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8006b84:	68fb      	ldr	r3, [r7, #12]
 8006b86:	681b      	ldr	r3, [r3, #0]
 8006b88:	681a      	ldr	r2, [r3, #0]
 8006b8a:	4ba4      	ldr	r3, [pc, #656]	; (8006e1c <UART_SetConfig+0x2c0>)
 8006b8c:	4013      	ands	r3, r2
 8006b8e:	68fa      	ldr	r2, [r7, #12]
 8006b90:	6812      	ldr	r2, [r2, #0]
 8006b92:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8006b94:	430b      	orrs	r3, r1
 8006b96:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8006b98:	68fb      	ldr	r3, [r7, #12]
 8006b9a:	681b      	ldr	r3, [r3, #0]
 8006b9c:	685b      	ldr	r3, [r3, #4]
 8006b9e:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8006ba2:	68fb      	ldr	r3, [r7, #12]
 8006ba4:	68da      	ldr	r2, [r3, #12]
 8006ba6:	68fb      	ldr	r3, [r7, #12]
 8006ba8:	681b      	ldr	r3, [r3, #0]
 8006baa:	430a      	orrs	r2, r1
 8006bac:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8006bae:	68fb      	ldr	r3, [r7, #12]
 8006bb0:	699b      	ldr	r3, [r3, #24]
 8006bb2:	627b      	str	r3, [r7, #36]	; 0x24

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8006bb4:	68fb      	ldr	r3, [r7, #12]
 8006bb6:	681b      	ldr	r3, [r3, #0]
 8006bb8:	4a99      	ldr	r2, [pc, #612]	; (8006e20 <UART_SetConfig+0x2c4>)
 8006bba:	4293      	cmp	r3, r2
 8006bbc:	d004      	beq.n	8006bc8 <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 8006bbe:	68fb      	ldr	r3, [r7, #12]
 8006bc0:	6a1b      	ldr	r3, [r3, #32]
 8006bc2:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8006bc4:	4313      	orrs	r3, r2
 8006bc6:	627b      	str	r3, [r7, #36]	; 0x24
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8006bc8:	68fb      	ldr	r3, [r7, #12]
 8006bca:	681b      	ldr	r3, [r3, #0]
 8006bcc:	689b      	ldr	r3, [r3, #8]
 8006bce:	f423 6130 	bic.w	r1, r3, #2816	; 0xb00
 8006bd2:	68fb      	ldr	r3, [r7, #12]
 8006bd4:	681b      	ldr	r3, [r3, #0]
 8006bd6:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8006bd8:	430a      	orrs	r2, r1
 8006bda:	609a      	str	r2, [r3, #8]
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
#endif /* USART_PRESC_PRESCALER */

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8006bdc:	68fb      	ldr	r3, [r7, #12]
 8006bde:	681b      	ldr	r3, [r3, #0]
 8006be0:	4a90      	ldr	r2, [pc, #576]	; (8006e24 <UART_SetConfig+0x2c8>)
 8006be2:	4293      	cmp	r3, r2
 8006be4:	d126      	bne.n	8006c34 <UART_SetConfig+0xd8>
 8006be6:	4b90      	ldr	r3, [pc, #576]	; (8006e28 <UART_SetConfig+0x2cc>)
 8006be8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006bec:	f003 0303 	and.w	r3, r3, #3
 8006bf0:	2b03      	cmp	r3, #3
 8006bf2:	d81b      	bhi.n	8006c2c <UART_SetConfig+0xd0>
 8006bf4:	a201      	add	r2, pc, #4	; (adr r2, 8006bfc <UART_SetConfig+0xa0>)
 8006bf6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006bfa:	bf00      	nop
 8006bfc:	08006c0d 	.word	0x08006c0d
 8006c00:	08006c1d 	.word	0x08006c1d
 8006c04:	08006c15 	.word	0x08006c15
 8006c08:	08006c25 	.word	0x08006c25
 8006c0c:	2301      	movs	r3, #1
 8006c0e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8006c12:	e116      	b.n	8006e42 <UART_SetConfig+0x2e6>
 8006c14:	2302      	movs	r3, #2
 8006c16:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8006c1a:	e112      	b.n	8006e42 <UART_SetConfig+0x2e6>
 8006c1c:	2304      	movs	r3, #4
 8006c1e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8006c22:	e10e      	b.n	8006e42 <UART_SetConfig+0x2e6>
 8006c24:	2308      	movs	r3, #8
 8006c26:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8006c2a:	e10a      	b.n	8006e42 <UART_SetConfig+0x2e6>
 8006c2c:	2310      	movs	r3, #16
 8006c2e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8006c32:	e106      	b.n	8006e42 <UART_SetConfig+0x2e6>
 8006c34:	68fb      	ldr	r3, [r7, #12]
 8006c36:	681b      	ldr	r3, [r3, #0]
 8006c38:	4a7c      	ldr	r2, [pc, #496]	; (8006e2c <UART_SetConfig+0x2d0>)
 8006c3a:	4293      	cmp	r3, r2
 8006c3c:	d138      	bne.n	8006cb0 <UART_SetConfig+0x154>
 8006c3e:	4b7a      	ldr	r3, [pc, #488]	; (8006e28 <UART_SetConfig+0x2cc>)
 8006c40:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006c44:	f003 030c 	and.w	r3, r3, #12
 8006c48:	2b0c      	cmp	r3, #12
 8006c4a:	d82d      	bhi.n	8006ca8 <UART_SetConfig+0x14c>
 8006c4c:	a201      	add	r2, pc, #4	; (adr r2, 8006c54 <UART_SetConfig+0xf8>)
 8006c4e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006c52:	bf00      	nop
 8006c54:	08006c89 	.word	0x08006c89
 8006c58:	08006ca9 	.word	0x08006ca9
 8006c5c:	08006ca9 	.word	0x08006ca9
 8006c60:	08006ca9 	.word	0x08006ca9
 8006c64:	08006c99 	.word	0x08006c99
 8006c68:	08006ca9 	.word	0x08006ca9
 8006c6c:	08006ca9 	.word	0x08006ca9
 8006c70:	08006ca9 	.word	0x08006ca9
 8006c74:	08006c91 	.word	0x08006c91
 8006c78:	08006ca9 	.word	0x08006ca9
 8006c7c:	08006ca9 	.word	0x08006ca9
 8006c80:	08006ca9 	.word	0x08006ca9
 8006c84:	08006ca1 	.word	0x08006ca1
 8006c88:	2300      	movs	r3, #0
 8006c8a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8006c8e:	e0d8      	b.n	8006e42 <UART_SetConfig+0x2e6>
 8006c90:	2302      	movs	r3, #2
 8006c92:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8006c96:	e0d4      	b.n	8006e42 <UART_SetConfig+0x2e6>
 8006c98:	2304      	movs	r3, #4
 8006c9a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8006c9e:	e0d0      	b.n	8006e42 <UART_SetConfig+0x2e6>
 8006ca0:	2308      	movs	r3, #8
 8006ca2:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8006ca6:	e0cc      	b.n	8006e42 <UART_SetConfig+0x2e6>
 8006ca8:	2310      	movs	r3, #16
 8006caa:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8006cae:	e0c8      	b.n	8006e42 <UART_SetConfig+0x2e6>
 8006cb0:	68fb      	ldr	r3, [r7, #12]
 8006cb2:	681b      	ldr	r3, [r3, #0]
 8006cb4:	4a5e      	ldr	r2, [pc, #376]	; (8006e30 <UART_SetConfig+0x2d4>)
 8006cb6:	4293      	cmp	r3, r2
 8006cb8:	d125      	bne.n	8006d06 <UART_SetConfig+0x1aa>
 8006cba:	4b5b      	ldr	r3, [pc, #364]	; (8006e28 <UART_SetConfig+0x2cc>)
 8006cbc:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006cc0:	f003 0330 	and.w	r3, r3, #48	; 0x30
 8006cc4:	2b30      	cmp	r3, #48	; 0x30
 8006cc6:	d016      	beq.n	8006cf6 <UART_SetConfig+0x19a>
 8006cc8:	2b30      	cmp	r3, #48	; 0x30
 8006cca:	d818      	bhi.n	8006cfe <UART_SetConfig+0x1a2>
 8006ccc:	2b20      	cmp	r3, #32
 8006cce:	d00a      	beq.n	8006ce6 <UART_SetConfig+0x18a>
 8006cd0:	2b20      	cmp	r3, #32
 8006cd2:	d814      	bhi.n	8006cfe <UART_SetConfig+0x1a2>
 8006cd4:	2b00      	cmp	r3, #0
 8006cd6:	d002      	beq.n	8006cde <UART_SetConfig+0x182>
 8006cd8:	2b10      	cmp	r3, #16
 8006cda:	d008      	beq.n	8006cee <UART_SetConfig+0x192>
 8006cdc:	e00f      	b.n	8006cfe <UART_SetConfig+0x1a2>
 8006cde:	2300      	movs	r3, #0
 8006ce0:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8006ce4:	e0ad      	b.n	8006e42 <UART_SetConfig+0x2e6>
 8006ce6:	2302      	movs	r3, #2
 8006ce8:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8006cec:	e0a9      	b.n	8006e42 <UART_SetConfig+0x2e6>
 8006cee:	2304      	movs	r3, #4
 8006cf0:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8006cf4:	e0a5      	b.n	8006e42 <UART_SetConfig+0x2e6>
 8006cf6:	2308      	movs	r3, #8
 8006cf8:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8006cfc:	e0a1      	b.n	8006e42 <UART_SetConfig+0x2e6>
 8006cfe:	2310      	movs	r3, #16
 8006d00:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8006d04:	e09d      	b.n	8006e42 <UART_SetConfig+0x2e6>
 8006d06:	68fb      	ldr	r3, [r7, #12]
 8006d08:	681b      	ldr	r3, [r3, #0]
 8006d0a:	4a4a      	ldr	r2, [pc, #296]	; (8006e34 <UART_SetConfig+0x2d8>)
 8006d0c:	4293      	cmp	r3, r2
 8006d0e:	d125      	bne.n	8006d5c <UART_SetConfig+0x200>
 8006d10:	4b45      	ldr	r3, [pc, #276]	; (8006e28 <UART_SetConfig+0x2cc>)
 8006d12:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006d16:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 8006d1a:	2bc0      	cmp	r3, #192	; 0xc0
 8006d1c:	d016      	beq.n	8006d4c <UART_SetConfig+0x1f0>
 8006d1e:	2bc0      	cmp	r3, #192	; 0xc0
 8006d20:	d818      	bhi.n	8006d54 <UART_SetConfig+0x1f8>
 8006d22:	2b80      	cmp	r3, #128	; 0x80
 8006d24:	d00a      	beq.n	8006d3c <UART_SetConfig+0x1e0>
 8006d26:	2b80      	cmp	r3, #128	; 0x80
 8006d28:	d814      	bhi.n	8006d54 <UART_SetConfig+0x1f8>
 8006d2a:	2b00      	cmp	r3, #0
 8006d2c:	d002      	beq.n	8006d34 <UART_SetConfig+0x1d8>
 8006d2e:	2b40      	cmp	r3, #64	; 0x40
 8006d30:	d008      	beq.n	8006d44 <UART_SetConfig+0x1e8>
 8006d32:	e00f      	b.n	8006d54 <UART_SetConfig+0x1f8>
 8006d34:	2300      	movs	r3, #0
 8006d36:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8006d3a:	e082      	b.n	8006e42 <UART_SetConfig+0x2e6>
 8006d3c:	2302      	movs	r3, #2
 8006d3e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8006d42:	e07e      	b.n	8006e42 <UART_SetConfig+0x2e6>
 8006d44:	2304      	movs	r3, #4
 8006d46:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8006d4a:	e07a      	b.n	8006e42 <UART_SetConfig+0x2e6>
 8006d4c:	2308      	movs	r3, #8
 8006d4e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8006d52:	e076      	b.n	8006e42 <UART_SetConfig+0x2e6>
 8006d54:	2310      	movs	r3, #16
 8006d56:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8006d5a:	e072      	b.n	8006e42 <UART_SetConfig+0x2e6>
 8006d5c:	68fb      	ldr	r3, [r7, #12]
 8006d5e:	681b      	ldr	r3, [r3, #0]
 8006d60:	4a35      	ldr	r2, [pc, #212]	; (8006e38 <UART_SetConfig+0x2dc>)
 8006d62:	4293      	cmp	r3, r2
 8006d64:	d12a      	bne.n	8006dbc <UART_SetConfig+0x260>
 8006d66:	4b30      	ldr	r3, [pc, #192]	; (8006e28 <UART_SetConfig+0x2cc>)
 8006d68:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006d6c:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8006d70:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8006d74:	d01a      	beq.n	8006dac <UART_SetConfig+0x250>
 8006d76:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8006d7a:	d81b      	bhi.n	8006db4 <UART_SetConfig+0x258>
 8006d7c:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8006d80:	d00c      	beq.n	8006d9c <UART_SetConfig+0x240>
 8006d82:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8006d86:	d815      	bhi.n	8006db4 <UART_SetConfig+0x258>
 8006d88:	2b00      	cmp	r3, #0
 8006d8a:	d003      	beq.n	8006d94 <UART_SetConfig+0x238>
 8006d8c:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8006d90:	d008      	beq.n	8006da4 <UART_SetConfig+0x248>
 8006d92:	e00f      	b.n	8006db4 <UART_SetConfig+0x258>
 8006d94:	2300      	movs	r3, #0
 8006d96:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8006d9a:	e052      	b.n	8006e42 <UART_SetConfig+0x2e6>
 8006d9c:	2302      	movs	r3, #2
 8006d9e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8006da2:	e04e      	b.n	8006e42 <UART_SetConfig+0x2e6>
 8006da4:	2304      	movs	r3, #4
 8006da6:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8006daa:	e04a      	b.n	8006e42 <UART_SetConfig+0x2e6>
 8006dac:	2308      	movs	r3, #8
 8006dae:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8006db2:	e046      	b.n	8006e42 <UART_SetConfig+0x2e6>
 8006db4:	2310      	movs	r3, #16
 8006db6:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8006dba:	e042      	b.n	8006e42 <UART_SetConfig+0x2e6>
 8006dbc:	68fb      	ldr	r3, [r7, #12]
 8006dbe:	681b      	ldr	r3, [r3, #0]
 8006dc0:	4a17      	ldr	r2, [pc, #92]	; (8006e20 <UART_SetConfig+0x2c4>)
 8006dc2:	4293      	cmp	r3, r2
 8006dc4:	d13a      	bne.n	8006e3c <UART_SetConfig+0x2e0>
 8006dc6:	4b18      	ldr	r3, [pc, #96]	; (8006e28 <UART_SetConfig+0x2cc>)
 8006dc8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006dcc:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 8006dd0:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8006dd4:	d01a      	beq.n	8006e0c <UART_SetConfig+0x2b0>
 8006dd6:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8006dda:	d81b      	bhi.n	8006e14 <UART_SetConfig+0x2b8>
 8006ddc:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8006de0:	d00c      	beq.n	8006dfc <UART_SetConfig+0x2a0>
 8006de2:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8006de6:	d815      	bhi.n	8006e14 <UART_SetConfig+0x2b8>
 8006de8:	2b00      	cmp	r3, #0
 8006dea:	d003      	beq.n	8006df4 <UART_SetConfig+0x298>
 8006dec:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8006df0:	d008      	beq.n	8006e04 <UART_SetConfig+0x2a8>
 8006df2:	e00f      	b.n	8006e14 <UART_SetConfig+0x2b8>
 8006df4:	2300      	movs	r3, #0
 8006df6:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8006dfa:	e022      	b.n	8006e42 <UART_SetConfig+0x2e6>
 8006dfc:	2302      	movs	r3, #2
 8006dfe:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8006e02:	e01e      	b.n	8006e42 <UART_SetConfig+0x2e6>
 8006e04:	2304      	movs	r3, #4
 8006e06:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8006e0a:	e01a      	b.n	8006e42 <UART_SetConfig+0x2e6>
 8006e0c:	2308      	movs	r3, #8
 8006e0e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8006e12:	e016      	b.n	8006e42 <UART_SetConfig+0x2e6>
 8006e14:	2310      	movs	r3, #16
 8006e16:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8006e1a:	e012      	b.n	8006e42 <UART_SetConfig+0x2e6>
 8006e1c:	efff69f3 	.word	0xefff69f3
 8006e20:	40008000 	.word	0x40008000
 8006e24:	40013800 	.word	0x40013800
 8006e28:	40021000 	.word	0x40021000
 8006e2c:	40004400 	.word	0x40004400
 8006e30:	40004800 	.word	0x40004800
 8006e34:	40004c00 	.word	0x40004c00
 8006e38:	40005000 	.word	0x40005000
 8006e3c:	2310      	movs	r3, #16
 8006e3e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 8006e42:	68fb      	ldr	r3, [r7, #12]
 8006e44:	681b      	ldr	r3, [r3, #0]
 8006e46:	4a9f      	ldr	r2, [pc, #636]	; (80070c4 <UART_SetConfig+0x568>)
 8006e48:	4293      	cmp	r3, r2
 8006e4a:	d17a      	bne.n	8006f42 <UART_SetConfig+0x3e6>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 8006e4c:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8006e50:	2b08      	cmp	r3, #8
 8006e52:	d824      	bhi.n	8006e9e <UART_SetConfig+0x342>
 8006e54:	a201      	add	r2, pc, #4	; (adr r2, 8006e5c <UART_SetConfig+0x300>)
 8006e56:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006e5a:	bf00      	nop
 8006e5c:	08006e81 	.word	0x08006e81
 8006e60:	08006e9f 	.word	0x08006e9f
 8006e64:	08006e89 	.word	0x08006e89
 8006e68:	08006e9f 	.word	0x08006e9f
 8006e6c:	08006e8f 	.word	0x08006e8f
 8006e70:	08006e9f 	.word	0x08006e9f
 8006e74:	08006e9f 	.word	0x08006e9f
 8006e78:	08006e9f 	.word	0x08006e9f
 8006e7c:	08006e97 	.word	0x08006e97
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8006e80:	f7fe ff8e 	bl	8005da0 <HAL_RCC_GetPCLK1Freq>
 8006e84:	61f8      	str	r0, [r7, #28]
        break;
 8006e86:	e010      	b.n	8006eaa <UART_SetConfig+0x34e>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8006e88:	4b8f      	ldr	r3, [pc, #572]	; (80070c8 <UART_SetConfig+0x56c>)
 8006e8a:	61fb      	str	r3, [r7, #28]
        break;
 8006e8c:	e00d      	b.n	8006eaa <UART_SetConfig+0x34e>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8006e8e:	f7fe feef 	bl	8005c70 <HAL_RCC_GetSysClockFreq>
 8006e92:	61f8      	str	r0, [r7, #28]
        break;
 8006e94:	e009      	b.n	8006eaa <UART_SetConfig+0x34e>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8006e96:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8006e9a:	61fb      	str	r3, [r7, #28]
        break;
 8006e9c:	e005      	b.n	8006eaa <UART_SetConfig+0x34e>
      default:
        pclk = 0U;
 8006e9e:	2300      	movs	r3, #0
 8006ea0:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 8006ea2:	2301      	movs	r3, #1
 8006ea4:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
        break;
 8006ea8:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 8006eaa:	69fb      	ldr	r3, [r7, #28]
 8006eac:	2b00      	cmp	r3, #0
 8006eae:	f000 80fb 	beq.w	80070a8 <UART_SetConfig+0x54c>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
#else
      /* No Prescaler applicable */
      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 8006eb2:	68fb      	ldr	r3, [r7, #12]
 8006eb4:	685a      	ldr	r2, [r3, #4]
 8006eb6:	4613      	mov	r3, r2
 8006eb8:	005b      	lsls	r3, r3, #1
 8006eba:	4413      	add	r3, r2
 8006ebc:	69fa      	ldr	r2, [r7, #28]
 8006ebe:	429a      	cmp	r2, r3
 8006ec0:	d305      	bcc.n	8006ece <UART_SetConfig+0x372>
          (pclk > (4096U * huart->Init.BaudRate)))
 8006ec2:	68fb      	ldr	r3, [r7, #12]
 8006ec4:	685b      	ldr	r3, [r3, #4]
 8006ec6:	031b      	lsls	r3, r3, #12
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 8006ec8:	69fa      	ldr	r2, [r7, #28]
 8006eca:	429a      	cmp	r2, r3
 8006ecc:	d903      	bls.n	8006ed6 <UART_SetConfig+0x37a>
      {
        ret = HAL_ERROR;
 8006ece:	2301      	movs	r3, #1
 8006ed0:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
 8006ed4:	e0e8      	b.n	80070a8 <UART_SetConfig+0x54c>
      }
      else
      {
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate));
 8006ed6:	69fb      	ldr	r3, [r7, #28]
 8006ed8:	2200      	movs	r2, #0
 8006eda:	461c      	mov	r4, r3
 8006edc:	4615      	mov	r5, r2
 8006ede:	f04f 0200 	mov.w	r2, #0
 8006ee2:	f04f 0300 	mov.w	r3, #0
 8006ee6:	022b      	lsls	r3, r5, #8
 8006ee8:	ea43 6314 	orr.w	r3, r3, r4, lsr #24
 8006eec:	0222      	lsls	r2, r4, #8
 8006eee:	68f9      	ldr	r1, [r7, #12]
 8006ef0:	6849      	ldr	r1, [r1, #4]
 8006ef2:	0849      	lsrs	r1, r1, #1
 8006ef4:	2000      	movs	r0, #0
 8006ef6:	4688      	mov	r8, r1
 8006ef8:	4681      	mov	r9, r0
 8006efa:	eb12 0a08 	adds.w	sl, r2, r8
 8006efe:	eb43 0b09 	adc.w	fp, r3, r9
 8006f02:	68fb      	ldr	r3, [r7, #12]
 8006f04:	685b      	ldr	r3, [r3, #4]
 8006f06:	2200      	movs	r2, #0
 8006f08:	603b      	str	r3, [r7, #0]
 8006f0a:	607a      	str	r2, [r7, #4]
 8006f0c:	e9d7 2300 	ldrd	r2, r3, [r7]
 8006f10:	4650      	mov	r0, sl
 8006f12:	4659      	mov	r1, fp
 8006f14:	f7f9 fe40 	bl	8000b98 <__aeabi_uldivmod>
 8006f18:	4602      	mov	r2, r0
 8006f1a:	460b      	mov	r3, r1
 8006f1c:	4613      	mov	r3, r2
 8006f1e:	61bb      	str	r3, [r7, #24]
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 8006f20:	69bb      	ldr	r3, [r7, #24]
 8006f22:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8006f26:	d308      	bcc.n	8006f3a <UART_SetConfig+0x3de>
 8006f28:	69bb      	ldr	r3, [r7, #24]
 8006f2a:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8006f2e:	d204      	bcs.n	8006f3a <UART_SetConfig+0x3de>
        {
          huart->Instance->BRR = usartdiv;
 8006f30:	68fb      	ldr	r3, [r7, #12]
 8006f32:	681b      	ldr	r3, [r3, #0]
 8006f34:	69ba      	ldr	r2, [r7, #24]
 8006f36:	60da      	str	r2, [r3, #12]
 8006f38:	e0b6      	b.n	80070a8 <UART_SetConfig+0x54c>
        }
        else
        {
          ret = HAL_ERROR;
 8006f3a:	2301      	movs	r3, #1
 8006f3c:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
 8006f40:	e0b2      	b.n	80070a8 <UART_SetConfig+0x54c>
      } /* if ( (pclk < (3 * huart->Init.BaudRate) ) || (pclk > (4096 * huart->Init.BaudRate) )) */
#endif /* USART_PRESC_PRESCALER */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8006f42:	68fb      	ldr	r3, [r7, #12]
 8006f44:	69db      	ldr	r3, [r3, #28]
 8006f46:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8006f4a:	d15e      	bne.n	800700a <UART_SetConfig+0x4ae>
  {
    switch (clocksource)
 8006f4c:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8006f50:	2b08      	cmp	r3, #8
 8006f52:	d828      	bhi.n	8006fa6 <UART_SetConfig+0x44a>
 8006f54:	a201      	add	r2, pc, #4	; (adr r2, 8006f5c <UART_SetConfig+0x400>)
 8006f56:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006f5a:	bf00      	nop
 8006f5c:	08006f81 	.word	0x08006f81
 8006f60:	08006f89 	.word	0x08006f89
 8006f64:	08006f91 	.word	0x08006f91
 8006f68:	08006fa7 	.word	0x08006fa7
 8006f6c:	08006f97 	.word	0x08006f97
 8006f70:	08006fa7 	.word	0x08006fa7
 8006f74:	08006fa7 	.word	0x08006fa7
 8006f78:	08006fa7 	.word	0x08006fa7
 8006f7c:	08006f9f 	.word	0x08006f9f
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8006f80:	f7fe ff0e 	bl	8005da0 <HAL_RCC_GetPCLK1Freq>
 8006f84:	61f8      	str	r0, [r7, #28]
        break;
 8006f86:	e014      	b.n	8006fb2 <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8006f88:	f7fe ff20 	bl	8005dcc <HAL_RCC_GetPCLK2Freq>
 8006f8c:	61f8      	str	r0, [r7, #28]
        break;
 8006f8e:	e010      	b.n	8006fb2 <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8006f90:	4b4d      	ldr	r3, [pc, #308]	; (80070c8 <UART_SetConfig+0x56c>)
 8006f92:	61fb      	str	r3, [r7, #28]
        break;
 8006f94:	e00d      	b.n	8006fb2 <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8006f96:	f7fe fe6b 	bl	8005c70 <HAL_RCC_GetSysClockFreq>
 8006f9a:	61f8      	str	r0, [r7, #28]
        break;
 8006f9c:	e009      	b.n	8006fb2 <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8006f9e:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8006fa2:	61fb      	str	r3, [r7, #28]
        break;
 8006fa4:	e005      	b.n	8006fb2 <UART_SetConfig+0x456>
      default:
        pclk = 0U;
 8006fa6:	2300      	movs	r3, #0
 8006fa8:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 8006faa:	2301      	movs	r3, #1
 8006fac:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
        break;
 8006fb0:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8006fb2:	69fb      	ldr	r3, [r7, #28]
 8006fb4:	2b00      	cmp	r3, #0
 8006fb6:	d077      	beq.n	80070a8 <UART_SetConfig+0x54c>
    {
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 8006fb8:	69fb      	ldr	r3, [r7, #28]
 8006fba:	005a      	lsls	r2, r3, #1
 8006fbc:	68fb      	ldr	r3, [r7, #12]
 8006fbe:	685b      	ldr	r3, [r3, #4]
 8006fc0:	085b      	lsrs	r3, r3, #1
 8006fc2:	441a      	add	r2, r3
 8006fc4:	68fb      	ldr	r3, [r7, #12]
 8006fc6:	685b      	ldr	r3, [r3, #4]
 8006fc8:	fbb2 f3f3 	udiv	r3, r2, r3
 8006fcc:	61bb      	str	r3, [r7, #24]
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8006fce:	69bb      	ldr	r3, [r7, #24]
 8006fd0:	2b0f      	cmp	r3, #15
 8006fd2:	d916      	bls.n	8007002 <UART_SetConfig+0x4a6>
 8006fd4:	69bb      	ldr	r3, [r7, #24]
 8006fd6:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8006fda:	d212      	bcs.n	8007002 <UART_SetConfig+0x4a6>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8006fdc:	69bb      	ldr	r3, [r7, #24]
 8006fde:	b29b      	uxth	r3, r3
 8006fe0:	f023 030f 	bic.w	r3, r3, #15
 8006fe4:	82fb      	strh	r3, [r7, #22]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8006fe6:	69bb      	ldr	r3, [r7, #24]
 8006fe8:	085b      	lsrs	r3, r3, #1
 8006fea:	b29b      	uxth	r3, r3
 8006fec:	f003 0307 	and.w	r3, r3, #7
 8006ff0:	b29a      	uxth	r2, r3
 8006ff2:	8afb      	ldrh	r3, [r7, #22]
 8006ff4:	4313      	orrs	r3, r2
 8006ff6:	82fb      	strh	r3, [r7, #22]
        huart->Instance->BRR = brrtemp;
 8006ff8:	68fb      	ldr	r3, [r7, #12]
 8006ffa:	681b      	ldr	r3, [r3, #0]
 8006ffc:	8afa      	ldrh	r2, [r7, #22]
 8006ffe:	60da      	str	r2, [r3, #12]
 8007000:	e052      	b.n	80070a8 <UART_SetConfig+0x54c>
      }
      else
      {
        ret = HAL_ERROR;
 8007002:	2301      	movs	r3, #1
 8007004:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
 8007008:	e04e      	b.n	80070a8 <UART_SetConfig+0x54c>
      }
    }
  }
  else
  {
    switch (clocksource)
 800700a:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 800700e:	2b08      	cmp	r3, #8
 8007010:	d827      	bhi.n	8007062 <UART_SetConfig+0x506>
 8007012:	a201      	add	r2, pc, #4	; (adr r2, 8007018 <UART_SetConfig+0x4bc>)
 8007014:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007018:	0800703d 	.word	0x0800703d
 800701c:	08007045 	.word	0x08007045
 8007020:	0800704d 	.word	0x0800704d
 8007024:	08007063 	.word	0x08007063
 8007028:	08007053 	.word	0x08007053
 800702c:	08007063 	.word	0x08007063
 8007030:	08007063 	.word	0x08007063
 8007034:	08007063 	.word	0x08007063
 8007038:	0800705b 	.word	0x0800705b
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800703c:	f7fe feb0 	bl	8005da0 <HAL_RCC_GetPCLK1Freq>
 8007040:	61f8      	str	r0, [r7, #28]
        break;
 8007042:	e014      	b.n	800706e <UART_SetConfig+0x512>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8007044:	f7fe fec2 	bl	8005dcc <HAL_RCC_GetPCLK2Freq>
 8007048:	61f8      	str	r0, [r7, #28]
        break;
 800704a:	e010      	b.n	800706e <UART_SetConfig+0x512>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 800704c:	4b1e      	ldr	r3, [pc, #120]	; (80070c8 <UART_SetConfig+0x56c>)
 800704e:	61fb      	str	r3, [r7, #28]
        break;
 8007050:	e00d      	b.n	800706e <UART_SetConfig+0x512>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8007052:	f7fe fe0d 	bl	8005c70 <HAL_RCC_GetSysClockFreq>
 8007056:	61f8      	str	r0, [r7, #28]
        break;
 8007058:	e009      	b.n	800706e <UART_SetConfig+0x512>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800705a:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800705e:	61fb      	str	r3, [r7, #28]
        break;
 8007060:	e005      	b.n	800706e <UART_SetConfig+0x512>
      default:
        pclk = 0U;
 8007062:	2300      	movs	r3, #0
 8007064:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 8007066:	2301      	movs	r3, #1
 8007068:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
        break;
 800706c:	bf00      	nop
    }

    if (pclk != 0U)
 800706e:	69fb      	ldr	r3, [r7, #28]
 8007070:	2b00      	cmp	r3, #0
 8007072:	d019      	beq.n	80070a8 <UART_SetConfig+0x54c>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 8007074:	68fb      	ldr	r3, [r7, #12]
 8007076:	685b      	ldr	r3, [r3, #4]
 8007078:	085a      	lsrs	r2, r3, #1
 800707a:	69fb      	ldr	r3, [r7, #28]
 800707c:	441a      	add	r2, r3
 800707e:	68fb      	ldr	r3, [r7, #12]
 8007080:	685b      	ldr	r3, [r3, #4]
 8007082:	fbb2 f3f3 	udiv	r3, r2, r3
 8007086:	61bb      	str	r3, [r7, #24]
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8007088:	69bb      	ldr	r3, [r7, #24]
 800708a:	2b0f      	cmp	r3, #15
 800708c:	d909      	bls.n	80070a2 <UART_SetConfig+0x546>
 800708e:	69bb      	ldr	r3, [r7, #24]
 8007090:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8007094:	d205      	bcs.n	80070a2 <UART_SetConfig+0x546>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 8007096:	69bb      	ldr	r3, [r7, #24]
 8007098:	b29a      	uxth	r2, r3
 800709a:	68fb      	ldr	r3, [r7, #12]
 800709c:	681b      	ldr	r3, [r3, #0]
 800709e:	60da      	str	r2, [r3, #12]
 80070a0:	e002      	b.n	80070a8 <UART_SetConfig+0x54c>
      }
      else
      {
        ret = HAL_ERROR;
 80070a2:	2301      	movs	r3, #1
 80070a4:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
  huart->NbTxDataToProcess = 1;
  huart->NbRxDataToProcess = 1;
#endif /* USART_CR1_FIFOEN */

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 80070a8:	68fb      	ldr	r3, [r7, #12]
 80070aa:	2200      	movs	r2, #0
 80070ac:	665a      	str	r2, [r3, #100]	; 0x64
  huart->TxISR = NULL;
 80070ae:	68fb      	ldr	r3, [r7, #12]
 80070b0:	2200      	movs	r2, #0
 80070b2:	669a      	str	r2, [r3, #104]	; 0x68

  return ret;
 80070b4:	f897 3022 	ldrb.w	r3, [r7, #34]	; 0x22
}
 80070b8:	4618      	mov	r0, r3
 80070ba:	3728      	adds	r7, #40	; 0x28
 80070bc:	46bd      	mov	sp, r7
 80070be:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80070c2:	bf00      	nop
 80070c4:	40008000 	.word	0x40008000
 80070c8:	00f42400 	.word	0x00f42400

080070cc <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 80070cc:	b480      	push	{r7}
 80070ce:	b083      	sub	sp, #12
 80070d0:	af00      	add	r7, sp, #0
 80070d2:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 80070d4:	687b      	ldr	r3, [r7, #4]
 80070d6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80070d8:	f003 0301 	and.w	r3, r3, #1
 80070dc:	2b00      	cmp	r3, #0
 80070de:	d00a      	beq.n	80070f6 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 80070e0:	687b      	ldr	r3, [r7, #4]
 80070e2:	681b      	ldr	r3, [r3, #0]
 80070e4:	685b      	ldr	r3, [r3, #4]
 80070e6:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 80070ea:	687b      	ldr	r3, [r7, #4]
 80070ec:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80070ee:	687b      	ldr	r3, [r7, #4]
 80070f0:	681b      	ldr	r3, [r3, #0]
 80070f2:	430a      	orrs	r2, r1
 80070f4:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 80070f6:	687b      	ldr	r3, [r7, #4]
 80070f8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80070fa:	f003 0302 	and.w	r3, r3, #2
 80070fe:	2b00      	cmp	r3, #0
 8007100:	d00a      	beq.n	8007118 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8007102:	687b      	ldr	r3, [r7, #4]
 8007104:	681b      	ldr	r3, [r3, #0]
 8007106:	685b      	ldr	r3, [r3, #4]
 8007108:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 800710c:	687b      	ldr	r3, [r7, #4]
 800710e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007110:	687b      	ldr	r3, [r7, #4]
 8007112:	681b      	ldr	r3, [r3, #0]
 8007114:	430a      	orrs	r2, r1
 8007116:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8007118:	687b      	ldr	r3, [r7, #4]
 800711a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800711c:	f003 0304 	and.w	r3, r3, #4
 8007120:	2b00      	cmp	r3, #0
 8007122:	d00a      	beq.n	800713a <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8007124:	687b      	ldr	r3, [r7, #4]
 8007126:	681b      	ldr	r3, [r3, #0]
 8007128:	685b      	ldr	r3, [r3, #4]
 800712a:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 800712e:	687b      	ldr	r3, [r7, #4]
 8007130:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8007132:	687b      	ldr	r3, [r7, #4]
 8007134:	681b      	ldr	r3, [r3, #0]
 8007136:	430a      	orrs	r2, r1
 8007138:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 800713a:	687b      	ldr	r3, [r7, #4]
 800713c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800713e:	f003 0308 	and.w	r3, r3, #8
 8007142:	2b00      	cmp	r3, #0
 8007144:	d00a      	beq.n	800715c <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8007146:	687b      	ldr	r3, [r7, #4]
 8007148:	681b      	ldr	r3, [r3, #0]
 800714a:	685b      	ldr	r3, [r3, #4]
 800714c:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 8007150:	687b      	ldr	r3, [r7, #4]
 8007152:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8007154:	687b      	ldr	r3, [r7, #4]
 8007156:	681b      	ldr	r3, [r3, #0]
 8007158:	430a      	orrs	r2, r1
 800715a:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 800715c:	687b      	ldr	r3, [r7, #4]
 800715e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007160:	f003 0310 	and.w	r3, r3, #16
 8007164:	2b00      	cmp	r3, #0
 8007166:	d00a      	beq.n	800717e <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8007168:	687b      	ldr	r3, [r7, #4]
 800716a:	681b      	ldr	r3, [r3, #0]
 800716c:	689b      	ldr	r3, [r3, #8]
 800716e:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 8007172:	687b      	ldr	r3, [r7, #4]
 8007174:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8007176:	687b      	ldr	r3, [r7, #4]
 8007178:	681b      	ldr	r3, [r3, #0]
 800717a:	430a      	orrs	r2, r1
 800717c:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 800717e:	687b      	ldr	r3, [r7, #4]
 8007180:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007182:	f003 0320 	and.w	r3, r3, #32
 8007186:	2b00      	cmp	r3, #0
 8007188:	d00a      	beq.n	80071a0 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 800718a:	687b      	ldr	r3, [r7, #4]
 800718c:	681b      	ldr	r3, [r3, #0]
 800718e:	689b      	ldr	r3, [r3, #8]
 8007190:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 8007194:	687b      	ldr	r3, [r7, #4]
 8007196:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8007198:	687b      	ldr	r3, [r7, #4]
 800719a:	681b      	ldr	r3, [r3, #0]
 800719c:	430a      	orrs	r2, r1
 800719e:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 80071a0:	687b      	ldr	r3, [r7, #4]
 80071a2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80071a4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80071a8:	2b00      	cmp	r3, #0
 80071aa:	d01a      	beq.n	80071e2 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 80071ac:	687b      	ldr	r3, [r7, #4]
 80071ae:	681b      	ldr	r3, [r3, #0]
 80071b0:	685b      	ldr	r3, [r3, #4]
 80071b2:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 80071b6:	687b      	ldr	r3, [r7, #4]
 80071b8:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80071ba:	687b      	ldr	r3, [r7, #4]
 80071bc:	681b      	ldr	r3, [r3, #0]
 80071be:	430a      	orrs	r2, r1
 80071c0:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 80071c2:	687b      	ldr	r3, [r7, #4]
 80071c4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80071c6:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80071ca:	d10a      	bne.n	80071e2 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 80071cc:	687b      	ldr	r3, [r7, #4]
 80071ce:	681b      	ldr	r3, [r3, #0]
 80071d0:	685b      	ldr	r3, [r3, #4]
 80071d2:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 80071d6:	687b      	ldr	r3, [r7, #4]
 80071d8:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80071da:	687b      	ldr	r3, [r7, #4]
 80071dc:	681b      	ldr	r3, [r3, #0]
 80071de:	430a      	orrs	r2, r1
 80071e0:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 80071e2:	687b      	ldr	r3, [r7, #4]
 80071e4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80071e6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80071ea:	2b00      	cmp	r3, #0
 80071ec:	d00a      	beq.n	8007204 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 80071ee:	687b      	ldr	r3, [r7, #4]
 80071f0:	681b      	ldr	r3, [r3, #0]
 80071f2:	685b      	ldr	r3, [r3, #4]
 80071f4:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 80071f8:	687b      	ldr	r3, [r7, #4]
 80071fa:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 80071fc:	687b      	ldr	r3, [r7, #4]
 80071fe:	681b      	ldr	r3, [r3, #0]
 8007200:	430a      	orrs	r2, r1
 8007202:	605a      	str	r2, [r3, #4]
  }
}
 8007204:	bf00      	nop
 8007206:	370c      	adds	r7, #12
 8007208:	46bd      	mov	sp, r7
 800720a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800720e:	4770      	bx	lr

08007210 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8007210:	b580      	push	{r7, lr}
 8007212:	b086      	sub	sp, #24
 8007214:	af02      	add	r7, sp, #8
 8007216:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8007218:	687b      	ldr	r3, [r7, #4]
 800721a:	2200      	movs	r2, #0
 800721c:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8007220:	f7fc fa7c 	bl	800371c <HAL_GetTick>
 8007224:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8007226:	687b      	ldr	r3, [r7, #4]
 8007228:	681b      	ldr	r3, [r3, #0]
 800722a:	681b      	ldr	r3, [r3, #0]
 800722c:	f003 0308 	and.w	r3, r3, #8
 8007230:	2b08      	cmp	r3, #8
 8007232:	d10e      	bne.n	8007252 <UART_CheckIdleState+0x42>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8007234:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8007238:	9300      	str	r3, [sp, #0]
 800723a:	68fb      	ldr	r3, [r7, #12]
 800723c:	2200      	movs	r2, #0
 800723e:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 8007242:	6878      	ldr	r0, [r7, #4]
 8007244:	f000 f82d 	bl	80072a2 <UART_WaitOnFlagUntilTimeout>
 8007248:	4603      	mov	r3, r0
 800724a:	2b00      	cmp	r3, #0
 800724c:	d001      	beq.n	8007252 <UART_CheckIdleState+0x42>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 800724e:	2303      	movs	r3, #3
 8007250:	e023      	b.n	800729a <UART_CheckIdleState+0x8a>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8007252:	687b      	ldr	r3, [r7, #4]
 8007254:	681b      	ldr	r3, [r3, #0]
 8007256:	681b      	ldr	r3, [r3, #0]
 8007258:	f003 0304 	and.w	r3, r3, #4
 800725c:	2b04      	cmp	r3, #4
 800725e:	d10e      	bne.n	800727e <UART_CheckIdleState+0x6e>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8007260:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8007264:	9300      	str	r3, [sp, #0]
 8007266:	68fb      	ldr	r3, [r7, #12]
 8007268:	2200      	movs	r2, #0
 800726a:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 800726e:	6878      	ldr	r0, [r7, #4]
 8007270:	f000 f817 	bl	80072a2 <UART_WaitOnFlagUntilTimeout>
 8007274:	4603      	mov	r3, r0
 8007276:	2b00      	cmp	r3, #0
 8007278:	d001      	beq.n	800727e <UART_CheckIdleState+0x6e>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 800727a:	2303      	movs	r3, #3
 800727c:	e00d      	b.n	800729a <UART_CheckIdleState+0x8a>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 800727e:	687b      	ldr	r3, [r7, #4]
 8007280:	2220      	movs	r2, #32
 8007282:	679a      	str	r2, [r3, #120]	; 0x78
  huart->RxState = HAL_UART_STATE_READY;
 8007284:	687b      	ldr	r3, [r7, #4]
 8007286:	2220      	movs	r2, #32
 8007288:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800728a:	687b      	ldr	r3, [r7, #4]
 800728c:	2200      	movs	r2, #0
 800728e:	661a      	str	r2, [r3, #96]	; 0x60

  __HAL_UNLOCK(huart);
 8007290:	687b      	ldr	r3, [r7, #4]
 8007292:	2200      	movs	r2, #0
 8007294:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

  return HAL_OK;
 8007298:	2300      	movs	r3, #0
}
 800729a:	4618      	mov	r0, r3
 800729c:	3710      	adds	r7, #16
 800729e:	46bd      	mov	sp, r7
 80072a0:	bd80      	pop	{r7, pc}

080072a2 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 80072a2:	b580      	push	{r7, lr}
 80072a4:	b09c      	sub	sp, #112	; 0x70
 80072a6:	af00      	add	r7, sp, #0
 80072a8:	60f8      	str	r0, [r7, #12]
 80072aa:	60b9      	str	r1, [r7, #8]
 80072ac:	603b      	str	r3, [r7, #0]
 80072ae:	4613      	mov	r3, r2
 80072b0:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80072b2:	e0a5      	b.n	8007400 <UART_WaitOnFlagUntilTimeout+0x15e>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80072b4:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80072b6:	f1b3 3fff 	cmp.w	r3, #4294967295
 80072ba:	f000 80a1 	beq.w	8007400 <UART_WaitOnFlagUntilTimeout+0x15e>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80072be:	f7fc fa2d 	bl	800371c <HAL_GetTick>
 80072c2:	4602      	mov	r2, r0
 80072c4:	683b      	ldr	r3, [r7, #0]
 80072c6:	1ad3      	subs	r3, r2, r3
 80072c8:	6fba      	ldr	r2, [r7, #120]	; 0x78
 80072ca:	429a      	cmp	r2, r3
 80072cc:	d302      	bcc.n	80072d4 <UART_WaitOnFlagUntilTimeout+0x32>
 80072ce:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80072d0:	2b00      	cmp	r3, #0
 80072d2:	d13e      	bne.n	8007352 <UART_WaitOnFlagUntilTimeout+0xb0>
           interrupts for the interrupt process */
#if defined(USART_CR1_FIFOEN)
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
                                                USART_CR1_TXEIE_TXFNFIE));
#else
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 80072d4:	68fb      	ldr	r3, [r7, #12]
 80072d6:	681b      	ldr	r3, [r3, #0]
 80072d8:	653b      	str	r3, [r7, #80]	; 0x50
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80072da:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80072dc:	e853 3f00 	ldrex	r3, [r3]
 80072e0:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 80072e2:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80072e4:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 80072e8:	667b      	str	r3, [r7, #100]	; 0x64
 80072ea:	68fb      	ldr	r3, [r7, #12]
 80072ec:	681b      	ldr	r3, [r3, #0]
 80072ee:	461a      	mov	r2, r3
 80072f0:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80072f2:	65fb      	str	r3, [r7, #92]	; 0x5c
 80072f4:	65ba      	str	r2, [r7, #88]	; 0x58
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80072f6:	6db9      	ldr	r1, [r7, #88]	; 0x58
 80072f8:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 80072fa:	e841 2300 	strex	r3, r2, [r1]
 80072fe:	657b      	str	r3, [r7, #84]	; 0x54
   return(result);
 8007300:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8007302:	2b00      	cmp	r3, #0
 8007304:	d1e6      	bne.n	80072d4 <UART_WaitOnFlagUntilTimeout+0x32>
#endif /* USART_CR1_FIFOEN */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8007306:	68fb      	ldr	r3, [r7, #12]
 8007308:	681b      	ldr	r3, [r3, #0]
 800730a:	3308      	adds	r3, #8
 800730c:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800730e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8007310:	e853 3f00 	ldrex	r3, [r3]
 8007314:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8007316:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007318:	f023 0301 	bic.w	r3, r3, #1
 800731c:	663b      	str	r3, [r7, #96]	; 0x60
 800731e:	68fb      	ldr	r3, [r7, #12]
 8007320:	681b      	ldr	r3, [r3, #0]
 8007322:	3308      	adds	r3, #8
 8007324:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8007326:	64ba      	str	r2, [r7, #72]	; 0x48
 8007328:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800732a:	6c79      	ldr	r1, [r7, #68]	; 0x44
 800732c:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800732e:	e841 2300 	strex	r3, r2, [r1]
 8007332:	643b      	str	r3, [r7, #64]	; 0x40
   return(result);
 8007334:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8007336:	2b00      	cmp	r3, #0
 8007338:	d1e5      	bne.n	8007306 <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState = HAL_UART_STATE_READY;
 800733a:	68fb      	ldr	r3, [r7, #12]
 800733c:	2220      	movs	r2, #32
 800733e:	679a      	str	r2, [r3, #120]	; 0x78
        huart->RxState = HAL_UART_STATE_READY;
 8007340:	68fb      	ldr	r3, [r7, #12]
 8007342:	2220      	movs	r2, #32
 8007344:	67da      	str	r2, [r3, #124]	; 0x7c

        __HAL_UNLOCK(huart);
 8007346:	68fb      	ldr	r3, [r7, #12]
 8007348:	2200      	movs	r2, #0
 800734a:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

        return HAL_TIMEOUT;
 800734e:	2303      	movs	r3, #3
 8007350:	e067      	b.n	8007422 <UART_WaitOnFlagUntilTimeout+0x180>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 8007352:	68fb      	ldr	r3, [r7, #12]
 8007354:	681b      	ldr	r3, [r3, #0]
 8007356:	681b      	ldr	r3, [r3, #0]
 8007358:	f003 0304 	and.w	r3, r3, #4
 800735c:	2b00      	cmp	r3, #0
 800735e:	d04f      	beq.n	8007400 <UART_WaitOnFlagUntilTimeout+0x15e>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8007360:	68fb      	ldr	r3, [r7, #12]
 8007362:	681b      	ldr	r3, [r3, #0]
 8007364:	69db      	ldr	r3, [r3, #28]
 8007366:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800736a:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800736e:	d147      	bne.n	8007400 <UART_WaitOnFlagUntilTimeout+0x15e>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8007370:	68fb      	ldr	r3, [r7, #12]
 8007372:	681b      	ldr	r3, [r3, #0]
 8007374:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8007378:	621a      	str	r2, [r3, #32]
             interrupts for the interrupt process */
#if defined(USART_CR1_FIFOEN)
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
                                                  USART_CR1_TXEIE_TXFNFIE));
#else
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 800737a:	68fb      	ldr	r3, [r7, #12]
 800737c:	681b      	ldr	r3, [r3, #0]
 800737e:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007380:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007382:	e853 3f00 	ldrex	r3, [r3]
 8007386:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8007388:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800738a:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 800738e:	66fb      	str	r3, [r7, #108]	; 0x6c
 8007390:	68fb      	ldr	r3, [r7, #12]
 8007392:	681b      	ldr	r3, [r3, #0]
 8007394:	461a      	mov	r2, r3
 8007396:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8007398:	637b      	str	r3, [r7, #52]	; 0x34
 800739a:	633a      	str	r2, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800739c:	6b39      	ldr	r1, [r7, #48]	; 0x30
 800739e:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80073a0:	e841 2300 	strex	r3, r2, [r1]
 80073a4:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 80073a6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80073a8:	2b00      	cmp	r3, #0
 80073aa:	d1e6      	bne.n	800737a <UART_WaitOnFlagUntilTimeout+0xd8>
#endif /* USART_CR1_FIFOEN */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80073ac:	68fb      	ldr	r3, [r7, #12]
 80073ae:	681b      	ldr	r3, [r3, #0]
 80073b0:	3308      	adds	r3, #8
 80073b2:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80073b4:	697b      	ldr	r3, [r7, #20]
 80073b6:	e853 3f00 	ldrex	r3, [r3]
 80073ba:	613b      	str	r3, [r7, #16]
   return(result);
 80073bc:	693b      	ldr	r3, [r7, #16]
 80073be:	f023 0301 	bic.w	r3, r3, #1
 80073c2:	66bb      	str	r3, [r7, #104]	; 0x68
 80073c4:	68fb      	ldr	r3, [r7, #12]
 80073c6:	681b      	ldr	r3, [r3, #0]
 80073c8:	3308      	adds	r3, #8
 80073ca:	6eba      	ldr	r2, [r7, #104]	; 0x68
 80073cc:	623a      	str	r2, [r7, #32]
 80073ce:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80073d0:	69f9      	ldr	r1, [r7, #28]
 80073d2:	6a3a      	ldr	r2, [r7, #32]
 80073d4:	e841 2300 	strex	r3, r2, [r1]
 80073d8:	61bb      	str	r3, [r7, #24]
   return(result);
 80073da:	69bb      	ldr	r3, [r7, #24]
 80073dc:	2b00      	cmp	r3, #0
 80073de:	d1e5      	bne.n	80073ac <UART_WaitOnFlagUntilTimeout+0x10a>

          huart->gState = HAL_UART_STATE_READY;
 80073e0:	68fb      	ldr	r3, [r7, #12]
 80073e2:	2220      	movs	r2, #32
 80073e4:	679a      	str	r2, [r3, #120]	; 0x78
          huart->RxState = HAL_UART_STATE_READY;
 80073e6:	68fb      	ldr	r3, [r7, #12]
 80073e8:	2220      	movs	r2, #32
 80073ea:	67da      	str	r2, [r3, #124]	; 0x7c
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 80073ec:	68fb      	ldr	r3, [r7, #12]
 80073ee:	2220      	movs	r2, #32
 80073f0:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 80073f4:	68fb      	ldr	r3, [r7, #12]
 80073f6:	2200      	movs	r2, #0
 80073f8:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

          return HAL_TIMEOUT;
 80073fc:	2303      	movs	r3, #3
 80073fe:	e010      	b.n	8007422 <UART_WaitOnFlagUntilTimeout+0x180>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8007400:	68fb      	ldr	r3, [r7, #12]
 8007402:	681b      	ldr	r3, [r3, #0]
 8007404:	69da      	ldr	r2, [r3, #28]
 8007406:	68bb      	ldr	r3, [r7, #8]
 8007408:	4013      	ands	r3, r2
 800740a:	68ba      	ldr	r2, [r7, #8]
 800740c:	429a      	cmp	r2, r3
 800740e:	bf0c      	ite	eq
 8007410:	2301      	moveq	r3, #1
 8007412:	2300      	movne	r3, #0
 8007414:	b2db      	uxtb	r3, r3
 8007416:	461a      	mov	r2, r3
 8007418:	79fb      	ldrb	r3, [r7, #7]
 800741a:	429a      	cmp	r2, r3
 800741c:	f43f af4a 	beq.w	80072b4 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8007420:	2300      	movs	r3, #0
}
 8007422:	4618      	mov	r0, r3
 8007424:	3770      	adds	r7, #112	; 0x70
 8007426:	46bd      	mov	sp, r7
 8007428:	bd80      	pop	{r7, pc}

0800742a <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 800742a:	b084      	sub	sp, #16
 800742c:	b580      	push	{r7, lr}
 800742e:	b084      	sub	sp, #16
 8007430:	af00      	add	r7, sp, #0
 8007432:	6078      	str	r0, [r7, #4]
 8007434:	f107 001c 	add.w	r0, r7, #28
 8007438:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;

  /* Select FS Embedded PHY */
  USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 800743c:	687b      	ldr	r3, [r7, #4]
 800743e:	68db      	ldr	r3, [r3, #12]
 8007440:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8007444:	687b      	ldr	r3, [r7, #4]
 8007446:	60da      	str	r2, [r3, #12]

  /* Reset after a PHY select */
  ret = USB_CoreReset(USBx);
 8007448:	6878      	ldr	r0, [r7, #4]
 800744a:	f000 fa6f 	bl	800792c <USB_CoreReset>
 800744e:	4603      	mov	r3, r0
 8007450:	73fb      	strb	r3, [r7, #15]

  if (cfg.battery_charging_enable == 0U)
 8007452:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8007454:	2b00      	cmp	r3, #0
 8007456:	d106      	bne.n	8007466 <USB_CoreInit+0x3c>
  {
    /* Activate the USB Transceiver */
    USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 8007458:	687b      	ldr	r3, [r7, #4]
 800745a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800745c:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 8007460:	687b      	ldr	r3, [r7, #4]
 8007462:	639a      	str	r2, [r3, #56]	; 0x38
 8007464:	e005      	b.n	8007472 <USB_CoreInit+0x48>
  }
  else
  {
    /* Deactivate the USB Transceiver */
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 8007466:	687b      	ldr	r3, [r7, #4]
 8007468:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800746a:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 800746e:	687b      	ldr	r3, [r7, #4]
 8007470:	639a      	str	r2, [r3, #56]	; 0x38
  }

  return ret;
 8007472:	7bfb      	ldrb	r3, [r7, #15]
}
 8007474:	4618      	mov	r0, r3
 8007476:	3710      	adds	r7, #16
 8007478:	46bd      	mov	sp, r7
 800747a:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 800747e:	b004      	add	sp, #16
 8007480:	4770      	bx	lr

08007482 <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 8007482:	b480      	push	{r7}
 8007484:	b083      	sub	sp, #12
 8007486:	af00      	add	r7, sp, #0
 8007488:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 800748a:	687b      	ldr	r3, [r7, #4]
 800748c:	689b      	ldr	r3, [r3, #8]
 800748e:	f023 0201 	bic.w	r2, r3, #1
 8007492:	687b      	ldr	r3, [r7, #4]
 8007494:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 8007496:	2300      	movs	r3, #0
}
 8007498:	4618      	mov	r0, r3
 800749a:	370c      	adds	r7, #12
 800749c:	46bd      	mov	sp, r7
 800749e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80074a2:	4770      	bx	lr

080074a4 <USB_SetCurrentMode>:
  *            @arg USB_DEVICE_MODE Peripheral mode
  *            @arg USB_HOST_MODE Host mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_ModeTypeDef mode)
{
 80074a4:	b580      	push	{r7, lr}
 80074a6:	b084      	sub	sp, #16
 80074a8:	af00      	add	r7, sp, #0
 80074aa:	6078      	str	r0, [r7, #4]
 80074ac:	460b      	mov	r3, r1
 80074ae:	70fb      	strb	r3, [r7, #3]
  uint32_t ms = 0U;
 80074b0:	2300      	movs	r3, #0
 80074b2:	60fb      	str	r3, [r7, #12]

  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 80074b4:	687b      	ldr	r3, [r7, #4]
 80074b6:	68db      	ldr	r3, [r3, #12]
 80074b8:	f023 42c0 	bic.w	r2, r3, #1610612736	; 0x60000000
 80074bc:	687b      	ldr	r3, [r7, #4]
 80074be:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 80074c0:	78fb      	ldrb	r3, [r7, #3]
 80074c2:	2b01      	cmp	r3, #1
 80074c4:	d115      	bne.n	80074f2 <USB_SetCurrentMode+0x4e>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 80074c6:	687b      	ldr	r3, [r7, #4]
 80074c8:	68db      	ldr	r3, [r3, #12]
 80074ca:	f043 5200 	orr.w	r2, r3, #536870912	; 0x20000000
 80074ce:	687b      	ldr	r3, [r7, #4]
 80074d0:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(1U);
 80074d2:	2001      	movs	r0, #1
 80074d4:	f7fc f92e 	bl	8003734 <HAL_Delay>
      ms++;
 80074d8:	68fb      	ldr	r3, [r7, #12]
 80074da:	3301      	adds	r3, #1
 80074dc:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_HOST_MODE) && (ms < 50U));
 80074de:	6878      	ldr	r0, [r7, #4]
 80074e0:	f000 fa16 	bl	8007910 <USB_GetMode>
 80074e4:	4603      	mov	r3, r0
 80074e6:	2b01      	cmp	r3, #1
 80074e8:	d01e      	beq.n	8007528 <USB_SetCurrentMode+0x84>
 80074ea:	68fb      	ldr	r3, [r7, #12]
 80074ec:	2b31      	cmp	r3, #49	; 0x31
 80074ee:	d9f0      	bls.n	80074d2 <USB_SetCurrentMode+0x2e>
 80074f0:	e01a      	b.n	8007528 <USB_SetCurrentMode+0x84>
  }
  else if (mode == USB_DEVICE_MODE)
 80074f2:	78fb      	ldrb	r3, [r7, #3]
 80074f4:	2b00      	cmp	r3, #0
 80074f6:	d115      	bne.n	8007524 <USB_SetCurrentMode+0x80>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 80074f8:	687b      	ldr	r3, [r7, #4]
 80074fa:	68db      	ldr	r3, [r3, #12]
 80074fc:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 8007500:	687b      	ldr	r3, [r7, #4]
 8007502:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(1U);
 8007504:	2001      	movs	r0, #1
 8007506:	f7fc f915 	bl	8003734 <HAL_Delay>
      ms++;
 800750a:	68fb      	ldr	r3, [r7, #12]
 800750c:	3301      	adds	r3, #1
 800750e:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_DEVICE_MODE) && (ms < 50U));
 8007510:	6878      	ldr	r0, [r7, #4]
 8007512:	f000 f9fd 	bl	8007910 <USB_GetMode>
 8007516:	4603      	mov	r3, r0
 8007518:	2b00      	cmp	r3, #0
 800751a:	d005      	beq.n	8007528 <USB_SetCurrentMode+0x84>
 800751c:	68fb      	ldr	r3, [r7, #12]
 800751e:	2b31      	cmp	r3, #49	; 0x31
 8007520:	d9f0      	bls.n	8007504 <USB_SetCurrentMode+0x60>
 8007522:	e001      	b.n	8007528 <USB_SetCurrentMode+0x84>
  }
  else
  {
    return HAL_ERROR;
 8007524:	2301      	movs	r3, #1
 8007526:	e005      	b.n	8007534 <USB_SetCurrentMode+0x90>
  }

  if (ms == 50U)
 8007528:	68fb      	ldr	r3, [r7, #12]
 800752a:	2b32      	cmp	r3, #50	; 0x32
 800752c:	d101      	bne.n	8007532 <USB_SetCurrentMode+0x8e>
  {
    return HAL_ERROR;
 800752e:	2301      	movs	r3, #1
 8007530:	e000      	b.n	8007534 <USB_SetCurrentMode+0x90>
  }

  return HAL_OK;
 8007532:	2300      	movs	r3, #0
}
 8007534:	4618      	mov	r0, r3
 8007536:	3710      	adds	r7, #16
 8007538:	46bd      	mov	sp, r7
 800753a:	bd80      	pop	{r7, pc}

0800753c <USB_DevInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 800753c:	b084      	sub	sp, #16
 800753e:	b580      	push	{r7, lr}
 8007540:	b086      	sub	sp, #24
 8007542:	af00      	add	r7, sp, #0
 8007544:	6078      	str	r0, [r7, #4]
 8007546:	f107 0024 	add.w	r0, r7, #36	; 0x24
 800754a:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret = HAL_OK;
 800754e:	2300      	movs	r3, #0
 8007550:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8007552:	687b      	ldr	r3, [r7, #4]
 8007554:	60fb      	str	r3, [r7, #12]
  uint32_t i;

  for (i = 0U; i < 15U; i++)
 8007556:	2300      	movs	r3, #0
 8007558:	613b      	str	r3, [r7, #16]
 800755a:	e009      	b.n	8007570 <USB_DevInit+0x34>
  {
    USBx->DIEPTXF[i] = 0U;
 800755c:	687a      	ldr	r2, [r7, #4]
 800755e:	693b      	ldr	r3, [r7, #16]
 8007560:	3340      	adds	r3, #64	; 0x40
 8007562:	009b      	lsls	r3, r3, #2
 8007564:	4413      	add	r3, r2
 8007566:	2200      	movs	r2, #0
 8007568:	605a      	str	r2, [r3, #4]
  for (i = 0U; i < 15U; i++)
 800756a:	693b      	ldr	r3, [r7, #16]
 800756c:	3301      	adds	r3, #1
 800756e:	613b      	str	r3, [r7, #16]
 8007570:	693b      	ldr	r3, [r7, #16]
 8007572:	2b0e      	cmp	r3, #14
 8007574:	d9f2      	bls.n	800755c <USB_DevInit+0x20>
  }

  /* VBUS Sensing setup */
  if (cfg.vbus_sensing_enable == 0U)
 8007576:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8007578:	2b00      	cmp	r3, #0
 800757a:	d11c      	bne.n	80075b6 <USB_DevInit+0x7a>
  {
    USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 800757c:	68fb      	ldr	r3, [r7, #12]
 800757e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8007582:	685b      	ldr	r3, [r3, #4]
 8007584:	68fa      	ldr	r2, [r7, #12]
 8007586:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800758a:	f043 0302 	orr.w	r3, r3, #2
 800758e:	6053      	str	r3, [r2, #4]

    /* Deactivate VBUS Sensing B */
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBDEN;
 8007590:	687b      	ldr	r3, [r7, #4]
 8007592:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007594:	f423 1200 	bic.w	r2, r3, #2097152	; 0x200000
 8007598:	687b      	ldr	r3, [r7, #4]
 800759a:	639a      	str	r2, [r3, #56]	; 0x38

    /* B-peripheral session valid override enable */
    USBx->GOTGCTL |= USB_OTG_GOTGCTL_BVALOEN;
 800759c:	687b      	ldr	r3, [r7, #4]
 800759e:	681b      	ldr	r3, [r3, #0]
 80075a0:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 80075a4:	687b      	ldr	r3, [r7, #4]
 80075a6:	601a      	str	r2, [r3, #0]
    USBx->GOTGCTL |= USB_OTG_GOTGCTL_BVALOVAL;
 80075a8:	687b      	ldr	r3, [r7, #4]
 80075aa:	681b      	ldr	r3, [r3, #0]
 80075ac:	f043 0280 	orr.w	r2, r3, #128	; 0x80
 80075b0:	687b      	ldr	r3, [r7, #4]
 80075b2:	601a      	str	r2, [r3, #0]
 80075b4:	e005      	b.n	80075c2 <USB_DevInit+0x86>
  }
  else
  {
    /* Enable HW VBUS sensing */
    USBx->GCCFG |= USB_OTG_GCCFG_VBDEN;
 80075b6:	687b      	ldr	r3, [r7, #4]
 80075b8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80075ba:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 80075be:	687b      	ldr	r3, [r7, #4]
 80075c0:	639a      	str	r2, [r3, #56]	; 0x38
  }

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 80075c2:	68fb      	ldr	r3, [r7, #12]
 80075c4:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 80075c8:	461a      	mov	r2, r3
 80075ca:	2300      	movs	r3, #0
 80075cc:	6013      	str	r3, [r2, #0]

  /* Device mode configuration */
  USBx_DEVICE->DCFG |= DCFG_FRAME_INTERVAL_80;
 80075ce:	68fb      	ldr	r3, [r7, #12]
 80075d0:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80075d4:	4619      	mov	r1, r3
 80075d6:	68fb      	ldr	r3, [r7, #12]
 80075d8:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80075dc:	461a      	mov	r2, r3
 80075de:	680b      	ldr	r3, [r1, #0]
 80075e0:	6013      	str	r3, [r2, #0]

  /* Set Core speed to Full speed mode */
  (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_FULL);
 80075e2:	2103      	movs	r1, #3
 80075e4:	6878      	ldr	r0, [r7, #4]
 80075e6:	f000 f959 	bl	800789c <USB_SetDevSpeed>

  /* Flush the FIFOs */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 80075ea:	2110      	movs	r1, #16
 80075ec:	6878      	ldr	r0, [r7, #4]
 80075ee:	f000 f8f1 	bl	80077d4 <USB_FlushTxFifo>
 80075f2:	4603      	mov	r3, r0
 80075f4:	2b00      	cmp	r3, #0
 80075f6:	d001      	beq.n	80075fc <USB_DevInit+0xc0>
  {
    ret = HAL_ERROR;
 80075f8:	2301      	movs	r3, #1
 80075fa:	75fb      	strb	r3, [r7, #23]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 80075fc:	6878      	ldr	r0, [r7, #4]
 80075fe:	f000 f91d 	bl	800783c <USB_FlushRxFifo>
 8007602:	4603      	mov	r3, r0
 8007604:	2b00      	cmp	r3, #0
 8007606:	d001      	beq.n	800760c <USB_DevInit+0xd0>
  {
    ret = HAL_ERROR;
 8007608:	2301      	movs	r3, #1
 800760a:	75fb      	strb	r3, [r7, #23]
  }

  /* Clear all pending Device Interrupts */
  USBx_DEVICE->DIEPMSK = 0U;
 800760c:	68fb      	ldr	r3, [r7, #12]
 800760e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8007612:	461a      	mov	r2, r3
 8007614:	2300      	movs	r3, #0
 8007616:	6113      	str	r3, [r2, #16]
  USBx_DEVICE->DOEPMSK = 0U;
 8007618:	68fb      	ldr	r3, [r7, #12]
 800761a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800761e:	461a      	mov	r2, r3
 8007620:	2300      	movs	r3, #0
 8007622:	6153      	str	r3, [r2, #20]
  USBx_DEVICE->DAINTMSK = 0U;
 8007624:	68fb      	ldr	r3, [r7, #12]
 8007626:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800762a:	461a      	mov	r2, r3
 800762c:	2300      	movs	r3, #0
 800762e:	61d3      	str	r3, [r2, #28]

  for (i = 0U; i < cfg.dev_endpoints; i++)
 8007630:	2300      	movs	r3, #0
 8007632:	613b      	str	r3, [r7, #16]
 8007634:	e043      	b.n	80076be <USB_DevInit+0x182>
  {
    if ((USBx_INEP(i)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 8007636:	693b      	ldr	r3, [r7, #16]
 8007638:	015a      	lsls	r2, r3, #5
 800763a:	68fb      	ldr	r3, [r7, #12]
 800763c:	4413      	add	r3, r2
 800763e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007642:	681b      	ldr	r3, [r3, #0]
 8007644:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8007648:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800764c:	d118      	bne.n	8007680 <USB_DevInit+0x144>
    {
      if (i == 0U)
 800764e:	693b      	ldr	r3, [r7, #16]
 8007650:	2b00      	cmp	r3, #0
 8007652:	d10a      	bne.n	800766a <USB_DevInit+0x12e>
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_SNAK;
 8007654:	693b      	ldr	r3, [r7, #16]
 8007656:	015a      	lsls	r2, r3, #5
 8007658:	68fb      	ldr	r3, [r7, #12]
 800765a:	4413      	add	r3, r2
 800765c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007660:	461a      	mov	r2, r3
 8007662:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8007666:	6013      	str	r3, [r2, #0]
 8007668:	e013      	b.n	8007692 <USB_DevInit+0x156>
      }
      else
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_EPDIS | USB_OTG_DIEPCTL_SNAK;
 800766a:	693b      	ldr	r3, [r7, #16]
 800766c:	015a      	lsls	r2, r3, #5
 800766e:	68fb      	ldr	r3, [r7, #12]
 8007670:	4413      	add	r3, r2
 8007672:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007676:	461a      	mov	r2, r3
 8007678:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 800767c:	6013      	str	r3, [r2, #0]
 800767e:	e008      	b.n	8007692 <USB_DevInit+0x156>
      }
    }
    else
    {
      USBx_INEP(i)->DIEPCTL = 0U;
 8007680:	693b      	ldr	r3, [r7, #16]
 8007682:	015a      	lsls	r2, r3, #5
 8007684:	68fb      	ldr	r3, [r7, #12]
 8007686:	4413      	add	r3, r2
 8007688:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800768c:	461a      	mov	r2, r3
 800768e:	2300      	movs	r3, #0
 8007690:	6013      	str	r3, [r2, #0]
    }

    USBx_INEP(i)->DIEPTSIZ = 0U;
 8007692:	693b      	ldr	r3, [r7, #16]
 8007694:	015a      	lsls	r2, r3, #5
 8007696:	68fb      	ldr	r3, [r7, #12]
 8007698:	4413      	add	r3, r2
 800769a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800769e:	461a      	mov	r2, r3
 80076a0:	2300      	movs	r3, #0
 80076a2:	6113      	str	r3, [r2, #16]
    USBx_INEP(i)->DIEPINT  = 0xFB7FU;
 80076a4:	693b      	ldr	r3, [r7, #16]
 80076a6:	015a      	lsls	r2, r3, #5
 80076a8:	68fb      	ldr	r3, [r7, #12]
 80076aa:	4413      	add	r3, r2
 80076ac:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80076b0:	461a      	mov	r2, r3
 80076b2:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 80076b6:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 80076b8:	693b      	ldr	r3, [r7, #16]
 80076ba:	3301      	adds	r3, #1
 80076bc:	613b      	str	r3, [r7, #16]
 80076be:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80076c0:	693a      	ldr	r2, [r7, #16]
 80076c2:	429a      	cmp	r2, r3
 80076c4:	d3b7      	bcc.n	8007636 <USB_DevInit+0xfa>
  }

  for (i = 0U; i < cfg.dev_endpoints; i++)
 80076c6:	2300      	movs	r3, #0
 80076c8:	613b      	str	r3, [r7, #16]
 80076ca:	e043      	b.n	8007754 <USB_DevInit+0x218>
  {
    if ((USBx_OUTEP(i)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 80076cc:	693b      	ldr	r3, [r7, #16]
 80076ce:	015a      	lsls	r2, r3, #5
 80076d0:	68fb      	ldr	r3, [r7, #12]
 80076d2:	4413      	add	r3, r2
 80076d4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80076d8:	681b      	ldr	r3, [r3, #0]
 80076da:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 80076de:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80076e2:	d118      	bne.n	8007716 <USB_DevInit+0x1da>
    {
      if (i == 0U)
 80076e4:	693b      	ldr	r3, [r7, #16]
 80076e6:	2b00      	cmp	r3, #0
 80076e8:	d10a      	bne.n	8007700 <USB_DevInit+0x1c4>
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_SNAK;
 80076ea:	693b      	ldr	r3, [r7, #16]
 80076ec:	015a      	lsls	r2, r3, #5
 80076ee:	68fb      	ldr	r3, [r7, #12]
 80076f0:	4413      	add	r3, r2
 80076f2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80076f6:	461a      	mov	r2, r3
 80076f8:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 80076fc:	6013      	str	r3, [r2, #0]
 80076fe:	e013      	b.n	8007728 <USB_DevInit+0x1ec>
      }
      else
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_EPDIS | USB_OTG_DOEPCTL_SNAK;
 8007700:	693b      	ldr	r3, [r7, #16]
 8007702:	015a      	lsls	r2, r3, #5
 8007704:	68fb      	ldr	r3, [r7, #12]
 8007706:	4413      	add	r3, r2
 8007708:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800770c:	461a      	mov	r2, r3
 800770e:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8007712:	6013      	str	r3, [r2, #0]
 8007714:	e008      	b.n	8007728 <USB_DevInit+0x1ec>
      }
    }
    else
    {
      USBx_OUTEP(i)->DOEPCTL = 0U;
 8007716:	693b      	ldr	r3, [r7, #16]
 8007718:	015a      	lsls	r2, r3, #5
 800771a:	68fb      	ldr	r3, [r7, #12]
 800771c:	4413      	add	r3, r2
 800771e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007722:	461a      	mov	r2, r3
 8007724:	2300      	movs	r3, #0
 8007726:	6013      	str	r3, [r2, #0]
    }

    USBx_OUTEP(i)->DOEPTSIZ = 0U;
 8007728:	693b      	ldr	r3, [r7, #16]
 800772a:	015a      	lsls	r2, r3, #5
 800772c:	68fb      	ldr	r3, [r7, #12]
 800772e:	4413      	add	r3, r2
 8007730:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007734:	461a      	mov	r2, r3
 8007736:	2300      	movs	r3, #0
 8007738:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(i)->DOEPINT  = 0xFB7FU;
 800773a:	693b      	ldr	r3, [r7, #16]
 800773c:	015a      	lsls	r2, r3, #5
 800773e:	68fb      	ldr	r3, [r7, #12]
 8007740:	4413      	add	r3, r2
 8007742:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007746:	461a      	mov	r2, r3
 8007748:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 800774c:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 800774e:	693b      	ldr	r3, [r7, #16]
 8007750:	3301      	adds	r3, #1
 8007752:	613b      	str	r3, [r7, #16]
 8007754:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007756:	693a      	ldr	r2, [r7, #16]
 8007758:	429a      	cmp	r2, r3
 800775a:	d3b7      	bcc.n	80076cc <USB_DevInit+0x190>
  }

  USBx_DEVICE->DIEPMSK &= ~(USB_OTG_DIEPMSK_TXFURM);
 800775c:	68fb      	ldr	r3, [r7, #12]
 800775e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8007762:	691b      	ldr	r3, [r3, #16]
 8007764:	68fa      	ldr	r2, [r7, #12]
 8007766:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800776a:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800776e:	6113      	str	r3, [r2, #16]

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 8007770:	687b      	ldr	r3, [r7, #4]
 8007772:	2200      	movs	r2, #0
 8007774:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = 0xBFFFFFFFU;
 8007776:	687b      	ldr	r3, [r7, #4]
 8007778:	f06f 4280 	mvn.w	r2, #1073741824	; 0x40000000
 800777c:	615a      	str	r2, [r3, #20]

  /* Enable the common interrupts */
  USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 800777e:	687b      	ldr	r3, [r7, #4]
 8007780:	699b      	ldr	r3, [r3, #24]
 8007782:	f043 0210 	orr.w	r2, r3, #16
 8007786:	687b      	ldr	r3, [r7, #4]
 8007788:	619a      	str	r2, [r3, #24]

  /* Enable interrupts matching to the Device mode ONLY */
  USBx->GINTMSK |= USB_OTG_GINTMSK_USBSUSPM | USB_OTG_GINTMSK_USBRST |
 800778a:	687b      	ldr	r3, [r7, #4]
 800778c:	699a      	ldr	r2, [r3, #24]
 800778e:	4b10      	ldr	r3, [pc, #64]	; (80077d0 <USB_DevInit+0x294>)
 8007790:	4313      	orrs	r3, r2
 8007792:	687a      	ldr	r2, [r7, #4]
 8007794:	6193      	str	r3, [r2, #24]
                   USB_OTG_GINTMSK_ENUMDNEM | USB_OTG_GINTMSK_IEPINT |
                   USB_OTG_GINTMSK_OEPINT   | USB_OTG_GINTMSK_IISOIXFRM |
                   USB_OTG_GINTMSK_PXFRM_IISOOXFRM | USB_OTG_GINTMSK_WUIM;

  if (cfg.Sof_enable != 0U)
 8007796:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8007798:	2b00      	cmp	r3, #0
 800779a:	d005      	beq.n	80077a8 <USB_DevInit+0x26c>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_SOFM;
 800779c:	687b      	ldr	r3, [r7, #4]
 800779e:	699b      	ldr	r3, [r3, #24]
 80077a0:	f043 0208 	orr.w	r2, r3, #8
 80077a4:	687b      	ldr	r3, [r7, #4]
 80077a6:	619a      	str	r2, [r3, #24]
  }

  if (cfg.vbus_sensing_enable == 1U)
 80077a8:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80077aa:	2b01      	cmp	r3, #1
 80077ac:	d107      	bne.n	80077be <USB_DevInit+0x282>
  {
    USBx->GINTMSK |= (USB_OTG_GINTMSK_SRQIM | USB_OTG_GINTMSK_OTGINT);
 80077ae:	687b      	ldr	r3, [r7, #4]
 80077b0:	699b      	ldr	r3, [r3, #24]
 80077b2:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 80077b6:	f043 0304 	orr.w	r3, r3, #4
 80077ba:	687a      	ldr	r2, [r7, #4]
 80077bc:	6193      	str	r3, [r2, #24]
  }

  return ret;
 80077be:	7dfb      	ldrb	r3, [r7, #23]
}
 80077c0:	4618      	mov	r0, r3
 80077c2:	3718      	adds	r7, #24
 80077c4:	46bd      	mov	sp, r7
 80077c6:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 80077ca:	b004      	add	sp, #16
 80077cc:	4770      	bx	lr
 80077ce:	bf00      	nop
 80077d0:	803c3800 	.word	0x803c3800

080077d4 <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 80077d4:	b480      	push	{r7}
 80077d6:	b085      	sub	sp, #20
 80077d8:	af00      	add	r7, sp, #0
 80077da:	6078      	str	r0, [r7, #4]
 80077dc:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 80077de:	2300      	movs	r3, #0
 80077e0:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 80077e2:	68fb      	ldr	r3, [r7, #12]
 80077e4:	3301      	adds	r3, #1
 80077e6:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 80077e8:	68fb      	ldr	r3, [r7, #12]
 80077ea:	4a13      	ldr	r2, [pc, #76]	; (8007838 <USB_FlushTxFifo+0x64>)
 80077ec:	4293      	cmp	r3, r2
 80077ee:	d901      	bls.n	80077f4 <USB_FlushTxFifo+0x20>
    {
      return HAL_TIMEOUT;
 80077f0:	2303      	movs	r3, #3
 80077f2:	e01b      	b.n	800782c <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 80077f4:	687b      	ldr	r3, [r7, #4]
 80077f6:	691b      	ldr	r3, [r3, #16]
 80077f8:	2b00      	cmp	r3, #0
 80077fa:	daf2      	bge.n	80077e2 <USB_FlushTxFifo+0xe>

  /* Flush TX Fifo */
  count = 0U;
 80077fc:	2300      	movs	r3, #0
 80077fe:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 8007800:	683b      	ldr	r3, [r7, #0]
 8007802:	019b      	lsls	r3, r3, #6
 8007804:	f043 0220 	orr.w	r2, r3, #32
 8007808:	687b      	ldr	r3, [r7, #4]
 800780a:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 800780c:	68fb      	ldr	r3, [r7, #12]
 800780e:	3301      	adds	r3, #1
 8007810:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8007812:	68fb      	ldr	r3, [r7, #12]
 8007814:	4a08      	ldr	r2, [pc, #32]	; (8007838 <USB_FlushTxFifo+0x64>)
 8007816:	4293      	cmp	r3, r2
 8007818:	d901      	bls.n	800781e <USB_FlushTxFifo+0x4a>
    {
      return HAL_TIMEOUT;
 800781a:	2303      	movs	r3, #3
 800781c:	e006      	b.n	800782c <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 800781e:	687b      	ldr	r3, [r7, #4]
 8007820:	691b      	ldr	r3, [r3, #16]
 8007822:	f003 0320 	and.w	r3, r3, #32
 8007826:	2b20      	cmp	r3, #32
 8007828:	d0f0      	beq.n	800780c <USB_FlushTxFifo+0x38>

  return HAL_OK;
 800782a:	2300      	movs	r3, #0
}
 800782c:	4618      	mov	r0, r3
 800782e:	3714      	adds	r7, #20
 8007830:	46bd      	mov	sp, r7
 8007832:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007836:	4770      	bx	lr
 8007838:	00030d40 	.word	0x00030d40

0800783c <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo  Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 800783c:	b480      	push	{r7}
 800783e:	b085      	sub	sp, #20
 8007840:	af00      	add	r7, sp, #0
 8007842:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8007844:	2300      	movs	r3, #0
 8007846:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8007848:	68fb      	ldr	r3, [r7, #12]
 800784a:	3301      	adds	r3, #1
 800784c:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 800784e:	68fb      	ldr	r3, [r7, #12]
 8007850:	4a11      	ldr	r2, [pc, #68]	; (8007898 <USB_FlushRxFifo+0x5c>)
 8007852:	4293      	cmp	r3, r2
 8007854:	d901      	bls.n	800785a <USB_FlushRxFifo+0x1e>
    {
      return HAL_TIMEOUT;
 8007856:	2303      	movs	r3, #3
 8007858:	e018      	b.n	800788c <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 800785a:	687b      	ldr	r3, [r7, #4]
 800785c:	691b      	ldr	r3, [r3, #16]
 800785e:	2b00      	cmp	r3, #0
 8007860:	daf2      	bge.n	8007848 <USB_FlushRxFifo+0xc>

  /* Flush RX Fifo */
  count = 0U;
 8007862:	2300      	movs	r3, #0
 8007864:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 8007866:	687b      	ldr	r3, [r7, #4]
 8007868:	2210      	movs	r2, #16
 800786a:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 800786c:	68fb      	ldr	r3, [r7, #12]
 800786e:	3301      	adds	r3, #1
 8007870:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8007872:	68fb      	ldr	r3, [r7, #12]
 8007874:	4a08      	ldr	r2, [pc, #32]	; (8007898 <USB_FlushRxFifo+0x5c>)
 8007876:	4293      	cmp	r3, r2
 8007878:	d901      	bls.n	800787e <USB_FlushRxFifo+0x42>
    {
      return HAL_TIMEOUT;
 800787a:	2303      	movs	r3, #3
 800787c:	e006      	b.n	800788c <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 800787e:	687b      	ldr	r3, [r7, #4]
 8007880:	691b      	ldr	r3, [r3, #16]
 8007882:	f003 0310 	and.w	r3, r3, #16
 8007886:	2b10      	cmp	r3, #16
 8007888:	d0f0      	beq.n	800786c <USB_FlushRxFifo+0x30>

  return HAL_OK;
 800788a:	2300      	movs	r3, #0
}
 800788c:	4618      	mov	r0, r3
 800788e:	3714      	adds	r7, #20
 8007890:	46bd      	mov	sp, r7
 8007892:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007896:	4770      	bx	lr
 8007898:	00030d40 	.word	0x00030d40

0800789c <USB_SetDevSpeed>:
  *          This parameter can be one of these values:
  *            @arg USB_OTG_SPEED_FULL: Full speed mode
  * @retval  Hal status
  */
HAL_StatusTypeDef USB_SetDevSpeed(USB_OTG_GlobalTypeDef *USBx, uint8_t speed)
{
 800789c:	b480      	push	{r7}
 800789e:	b085      	sub	sp, #20
 80078a0:	af00      	add	r7, sp, #0
 80078a2:	6078      	str	r0, [r7, #4]
 80078a4:	460b      	mov	r3, r1
 80078a6:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80078a8:	687b      	ldr	r3, [r7, #4]
 80078aa:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG |= speed;
 80078ac:	68fb      	ldr	r3, [r7, #12]
 80078ae:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80078b2:	681a      	ldr	r2, [r3, #0]
 80078b4:	78fb      	ldrb	r3, [r7, #3]
 80078b6:	68f9      	ldr	r1, [r7, #12]
 80078b8:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 80078bc:	4313      	orrs	r3, r2
 80078be:	600b      	str	r3, [r1, #0]
  return HAL_OK;
 80078c0:	2300      	movs	r3, #0
}
 80078c2:	4618      	mov	r0, r3
 80078c4:	3714      	adds	r7, #20
 80078c6:	46bd      	mov	sp, r7
 80078c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80078cc:	4770      	bx	lr

080078ce <USB_DevDisconnect>:
  * @brief  USB_DevDisconnect : Disconnect the USB device by disabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevDisconnect(USB_OTG_GlobalTypeDef *USBx)
{
 80078ce:	b480      	push	{r7}
 80078d0:	b085      	sub	sp, #20
 80078d2:	af00      	add	r7, sp, #0
 80078d4:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80078d6:	687b      	ldr	r3, [r7, #4]
 80078d8:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 80078da:	68fb      	ldr	r3, [r7, #12]
 80078dc:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 80078e0:	681b      	ldr	r3, [r3, #0]
 80078e2:	68fa      	ldr	r2, [r7, #12]
 80078e4:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 80078e8:	f023 0303 	bic.w	r3, r3, #3
 80078ec:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 80078ee:	68fb      	ldr	r3, [r7, #12]
 80078f0:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80078f4:	685b      	ldr	r3, [r3, #4]
 80078f6:	68fa      	ldr	r2, [r7, #12]
 80078f8:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80078fc:	f043 0302 	orr.w	r3, r3, #2
 8007900:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 8007902:	2300      	movs	r3, #0
}
 8007904:	4618      	mov	r0, r3
 8007906:	3714      	adds	r7, #20
 8007908:	46bd      	mov	sp, r7
 800790a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800790e:	4770      	bx	lr

08007910 <USB_GetMode>:
  *          This parameter can be one of these values:
  *           0 : Host
  *           1 : Device
  */
uint32_t USB_GetMode(USB_OTG_GlobalTypeDef *USBx)
{
 8007910:	b480      	push	{r7}
 8007912:	b083      	sub	sp, #12
 8007914:	af00      	add	r7, sp, #0
 8007916:	6078      	str	r0, [r7, #4]
  return ((USBx->GINTSTS) & 0x1U);
 8007918:	687b      	ldr	r3, [r7, #4]
 800791a:	695b      	ldr	r3, [r3, #20]
 800791c:	f003 0301 	and.w	r3, r3, #1
}
 8007920:	4618      	mov	r0, r3
 8007922:	370c      	adds	r7, #12
 8007924:	46bd      	mov	sp, r7
 8007926:	f85d 7b04 	ldr.w	r7, [sp], #4
 800792a:	4770      	bx	lr

0800792c <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 800792c:	b480      	push	{r7}
 800792e:	b085      	sub	sp, #20
 8007930:	af00      	add	r7, sp, #0
 8007932:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8007934:	2300      	movs	r3, #0
 8007936:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8007938:	68fb      	ldr	r3, [r7, #12]
 800793a:	3301      	adds	r3, #1
 800793c:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 800793e:	68fb      	ldr	r3, [r7, #12]
 8007940:	4a13      	ldr	r2, [pc, #76]	; (8007990 <USB_CoreReset+0x64>)
 8007942:	4293      	cmp	r3, r2
 8007944:	d901      	bls.n	800794a <USB_CoreReset+0x1e>
    {
      return HAL_TIMEOUT;
 8007946:	2303      	movs	r3, #3
 8007948:	e01b      	b.n	8007982 <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 800794a:	687b      	ldr	r3, [r7, #4]
 800794c:	691b      	ldr	r3, [r3, #16]
 800794e:	2b00      	cmp	r3, #0
 8007950:	daf2      	bge.n	8007938 <USB_CoreReset+0xc>

  /* Core Soft Reset */
  count = 0U;
 8007952:	2300      	movs	r3, #0
 8007954:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 8007956:	687b      	ldr	r3, [r7, #4]
 8007958:	691b      	ldr	r3, [r3, #16]
 800795a:	f043 0201 	orr.w	r2, r3, #1
 800795e:	687b      	ldr	r3, [r7, #4]
 8007960:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8007962:	68fb      	ldr	r3, [r7, #12]
 8007964:	3301      	adds	r3, #1
 8007966:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8007968:	68fb      	ldr	r3, [r7, #12]
 800796a:	4a09      	ldr	r2, [pc, #36]	; (8007990 <USB_CoreReset+0x64>)
 800796c:	4293      	cmp	r3, r2
 800796e:	d901      	bls.n	8007974 <USB_CoreReset+0x48>
    {
      return HAL_TIMEOUT;
 8007970:	2303      	movs	r3, #3
 8007972:	e006      	b.n	8007982 <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 8007974:	687b      	ldr	r3, [r7, #4]
 8007976:	691b      	ldr	r3, [r3, #16]
 8007978:	f003 0301 	and.w	r3, r3, #1
 800797c:	2b01      	cmp	r3, #1
 800797e:	d0f0      	beq.n	8007962 <USB_CoreReset+0x36>

  return HAL_OK;
 8007980:	2300      	movs	r3, #0
}
 8007982:	4618      	mov	r0, r3
 8007984:	3714      	adds	r7, #20
 8007986:	46bd      	mov	sp, r7
 8007988:	f85d 7b04 	ldr.w	r7, [sp], #4
 800798c:	4770      	bx	lr
 800798e:	bf00      	nop
 8007990:	00030d40 	.word	0x00030d40

08007994 <__errno>:
 8007994:	4b01      	ldr	r3, [pc, #4]	; (800799c <__errno+0x8>)
 8007996:	6818      	ldr	r0, [r3, #0]
 8007998:	4770      	bx	lr
 800799a:	bf00      	nop
 800799c:	20000184 	.word	0x20000184

080079a0 <__libc_init_array>:
 80079a0:	b570      	push	{r4, r5, r6, lr}
 80079a2:	4d0d      	ldr	r5, [pc, #52]	; (80079d8 <__libc_init_array+0x38>)
 80079a4:	4c0d      	ldr	r4, [pc, #52]	; (80079dc <__libc_init_array+0x3c>)
 80079a6:	1b64      	subs	r4, r4, r5
 80079a8:	10a4      	asrs	r4, r4, #2
 80079aa:	2600      	movs	r6, #0
 80079ac:	42a6      	cmp	r6, r4
 80079ae:	d109      	bne.n	80079c4 <__libc_init_array+0x24>
 80079b0:	4d0b      	ldr	r5, [pc, #44]	; (80079e0 <__libc_init_array+0x40>)
 80079b2:	4c0c      	ldr	r4, [pc, #48]	; (80079e4 <__libc_init_array+0x44>)
 80079b4:	f001 fc1a 	bl	80091ec <_init>
 80079b8:	1b64      	subs	r4, r4, r5
 80079ba:	10a4      	asrs	r4, r4, #2
 80079bc:	2600      	movs	r6, #0
 80079be:	42a6      	cmp	r6, r4
 80079c0:	d105      	bne.n	80079ce <__libc_init_array+0x2e>
 80079c2:	bd70      	pop	{r4, r5, r6, pc}
 80079c4:	f855 3b04 	ldr.w	r3, [r5], #4
 80079c8:	4798      	blx	r3
 80079ca:	3601      	adds	r6, #1
 80079cc:	e7ee      	b.n	80079ac <__libc_init_array+0xc>
 80079ce:	f855 3b04 	ldr.w	r3, [r5], #4
 80079d2:	4798      	blx	r3
 80079d4:	3601      	adds	r6, #1
 80079d6:	e7f2      	b.n	80079be <__libc_init_array+0x1e>
 80079d8:	080099c8 	.word	0x080099c8
 80079dc:	080099c8 	.word	0x080099c8
 80079e0:	080099c8 	.word	0x080099c8
 80079e4:	080099cc 	.word	0x080099cc

080079e8 <memcpy>:
 80079e8:	440a      	add	r2, r1
 80079ea:	4291      	cmp	r1, r2
 80079ec:	f100 33ff 	add.w	r3, r0, #4294967295
 80079f0:	d100      	bne.n	80079f4 <memcpy+0xc>
 80079f2:	4770      	bx	lr
 80079f4:	b510      	push	{r4, lr}
 80079f6:	f811 4b01 	ldrb.w	r4, [r1], #1
 80079fa:	f803 4f01 	strb.w	r4, [r3, #1]!
 80079fe:	4291      	cmp	r1, r2
 8007a00:	d1f9      	bne.n	80079f6 <memcpy+0xe>
 8007a02:	bd10      	pop	{r4, pc}

08007a04 <memmove>:
 8007a04:	4288      	cmp	r0, r1
 8007a06:	b510      	push	{r4, lr}
 8007a08:	eb01 0402 	add.w	r4, r1, r2
 8007a0c:	d902      	bls.n	8007a14 <memmove+0x10>
 8007a0e:	4284      	cmp	r4, r0
 8007a10:	4623      	mov	r3, r4
 8007a12:	d807      	bhi.n	8007a24 <memmove+0x20>
 8007a14:	1e43      	subs	r3, r0, #1
 8007a16:	42a1      	cmp	r1, r4
 8007a18:	d008      	beq.n	8007a2c <memmove+0x28>
 8007a1a:	f811 2b01 	ldrb.w	r2, [r1], #1
 8007a1e:	f803 2f01 	strb.w	r2, [r3, #1]!
 8007a22:	e7f8      	b.n	8007a16 <memmove+0x12>
 8007a24:	4402      	add	r2, r0
 8007a26:	4601      	mov	r1, r0
 8007a28:	428a      	cmp	r2, r1
 8007a2a:	d100      	bne.n	8007a2e <memmove+0x2a>
 8007a2c:	bd10      	pop	{r4, pc}
 8007a2e:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8007a32:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8007a36:	e7f7      	b.n	8007a28 <memmove+0x24>

08007a38 <memset>:
 8007a38:	4402      	add	r2, r0
 8007a3a:	4603      	mov	r3, r0
 8007a3c:	4293      	cmp	r3, r2
 8007a3e:	d100      	bne.n	8007a42 <memset+0xa>
 8007a40:	4770      	bx	lr
 8007a42:	f803 1b01 	strb.w	r1, [r3], #1
 8007a46:	e7f9      	b.n	8007a3c <memset+0x4>

08007a48 <sniprintf>:
 8007a48:	b40c      	push	{r2, r3}
 8007a4a:	b530      	push	{r4, r5, lr}
 8007a4c:	4b17      	ldr	r3, [pc, #92]	; (8007aac <sniprintf+0x64>)
 8007a4e:	1e0c      	subs	r4, r1, #0
 8007a50:	681d      	ldr	r5, [r3, #0]
 8007a52:	b09d      	sub	sp, #116	; 0x74
 8007a54:	da08      	bge.n	8007a68 <sniprintf+0x20>
 8007a56:	238b      	movs	r3, #139	; 0x8b
 8007a58:	602b      	str	r3, [r5, #0]
 8007a5a:	f04f 30ff 	mov.w	r0, #4294967295
 8007a5e:	b01d      	add	sp, #116	; 0x74
 8007a60:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8007a64:	b002      	add	sp, #8
 8007a66:	4770      	bx	lr
 8007a68:	f44f 7302 	mov.w	r3, #520	; 0x208
 8007a6c:	f8ad 3014 	strh.w	r3, [sp, #20]
 8007a70:	bf14      	ite	ne
 8007a72:	f104 33ff 	addne.w	r3, r4, #4294967295
 8007a76:	4623      	moveq	r3, r4
 8007a78:	9304      	str	r3, [sp, #16]
 8007a7a:	9307      	str	r3, [sp, #28]
 8007a7c:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8007a80:	9002      	str	r0, [sp, #8]
 8007a82:	9006      	str	r0, [sp, #24]
 8007a84:	f8ad 3016 	strh.w	r3, [sp, #22]
 8007a88:	9a20      	ldr	r2, [sp, #128]	; 0x80
 8007a8a:	ab21      	add	r3, sp, #132	; 0x84
 8007a8c:	a902      	add	r1, sp, #8
 8007a8e:	4628      	mov	r0, r5
 8007a90:	9301      	str	r3, [sp, #4]
 8007a92:	f000 f869 	bl	8007b68 <_svfiprintf_r>
 8007a96:	1c43      	adds	r3, r0, #1
 8007a98:	bfbc      	itt	lt
 8007a9a:	238b      	movlt	r3, #139	; 0x8b
 8007a9c:	602b      	strlt	r3, [r5, #0]
 8007a9e:	2c00      	cmp	r4, #0
 8007aa0:	d0dd      	beq.n	8007a5e <sniprintf+0x16>
 8007aa2:	9b02      	ldr	r3, [sp, #8]
 8007aa4:	2200      	movs	r2, #0
 8007aa6:	701a      	strb	r2, [r3, #0]
 8007aa8:	e7d9      	b.n	8007a5e <sniprintf+0x16>
 8007aaa:	bf00      	nop
 8007aac:	20000184 	.word	0x20000184

08007ab0 <__ssputs_r>:
 8007ab0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8007ab4:	688e      	ldr	r6, [r1, #8]
 8007ab6:	429e      	cmp	r6, r3
 8007ab8:	4682      	mov	sl, r0
 8007aba:	460c      	mov	r4, r1
 8007abc:	4690      	mov	r8, r2
 8007abe:	461f      	mov	r7, r3
 8007ac0:	d838      	bhi.n	8007b34 <__ssputs_r+0x84>
 8007ac2:	898a      	ldrh	r2, [r1, #12]
 8007ac4:	f412 6f90 	tst.w	r2, #1152	; 0x480
 8007ac8:	d032      	beq.n	8007b30 <__ssputs_r+0x80>
 8007aca:	6825      	ldr	r5, [r4, #0]
 8007acc:	6909      	ldr	r1, [r1, #16]
 8007ace:	eba5 0901 	sub.w	r9, r5, r1
 8007ad2:	6965      	ldr	r5, [r4, #20]
 8007ad4:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8007ad8:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8007adc:	3301      	adds	r3, #1
 8007ade:	444b      	add	r3, r9
 8007ae0:	106d      	asrs	r5, r5, #1
 8007ae2:	429d      	cmp	r5, r3
 8007ae4:	bf38      	it	cc
 8007ae6:	461d      	movcc	r5, r3
 8007ae8:	0553      	lsls	r3, r2, #21
 8007aea:	d531      	bpl.n	8007b50 <__ssputs_r+0xa0>
 8007aec:	4629      	mov	r1, r5
 8007aee:	f000 fb3b 	bl	8008168 <_malloc_r>
 8007af2:	4606      	mov	r6, r0
 8007af4:	b950      	cbnz	r0, 8007b0c <__ssputs_r+0x5c>
 8007af6:	230c      	movs	r3, #12
 8007af8:	f8ca 3000 	str.w	r3, [sl]
 8007afc:	89a3      	ldrh	r3, [r4, #12]
 8007afe:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8007b02:	81a3      	strh	r3, [r4, #12]
 8007b04:	f04f 30ff 	mov.w	r0, #4294967295
 8007b08:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8007b0c:	6921      	ldr	r1, [r4, #16]
 8007b0e:	464a      	mov	r2, r9
 8007b10:	f7ff ff6a 	bl	80079e8 <memcpy>
 8007b14:	89a3      	ldrh	r3, [r4, #12]
 8007b16:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 8007b1a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8007b1e:	81a3      	strh	r3, [r4, #12]
 8007b20:	6126      	str	r6, [r4, #16]
 8007b22:	6165      	str	r5, [r4, #20]
 8007b24:	444e      	add	r6, r9
 8007b26:	eba5 0509 	sub.w	r5, r5, r9
 8007b2a:	6026      	str	r6, [r4, #0]
 8007b2c:	60a5      	str	r5, [r4, #8]
 8007b2e:	463e      	mov	r6, r7
 8007b30:	42be      	cmp	r6, r7
 8007b32:	d900      	bls.n	8007b36 <__ssputs_r+0x86>
 8007b34:	463e      	mov	r6, r7
 8007b36:	6820      	ldr	r0, [r4, #0]
 8007b38:	4632      	mov	r2, r6
 8007b3a:	4641      	mov	r1, r8
 8007b3c:	f7ff ff62 	bl	8007a04 <memmove>
 8007b40:	68a3      	ldr	r3, [r4, #8]
 8007b42:	1b9b      	subs	r3, r3, r6
 8007b44:	60a3      	str	r3, [r4, #8]
 8007b46:	6823      	ldr	r3, [r4, #0]
 8007b48:	4433      	add	r3, r6
 8007b4a:	6023      	str	r3, [r4, #0]
 8007b4c:	2000      	movs	r0, #0
 8007b4e:	e7db      	b.n	8007b08 <__ssputs_r+0x58>
 8007b50:	462a      	mov	r2, r5
 8007b52:	f000 fb7d 	bl	8008250 <_realloc_r>
 8007b56:	4606      	mov	r6, r0
 8007b58:	2800      	cmp	r0, #0
 8007b5a:	d1e1      	bne.n	8007b20 <__ssputs_r+0x70>
 8007b5c:	6921      	ldr	r1, [r4, #16]
 8007b5e:	4650      	mov	r0, sl
 8007b60:	f000 fa96 	bl	8008090 <_free_r>
 8007b64:	e7c7      	b.n	8007af6 <__ssputs_r+0x46>
	...

08007b68 <_svfiprintf_r>:
 8007b68:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007b6c:	4698      	mov	r8, r3
 8007b6e:	898b      	ldrh	r3, [r1, #12]
 8007b70:	061b      	lsls	r3, r3, #24
 8007b72:	b09d      	sub	sp, #116	; 0x74
 8007b74:	4607      	mov	r7, r0
 8007b76:	460d      	mov	r5, r1
 8007b78:	4614      	mov	r4, r2
 8007b7a:	d50e      	bpl.n	8007b9a <_svfiprintf_r+0x32>
 8007b7c:	690b      	ldr	r3, [r1, #16]
 8007b7e:	b963      	cbnz	r3, 8007b9a <_svfiprintf_r+0x32>
 8007b80:	2140      	movs	r1, #64	; 0x40
 8007b82:	f000 faf1 	bl	8008168 <_malloc_r>
 8007b86:	6028      	str	r0, [r5, #0]
 8007b88:	6128      	str	r0, [r5, #16]
 8007b8a:	b920      	cbnz	r0, 8007b96 <_svfiprintf_r+0x2e>
 8007b8c:	230c      	movs	r3, #12
 8007b8e:	603b      	str	r3, [r7, #0]
 8007b90:	f04f 30ff 	mov.w	r0, #4294967295
 8007b94:	e0d1      	b.n	8007d3a <_svfiprintf_r+0x1d2>
 8007b96:	2340      	movs	r3, #64	; 0x40
 8007b98:	616b      	str	r3, [r5, #20]
 8007b9a:	2300      	movs	r3, #0
 8007b9c:	9309      	str	r3, [sp, #36]	; 0x24
 8007b9e:	2320      	movs	r3, #32
 8007ba0:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8007ba4:	f8cd 800c 	str.w	r8, [sp, #12]
 8007ba8:	2330      	movs	r3, #48	; 0x30
 8007baa:	f8df 81a8 	ldr.w	r8, [pc, #424]	; 8007d54 <_svfiprintf_r+0x1ec>
 8007bae:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8007bb2:	f04f 0901 	mov.w	r9, #1
 8007bb6:	4623      	mov	r3, r4
 8007bb8:	469a      	mov	sl, r3
 8007bba:	f813 2b01 	ldrb.w	r2, [r3], #1
 8007bbe:	b10a      	cbz	r2, 8007bc4 <_svfiprintf_r+0x5c>
 8007bc0:	2a25      	cmp	r2, #37	; 0x25
 8007bc2:	d1f9      	bne.n	8007bb8 <_svfiprintf_r+0x50>
 8007bc4:	ebba 0b04 	subs.w	fp, sl, r4
 8007bc8:	d00b      	beq.n	8007be2 <_svfiprintf_r+0x7a>
 8007bca:	465b      	mov	r3, fp
 8007bcc:	4622      	mov	r2, r4
 8007bce:	4629      	mov	r1, r5
 8007bd0:	4638      	mov	r0, r7
 8007bd2:	f7ff ff6d 	bl	8007ab0 <__ssputs_r>
 8007bd6:	3001      	adds	r0, #1
 8007bd8:	f000 80aa 	beq.w	8007d30 <_svfiprintf_r+0x1c8>
 8007bdc:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8007bde:	445a      	add	r2, fp
 8007be0:	9209      	str	r2, [sp, #36]	; 0x24
 8007be2:	f89a 3000 	ldrb.w	r3, [sl]
 8007be6:	2b00      	cmp	r3, #0
 8007be8:	f000 80a2 	beq.w	8007d30 <_svfiprintf_r+0x1c8>
 8007bec:	2300      	movs	r3, #0
 8007bee:	f04f 32ff 	mov.w	r2, #4294967295
 8007bf2:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8007bf6:	f10a 0a01 	add.w	sl, sl, #1
 8007bfa:	9304      	str	r3, [sp, #16]
 8007bfc:	9307      	str	r3, [sp, #28]
 8007bfe:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8007c02:	931a      	str	r3, [sp, #104]	; 0x68
 8007c04:	4654      	mov	r4, sl
 8007c06:	2205      	movs	r2, #5
 8007c08:	f814 1b01 	ldrb.w	r1, [r4], #1
 8007c0c:	4851      	ldr	r0, [pc, #324]	; (8007d54 <_svfiprintf_r+0x1ec>)
 8007c0e:	f7f8 fadf 	bl	80001d0 <memchr>
 8007c12:	9a04      	ldr	r2, [sp, #16]
 8007c14:	b9d8      	cbnz	r0, 8007c4e <_svfiprintf_r+0xe6>
 8007c16:	06d0      	lsls	r0, r2, #27
 8007c18:	bf44      	itt	mi
 8007c1a:	2320      	movmi	r3, #32
 8007c1c:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8007c20:	0711      	lsls	r1, r2, #28
 8007c22:	bf44      	itt	mi
 8007c24:	232b      	movmi	r3, #43	; 0x2b
 8007c26:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8007c2a:	f89a 3000 	ldrb.w	r3, [sl]
 8007c2e:	2b2a      	cmp	r3, #42	; 0x2a
 8007c30:	d015      	beq.n	8007c5e <_svfiprintf_r+0xf6>
 8007c32:	9a07      	ldr	r2, [sp, #28]
 8007c34:	4654      	mov	r4, sl
 8007c36:	2000      	movs	r0, #0
 8007c38:	f04f 0c0a 	mov.w	ip, #10
 8007c3c:	4621      	mov	r1, r4
 8007c3e:	f811 3b01 	ldrb.w	r3, [r1], #1
 8007c42:	3b30      	subs	r3, #48	; 0x30
 8007c44:	2b09      	cmp	r3, #9
 8007c46:	d94e      	bls.n	8007ce6 <_svfiprintf_r+0x17e>
 8007c48:	b1b0      	cbz	r0, 8007c78 <_svfiprintf_r+0x110>
 8007c4a:	9207      	str	r2, [sp, #28]
 8007c4c:	e014      	b.n	8007c78 <_svfiprintf_r+0x110>
 8007c4e:	eba0 0308 	sub.w	r3, r0, r8
 8007c52:	fa09 f303 	lsl.w	r3, r9, r3
 8007c56:	4313      	orrs	r3, r2
 8007c58:	9304      	str	r3, [sp, #16]
 8007c5a:	46a2      	mov	sl, r4
 8007c5c:	e7d2      	b.n	8007c04 <_svfiprintf_r+0x9c>
 8007c5e:	9b03      	ldr	r3, [sp, #12]
 8007c60:	1d19      	adds	r1, r3, #4
 8007c62:	681b      	ldr	r3, [r3, #0]
 8007c64:	9103      	str	r1, [sp, #12]
 8007c66:	2b00      	cmp	r3, #0
 8007c68:	bfbb      	ittet	lt
 8007c6a:	425b      	neglt	r3, r3
 8007c6c:	f042 0202 	orrlt.w	r2, r2, #2
 8007c70:	9307      	strge	r3, [sp, #28]
 8007c72:	9307      	strlt	r3, [sp, #28]
 8007c74:	bfb8      	it	lt
 8007c76:	9204      	strlt	r2, [sp, #16]
 8007c78:	7823      	ldrb	r3, [r4, #0]
 8007c7a:	2b2e      	cmp	r3, #46	; 0x2e
 8007c7c:	d10c      	bne.n	8007c98 <_svfiprintf_r+0x130>
 8007c7e:	7863      	ldrb	r3, [r4, #1]
 8007c80:	2b2a      	cmp	r3, #42	; 0x2a
 8007c82:	d135      	bne.n	8007cf0 <_svfiprintf_r+0x188>
 8007c84:	9b03      	ldr	r3, [sp, #12]
 8007c86:	1d1a      	adds	r2, r3, #4
 8007c88:	681b      	ldr	r3, [r3, #0]
 8007c8a:	9203      	str	r2, [sp, #12]
 8007c8c:	2b00      	cmp	r3, #0
 8007c8e:	bfb8      	it	lt
 8007c90:	f04f 33ff 	movlt.w	r3, #4294967295
 8007c94:	3402      	adds	r4, #2
 8007c96:	9305      	str	r3, [sp, #20]
 8007c98:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 8007d64 <_svfiprintf_r+0x1fc>
 8007c9c:	7821      	ldrb	r1, [r4, #0]
 8007c9e:	2203      	movs	r2, #3
 8007ca0:	4650      	mov	r0, sl
 8007ca2:	f7f8 fa95 	bl	80001d0 <memchr>
 8007ca6:	b140      	cbz	r0, 8007cba <_svfiprintf_r+0x152>
 8007ca8:	2340      	movs	r3, #64	; 0x40
 8007caa:	eba0 000a 	sub.w	r0, r0, sl
 8007cae:	fa03 f000 	lsl.w	r0, r3, r0
 8007cb2:	9b04      	ldr	r3, [sp, #16]
 8007cb4:	4303      	orrs	r3, r0
 8007cb6:	3401      	adds	r4, #1
 8007cb8:	9304      	str	r3, [sp, #16]
 8007cba:	f814 1b01 	ldrb.w	r1, [r4], #1
 8007cbe:	4826      	ldr	r0, [pc, #152]	; (8007d58 <_svfiprintf_r+0x1f0>)
 8007cc0:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8007cc4:	2206      	movs	r2, #6
 8007cc6:	f7f8 fa83 	bl	80001d0 <memchr>
 8007cca:	2800      	cmp	r0, #0
 8007ccc:	d038      	beq.n	8007d40 <_svfiprintf_r+0x1d8>
 8007cce:	4b23      	ldr	r3, [pc, #140]	; (8007d5c <_svfiprintf_r+0x1f4>)
 8007cd0:	bb1b      	cbnz	r3, 8007d1a <_svfiprintf_r+0x1b2>
 8007cd2:	9b03      	ldr	r3, [sp, #12]
 8007cd4:	3307      	adds	r3, #7
 8007cd6:	f023 0307 	bic.w	r3, r3, #7
 8007cda:	3308      	adds	r3, #8
 8007cdc:	9303      	str	r3, [sp, #12]
 8007cde:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8007ce0:	4433      	add	r3, r6
 8007ce2:	9309      	str	r3, [sp, #36]	; 0x24
 8007ce4:	e767      	b.n	8007bb6 <_svfiprintf_r+0x4e>
 8007ce6:	fb0c 3202 	mla	r2, ip, r2, r3
 8007cea:	460c      	mov	r4, r1
 8007cec:	2001      	movs	r0, #1
 8007cee:	e7a5      	b.n	8007c3c <_svfiprintf_r+0xd4>
 8007cf0:	2300      	movs	r3, #0
 8007cf2:	3401      	adds	r4, #1
 8007cf4:	9305      	str	r3, [sp, #20]
 8007cf6:	4619      	mov	r1, r3
 8007cf8:	f04f 0c0a 	mov.w	ip, #10
 8007cfc:	4620      	mov	r0, r4
 8007cfe:	f810 2b01 	ldrb.w	r2, [r0], #1
 8007d02:	3a30      	subs	r2, #48	; 0x30
 8007d04:	2a09      	cmp	r2, #9
 8007d06:	d903      	bls.n	8007d10 <_svfiprintf_r+0x1a8>
 8007d08:	2b00      	cmp	r3, #0
 8007d0a:	d0c5      	beq.n	8007c98 <_svfiprintf_r+0x130>
 8007d0c:	9105      	str	r1, [sp, #20]
 8007d0e:	e7c3      	b.n	8007c98 <_svfiprintf_r+0x130>
 8007d10:	fb0c 2101 	mla	r1, ip, r1, r2
 8007d14:	4604      	mov	r4, r0
 8007d16:	2301      	movs	r3, #1
 8007d18:	e7f0      	b.n	8007cfc <_svfiprintf_r+0x194>
 8007d1a:	ab03      	add	r3, sp, #12
 8007d1c:	9300      	str	r3, [sp, #0]
 8007d1e:	462a      	mov	r2, r5
 8007d20:	4b0f      	ldr	r3, [pc, #60]	; (8007d60 <_svfiprintf_r+0x1f8>)
 8007d22:	a904      	add	r1, sp, #16
 8007d24:	4638      	mov	r0, r7
 8007d26:	f3af 8000 	nop.w
 8007d2a:	1c42      	adds	r2, r0, #1
 8007d2c:	4606      	mov	r6, r0
 8007d2e:	d1d6      	bne.n	8007cde <_svfiprintf_r+0x176>
 8007d30:	89ab      	ldrh	r3, [r5, #12]
 8007d32:	065b      	lsls	r3, r3, #25
 8007d34:	f53f af2c 	bmi.w	8007b90 <_svfiprintf_r+0x28>
 8007d38:	9809      	ldr	r0, [sp, #36]	; 0x24
 8007d3a:	b01d      	add	sp, #116	; 0x74
 8007d3c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007d40:	ab03      	add	r3, sp, #12
 8007d42:	9300      	str	r3, [sp, #0]
 8007d44:	462a      	mov	r2, r5
 8007d46:	4b06      	ldr	r3, [pc, #24]	; (8007d60 <_svfiprintf_r+0x1f8>)
 8007d48:	a904      	add	r1, sp, #16
 8007d4a:	4638      	mov	r0, r7
 8007d4c:	f000 f87a 	bl	8007e44 <_printf_i>
 8007d50:	e7eb      	b.n	8007d2a <_svfiprintf_r+0x1c2>
 8007d52:	bf00      	nop
 8007d54:	08009958 	.word	0x08009958
 8007d58:	08009962 	.word	0x08009962
 8007d5c:	00000000 	.word	0x00000000
 8007d60:	08007ab1 	.word	0x08007ab1
 8007d64:	0800995e 	.word	0x0800995e

08007d68 <_printf_common>:
 8007d68:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8007d6c:	4616      	mov	r6, r2
 8007d6e:	4699      	mov	r9, r3
 8007d70:	688a      	ldr	r2, [r1, #8]
 8007d72:	690b      	ldr	r3, [r1, #16]
 8007d74:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8007d78:	4293      	cmp	r3, r2
 8007d7a:	bfb8      	it	lt
 8007d7c:	4613      	movlt	r3, r2
 8007d7e:	6033      	str	r3, [r6, #0]
 8007d80:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8007d84:	4607      	mov	r7, r0
 8007d86:	460c      	mov	r4, r1
 8007d88:	b10a      	cbz	r2, 8007d8e <_printf_common+0x26>
 8007d8a:	3301      	adds	r3, #1
 8007d8c:	6033      	str	r3, [r6, #0]
 8007d8e:	6823      	ldr	r3, [r4, #0]
 8007d90:	0699      	lsls	r1, r3, #26
 8007d92:	bf42      	ittt	mi
 8007d94:	6833      	ldrmi	r3, [r6, #0]
 8007d96:	3302      	addmi	r3, #2
 8007d98:	6033      	strmi	r3, [r6, #0]
 8007d9a:	6825      	ldr	r5, [r4, #0]
 8007d9c:	f015 0506 	ands.w	r5, r5, #6
 8007da0:	d106      	bne.n	8007db0 <_printf_common+0x48>
 8007da2:	f104 0a19 	add.w	sl, r4, #25
 8007da6:	68e3      	ldr	r3, [r4, #12]
 8007da8:	6832      	ldr	r2, [r6, #0]
 8007daa:	1a9b      	subs	r3, r3, r2
 8007dac:	42ab      	cmp	r3, r5
 8007dae:	dc26      	bgt.n	8007dfe <_printf_common+0x96>
 8007db0:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8007db4:	1e13      	subs	r3, r2, #0
 8007db6:	6822      	ldr	r2, [r4, #0]
 8007db8:	bf18      	it	ne
 8007dba:	2301      	movne	r3, #1
 8007dbc:	0692      	lsls	r2, r2, #26
 8007dbe:	d42b      	bmi.n	8007e18 <_printf_common+0xb0>
 8007dc0:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8007dc4:	4649      	mov	r1, r9
 8007dc6:	4638      	mov	r0, r7
 8007dc8:	47c0      	blx	r8
 8007dca:	3001      	adds	r0, #1
 8007dcc:	d01e      	beq.n	8007e0c <_printf_common+0xa4>
 8007dce:	6823      	ldr	r3, [r4, #0]
 8007dd0:	68e5      	ldr	r5, [r4, #12]
 8007dd2:	6832      	ldr	r2, [r6, #0]
 8007dd4:	f003 0306 	and.w	r3, r3, #6
 8007dd8:	2b04      	cmp	r3, #4
 8007dda:	bf08      	it	eq
 8007ddc:	1aad      	subeq	r5, r5, r2
 8007dde:	68a3      	ldr	r3, [r4, #8]
 8007de0:	6922      	ldr	r2, [r4, #16]
 8007de2:	bf0c      	ite	eq
 8007de4:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8007de8:	2500      	movne	r5, #0
 8007dea:	4293      	cmp	r3, r2
 8007dec:	bfc4      	itt	gt
 8007dee:	1a9b      	subgt	r3, r3, r2
 8007df0:	18ed      	addgt	r5, r5, r3
 8007df2:	2600      	movs	r6, #0
 8007df4:	341a      	adds	r4, #26
 8007df6:	42b5      	cmp	r5, r6
 8007df8:	d11a      	bne.n	8007e30 <_printf_common+0xc8>
 8007dfa:	2000      	movs	r0, #0
 8007dfc:	e008      	b.n	8007e10 <_printf_common+0xa8>
 8007dfe:	2301      	movs	r3, #1
 8007e00:	4652      	mov	r2, sl
 8007e02:	4649      	mov	r1, r9
 8007e04:	4638      	mov	r0, r7
 8007e06:	47c0      	blx	r8
 8007e08:	3001      	adds	r0, #1
 8007e0a:	d103      	bne.n	8007e14 <_printf_common+0xac>
 8007e0c:	f04f 30ff 	mov.w	r0, #4294967295
 8007e10:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8007e14:	3501      	adds	r5, #1
 8007e16:	e7c6      	b.n	8007da6 <_printf_common+0x3e>
 8007e18:	18e1      	adds	r1, r4, r3
 8007e1a:	1c5a      	adds	r2, r3, #1
 8007e1c:	2030      	movs	r0, #48	; 0x30
 8007e1e:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8007e22:	4422      	add	r2, r4
 8007e24:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8007e28:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8007e2c:	3302      	adds	r3, #2
 8007e2e:	e7c7      	b.n	8007dc0 <_printf_common+0x58>
 8007e30:	2301      	movs	r3, #1
 8007e32:	4622      	mov	r2, r4
 8007e34:	4649      	mov	r1, r9
 8007e36:	4638      	mov	r0, r7
 8007e38:	47c0      	blx	r8
 8007e3a:	3001      	adds	r0, #1
 8007e3c:	d0e6      	beq.n	8007e0c <_printf_common+0xa4>
 8007e3e:	3601      	adds	r6, #1
 8007e40:	e7d9      	b.n	8007df6 <_printf_common+0x8e>
	...

08007e44 <_printf_i>:
 8007e44:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8007e48:	7e0f      	ldrb	r7, [r1, #24]
 8007e4a:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8007e4c:	2f78      	cmp	r7, #120	; 0x78
 8007e4e:	4691      	mov	r9, r2
 8007e50:	4680      	mov	r8, r0
 8007e52:	460c      	mov	r4, r1
 8007e54:	469a      	mov	sl, r3
 8007e56:	f101 0243 	add.w	r2, r1, #67	; 0x43
 8007e5a:	d807      	bhi.n	8007e6c <_printf_i+0x28>
 8007e5c:	2f62      	cmp	r7, #98	; 0x62
 8007e5e:	d80a      	bhi.n	8007e76 <_printf_i+0x32>
 8007e60:	2f00      	cmp	r7, #0
 8007e62:	f000 80d8 	beq.w	8008016 <_printf_i+0x1d2>
 8007e66:	2f58      	cmp	r7, #88	; 0x58
 8007e68:	f000 80a3 	beq.w	8007fb2 <_printf_i+0x16e>
 8007e6c:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8007e70:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8007e74:	e03a      	b.n	8007eec <_printf_i+0xa8>
 8007e76:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8007e7a:	2b15      	cmp	r3, #21
 8007e7c:	d8f6      	bhi.n	8007e6c <_printf_i+0x28>
 8007e7e:	a101      	add	r1, pc, #4	; (adr r1, 8007e84 <_printf_i+0x40>)
 8007e80:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8007e84:	08007edd 	.word	0x08007edd
 8007e88:	08007ef1 	.word	0x08007ef1
 8007e8c:	08007e6d 	.word	0x08007e6d
 8007e90:	08007e6d 	.word	0x08007e6d
 8007e94:	08007e6d 	.word	0x08007e6d
 8007e98:	08007e6d 	.word	0x08007e6d
 8007e9c:	08007ef1 	.word	0x08007ef1
 8007ea0:	08007e6d 	.word	0x08007e6d
 8007ea4:	08007e6d 	.word	0x08007e6d
 8007ea8:	08007e6d 	.word	0x08007e6d
 8007eac:	08007e6d 	.word	0x08007e6d
 8007eb0:	08007ffd 	.word	0x08007ffd
 8007eb4:	08007f21 	.word	0x08007f21
 8007eb8:	08007fdf 	.word	0x08007fdf
 8007ebc:	08007e6d 	.word	0x08007e6d
 8007ec0:	08007e6d 	.word	0x08007e6d
 8007ec4:	0800801f 	.word	0x0800801f
 8007ec8:	08007e6d 	.word	0x08007e6d
 8007ecc:	08007f21 	.word	0x08007f21
 8007ed0:	08007e6d 	.word	0x08007e6d
 8007ed4:	08007e6d 	.word	0x08007e6d
 8007ed8:	08007fe7 	.word	0x08007fe7
 8007edc:	682b      	ldr	r3, [r5, #0]
 8007ede:	1d1a      	adds	r2, r3, #4
 8007ee0:	681b      	ldr	r3, [r3, #0]
 8007ee2:	602a      	str	r2, [r5, #0]
 8007ee4:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8007ee8:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8007eec:	2301      	movs	r3, #1
 8007eee:	e0a3      	b.n	8008038 <_printf_i+0x1f4>
 8007ef0:	6820      	ldr	r0, [r4, #0]
 8007ef2:	6829      	ldr	r1, [r5, #0]
 8007ef4:	0606      	lsls	r6, r0, #24
 8007ef6:	f101 0304 	add.w	r3, r1, #4
 8007efa:	d50a      	bpl.n	8007f12 <_printf_i+0xce>
 8007efc:	680e      	ldr	r6, [r1, #0]
 8007efe:	602b      	str	r3, [r5, #0]
 8007f00:	2e00      	cmp	r6, #0
 8007f02:	da03      	bge.n	8007f0c <_printf_i+0xc8>
 8007f04:	232d      	movs	r3, #45	; 0x2d
 8007f06:	4276      	negs	r6, r6
 8007f08:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8007f0c:	485e      	ldr	r0, [pc, #376]	; (8008088 <_printf_i+0x244>)
 8007f0e:	230a      	movs	r3, #10
 8007f10:	e019      	b.n	8007f46 <_printf_i+0x102>
 8007f12:	680e      	ldr	r6, [r1, #0]
 8007f14:	602b      	str	r3, [r5, #0]
 8007f16:	f010 0f40 	tst.w	r0, #64	; 0x40
 8007f1a:	bf18      	it	ne
 8007f1c:	b236      	sxthne	r6, r6
 8007f1e:	e7ef      	b.n	8007f00 <_printf_i+0xbc>
 8007f20:	682b      	ldr	r3, [r5, #0]
 8007f22:	6820      	ldr	r0, [r4, #0]
 8007f24:	1d19      	adds	r1, r3, #4
 8007f26:	6029      	str	r1, [r5, #0]
 8007f28:	0601      	lsls	r1, r0, #24
 8007f2a:	d501      	bpl.n	8007f30 <_printf_i+0xec>
 8007f2c:	681e      	ldr	r6, [r3, #0]
 8007f2e:	e002      	b.n	8007f36 <_printf_i+0xf2>
 8007f30:	0646      	lsls	r6, r0, #25
 8007f32:	d5fb      	bpl.n	8007f2c <_printf_i+0xe8>
 8007f34:	881e      	ldrh	r6, [r3, #0]
 8007f36:	4854      	ldr	r0, [pc, #336]	; (8008088 <_printf_i+0x244>)
 8007f38:	2f6f      	cmp	r7, #111	; 0x6f
 8007f3a:	bf0c      	ite	eq
 8007f3c:	2308      	moveq	r3, #8
 8007f3e:	230a      	movne	r3, #10
 8007f40:	2100      	movs	r1, #0
 8007f42:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8007f46:	6865      	ldr	r5, [r4, #4]
 8007f48:	60a5      	str	r5, [r4, #8]
 8007f4a:	2d00      	cmp	r5, #0
 8007f4c:	bfa2      	ittt	ge
 8007f4e:	6821      	ldrge	r1, [r4, #0]
 8007f50:	f021 0104 	bicge.w	r1, r1, #4
 8007f54:	6021      	strge	r1, [r4, #0]
 8007f56:	b90e      	cbnz	r6, 8007f5c <_printf_i+0x118>
 8007f58:	2d00      	cmp	r5, #0
 8007f5a:	d04d      	beq.n	8007ff8 <_printf_i+0x1b4>
 8007f5c:	4615      	mov	r5, r2
 8007f5e:	fbb6 f1f3 	udiv	r1, r6, r3
 8007f62:	fb03 6711 	mls	r7, r3, r1, r6
 8007f66:	5dc7      	ldrb	r7, [r0, r7]
 8007f68:	f805 7d01 	strb.w	r7, [r5, #-1]!
 8007f6c:	4637      	mov	r7, r6
 8007f6e:	42bb      	cmp	r3, r7
 8007f70:	460e      	mov	r6, r1
 8007f72:	d9f4      	bls.n	8007f5e <_printf_i+0x11a>
 8007f74:	2b08      	cmp	r3, #8
 8007f76:	d10b      	bne.n	8007f90 <_printf_i+0x14c>
 8007f78:	6823      	ldr	r3, [r4, #0]
 8007f7a:	07de      	lsls	r6, r3, #31
 8007f7c:	d508      	bpl.n	8007f90 <_printf_i+0x14c>
 8007f7e:	6923      	ldr	r3, [r4, #16]
 8007f80:	6861      	ldr	r1, [r4, #4]
 8007f82:	4299      	cmp	r1, r3
 8007f84:	bfde      	ittt	le
 8007f86:	2330      	movle	r3, #48	; 0x30
 8007f88:	f805 3c01 	strble.w	r3, [r5, #-1]
 8007f8c:	f105 35ff 	addle.w	r5, r5, #4294967295
 8007f90:	1b52      	subs	r2, r2, r5
 8007f92:	6122      	str	r2, [r4, #16]
 8007f94:	f8cd a000 	str.w	sl, [sp]
 8007f98:	464b      	mov	r3, r9
 8007f9a:	aa03      	add	r2, sp, #12
 8007f9c:	4621      	mov	r1, r4
 8007f9e:	4640      	mov	r0, r8
 8007fa0:	f7ff fee2 	bl	8007d68 <_printf_common>
 8007fa4:	3001      	adds	r0, #1
 8007fa6:	d14c      	bne.n	8008042 <_printf_i+0x1fe>
 8007fa8:	f04f 30ff 	mov.w	r0, #4294967295
 8007fac:	b004      	add	sp, #16
 8007fae:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8007fb2:	4835      	ldr	r0, [pc, #212]	; (8008088 <_printf_i+0x244>)
 8007fb4:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 8007fb8:	6829      	ldr	r1, [r5, #0]
 8007fba:	6823      	ldr	r3, [r4, #0]
 8007fbc:	f851 6b04 	ldr.w	r6, [r1], #4
 8007fc0:	6029      	str	r1, [r5, #0]
 8007fc2:	061d      	lsls	r5, r3, #24
 8007fc4:	d514      	bpl.n	8007ff0 <_printf_i+0x1ac>
 8007fc6:	07df      	lsls	r7, r3, #31
 8007fc8:	bf44      	itt	mi
 8007fca:	f043 0320 	orrmi.w	r3, r3, #32
 8007fce:	6023      	strmi	r3, [r4, #0]
 8007fd0:	b91e      	cbnz	r6, 8007fda <_printf_i+0x196>
 8007fd2:	6823      	ldr	r3, [r4, #0]
 8007fd4:	f023 0320 	bic.w	r3, r3, #32
 8007fd8:	6023      	str	r3, [r4, #0]
 8007fda:	2310      	movs	r3, #16
 8007fdc:	e7b0      	b.n	8007f40 <_printf_i+0xfc>
 8007fde:	6823      	ldr	r3, [r4, #0]
 8007fe0:	f043 0320 	orr.w	r3, r3, #32
 8007fe4:	6023      	str	r3, [r4, #0]
 8007fe6:	2378      	movs	r3, #120	; 0x78
 8007fe8:	4828      	ldr	r0, [pc, #160]	; (800808c <_printf_i+0x248>)
 8007fea:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8007fee:	e7e3      	b.n	8007fb8 <_printf_i+0x174>
 8007ff0:	0659      	lsls	r1, r3, #25
 8007ff2:	bf48      	it	mi
 8007ff4:	b2b6      	uxthmi	r6, r6
 8007ff6:	e7e6      	b.n	8007fc6 <_printf_i+0x182>
 8007ff8:	4615      	mov	r5, r2
 8007ffa:	e7bb      	b.n	8007f74 <_printf_i+0x130>
 8007ffc:	682b      	ldr	r3, [r5, #0]
 8007ffe:	6826      	ldr	r6, [r4, #0]
 8008000:	6961      	ldr	r1, [r4, #20]
 8008002:	1d18      	adds	r0, r3, #4
 8008004:	6028      	str	r0, [r5, #0]
 8008006:	0635      	lsls	r5, r6, #24
 8008008:	681b      	ldr	r3, [r3, #0]
 800800a:	d501      	bpl.n	8008010 <_printf_i+0x1cc>
 800800c:	6019      	str	r1, [r3, #0]
 800800e:	e002      	b.n	8008016 <_printf_i+0x1d2>
 8008010:	0670      	lsls	r0, r6, #25
 8008012:	d5fb      	bpl.n	800800c <_printf_i+0x1c8>
 8008014:	8019      	strh	r1, [r3, #0]
 8008016:	2300      	movs	r3, #0
 8008018:	6123      	str	r3, [r4, #16]
 800801a:	4615      	mov	r5, r2
 800801c:	e7ba      	b.n	8007f94 <_printf_i+0x150>
 800801e:	682b      	ldr	r3, [r5, #0]
 8008020:	1d1a      	adds	r2, r3, #4
 8008022:	602a      	str	r2, [r5, #0]
 8008024:	681d      	ldr	r5, [r3, #0]
 8008026:	6862      	ldr	r2, [r4, #4]
 8008028:	2100      	movs	r1, #0
 800802a:	4628      	mov	r0, r5
 800802c:	f7f8 f8d0 	bl	80001d0 <memchr>
 8008030:	b108      	cbz	r0, 8008036 <_printf_i+0x1f2>
 8008032:	1b40      	subs	r0, r0, r5
 8008034:	6060      	str	r0, [r4, #4]
 8008036:	6863      	ldr	r3, [r4, #4]
 8008038:	6123      	str	r3, [r4, #16]
 800803a:	2300      	movs	r3, #0
 800803c:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8008040:	e7a8      	b.n	8007f94 <_printf_i+0x150>
 8008042:	6923      	ldr	r3, [r4, #16]
 8008044:	462a      	mov	r2, r5
 8008046:	4649      	mov	r1, r9
 8008048:	4640      	mov	r0, r8
 800804a:	47d0      	blx	sl
 800804c:	3001      	adds	r0, #1
 800804e:	d0ab      	beq.n	8007fa8 <_printf_i+0x164>
 8008050:	6823      	ldr	r3, [r4, #0]
 8008052:	079b      	lsls	r3, r3, #30
 8008054:	d413      	bmi.n	800807e <_printf_i+0x23a>
 8008056:	68e0      	ldr	r0, [r4, #12]
 8008058:	9b03      	ldr	r3, [sp, #12]
 800805a:	4298      	cmp	r0, r3
 800805c:	bfb8      	it	lt
 800805e:	4618      	movlt	r0, r3
 8008060:	e7a4      	b.n	8007fac <_printf_i+0x168>
 8008062:	2301      	movs	r3, #1
 8008064:	4632      	mov	r2, r6
 8008066:	4649      	mov	r1, r9
 8008068:	4640      	mov	r0, r8
 800806a:	47d0      	blx	sl
 800806c:	3001      	adds	r0, #1
 800806e:	d09b      	beq.n	8007fa8 <_printf_i+0x164>
 8008070:	3501      	adds	r5, #1
 8008072:	68e3      	ldr	r3, [r4, #12]
 8008074:	9903      	ldr	r1, [sp, #12]
 8008076:	1a5b      	subs	r3, r3, r1
 8008078:	42ab      	cmp	r3, r5
 800807a:	dcf2      	bgt.n	8008062 <_printf_i+0x21e>
 800807c:	e7eb      	b.n	8008056 <_printf_i+0x212>
 800807e:	2500      	movs	r5, #0
 8008080:	f104 0619 	add.w	r6, r4, #25
 8008084:	e7f5      	b.n	8008072 <_printf_i+0x22e>
 8008086:	bf00      	nop
 8008088:	08009969 	.word	0x08009969
 800808c:	0800997a 	.word	0x0800997a

08008090 <_free_r>:
 8008090:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8008092:	2900      	cmp	r1, #0
 8008094:	d044      	beq.n	8008120 <_free_r+0x90>
 8008096:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800809a:	9001      	str	r0, [sp, #4]
 800809c:	2b00      	cmp	r3, #0
 800809e:	f1a1 0404 	sub.w	r4, r1, #4
 80080a2:	bfb8      	it	lt
 80080a4:	18e4      	addlt	r4, r4, r3
 80080a6:	f000 f913 	bl	80082d0 <__malloc_lock>
 80080aa:	4a1e      	ldr	r2, [pc, #120]	; (8008124 <_free_r+0x94>)
 80080ac:	9801      	ldr	r0, [sp, #4]
 80080ae:	6813      	ldr	r3, [r2, #0]
 80080b0:	b933      	cbnz	r3, 80080c0 <_free_r+0x30>
 80080b2:	6063      	str	r3, [r4, #4]
 80080b4:	6014      	str	r4, [r2, #0]
 80080b6:	b003      	add	sp, #12
 80080b8:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 80080bc:	f000 b90e 	b.w	80082dc <__malloc_unlock>
 80080c0:	42a3      	cmp	r3, r4
 80080c2:	d908      	bls.n	80080d6 <_free_r+0x46>
 80080c4:	6825      	ldr	r5, [r4, #0]
 80080c6:	1961      	adds	r1, r4, r5
 80080c8:	428b      	cmp	r3, r1
 80080ca:	bf01      	itttt	eq
 80080cc:	6819      	ldreq	r1, [r3, #0]
 80080ce:	685b      	ldreq	r3, [r3, #4]
 80080d0:	1949      	addeq	r1, r1, r5
 80080d2:	6021      	streq	r1, [r4, #0]
 80080d4:	e7ed      	b.n	80080b2 <_free_r+0x22>
 80080d6:	461a      	mov	r2, r3
 80080d8:	685b      	ldr	r3, [r3, #4]
 80080da:	b10b      	cbz	r3, 80080e0 <_free_r+0x50>
 80080dc:	42a3      	cmp	r3, r4
 80080de:	d9fa      	bls.n	80080d6 <_free_r+0x46>
 80080e0:	6811      	ldr	r1, [r2, #0]
 80080e2:	1855      	adds	r5, r2, r1
 80080e4:	42a5      	cmp	r5, r4
 80080e6:	d10b      	bne.n	8008100 <_free_r+0x70>
 80080e8:	6824      	ldr	r4, [r4, #0]
 80080ea:	4421      	add	r1, r4
 80080ec:	1854      	adds	r4, r2, r1
 80080ee:	42a3      	cmp	r3, r4
 80080f0:	6011      	str	r1, [r2, #0]
 80080f2:	d1e0      	bne.n	80080b6 <_free_r+0x26>
 80080f4:	681c      	ldr	r4, [r3, #0]
 80080f6:	685b      	ldr	r3, [r3, #4]
 80080f8:	6053      	str	r3, [r2, #4]
 80080fa:	4421      	add	r1, r4
 80080fc:	6011      	str	r1, [r2, #0]
 80080fe:	e7da      	b.n	80080b6 <_free_r+0x26>
 8008100:	d902      	bls.n	8008108 <_free_r+0x78>
 8008102:	230c      	movs	r3, #12
 8008104:	6003      	str	r3, [r0, #0]
 8008106:	e7d6      	b.n	80080b6 <_free_r+0x26>
 8008108:	6825      	ldr	r5, [r4, #0]
 800810a:	1961      	adds	r1, r4, r5
 800810c:	428b      	cmp	r3, r1
 800810e:	bf04      	itt	eq
 8008110:	6819      	ldreq	r1, [r3, #0]
 8008112:	685b      	ldreq	r3, [r3, #4]
 8008114:	6063      	str	r3, [r4, #4]
 8008116:	bf04      	itt	eq
 8008118:	1949      	addeq	r1, r1, r5
 800811a:	6021      	streq	r1, [r4, #0]
 800811c:	6054      	str	r4, [r2, #4]
 800811e:	e7ca      	b.n	80080b6 <_free_r+0x26>
 8008120:	b003      	add	sp, #12
 8008122:	bd30      	pop	{r4, r5, pc}
 8008124:	200011b4 	.word	0x200011b4

08008128 <sbrk_aligned>:
 8008128:	b570      	push	{r4, r5, r6, lr}
 800812a:	4e0e      	ldr	r6, [pc, #56]	; (8008164 <sbrk_aligned+0x3c>)
 800812c:	460c      	mov	r4, r1
 800812e:	6831      	ldr	r1, [r6, #0]
 8008130:	4605      	mov	r5, r0
 8008132:	b911      	cbnz	r1, 800813a <sbrk_aligned+0x12>
 8008134:	f000 f8bc 	bl	80082b0 <_sbrk_r>
 8008138:	6030      	str	r0, [r6, #0]
 800813a:	4621      	mov	r1, r4
 800813c:	4628      	mov	r0, r5
 800813e:	f000 f8b7 	bl	80082b0 <_sbrk_r>
 8008142:	1c43      	adds	r3, r0, #1
 8008144:	d00a      	beq.n	800815c <sbrk_aligned+0x34>
 8008146:	1cc4      	adds	r4, r0, #3
 8008148:	f024 0403 	bic.w	r4, r4, #3
 800814c:	42a0      	cmp	r0, r4
 800814e:	d007      	beq.n	8008160 <sbrk_aligned+0x38>
 8008150:	1a21      	subs	r1, r4, r0
 8008152:	4628      	mov	r0, r5
 8008154:	f000 f8ac 	bl	80082b0 <_sbrk_r>
 8008158:	3001      	adds	r0, #1
 800815a:	d101      	bne.n	8008160 <sbrk_aligned+0x38>
 800815c:	f04f 34ff 	mov.w	r4, #4294967295
 8008160:	4620      	mov	r0, r4
 8008162:	bd70      	pop	{r4, r5, r6, pc}
 8008164:	200011b8 	.word	0x200011b8

08008168 <_malloc_r>:
 8008168:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800816c:	1ccd      	adds	r5, r1, #3
 800816e:	f025 0503 	bic.w	r5, r5, #3
 8008172:	3508      	adds	r5, #8
 8008174:	2d0c      	cmp	r5, #12
 8008176:	bf38      	it	cc
 8008178:	250c      	movcc	r5, #12
 800817a:	2d00      	cmp	r5, #0
 800817c:	4607      	mov	r7, r0
 800817e:	db01      	blt.n	8008184 <_malloc_r+0x1c>
 8008180:	42a9      	cmp	r1, r5
 8008182:	d905      	bls.n	8008190 <_malloc_r+0x28>
 8008184:	230c      	movs	r3, #12
 8008186:	603b      	str	r3, [r7, #0]
 8008188:	2600      	movs	r6, #0
 800818a:	4630      	mov	r0, r6
 800818c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8008190:	4e2e      	ldr	r6, [pc, #184]	; (800824c <_malloc_r+0xe4>)
 8008192:	f000 f89d 	bl	80082d0 <__malloc_lock>
 8008196:	6833      	ldr	r3, [r6, #0]
 8008198:	461c      	mov	r4, r3
 800819a:	bb34      	cbnz	r4, 80081ea <_malloc_r+0x82>
 800819c:	4629      	mov	r1, r5
 800819e:	4638      	mov	r0, r7
 80081a0:	f7ff ffc2 	bl	8008128 <sbrk_aligned>
 80081a4:	1c43      	adds	r3, r0, #1
 80081a6:	4604      	mov	r4, r0
 80081a8:	d14d      	bne.n	8008246 <_malloc_r+0xde>
 80081aa:	6834      	ldr	r4, [r6, #0]
 80081ac:	4626      	mov	r6, r4
 80081ae:	2e00      	cmp	r6, #0
 80081b0:	d140      	bne.n	8008234 <_malloc_r+0xcc>
 80081b2:	6823      	ldr	r3, [r4, #0]
 80081b4:	4631      	mov	r1, r6
 80081b6:	4638      	mov	r0, r7
 80081b8:	eb04 0803 	add.w	r8, r4, r3
 80081bc:	f000 f878 	bl	80082b0 <_sbrk_r>
 80081c0:	4580      	cmp	r8, r0
 80081c2:	d13a      	bne.n	800823a <_malloc_r+0xd2>
 80081c4:	6821      	ldr	r1, [r4, #0]
 80081c6:	3503      	adds	r5, #3
 80081c8:	1a6d      	subs	r5, r5, r1
 80081ca:	f025 0503 	bic.w	r5, r5, #3
 80081ce:	3508      	adds	r5, #8
 80081d0:	2d0c      	cmp	r5, #12
 80081d2:	bf38      	it	cc
 80081d4:	250c      	movcc	r5, #12
 80081d6:	4629      	mov	r1, r5
 80081d8:	4638      	mov	r0, r7
 80081da:	f7ff ffa5 	bl	8008128 <sbrk_aligned>
 80081de:	3001      	adds	r0, #1
 80081e0:	d02b      	beq.n	800823a <_malloc_r+0xd2>
 80081e2:	6823      	ldr	r3, [r4, #0]
 80081e4:	442b      	add	r3, r5
 80081e6:	6023      	str	r3, [r4, #0]
 80081e8:	e00e      	b.n	8008208 <_malloc_r+0xa0>
 80081ea:	6822      	ldr	r2, [r4, #0]
 80081ec:	1b52      	subs	r2, r2, r5
 80081ee:	d41e      	bmi.n	800822e <_malloc_r+0xc6>
 80081f0:	2a0b      	cmp	r2, #11
 80081f2:	d916      	bls.n	8008222 <_malloc_r+0xba>
 80081f4:	1961      	adds	r1, r4, r5
 80081f6:	42a3      	cmp	r3, r4
 80081f8:	6025      	str	r5, [r4, #0]
 80081fa:	bf18      	it	ne
 80081fc:	6059      	strne	r1, [r3, #4]
 80081fe:	6863      	ldr	r3, [r4, #4]
 8008200:	bf08      	it	eq
 8008202:	6031      	streq	r1, [r6, #0]
 8008204:	5162      	str	r2, [r4, r5]
 8008206:	604b      	str	r3, [r1, #4]
 8008208:	4638      	mov	r0, r7
 800820a:	f104 060b 	add.w	r6, r4, #11
 800820e:	f000 f865 	bl	80082dc <__malloc_unlock>
 8008212:	f026 0607 	bic.w	r6, r6, #7
 8008216:	1d23      	adds	r3, r4, #4
 8008218:	1af2      	subs	r2, r6, r3
 800821a:	d0b6      	beq.n	800818a <_malloc_r+0x22>
 800821c:	1b9b      	subs	r3, r3, r6
 800821e:	50a3      	str	r3, [r4, r2]
 8008220:	e7b3      	b.n	800818a <_malloc_r+0x22>
 8008222:	6862      	ldr	r2, [r4, #4]
 8008224:	42a3      	cmp	r3, r4
 8008226:	bf0c      	ite	eq
 8008228:	6032      	streq	r2, [r6, #0]
 800822a:	605a      	strne	r2, [r3, #4]
 800822c:	e7ec      	b.n	8008208 <_malloc_r+0xa0>
 800822e:	4623      	mov	r3, r4
 8008230:	6864      	ldr	r4, [r4, #4]
 8008232:	e7b2      	b.n	800819a <_malloc_r+0x32>
 8008234:	4634      	mov	r4, r6
 8008236:	6876      	ldr	r6, [r6, #4]
 8008238:	e7b9      	b.n	80081ae <_malloc_r+0x46>
 800823a:	230c      	movs	r3, #12
 800823c:	603b      	str	r3, [r7, #0]
 800823e:	4638      	mov	r0, r7
 8008240:	f000 f84c 	bl	80082dc <__malloc_unlock>
 8008244:	e7a1      	b.n	800818a <_malloc_r+0x22>
 8008246:	6025      	str	r5, [r4, #0]
 8008248:	e7de      	b.n	8008208 <_malloc_r+0xa0>
 800824a:	bf00      	nop
 800824c:	200011b4 	.word	0x200011b4

08008250 <_realloc_r>:
 8008250:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8008254:	4680      	mov	r8, r0
 8008256:	4614      	mov	r4, r2
 8008258:	460e      	mov	r6, r1
 800825a:	b921      	cbnz	r1, 8008266 <_realloc_r+0x16>
 800825c:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8008260:	4611      	mov	r1, r2
 8008262:	f7ff bf81 	b.w	8008168 <_malloc_r>
 8008266:	b92a      	cbnz	r2, 8008274 <_realloc_r+0x24>
 8008268:	f7ff ff12 	bl	8008090 <_free_r>
 800826c:	4625      	mov	r5, r4
 800826e:	4628      	mov	r0, r5
 8008270:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8008274:	f000 f838 	bl	80082e8 <_malloc_usable_size_r>
 8008278:	4284      	cmp	r4, r0
 800827a:	4607      	mov	r7, r0
 800827c:	d802      	bhi.n	8008284 <_realloc_r+0x34>
 800827e:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 8008282:	d812      	bhi.n	80082aa <_realloc_r+0x5a>
 8008284:	4621      	mov	r1, r4
 8008286:	4640      	mov	r0, r8
 8008288:	f7ff ff6e 	bl	8008168 <_malloc_r>
 800828c:	4605      	mov	r5, r0
 800828e:	2800      	cmp	r0, #0
 8008290:	d0ed      	beq.n	800826e <_realloc_r+0x1e>
 8008292:	42bc      	cmp	r4, r7
 8008294:	4622      	mov	r2, r4
 8008296:	4631      	mov	r1, r6
 8008298:	bf28      	it	cs
 800829a:	463a      	movcs	r2, r7
 800829c:	f7ff fba4 	bl	80079e8 <memcpy>
 80082a0:	4631      	mov	r1, r6
 80082a2:	4640      	mov	r0, r8
 80082a4:	f7ff fef4 	bl	8008090 <_free_r>
 80082a8:	e7e1      	b.n	800826e <_realloc_r+0x1e>
 80082aa:	4635      	mov	r5, r6
 80082ac:	e7df      	b.n	800826e <_realloc_r+0x1e>
	...

080082b0 <_sbrk_r>:
 80082b0:	b538      	push	{r3, r4, r5, lr}
 80082b2:	4d06      	ldr	r5, [pc, #24]	; (80082cc <_sbrk_r+0x1c>)
 80082b4:	2300      	movs	r3, #0
 80082b6:	4604      	mov	r4, r0
 80082b8:	4608      	mov	r0, r1
 80082ba:	602b      	str	r3, [r5, #0]
 80082bc:	f7fa fd48 	bl	8002d50 <_sbrk>
 80082c0:	1c43      	adds	r3, r0, #1
 80082c2:	d102      	bne.n	80082ca <_sbrk_r+0x1a>
 80082c4:	682b      	ldr	r3, [r5, #0]
 80082c6:	b103      	cbz	r3, 80082ca <_sbrk_r+0x1a>
 80082c8:	6023      	str	r3, [r4, #0]
 80082ca:	bd38      	pop	{r3, r4, r5, pc}
 80082cc:	200011bc 	.word	0x200011bc

080082d0 <__malloc_lock>:
 80082d0:	4801      	ldr	r0, [pc, #4]	; (80082d8 <__malloc_lock+0x8>)
 80082d2:	f000 b811 	b.w	80082f8 <__retarget_lock_acquire_recursive>
 80082d6:	bf00      	nop
 80082d8:	200011c0 	.word	0x200011c0

080082dc <__malloc_unlock>:
 80082dc:	4801      	ldr	r0, [pc, #4]	; (80082e4 <__malloc_unlock+0x8>)
 80082de:	f000 b80c 	b.w	80082fa <__retarget_lock_release_recursive>
 80082e2:	bf00      	nop
 80082e4:	200011c0 	.word	0x200011c0

080082e8 <_malloc_usable_size_r>:
 80082e8:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80082ec:	1f18      	subs	r0, r3, #4
 80082ee:	2b00      	cmp	r3, #0
 80082f0:	bfbc      	itt	lt
 80082f2:	580b      	ldrlt	r3, [r1, r0]
 80082f4:	18c0      	addlt	r0, r0, r3
 80082f6:	4770      	bx	lr

080082f8 <__retarget_lock_acquire_recursive>:
 80082f8:	4770      	bx	lr

080082fa <__retarget_lock_release_recursive>:
 80082fa:	4770      	bx	lr

080082fc <trunc>:
 80082fc:	ec51 0b10 	vmov	r0, r1, d0
 8008300:	f3c1 520a 	ubfx	r2, r1, #20, #11
 8008304:	f2a2 33ff 	subw	r3, r2, #1023	; 0x3ff
 8008308:	2b13      	cmp	r3, #19
 800830a:	b5d0      	push	{r4, r6, r7, lr}
 800830c:	460c      	mov	r4, r1
 800830e:	dc10      	bgt.n	8008332 <trunc+0x36>
 8008310:	2b00      	cmp	r3, #0
 8008312:	bfa5      	ittet	ge
 8008314:	4a11      	ldrge	r2, [pc, #68]	; (800835c <trunc+0x60>)
 8008316:	fa42 f303 	asrge.w	r3, r2, r3
 800831a:	2100      	movlt	r1, #0
 800831c:	2100      	movge	r1, #0
 800831e:	bfb9      	ittee	lt
 8008320:	2000      	movlt	r0, #0
 8008322:	f004 4100 	andlt.w	r1, r4, #2147483648	; 0x80000000
 8008326:	2000      	movge	r0, #0
 8008328:	ea24 0103 	bicge.w	r1, r4, r3
 800832c:	ec41 0b10 	vmov	d0, r0, r1
 8008330:	bdd0      	pop	{r4, r6, r7, pc}
 8008332:	2b33      	cmp	r3, #51	; 0x33
 8008334:	dd08      	ble.n	8008348 <trunc+0x4c>
 8008336:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800833a:	d1f7      	bne.n	800832c <trunc+0x30>
 800833c:	ee10 2a10 	vmov	r2, s0
 8008340:	460b      	mov	r3, r1
 8008342:	f7f7 ff9b 	bl	800027c <__adddf3>
 8008346:	e7f1      	b.n	800832c <trunc+0x30>
 8008348:	f2a2 4213 	subw	r2, r2, #1043	; 0x413
 800834c:	f04f 33ff 	mov.w	r3, #4294967295
 8008350:	fa23 f202 	lsr.w	r2, r3, r2
 8008354:	ea20 0602 	bic.w	r6, r0, r2
 8008358:	4630      	mov	r0, r6
 800835a:	e7e7      	b.n	800832c <trunc+0x30>
 800835c:	000fffff 	.word	0x000fffff

08008360 <pow>:
 8008360:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008362:	ed2d 8b02 	vpush	{d8}
 8008366:	eeb0 8a40 	vmov.f32	s16, s0
 800836a:	eef0 8a60 	vmov.f32	s17, s1
 800836e:	ec55 4b11 	vmov	r4, r5, d1
 8008372:	f000 f891 	bl	8008498 <__ieee754_pow>
 8008376:	4622      	mov	r2, r4
 8008378:	462b      	mov	r3, r5
 800837a:	4620      	mov	r0, r4
 800837c:	4629      	mov	r1, r5
 800837e:	ec57 6b10 	vmov	r6, r7, d0
 8008382:	f7f8 fbcb 	bl	8000b1c <__aeabi_dcmpun>
 8008386:	2800      	cmp	r0, #0
 8008388:	d13b      	bne.n	8008402 <pow+0xa2>
 800838a:	ec51 0b18 	vmov	r0, r1, d8
 800838e:	2200      	movs	r2, #0
 8008390:	2300      	movs	r3, #0
 8008392:	f7f8 fb91 	bl	8000ab8 <__aeabi_dcmpeq>
 8008396:	b1b8      	cbz	r0, 80083c8 <pow+0x68>
 8008398:	2200      	movs	r2, #0
 800839a:	2300      	movs	r3, #0
 800839c:	4620      	mov	r0, r4
 800839e:	4629      	mov	r1, r5
 80083a0:	f7f8 fb8a 	bl	8000ab8 <__aeabi_dcmpeq>
 80083a4:	2800      	cmp	r0, #0
 80083a6:	d146      	bne.n	8008436 <pow+0xd6>
 80083a8:	ec45 4b10 	vmov	d0, r4, r5
 80083ac:	f000 fe8d 	bl	80090ca <finite>
 80083b0:	b338      	cbz	r0, 8008402 <pow+0xa2>
 80083b2:	2200      	movs	r2, #0
 80083b4:	2300      	movs	r3, #0
 80083b6:	4620      	mov	r0, r4
 80083b8:	4629      	mov	r1, r5
 80083ba:	f7f8 fb87 	bl	8000acc <__aeabi_dcmplt>
 80083be:	b300      	cbz	r0, 8008402 <pow+0xa2>
 80083c0:	f7ff fae8 	bl	8007994 <__errno>
 80083c4:	2322      	movs	r3, #34	; 0x22
 80083c6:	e01b      	b.n	8008400 <pow+0xa0>
 80083c8:	ec47 6b10 	vmov	d0, r6, r7
 80083cc:	f000 fe7d 	bl	80090ca <finite>
 80083d0:	b9e0      	cbnz	r0, 800840c <pow+0xac>
 80083d2:	eeb0 0a48 	vmov.f32	s0, s16
 80083d6:	eef0 0a68 	vmov.f32	s1, s17
 80083da:	f000 fe76 	bl	80090ca <finite>
 80083de:	b1a8      	cbz	r0, 800840c <pow+0xac>
 80083e0:	ec45 4b10 	vmov	d0, r4, r5
 80083e4:	f000 fe71 	bl	80090ca <finite>
 80083e8:	b180      	cbz	r0, 800840c <pow+0xac>
 80083ea:	4632      	mov	r2, r6
 80083ec:	463b      	mov	r3, r7
 80083ee:	4630      	mov	r0, r6
 80083f0:	4639      	mov	r1, r7
 80083f2:	f7f8 fb93 	bl	8000b1c <__aeabi_dcmpun>
 80083f6:	2800      	cmp	r0, #0
 80083f8:	d0e2      	beq.n	80083c0 <pow+0x60>
 80083fa:	f7ff facb 	bl	8007994 <__errno>
 80083fe:	2321      	movs	r3, #33	; 0x21
 8008400:	6003      	str	r3, [r0, #0]
 8008402:	ecbd 8b02 	vpop	{d8}
 8008406:	ec47 6b10 	vmov	d0, r6, r7
 800840a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800840c:	2200      	movs	r2, #0
 800840e:	2300      	movs	r3, #0
 8008410:	4630      	mov	r0, r6
 8008412:	4639      	mov	r1, r7
 8008414:	f7f8 fb50 	bl	8000ab8 <__aeabi_dcmpeq>
 8008418:	2800      	cmp	r0, #0
 800841a:	d0f2      	beq.n	8008402 <pow+0xa2>
 800841c:	eeb0 0a48 	vmov.f32	s0, s16
 8008420:	eef0 0a68 	vmov.f32	s1, s17
 8008424:	f000 fe51 	bl	80090ca <finite>
 8008428:	2800      	cmp	r0, #0
 800842a:	d0ea      	beq.n	8008402 <pow+0xa2>
 800842c:	ec45 4b10 	vmov	d0, r4, r5
 8008430:	f000 fe4b 	bl	80090ca <finite>
 8008434:	e7c3      	b.n	80083be <pow+0x5e>
 8008436:	4f01      	ldr	r7, [pc, #4]	; (800843c <pow+0xdc>)
 8008438:	2600      	movs	r6, #0
 800843a:	e7e2      	b.n	8008402 <pow+0xa2>
 800843c:	3ff00000 	.word	0x3ff00000

08008440 <sqrt>:
 8008440:	b538      	push	{r3, r4, r5, lr}
 8008442:	ed2d 8b02 	vpush	{d8}
 8008446:	ec55 4b10 	vmov	r4, r5, d0
 800844a:	f000 fd53 	bl	8008ef4 <__ieee754_sqrt>
 800844e:	4622      	mov	r2, r4
 8008450:	462b      	mov	r3, r5
 8008452:	4620      	mov	r0, r4
 8008454:	4629      	mov	r1, r5
 8008456:	eeb0 8a40 	vmov.f32	s16, s0
 800845a:	eef0 8a60 	vmov.f32	s17, s1
 800845e:	f7f8 fb5d 	bl	8000b1c <__aeabi_dcmpun>
 8008462:	b990      	cbnz	r0, 800848a <sqrt+0x4a>
 8008464:	2200      	movs	r2, #0
 8008466:	2300      	movs	r3, #0
 8008468:	4620      	mov	r0, r4
 800846a:	4629      	mov	r1, r5
 800846c:	f7f8 fb2e 	bl	8000acc <__aeabi_dcmplt>
 8008470:	b158      	cbz	r0, 800848a <sqrt+0x4a>
 8008472:	f7ff fa8f 	bl	8007994 <__errno>
 8008476:	2321      	movs	r3, #33	; 0x21
 8008478:	6003      	str	r3, [r0, #0]
 800847a:	2200      	movs	r2, #0
 800847c:	2300      	movs	r3, #0
 800847e:	4610      	mov	r0, r2
 8008480:	4619      	mov	r1, r3
 8008482:	f7f8 f9db 	bl	800083c <__aeabi_ddiv>
 8008486:	ec41 0b18 	vmov	d8, r0, r1
 800848a:	eeb0 0a48 	vmov.f32	s0, s16
 800848e:	eef0 0a68 	vmov.f32	s1, s17
 8008492:	ecbd 8b02 	vpop	{d8}
 8008496:	bd38      	pop	{r3, r4, r5, pc}

08008498 <__ieee754_pow>:
 8008498:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800849c:	ed2d 8b06 	vpush	{d8-d10}
 80084a0:	b089      	sub	sp, #36	; 0x24
 80084a2:	ed8d 1b00 	vstr	d1, [sp]
 80084a6:	e9dd 2900 	ldrd	r2, r9, [sp]
 80084aa:	f029 4800 	bic.w	r8, r9, #2147483648	; 0x80000000
 80084ae:	ea58 0102 	orrs.w	r1, r8, r2
 80084b2:	ec57 6b10 	vmov	r6, r7, d0
 80084b6:	d115      	bne.n	80084e4 <__ieee754_pow+0x4c>
 80084b8:	19b3      	adds	r3, r6, r6
 80084ba:	f487 2200 	eor.w	r2, r7, #524288	; 0x80000
 80084be:	4152      	adcs	r2, r2
 80084c0:	4299      	cmp	r1, r3
 80084c2:	4b89      	ldr	r3, [pc, #548]	; (80086e8 <__ieee754_pow+0x250>)
 80084c4:	4193      	sbcs	r3, r2
 80084c6:	f080 84d2 	bcs.w	8008e6e <__ieee754_pow+0x9d6>
 80084ca:	e9dd 2300 	ldrd	r2, r3, [sp]
 80084ce:	4630      	mov	r0, r6
 80084d0:	4639      	mov	r1, r7
 80084d2:	f7f7 fed3 	bl	800027c <__adddf3>
 80084d6:	ec41 0b10 	vmov	d0, r0, r1
 80084da:	b009      	add	sp, #36	; 0x24
 80084dc:	ecbd 8b06 	vpop	{d8-d10}
 80084e0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80084e4:	4b81      	ldr	r3, [pc, #516]	; (80086ec <__ieee754_pow+0x254>)
 80084e6:	f027 4400 	bic.w	r4, r7, #2147483648	; 0x80000000
 80084ea:	429c      	cmp	r4, r3
 80084ec:	ee10 aa10 	vmov	sl, s0
 80084f0:	463d      	mov	r5, r7
 80084f2:	dc06      	bgt.n	8008502 <__ieee754_pow+0x6a>
 80084f4:	d101      	bne.n	80084fa <__ieee754_pow+0x62>
 80084f6:	2e00      	cmp	r6, #0
 80084f8:	d1e7      	bne.n	80084ca <__ieee754_pow+0x32>
 80084fa:	4598      	cmp	r8, r3
 80084fc:	dc01      	bgt.n	8008502 <__ieee754_pow+0x6a>
 80084fe:	d10f      	bne.n	8008520 <__ieee754_pow+0x88>
 8008500:	b172      	cbz	r2, 8008520 <__ieee754_pow+0x88>
 8008502:	f105 4540 	add.w	r5, r5, #3221225472	; 0xc0000000
 8008506:	f505 1580 	add.w	r5, r5, #1048576	; 0x100000
 800850a:	ea55 050a 	orrs.w	r5, r5, sl
 800850e:	d1dc      	bne.n	80084ca <__ieee754_pow+0x32>
 8008510:	e9dd 3200 	ldrd	r3, r2, [sp]
 8008514:	18db      	adds	r3, r3, r3
 8008516:	f482 2200 	eor.w	r2, r2, #524288	; 0x80000
 800851a:	4152      	adcs	r2, r2
 800851c:	429d      	cmp	r5, r3
 800851e:	e7d0      	b.n	80084c2 <__ieee754_pow+0x2a>
 8008520:	2d00      	cmp	r5, #0
 8008522:	da3b      	bge.n	800859c <__ieee754_pow+0x104>
 8008524:	4b72      	ldr	r3, [pc, #456]	; (80086f0 <__ieee754_pow+0x258>)
 8008526:	4598      	cmp	r8, r3
 8008528:	dc51      	bgt.n	80085ce <__ieee754_pow+0x136>
 800852a:	f1a3 7354 	sub.w	r3, r3, #55574528	; 0x3500000
 800852e:	4598      	cmp	r8, r3
 8008530:	f340 84ac 	ble.w	8008e8c <__ieee754_pow+0x9f4>
 8008534:	ea4f 5328 	mov.w	r3, r8, asr #20
 8008538:	f2a3 33ff 	subw	r3, r3, #1023	; 0x3ff
 800853c:	2b14      	cmp	r3, #20
 800853e:	dd0f      	ble.n	8008560 <__ieee754_pow+0xc8>
 8008540:	f1c3 0334 	rsb	r3, r3, #52	; 0x34
 8008544:	fa22 f103 	lsr.w	r1, r2, r3
 8008548:	fa01 f303 	lsl.w	r3, r1, r3
 800854c:	4293      	cmp	r3, r2
 800854e:	f040 849d 	bne.w	8008e8c <__ieee754_pow+0x9f4>
 8008552:	f001 0101 	and.w	r1, r1, #1
 8008556:	f1c1 0302 	rsb	r3, r1, #2
 800855a:	9304      	str	r3, [sp, #16]
 800855c:	b182      	cbz	r2, 8008580 <__ieee754_pow+0xe8>
 800855e:	e05f      	b.n	8008620 <__ieee754_pow+0x188>
 8008560:	2a00      	cmp	r2, #0
 8008562:	d15b      	bne.n	800861c <__ieee754_pow+0x184>
 8008564:	f1c3 0314 	rsb	r3, r3, #20
 8008568:	fa48 f103 	asr.w	r1, r8, r3
 800856c:	fa01 f303 	lsl.w	r3, r1, r3
 8008570:	4543      	cmp	r3, r8
 8008572:	f040 8488 	bne.w	8008e86 <__ieee754_pow+0x9ee>
 8008576:	f001 0101 	and.w	r1, r1, #1
 800857a:	f1c1 0302 	rsb	r3, r1, #2
 800857e:	9304      	str	r3, [sp, #16]
 8008580:	4b5c      	ldr	r3, [pc, #368]	; (80086f4 <__ieee754_pow+0x25c>)
 8008582:	4598      	cmp	r8, r3
 8008584:	d132      	bne.n	80085ec <__ieee754_pow+0x154>
 8008586:	f1b9 0f00 	cmp.w	r9, #0
 800858a:	f280 8478 	bge.w	8008e7e <__ieee754_pow+0x9e6>
 800858e:	4959      	ldr	r1, [pc, #356]	; (80086f4 <__ieee754_pow+0x25c>)
 8008590:	4632      	mov	r2, r6
 8008592:	463b      	mov	r3, r7
 8008594:	2000      	movs	r0, #0
 8008596:	f7f8 f951 	bl	800083c <__aeabi_ddiv>
 800859a:	e79c      	b.n	80084d6 <__ieee754_pow+0x3e>
 800859c:	2300      	movs	r3, #0
 800859e:	9304      	str	r3, [sp, #16]
 80085a0:	2a00      	cmp	r2, #0
 80085a2:	d13d      	bne.n	8008620 <__ieee754_pow+0x188>
 80085a4:	4b51      	ldr	r3, [pc, #324]	; (80086ec <__ieee754_pow+0x254>)
 80085a6:	4598      	cmp	r8, r3
 80085a8:	d1ea      	bne.n	8008580 <__ieee754_pow+0xe8>
 80085aa:	f104 4340 	add.w	r3, r4, #3221225472	; 0xc0000000
 80085ae:	f503 1380 	add.w	r3, r3, #1048576	; 0x100000
 80085b2:	ea53 030a 	orrs.w	r3, r3, sl
 80085b6:	f000 845a 	beq.w	8008e6e <__ieee754_pow+0x9d6>
 80085ba:	4b4f      	ldr	r3, [pc, #316]	; (80086f8 <__ieee754_pow+0x260>)
 80085bc:	429c      	cmp	r4, r3
 80085be:	dd08      	ble.n	80085d2 <__ieee754_pow+0x13a>
 80085c0:	f1b9 0f00 	cmp.w	r9, #0
 80085c4:	f2c0 8457 	blt.w	8008e76 <__ieee754_pow+0x9de>
 80085c8:	e9dd 0100 	ldrd	r0, r1, [sp]
 80085cc:	e783      	b.n	80084d6 <__ieee754_pow+0x3e>
 80085ce:	2302      	movs	r3, #2
 80085d0:	e7e5      	b.n	800859e <__ieee754_pow+0x106>
 80085d2:	f1b9 0f00 	cmp.w	r9, #0
 80085d6:	f04f 0000 	mov.w	r0, #0
 80085da:	f04f 0100 	mov.w	r1, #0
 80085de:	f6bf af7a 	bge.w	80084d6 <__ieee754_pow+0x3e>
 80085e2:	e9dd 0300 	ldrd	r0, r3, [sp]
 80085e6:	f103 4100 	add.w	r1, r3, #2147483648	; 0x80000000
 80085ea:	e774      	b.n	80084d6 <__ieee754_pow+0x3e>
 80085ec:	f1b9 4f80 	cmp.w	r9, #1073741824	; 0x40000000
 80085f0:	d106      	bne.n	8008600 <__ieee754_pow+0x168>
 80085f2:	4632      	mov	r2, r6
 80085f4:	463b      	mov	r3, r7
 80085f6:	4630      	mov	r0, r6
 80085f8:	4639      	mov	r1, r7
 80085fa:	f7f7 fff5 	bl	80005e8 <__aeabi_dmul>
 80085fe:	e76a      	b.n	80084d6 <__ieee754_pow+0x3e>
 8008600:	4b3e      	ldr	r3, [pc, #248]	; (80086fc <__ieee754_pow+0x264>)
 8008602:	4599      	cmp	r9, r3
 8008604:	d10c      	bne.n	8008620 <__ieee754_pow+0x188>
 8008606:	2d00      	cmp	r5, #0
 8008608:	db0a      	blt.n	8008620 <__ieee754_pow+0x188>
 800860a:	ec47 6b10 	vmov	d0, r6, r7
 800860e:	b009      	add	sp, #36	; 0x24
 8008610:	ecbd 8b06 	vpop	{d8-d10}
 8008614:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008618:	f000 bc6c 	b.w	8008ef4 <__ieee754_sqrt>
 800861c:	2300      	movs	r3, #0
 800861e:	9304      	str	r3, [sp, #16]
 8008620:	ec47 6b10 	vmov	d0, r6, r7
 8008624:	f000 fd48 	bl	80090b8 <fabs>
 8008628:	ec51 0b10 	vmov	r0, r1, d0
 800862c:	f1ba 0f00 	cmp.w	sl, #0
 8008630:	d129      	bne.n	8008686 <__ieee754_pow+0x1ee>
 8008632:	b124      	cbz	r4, 800863e <__ieee754_pow+0x1a6>
 8008634:	4b2f      	ldr	r3, [pc, #188]	; (80086f4 <__ieee754_pow+0x25c>)
 8008636:	f025 4240 	bic.w	r2, r5, #3221225472	; 0xc0000000
 800863a:	429a      	cmp	r2, r3
 800863c:	d123      	bne.n	8008686 <__ieee754_pow+0x1ee>
 800863e:	f1b9 0f00 	cmp.w	r9, #0
 8008642:	da05      	bge.n	8008650 <__ieee754_pow+0x1b8>
 8008644:	4602      	mov	r2, r0
 8008646:	460b      	mov	r3, r1
 8008648:	2000      	movs	r0, #0
 800864a:	492a      	ldr	r1, [pc, #168]	; (80086f4 <__ieee754_pow+0x25c>)
 800864c:	f7f8 f8f6 	bl	800083c <__aeabi_ddiv>
 8008650:	2d00      	cmp	r5, #0
 8008652:	f6bf af40 	bge.w	80084d6 <__ieee754_pow+0x3e>
 8008656:	9b04      	ldr	r3, [sp, #16]
 8008658:	f104 4440 	add.w	r4, r4, #3221225472	; 0xc0000000
 800865c:	f504 1480 	add.w	r4, r4, #1048576	; 0x100000
 8008660:	4323      	orrs	r3, r4
 8008662:	d108      	bne.n	8008676 <__ieee754_pow+0x1de>
 8008664:	4602      	mov	r2, r0
 8008666:	460b      	mov	r3, r1
 8008668:	4610      	mov	r0, r2
 800866a:	4619      	mov	r1, r3
 800866c:	f7f7 fe04 	bl	8000278 <__aeabi_dsub>
 8008670:	4602      	mov	r2, r0
 8008672:	460b      	mov	r3, r1
 8008674:	e78f      	b.n	8008596 <__ieee754_pow+0xfe>
 8008676:	9b04      	ldr	r3, [sp, #16]
 8008678:	2b01      	cmp	r3, #1
 800867a:	f47f af2c 	bne.w	80084d6 <__ieee754_pow+0x3e>
 800867e:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8008682:	4619      	mov	r1, r3
 8008684:	e727      	b.n	80084d6 <__ieee754_pow+0x3e>
 8008686:	0feb      	lsrs	r3, r5, #31
 8008688:	3b01      	subs	r3, #1
 800868a:	9306      	str	r3, [sp, #24]
 800868c:	9a06      	ldr	r2, [sp, #24]
 800868e:	9b04      	ldr	r3, [sp, #16]
 8008690:	4313      	orrs	r3, r2
 8008692:	d102      	bne.n	800869a <__ieee754_pow+0x202>
 8008694:	4632      	mov	r2, r6
 8008696:	463b      	mov	r3, r7
 8008698:	e7e6      	b.n	8008668 <__ieee754_pow+0x1d0>
 800869a:	4b19      	ldr	r3, [pc, #100]	; (8008700 <__ieee754_pow+0x268>)
 800869c:	4598      	cmp	r8, r3
 800869e:	f340 80fb 	ble.w	8008898 <__ieee754_pow+0x400>
 80086a2:	f103 7304 	add.w	r3, r3, #34603008	; 0x2100000
 80086a6:	4598      	cmp	r8, r3
 80086a8:	4b13      	ldr	r3, [pc, #76]	; (80086f8 <__ieee754_pow+0x260>)
 80086aa:	dd0c      	ble.n	80086c6 <__ieee754_pow+0x22e>
 80086ac:	429c      	cmp	r4, r3
 80086ae:	dc0f      	bgt.n	80086d0 <__ieee754_pow+0x238>
 80086b0:	f1b9 0f00 	cmp.w	r9, #0
 80086b4:	da0f      	bge.n	80086d6 <__ieee754_pow+0x23e>
 80086b6:	2000      	movs	r0, #0
 80086b8:	b009      	add	sp, #36	; 0x24
 80086ba:	ecbd 8b06 	vpop	{d8-d10}
 80086be:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80086c2:	f000 bcf0 	b.w	80090a6 <__math_oflow>
 80086c6:	429c      	cmp	r4, r3
 80086c8:	dbf2      	blt.n	80086b0 <__ieee754_pow+0x218>
 80086ca:	4b0a      	ldr	r3, [pc, #40]	; (80086f4 <__ieee754_pow+0x25c>)
 80086cc:	429c      	cmp	r4, r3
 80086ce:	dd19      	ble.n	8008704 <__ieee754_pow+0x26c>
 80086d0:	f1b9 0f00 	cmp.w	r9, #0
 80086d4:	dcef      	bgt.n	80086b6 <__ieee754_pow+0x21e>
 80086d6:	2000      	movs	r0, #0
 80086d8:	b009      	add	sp, #36	; 0x24
 80086da:	ecbd 8b06 	vpop	{d8-d10}
 80086de:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80086e2:	f000 bcd7 	b.w	8009094 <__math_uflow>
 80086e6:	bf00      	nop
 80086e8:	fff00000 	.word	0xfff00000
 80086ec:	7ff00000 	.word	0x7ff00000
 80086f0:	433fffff 	.word	0x433fffff
 80086f4:	3ff00000 	.word	0x3ff00000
 80086f8:	3fefffff 	.word	0x3fefffff
 80086fc:	3fe00000 	.word	0x3fe00000
 8008700:	41e00000 	.word	0x41e00000
 8008704:	4b60      	ldr	r3, [pc, #384]	; (8008888 <__ieee754_pow+0x3f0>)
 8008706:	2200      	movs	r2, #0
 8008708:	f7f7 fdb6 	bl	8000278 <__aeabi_dsub>
 800870c:	a354      	add	r3, pc, #336	; (adr r3, 8008860 <__ieee754_pow+0x3c8>)
 800870e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008712:	4604      	mov	r4, r0
 8008714:	460d      	mov	r5, r1
 8008716:	f7f7 ff67 	bl	80005e8 <__aeabi_dmul>
 800871a:	a353      	add	r3, pc, #332	; (adr r3, 8008868 <__ieee754_pow+0x3d0>)
 800871c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008720:	4606      	mov	r6, r0
 8008722:	460f      	mov	r7, r1
 8008724:	4620      	mov	r0, r4
 8008726:	4629      	mov	r1, r5
 8008728:	f7f7 ff5e 	bl	80005e8 <__aeabi_dmul>
 800872c:	4b57      	ldr	r3, [pc, #348]	; (800888c <__ieee754_pow+0x3f4>)
 800872e:	4682      	mov	sl, r0
 8008730:	468b      	mov	fp, r1
 8008732:	2200      	movs	r2, #0
 8008734:	4620      	mov	r0, r4
 8008736:	4629      	mov	r1, r5
 8008738:	f7f7 ff56 	bl	80005e8 <__aeabi_dmul>
 800873c:	4602      	mov	r2, r0
 800873e:	460b      	mov	r3, r1
 8008740:	a14b      	add	r1, pc, #300	; (adr r1, 8008870 <__ieee754_pow+0x3d8>)
 8008742:	e9d1 0100 	ldrd	r0, r1, [r1]
 8008746:	f7f7 fd97 	bl	8000278 <__aeabi_dsub>
 800874a:	4622      	mov	r2, r4
 800874c:	462b      	mov	r3, r5
 800874e:	f7f7 ff4b 	bl	80005e8 <__aeabi_dmul>
 8008752:	4602      	mov	r2, r0
 8008754:	460b      	mov	r3, r1
 8008756:	2000      	movs	r0, #0
 8008758:	494d      	ldr	r1, [pc, #308]	; (8008890 <__ieee754_pow+0x3f8>)
 800875a:	f7f7 fd8d 	bl	8000278 <__aeabi_dsub>
 800875e:	4622      	mov	r2, r4
 8008760:	4680      	mov	r8, r0
 8008762:	4689      	mov	r9, r1
 8008764:	462b      	mov	r3, r5
 8008766:	4620      	mov	r0, r4
 8008768:	4629      	mov	r1, r5
 800876a:	f7f7 ff3d 	bl	80005e8 <__aeabi_dmul>
 800876e:	4602      	mov	r2, r0
 8008770:	460b      	mov	r3, r1
 8008772:	4640      	mov	r0, r8
 8008774:	4649      	mov	r1, r9
 8008776:	f7f7 ff37 	bl	80005e8 <__aeabi_dmul>
 800877a:	a33f      	add	r3, pc, #252	; (adr r3, 8008878 <__ieee754_pow+0x3e0>)
 800877c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008780:	f7f7 ff32 	bl	80005e8 <__aeabi_dmul>
 8008784:	4602      	mov	r2, r0
 8008786:	460b      	mov	r3, r1
 8008788:	4650      	mov	r0, sl
 800878a:	4659      	mov	r1, fp
 800878c:	f7f7 fd74 	bl	8000278 <__aeabi_dsub>
 8008790:	4602      	mov	r2, r0
 8008792:	460b      	mov	r3, r1
 8008794:	4680      	mov	r8, r0
 8008796:	4689      	mov	r9, r1
 8008798:	4630      	mov	r0, r6
 800879a:	4639      	mov	r1, r7
 800879c:	f7f7 fd6e 	bl	800027c <__adddf3>
 80087a0:	2000      	movs	r0, #0
 80087a2:	4632      	mov	r2, r6
 80087a4:	463b      	mov	r3, r7
 80087a6:	4604      	mov	r4, r0
 80087a8:	460d      	mov	r5, r1
 80087aa:	f7f7 fd65 	bl	8000278 <__aeabi_dsub>
 80087ae:	4602      	mov	r2, r0
 80087b0:	460b      	mov	r3, r1
 80087b2:	4640      	mov	r0, r8
 80087b4:	4649      	mov	r1, r9
 80087b6:	f7f7 fd5f 	bl	8000278 <__aeabi_dsub>
 80087ba:	9b04      	ldr	r3, [sp, #16]
 80087bc:	9a06      	ldr	r2, [sp, #24]
 80087be:	3b01      	subs	r3, #1
 80087c0:	4313      	orrs	r3, r2
 80087c2:	4682      	mov	sl, r0
 80087c4:	468b      	mov	fp, r1
 80087c6:	f040 81e7 	bne.w	8008b98 <__ieee754_pow+0x700>
 80087ca:	ed9f 7b2d 	vldr	d7, [pc, #180]	; 8008880 <__ieee754_pow+0x3e8>
 80087ce:	eeb0 8a47 	vmov.f32	s16, s14
 80087d2:	eef0 8a67 	vmov.f32	s17, s15
 80087d6:	e9dd 6700 	ldrd	r6, r7, [sp]
 80087da:	2600      	movs	r6, #0
 80087dc:	4632      	mov	r2, r6
 80087de:	463b      	mov	r3, r7
 80087e0:	e9dd 0100 	ldrd	r0, r1, [sp]
 80087e4:	f7f7 fd48 	bl	8000278 <__aeabi_dsub>
 80087e8:	4622      	mov	r2, r4
 80087ea:	462b      	mov	r3, r5
 80087ec:	f7f7 fefc 	bl	80005e8 <__aeabi_dmul>
 80087f0:	e9dd 2300 	ldrd	r2, r3, [sp]
 80087f4:	4680      	mov	r8, r0
 80087f6:	4689      	mov	r9, r1
 80087f8:	4650      	mov	r0, sl
 80087fa:	4659      	mov	r1, fp
 80087fc:	f7f7 fef4 	bl	80005e8 <__aeabi_dmul>
 8008800:	4602      	mov	r2, r0
 8008802:	460b      	mov	r3, r1
 8008804:	4640      	mov	r0, r8
 8008806:	4649      	mov	r1, r9
 8008808:	f7f7 fd38 	bl	800027c <__adddf3>
 800880c:	4632      	mov	r2, r6
 800880e:	463b      	mov	r3, r7
 8008810:	4680      	mov	r8, r0
 8008812:	4689      	mov	r9, r1
 8008814:	4620      	mov	r0, r4
 8008816:	4629      	mov	r1, r5
 8008818:	f7f7 fee6 	bl	80005e8 <__aeabi_dmul>
 800881c:	460b      	mov	r3, r1
 800881e:	4604      	mov	r4, r0
 8008820:	460d      	mov	r5, r1
 8008822:	4602      	mov	r2, r0
 8008824:	4649      	mov	r1, r9
 8008826:	4640      	mov	r0, r8
 8008828:	f7f7 fd28 	bl	800027c <__adddf3>
 800882c:	4b19      	ldr	r3, [pc, #100]	; (8008894 <__ieee754_pow+0x3fc>)
 800882e:	4299      	cmp	r1, r3
 8008830:	ec45 4b19 	vmov	d9, r4, r5
 8008834:	4606      	mov	r6, r0
 8008836:	460f      	mov	r7, r1
 8008838:	468b      	mov	fp, r1
 800883a:	f340 82f1 	ble.w	8008e20 <__ieee754_pow+0x988>
 800883e:	f101 433f 	add.w	r3, r1, #3204448256	; 0xbf000000
 8008842:	f503 03e0 	add.w	r3, r3, #7340032	; 0x700000
 8008846:	4303      	orrs	r3, r0
 8008848:	f000 81e4 	beq.w	8008c14 <__ieee754_pow+0x77c>
 800884c:	ec51 0b18 	vmov	r0, r1, d8
 8008850:	2200      	movs	r2, #0
 8008852:	2300      	movs	r3, #0
 8008854:	f7f8 f93a 	bl	8000acc <__aeabi_dcmplt>
 8008858:	3800      	subs	r0, #0
 800885a:	bf18      	it	ne
 800885c:	2001      	movne	r0, #1
 800885e:	e72b      	b.n	80086b8 <__ieee754_pow+0x220>
 8008860:	60000000 	.word	0x60000000
 8008864:	3ff71547 	.word	0x3ff71547
 8008868:	f85ddf44 	.word	0xf85ddf44
 800886c:	3e54ae0b 	.word	0x3e54ae0b
 8008870:	55555555 	.word	0x55555555
 8008874:	3fd55555 	.word	0x3fd55555
 8008878:	652b82fe 	.word	0x652b82fe
 800887c:	3ff71547 	.word	0x3ff71547
 8008880:	00000000 	.word	0x00000000
 8008884:	bff00000 	.word	0xbff00000
 8008888:	3ff00000 	.word	0x3ff00000
 800888c:	3fd00000 	.word	0x3fd00000
 8008890:	3fe00000 	.word	0x3fe00000
 8008894:	408fffff 	.word	0x408fffff
 8008898:	4bd5      	ldr	r3, [pc, #852]	; (8008bf0 <__ieee754_pow+0x758>)
 800889a:	402b      	ands	r3, r5
 800889c:	2200      	movs	r2, #0
 800889e:	b92b      	cbnz	r3, 80088ac <__ieee754_pow+0x414>
 80088a0:	4bd4      	ldr	r3, [pc, #848]	; (8008bf4 <__ieee754_pow+0x75c>)
 80088a2:	f7f7 fea1 	bl	80005e8 <__aeabi_dmul>
 80088a6:	f06f 0234 	mvn.w	r2, #52	; 0x34
 80088aa:	460c      	mov	r4, r1
 80088ac:	1523      	asrs	r3, r4, #20
 80088ae:	f2a3 33ff 	subw	r3, r3, #1023	; 0x3ff
 80088b2:	4413      	add	r3, r2
 80088b4:	9305      	str	r3, [sp, #20]
 80088b6:	4bd0      	ldr	r3, [pc, #832]	; (8008bf8 <__ieee754_pow+0x760>)
 80088b8:	f3c4 0413 	ubfx	r4, r4, #0, #20
 80088bc:	f044 557f 	orr.w	r5, r4, #1069547520	; 0x3fc00000
 80088c0:	429c      	cmp	r4, r3
 80088c2:	f445 1540 	orr.w	r5, r5, #3145728	; 0x300000
 80088c6:	dd08      	ble.n	80088da <__ieee754_pow+0x442>
 80088c8:	4bcc      	ldr	r3, [pc, #816]	; (8008bfc <__ieee754_pow+0x764>)
 80088ca:	429c      	cmp	r4, r3
 80088cc:	f340 8162 	ble.w	8008b94 <__ieee754_pow+0x6fc>
 80088d0:	9b05      	ldr	r3, [sp, #20]
 80088d2:	3301      	adds	r3, #1
 80088d4:	9305      	str	r3, [sp, #20]
 80088d6:	f5a5 1580 	sub.w	r5, r5, #1048576	; 0x100000
 80088da:	2400      	movs	r4, #0
 80088dc:	00e3      	lsls	r3, r4, #3
 80088de:	9307      	str	r3, [sp, #28]
 80088e0:	4bc7      	ldr	r3, [pc, #796]	; (8008c00 <__ieee754_pow+0x768>)
 80088e2:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 80088e6:	ed93 7b00 	vldr	d7, [r3]
 80088ea:	4629      	mov	r1, r5
 80088ec:	ec53 2b17 	vmov	r2, r3, d7
 80088f0:	eeb0 9a47 	vmov.f32	s18, s14
 80088f4:	eef0 9a67 	vmov.f32	s19, s15
 80088f8:	4682      	mov	sl, r0
 80088fa:	f7f7 fcbd 	bl	8000278 <__aeabi_dsub>
 80088fe:	4652      	mov	r2, sl
 8008900:	4606      	mov	r6, r0
 8008902:	460f      	mov	r7, r1
 8008904:	462b      	mov	r3, r5
 8008906:	ec51 0b19 	vmov	r0, r1, d9
 800890a:	f7f7 fcb7 	bl	800027c <__adddf3>
 800890e:	4602      	mov	r2, r0
 8008910:	460b      	mov	r3, r1
 8008912:	2000      	movs	r0, #0
 8008914:	49bb      	ldr	r1, [pc, #748]	; (8008c04 <__ieee754_pow+0x76c>)
 8008916:	f7f7 ff91 	bl	800083c <__aeabi_ddiv>
 800891a:	ec41 0b1a 	vmov	d10, r0, r1
 800891e:	4602      	mov	r2, r0
 8008920:	460b      	mov	r3, r1
 8008922:	4630      	mov	r0, r6
 8008924:	4639      	mov	r1, r7
 8008926:	f7f7 fe5f 	bl	80005e8 <__aeabi_dmul>
 800892a:	2300      	movs	r3, #0
 800892c:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8008930:	9302      	str	r3, [sp, #8]
 8008932:	e9dd 8902 	ldrd	r8, r9, [sp, #8]
 8008936:	46ab      	mov	fp, r5
 8008938:	106d      	asrs	r5, r5, #1
 800893a:	f045 5500 	orr.w	r5, r5, #536870912	; 0x20000000
 800893e:	f505 2500 	add.w	r5, r5, #524288	; 0x80000
 8008942:	ec41 0b18 	vmov	d8, r0, r1
 8008946:	eb05 4384 	add.w	r3, r5, r4, lsl #18
 800894a:	2200      	movs	r2, #0
 800894c:	4640      	mov	r0, r8
 800894e:	4649      	mov	r1, r9
 8008950:	4614      	mov	r4, r2
 8008952:	461d      	mov	r5, r3
 8008954:	f7f7 fe48 	bl	80005e8 <__aeabi_dmul>
 8008958:	4602      	mov	r2, r0
 800895a:	460b      	mov	r3, r1
 800895c:	4630      	mov	r0, r6
 800895e:	4639      	mov	r1, r7
 8008960:	f7f7 fc8a 	bl	8000278 <__aeabi_dsub>
 8008964:	ec53 2b19 	vmov	r2, r3, d9
 8008968:	4606      	mov	r6, r0
 800896a:	460f      	mov	r7, r1
 800896c:	4620      	mov	r0, r4
 800896e:	4629      	mov	r1, r5
 8008970:	f7f7 fc82 	bl	8000278 <__aeabi_dsub>
 8008974:	4602      	mov	r2, r0
 8008976:	460b      	mov	r3, r1
 8008978:	4650      	mov	r0, sl
 800897a:	4659      	mov	r1, fp
 800897c:	f7f7 fc7c 	bl	8000278 <__aeabi_dsub>
 8008980:	4642      	mov	r2, r8
 8008982:	464b      	mov	r3, r9
 8008984:	f7f7 fe30 	bl	80005e8 <__aeabi_dmul>
 8008988:	4602      	mov	r2, r0
 800898a:	460b      	mov	r3, r1
 800898c:	4630      	mov	r0, r6
 800898e:	4639      	mov	r1, r7
 8008990:	f7f7 fc72 	bl	8000278 <__aeabi_dsub>
 8008994:	ec53 2b1a 	vmov	r2, r3, d10
 8008998:	f7f7 fe26 	bl	80005e8 <__aeabi_dmul>
 800899c:	ec53 2b18 	vmov	r2, r3, d8
 80089a0:	ec41 0b19 	vmov	d9, r0, r1
 80089a4:	ec51 0b18 	vmov	r0, r1, d8
 80089a8:	f7f7 fe1e 	bl	80005e8 <__aeabi_dmul>
 80089ac:	a37c      	add	r3, pc, #496	; (adr r3, 8008ba0 <__ieee754_pow+0x708>)
 80089ae:	e9d3 2300 	ldrd	r2, r3, [r3]
 80089b2:	4604      	mov	r4, r0
 80089b4:	460d      	mov	r5, r1
 80089b6:	f7f7 fe17 	bl	80005e8 <__aeabi_dmul>
 80089ba:	a37b      	add	r3, pc, #492	; (adr r3, 8008ba8 <__ieee754_pow+0x710>)
 80089bc:	e9d3 2300 	ldrd	r2, r3, [r3]
 80089c0:	f7f7 fc5c 	bl	800027c <__adddf3>
 80089c4:	4622      	mov	r2, r4
 80089c6:	462b      	mov	r3, r5
 80089c8:	f7f7 fe0e 	bl	80005e8 <__aeabi_dmul>
 80089cc:	a378      	add	r3, pc, #480	; (adr r3, 8008bb0 <__ieee754_pow+0x718>)
 80089ce:	e9d3 2300 	ldrd	r2, r3, [r3]
 80089d2:	f7f7 fc53 	bl	800027c <__adddf3>
 80089d6:	4622      	mov	r2, r4
 80089d8:	462b      	mov	r3, r5
 80089da:	f7f7 fe05 	bl	80005e8 <__aeabi_dmul>
 80089de:	a376      	add	r3, pc, #472	; (adr r3, 8008bb8 <__ieee754_pow+0x720>)
 80089e0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80089e4:	f7f7 fc4a 	bl	800027c <__adddf3>
 80089e8:	4622      	mov	r2, r4
 80089ea:	462b      	mov	r3, r5
 80089ec:	f7f7 fdfc 	bl	80005e8 <__aeabi_dmul>
 80089f0:	a373      	add	r3, pc, #460	; (adr r3, 8008bc0 <__ieee754_pow+0x728>)
 80089f2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80089f6:	f7f7 fc41 	bl	800027c <__adddf3>
 80089fa:	4622      	mov	r2, r4
 80089fc:	462b      	mov	r3, r5
 80089fe:	f7f7 fdf3 	bl	80005e8 <__aeabi_dmul>
 8008a02:	a371      	add	r3, pc, #452	; (adr r3, 8008bc8 <__ieee754_pow+0x730>)
 8008a04:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008a08:	f7f7 fc38 	bl	800027c <__adddf3>
 8008a0c:	4622      	mov	r2, r4
 8008a0e:	4606      	mov	r6, r0
 8008a10:	460f      	mov	r7, r1
 8008a12:	462b      	mov	r3, r5
 8008a14:	4620      	mov	r0, r4
 8008a16:	4629      	mov	r1, r5
 8008a18:	f7f7 fde6 	bl	80005e8 <__aeabi_dmul>
 8008a1c:	4602      	mov	r2, r0
 8008a1e:	460b      	mov	r3, r1
 8008a20:	4630      	mov	r0, r6
 8008a22:	4639      	mov	r1, r7
 8008a24:	f7f7 fde0 	bl	80005e8 <__aeabi_dmul>
 8008a28:	4642      	mov	r2, r8
 8008a2a:	4604      	mov	r4, r0
 8008a2c:	460d      	mov	r5, r1
 8008a2e:	464b      	mov	r3, r9
 8008a30:	ec51 0b18 	vmov	r0, r1, d8
 8008a34:	f7f7 fc22 	bl	800027c <__adddf3>
 8008a38:	ec53 2b19 	vmov	r2, r3, d9
 8008a3c:	f7f7 fdd4 	bl	80005e8 <__aeabi_dmul>
 8008a40:	4622      	mov	r2, r4
 8008a42:	462b      	mov	r3, r5
 8008a44:	f7f7 fc1a 	bl	800027c <__adddf3>
 8008a48:	4642      	mov	r2, r8
 8008a4a:	4682      	mov	sl, r0
 8008a4c:	468b      	mov	fp, r1
 8008a4e:	464b      	mov	r3, r9
 8008a50:	4640      	mov	r0, r8
 8008a52:	4649      	mov	r1, r9
 8008a54:	f7f7 fdc8 	bl	80005e8 <__aeabi_dmul>
 8008a58:	4b6b      	ldr	r3, [pc, #428]	; (8008c08 <__ieee754_pow+0x770>)
 8008a5a:	2200      	movs	r2, #0
 8008a5c:	4606      	mov	r6, r0
 8008a5e:	460f      	mov	r7, r1
 8008a60:	f7f7 fc0c 	bl	800027c <__adddf3>
 8008a64:	4652      	mov	r2, sl
 8008a66:	465b      	mov	r3, fp
 8008a68:	f7f7 fc08 	bl	800027c <__adddf3>
 8008a6c:	2000      	movs	r0, #0
 8008a6e:	4604      	mov	r4, r0
 8008a70:	460d      	mov	r5, r1
 8008a72:	4602      	mov	r2, r0
 8008a74:	460b      	mov	r3, r1
 8008a76:	4640      	mov	r0, r8
 8008a78:	4649      	mov	r1, r9
 8008a7a:	f7f7 fdb5 	bl	80005e8 <__aeabi_dmul>
 8008a7e:	4b62      	ldr	r3, [pc, #392]	; (8008c08 <__ieee754_pow+0x770>)
 8008a80:	4680      	mov	r8, r0
 8008a82:	4689      	mov	r9, r1
 8008a84:	2200      	movs	r2, #0
 8008a86:	4620      	mov	r0, r4
 8008a88:	4629      	mov	r1, r5
 8008a8a:	f7f7 fbf5 	bl	8000278 <__aeabi_dsub>
 8008a8e:	4632      	mov	r2, r6
 8008a90:	463b      	mov	r3, r7
 8008a92:	f7f7 fbf1 	bl	8000278 <__aeabi_dsub>
 8008a96:	4602      	mov	r2, r0
 8008a98:	460b      	mov	r3, r1
 8008a9a:	4650      	mov	r0, sl
 8008a9c:	4659      	mov	r1, fp
 8008a9e:	f7f7 fbeb 	bl	8000278 <__aeabi_dsub>
 8008aa2:	ec53 2b18 	vmov	r2, r3, d8
 8008aa6:	f7f7 fd9f 	bl	80005e8 <__aeabi_dmul>
 8008aaa:	4622      	mov	r2, r4
 8008aac:	4606      	mov	r6, r0
 8008aae:	460f      	mov	r7, r1
 8008ab0:	462b      	mov	r3, r5
 8008ab2:	ec51 0b19 	vmov	r0, r1, d9
 8008ab6:	f7f7 fd97 	bl	80005e8 <__aeabi_dmul>
 8008aba:	4602      	mov	r2, r0
 8008abc:	460b      	mov	r3, r1
 8008abe:	4630      	mov	r0, r6
 8008ac0:	4639      	mov	r1, r7
 8008ac2:	f7f7 fbdb 	bl	800027c <__adddf3>
 8008ac6:	4606      	mov	r6, r0
 8008ac8:	460f      	mov	r7, r1
 8008aca:	4602      	mov	r2, r0
 8008acc:	460b      	mov	r3, r1
 8008ace:	4640      	mov	r0, r8
 8008ad0:	4649      	mov	r1, r9
 8008ad2:	f7f7 fbd3 	bl	800027c <__adddf3>
 8008ad6:	a33e      	add	r3, pc, #248	; (adr r3, 8008bd0 <__ieee754_pow+0x738>)
 8008ad8:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008adc:	2000      	movs	r0, #0
 8008ade:	4604      	mov	r4, r0
 8008ae0:	460d      	mov	r5, r1
 8008ae2:	f7f7 fd81 	bl	80005e8 <__aeabi_dmul>
 8008ae6:	4642      	mov	r2, r8
 8008ae8:	ec41 0b18 	vmov	d8, r0, r1
 8008aec:	464b      	mov	r3, r9
 8008aee:	4620      	mov	r0, r4
 8008af0:	4629      	mov	r1, r5
 8008af2:	f7f7 fbc1 	bl	8000278 <__aeabi_dsub>
 8008af6:	4602      	mov	r2, r0
 8008af8:	460b      	mov	r3, r1
 8008afa:	4630      	mov	r0, r6
 8008afc:	4639      	mov	r1, r7
 8008afe:	f7f7 fbbb 	bl	8000278 <__aeabi_dsub>
 8008b02:	a335      	add	r3, pc, #212	; (adr r3, 8008bd8 <__ieee754_pow+0x740>)
 8008b04:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008b08:	f7f7 fd6e 	bl	80005e8 <__aeabi_dmul>
 8008b0c:	a334      	add	r3, pc, #208	; (adr r3, 8008be0 <__ieee754_pow+0x748>)
 8008b0e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008b12:	4606      	mov	r6, r0
 8008b14:	460f      	mov	r7, r1
 8008b16:	4620      	mov	r0, r4
 8008b18:	4629      	mov	r1, r5
 8008b1a:	f7f7 fd65 	bl	80005e8 <__aeabi_dmul>
 8008b1e:	4602      	mov	r2, r0
 8008b20:	460b      	mov	r3, r1
 8008b22:	4630      	mov	r0, r6
 8008b24:	4639      	mov	r1, r7
 8008b26:	f7f7 fba9 	bl	800027c <__adddf3>
 8008b2a:	9a07      	ldr	r2, [sp, #28]
 8008b2c:	4b37      	ldr	r3, [pc, #220]	; (8008c0c <__ieee754_pow+0x774>)
 8008b2e:	4413      	add	r3, r2
 8008b30:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008b34:	f7f7 fba2 	bl	800027c <__adddf3>
 8008b38:	4682      	mov	sl, r0
 8008b3a:	9805      	ldr	r0, [sp, #20]
 8008b3c:	468b      	mov	fp, r1
 8008b3e:	f7f7 fce9 	bl	8000514 <__aeabi_i2d>
 8008b42:	9a07      	ldr	r2, [sp, #28]
 8008b44:	4b32      	ldr	r3, [pc, #200]	; (8008c10 <__ieee754_pow+0x778>)
 8008b46:	4413      	add	r3, r2
 8008b48:	e9d3 8900 	ldrd	r8, r9, [r3]
 8008b4c:	4606      	mov	r6, r0
 8008b4e:	460f      	mov	r7, r1
 8008b50:	4652      	mov	r2, sl
 8008b52:	465b      	mov	r3, fp
 8008b54:	ec51 0b18 	vmov	r0, r1, d8
 8008b58:	f7f7 fb90 	bl	800027c <__adddf3>
 8008b5c:	4642      	mov	r2, r8
 8008b5e:	464b      	mov	r3, r9
 8008b60:	f7f7 fb8c 	bl	800027c <__adddf3>
 8008b64:	4632      	mov	r2, r6
 8008b66:	463b      	mov	r3, r7
 8008b68:	f7f7 fb88 	bl	800027c <__adddf3>
 8008b6c:	2000      	movs	r0, #0
 8008b6e:	4632      	mov	r2, r6
 8008b70:	463b      	mov	r3, r7
 8008b72:	4604      	mov	r4, r0
 8008b74:	460d      	mov	r5, r1
 8008b76:	f7f7 fb7f 	bl	8000278 <__aeabi_dsub>
 8008b7a:	4642      	mov	r2, r8
 8008b7c:	464b      	mov	r3, r9
 8008b7e:	f7f7 fb7b 	bl	8000278 <__aeabi_dsub>
 8008b82:	ec53 2b18 	vmov	r2, r3, d8
 8008b86:	f7f7 fb77 	bl	8000278 <__aeabi_dsub>
 8008b8a:	4602      	mov	r2, r0
 8008b8c:	460b      	mov	r3, r1
 8008b8e:	4650      	mov	r0, sl
 8008b90:	4659      	mov	r1, fp
 8008b92:	e610      	b.n	80087b6 <__ieee754_pow+0x31e>
 8008b94:	2401      	movs	r4, #1
 8008b96:	e6a1      	b.n	80088dc <__ieee754_pow+0x444>
 8008b98:	ed9f 7b13 	vldr	d7, [pc, #76]	; 8008be8 <__ieee754_pow+0x750>
 8008b9c:	e617      	b.n	80087ce <__ieee754_pow+0x336>
 8008b9e:	bf00      	nop
 8008ba0:	4a454eef 	.word	0x4a454eef
 8008ba4:	3fca7e28 	.word	0x3fca7e28
 8008ba8:	93c9db65 	.word	0x93c9db65
 8008bac:	3fcd864a 	.word	0x3fcd864a
 8008bb0:	a91d4101 	.word	0xa91d4101
 8008bb4:	3fd17460 	.word	0x3fd17460
 8008bb8:	518f264d 	.word	0x518f264d
 8008bbc:	3fd55555 	.word	0x3fd55555
 8008bc0:	db6fabff 	.word	0xdb6fabff
 8008bc4:	3fdb6db6 	.word	0x3fdb6db6
 8008bc8:	33333303 	.word	0x33333303
 8008bcc:	3fe33333 	.word	0x3fe33333
 8008bd0:	e0000000 	.word	0xe0000000
 8008bd4:	3feec709 	.word	0x3feec709
 8008bd8:	dc3a03fd 	.word	0xdc3a03fd
 8008bdc:	3feec709 	.word	0x3feec709
 8008be0:	145b01f5 	.word	0x145b01f5
 8008be4:	be3e2fe0 	.word	0xbe3e2fe0
 8008be8:	00000000 	.word	0x00000000
 8008bec:	3ff00000 	.word	0x3ff00000
 8008bf0:	7ff00000 	.word	0x7ff00000
 8008bf4:	43400000 	.word	0x43400000
 8008bf8:	0003988e 	.word	0x0003988e
 8008bfc:	000bb679 	.word	0x000bb679
 8008c00:	08009990 	.word	0x08009990
 8008c04:	3ff00000 	.word	0x3ff00000
 8008c08:	40080000 	.word	0x40080000
 8008c0c:	080099b0 	.word	0x080099b0
 8008c10:	080099a0 	.word	0x080099a0
 8008c14:	a3b5      	add	r3, pc, #724	; (adr r3, 8008eec <__ieee754_pow+0xa54>)
 8008c16:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008c1a:	4640      	mov	r0, r8
 8008c1c:	4649      	mov	r1, r9
 8008c1e:	f7f7 fb2d 	bl	800027c <__adddf3>
 8008c22:	4622      	mov	r2, r4
 8008c24:	ec41 0b1a 	vmov	d10, r0, r1
 8008c28:	462b      	mov	r3, r5
 8008c2a:	4630      	mov	r0, r6
 8008c2c:	4639      	mov	r1, r7
 8008c2e:	f7f7 fb23 	bl	8000278 <__aeabi_dsub>
 8008c32:	4602      	mov	r2, r0
 8008c34:	460b      	mov	r3, r1
 8008c36:	ec51 0b1a 	vmov	r0, r1, d10
 8008c3a:	f7f7 ff65 	bl	8000b08 <__aeabi_dcmpgt>
 8008c3e:	2800      	cmp	r0, #0
 8008c40:	f47f ae04 	bne.w	800884c <__ieee754_pow+0x3b4>
 8008c44:	4aa4      	ldr	r2, [pc, #656]	; (8008ed8 <__ieee754_pow+0xa40>)
 8008c46:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
 8008c4a:	4293      	cmp	r3, r2
 8008c4c:	f340 8108 	ble.w	8008e60 <__ieee754_pow+0x9c8>
 8008c50:	151b      	asrs	r3, r3, #20
 8008c52:	f44f 1a80 	mov.w	sl, #1048576	; 0x100000
 8008c56:	f2a3 33fe 	subw	r3, r3, #1022	; 0x3fe
 8008c5a:	fa4a f303 	asr.w	r3, sl, r3
 8008c5e:	445b      	add	r3, fp
 8008c60:	f3c3 520a 	ubfx	r2, r3, #20, #11
 8008c64:	4e9d      	ldr	r6, [pc, #628]	; (8008edc <__ieee754_pow+0xa44>)
 8008c66:	f2a2 32ff 	subw	r2, r2, #1023	; 0x3ff
 8008c6a:	4116      	asrs	r6, r2
 8008c6c:	f3c3 0a13 	ubfx	sl, r3, #0, #20
 8008c70:	2000      	movs	r0, #0
 8008c72:	ea23 0106 	bic.w	r1, r3, r6
 8008c76:	f1c2 0214 	rsb	r2, r2, #20
 8008c7a:	f44a 1a80 	orr.w	sl, sl, #1048576	; 0x100000
 8008c7e:	fa4a fa02 	asr.w	sl, sl, r2
 8008c82:	f1bb 0f00 	cmp.w	fp, #0
 8008c86:	4602      	mov	r2, r0
 8008c88:	460b      	mov	r3, r1
 8008c8a:	4620      	mov	r0, r4
 8008c8c:	4629      	mov	r1, r5
 8008c8e:	bfb8      	it	lt
 8008c90:	f1ca 0a00 	rsblt	sl, sl, #0
 8008c94:	f7f7 faf0 	bl	8000278 <__aeabi_dsub>
 8008c98:	ec41 0b19 	vmov	d9, r0, r1
 8008c9c:	4642      	mov	r2, r8
 8008c9e:	464b      	mov	r3, r9
 8008ca0:	ec51 0b19 	vmov	r0, r1, d9
 8008ca4:	f7f7 faea 	bl	800027c <__adddf3>
 8008ca8:	a37b      	add	r3, pc, #492	; (adr r3, 8008e98 <__ieee754_pow+0xa00>)
 8008caa:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008cae:	2000      	movs	r0, #0
 8008cb0:	4604      	mov	r4, r0
 8008cb2:	460d      	mov	r5, r1
 8008cb4:	f7f7 fc98 	bl	80005e8 <__aeabi_dmul>
 8008cb8:	ec53 2b19 	vmov	r2, r3, d9
 8008cbc:	4606      	mov	r6, r0
 8008cbe:	460f      	mov	r7, r1
 8008cc0:	4620      	mov	r0, r4
 8008cc2:	4629      	mov	r1, r5
 8008cc4:	f7f7 fad8 	bl	8000278 <__aeabi_dsub>
 8008cc8:	4602      	mov	r2, r0
 8008cca:	460b      	mov	r3, r1
 8008ccc:	4640      	mov	r0, r8
 8008cce:	4649      	mov	r1, r9
 8008cd0:	f7f7 fad2 	bl	8000278 <__aeabi_dsub>
 8008cd4:	a372      	add	r3, pc, #456	; (adr r3, 8008ea0 <__ieee754_pow+0xa08>)
 8008cd6:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008cda:	f7f7 fc85 	bl	80005e8 <__aeabi_dmul>
 8008cde:	a372      	add	r3, pc, #456	; (adr r3, 8008ea8 <__ieee754_pow+0xa10>)
 8008ce0:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008ce4:	4680      	mov	r8, r0
 8008ce6:	4689      	mov	r9, r1
 8008ce8:	4620      	mov	r0, r4
 8008cea:	4629      	mov	r1, r5
 8008cec:	f7f7 fc7c 	bl	80005e8 <__aeabi_dmul>
 8008cf0:	4602      	mov	r2, r0
 8008cf2:	460b      	mov	r3, r1
 8008cf4:	4640      	mov	r0, r8
 8008cf6:	4649      	mov	r1, r9
 8008cf8:	f7f7 fac0 	bl	800027c <__adddf3>
 8008cfc:	4604      	mov	r4, r0
 8008cfe:	460d      	mov	r5, r1
 8008d00:	4602      	mov	r2, r0
 8008d02:	460b      	mov	r3, r1
 8008d04:	4630      	mov	r0, r6
 8008d06:	4639      	mov	r1, r7
 8008d08:	f7f7 fab8 	bl	800027c <__adddf3>
 8008d0c:	4632      	mov	r2, r6
 8008d0e:	463b      	mov	r3, r7
 8008d10:	4680      	mov	r8, r0
 8008d12:	4689      	mov	r9, r1
 8008d14:	f7f7 fab0 	bl	8000278 <__aeabi_dsub>
 8008d18:	4602      	mov	r2, r0
 8008d1a:	460b      	mov	r3, r1
 8008d1c:	4620      	mov	r0, r4
 8008d1e:	4629      	mov	r1, r5
 8008d20:	f7f7 faaa 	bl	8000278 <__aeabi_dsub>
 8008d24:	4642      	mov	r2, r8
 8008d26:	4606      	mov	r6, r0
 8008d28:	460f      	mov	r7, r1
 8008d2a:	464b      	mov	r3, r9
 8008d2c:	4640      	mov	r0, r8
 8008d2e:	4649      	mov	r1, r9
 8008d30:	f7f7 fc5a 	bl	80005e8 <__aeabi_dmul>
 8008d34:	a35e      	add	r3, pc, #376	; (adr r3, 8008eb0 <__ieee754_pow+0xa18>)
 8008d36:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008d3a:	4604      	mov	r4, r0
 8008d3c:	460d      	mov	r5, r1
 8008d3e:	f7f7 fc53 	bl	80005e8 <__aeabi_dmul>
 8008d42:	a35d      	add	r3, pc, #372	; (adr r3, 8008eb8 <__ieee754_pow+0xa20>)
 8008d44:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008d48:	f7f7 fa96 	bl	8000278 <__aeabi_dsub>
 8008d4c:	4622      	mov	r2, r4
 8008d4e:	462b      	mov	r3, r5
 8008d50:	f7f7 fc4a 	bl	80005e8 <__aeabi_dmul>
 8008d54:	a35a      	add	r3, pc, #360	; (adr r3, 8008ec0 <__ieee754_pow+0xa28>)
 8008d56:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008d5a:	f7f7 fa8f 	bl	800027c <__adddf3>
 8008d5e:	4622      	mov	r2, r4
 8008d60:	462b      	mov	r3, r5
 8008d62:	f7f7 fc41 	bl	80005e8 <__aeabi_dmul>
 8008d66:	a358      	add	r3, pc, #352	; (adr r3, 8008ec8 <__ieee754_pow+0xa30>)
 8008d68:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008d6c:	f7f7 fa84 	bl	8000278 <__aeabi_dsub>
 8008d70:	4622      	mov	r2, r4
 8008d72:	462b      	mov	r3, r5
 8008d74:	f7f7 fc38 	bl	80005e8 <__aeabi_dmul>
 8008d78:	a355      	add	r3, pc, #340	; (adr r3, 8008ed0 <__ieee754_pow+0xa38>)
 8008d7a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008d7e:	f7f7 fa7d 	bl	800027c <__adddf3>
 8008d82:	4622      	mov	r2, r4
 8008d84:	462b      	mov	r3, r5
 8008d86:	f7f7 fc2f 	bl	80005e8 <__aeabi_dmul>
 8008d8a:	4602      	mov	r2, r0
 8008d8c:	460b      	mov	r3, r1
 8008d8e:	4640      	mov	r0, r8
 8008d90:	4649      	mov	r1, r9
 8008d92:	f7f7 fa71 	bl	8000278 <__aeabi_dsub>
 8008d96:	4604      	mov	r4, r0
 8008d98:	460d      	mov	r5, r1
 8008d9a:	4602      	mov	r2, r0
 8008d9c:	460b      	mov	r3, r1
 8008d9e:	4640      	mov	r0, r8
 8008da0:	4649      	mov	r1, r9
 8008da2:	f7f7 fc21 	bl	80005e8 <__aeabi_dmul>
 8008da6:	2200      	movs	r2, #0
 8008da8:	ec41 0b19 	vmov	d9, r0, r1
 8008dac:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8008db0:	4620      	mov	r0, r4
 8008db2:	4629      	mov	r1, r5
 8008db4:	f7f7 fa60 	bl	8000278 <__aeabi_dsub>
 8008db8:	4602      	mov	r2, r0
 8008dba:	460b      	mov	r3, r1
 8008dbc:	ec51 0b19 	vmov	r0, r1, d9
 8008dc0:	f7f7 fd3c 	bl	800083c <__aeabi_ddiv>
 8008dc4:	4632      	mov	r2, r6
 8008dc6:	4604      	mov	r4, r0
 8008dc8:	460d      	mov	r5, r1
 8008dca:	463b      	mov	r3, r7
 8008dcc:	4640      	mov	r0, r8
 8008dce:	4649      	mov	r1, r9
 8008dd0:	f7f7 fc0a 	bl	80005e8 <__aeabi_dmul>
 8008dd4:	4632      	mov	r2, r6
 8008dd6:	463b      	mov	r3, r7
 8008dd8:	f7f7 fa50 	bl	800027c <__adddf3>
 8008ddc:	4602      	mov	r2, r0
 8008dde:	460b      	mov	r3, r1
 8008de0:	4620      	mov	r0, r4
 8008de2:	4629      	mov	r1, r5
 8008de4:	f7f7 fa48 	bl	8000278 <__aeabi_dsub>
 8008de8:	4642      	mov	r2, r8
 8008dea:	464b      	mov	r3, r9
 8008dec:	f7f7 fa44 	bl	8000278 <__aeabi_dsub>
 8008df0:	460b      	mov	r3, r1
 8008df2:	4602      	mov	r2, r0
 8008df4:	493a      	ldr	r1, [pc, #232]	; (8008ee0 <__ieee754_pow+0xa48>)
 8008df6:	2000      	movs	r0, #0
 8008df8:	f7f7 fa3e 	bl	8000278 <__aeabi_dsub>
 8008dfc:	ec41 0b10 	vmov	d0, r0, r1
 8008e00:	ee10 3a90 	vmov	r3, s1
 8008e04:	eb03 530a 	add.w	r3, r3, sl, lsl #20
 8008e08:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8008e0c:	da2b      	bge.n	8008e66 <__ieee754_pow+0x9ce>
 8008e0e:	4650      	mov	r0, sl
 8008e10:	f000 f966 	bl	80090e0 <scalbn>
 8008e14:	ec51 0b10 	vmov	r0, r1, d0
 8008e18:	ec53 2b18 	vmov	r2, r3, d8
 8008e1c:	f7ff bbed 	b.w	80085fa <__ieee754_pow+0x162>
 8008e20:	4b30      	ldr	r3, [pc, #192]	; (8008ee4 <__ieee754_pow+0xa4c>)
 8008e22:	f021 4600 	bic.w	r6, r1, #2147483648	; 0x80000000
 8008e26:	429e      	cmp	r6, r3
 8008e28:	f77f af0c 	ble.w	8008c44 <__ieee754_pow+0x7ac>
 8008e2c:	4b2e      	ldr	r3, [pc, #184]	; (8008ee8 <__ieee754_pow+0xa50>)
 8008e2e:	440b      	add	r3, r1
 8008e30:	4303      	orrs	r3, r0
 8008e32:	d009      	beq.n	8008e48 <__ieee754_pow+0x9b0>
 8008e34:	ec51 0b18 	vmov	r0, r1, d8
 8008e38:	2200      	movs	r2, #0
 8008e3a:	2300      	movs	r3, #0
 8008e3c:	f7f7 fe46 	bl	8000acc <__aeabi_dcmplt>
 8008e40:	3800      	subs	r0, #0
 8008e42:	bf18      	it	ne
 8008e44:	2001      	movne	r0, #1
 8008e46:	e447      	b.n	80086d8 <__ieee754_pow+0x240>
 8008e48:	4622      	mov	r2, r4
 8008e4a:	462b      	mov	r3, r5
 8008e4c:	f7f7 fa14 	bl	8000278 <__aeabi_dsub>
 8008e50:	4642      	mov	r2, r8
 8008e52:	464b      	mov	r3, r9
 8008e54:	f7f7 fe4e 	bl	8000af4 <__aeabi_dcmpge>
 8008e58:	2800      	cmp	r0, #0
 8008e5a:	f43f aef3 	beq.w	8008c44 <__ieee754_pow+0x7ac>
 8008e5e:	e7e9      	b.n	8008e34 <__ieee754_pow+0x99c>
 8008e60:	f04f 0a00 	mov.w	sl, #0
 8008e64:	e71a      	b.n	8008c9c <__ieee754_pow+0x804>
 8008e66:	ec51 0b10 	vmov	r0, r1, d0
 8008e6a:	4619      	mov	r1, r3
 8008e6c:	e7d4      	b.n	8008e18 <__ieee754_pow+0x980>
 8008e6e:	491c      	ldr	r1, [pc, #112]	; (8008ee0 <__ieee754_pow+0xa48>)
 8008e70:	2000      	movs	r0, #0
 8008e72:	f7ff bb30 	b.w	80084d6 <__ieee754_pow+0x3e>
 8008e76:	2000      	movs	r0, #0
 8008e78:	2100      	movs	r1, #0
 8008e7a:	f7ff bb2c 	b.w	80084d6 <__ieee754_pow+0x3e>
 8008e7e:	4630      	mov	r0, r6
 8008e80:	4639      	mov	r1, r7
 8008e82:	f7ff bb28 	b.w	80084d6 <__ieee754_pow+0x3e>
 8008e86:	9204      	str	r2, [sp, #16]
 8008e88:	f7ff bb7a 	b.w	8008580 <__ieee754_pow+0xe8>
 8008e8c:	2300      	movs	r3, #0
 8008e8e:	f7ff bb64 	b.w	800855a <__ieee754_pow+0xc2>
 8008e92:	bf00      	nop
 8008e94:	f3af 8000 	nop.w
 8008e98:	00000000 	.word	0x00000000
 8008e9c:	3fe62e43 	.word	0x3fe62e43
 8008ea0:	fefa39ef 	.word	0xfefa39ef
 8008ea4:	3fe62e42 	.word	0x3fe62e42
 8008ea8:	0ca86c39 	.word	0x0ca86c39
 8008eac:	be205c61 	.word	0xbe205c61
 8008eb0:	72bea4d0 	.word	0x72bea4d0
 8008eb4:	3e663769 	.word	0x3e663769
 8008eb8:	c5d26bf1 	.word	0xc5d26bf1
 8008ebc:	3ebbbd41 	.word	0x3ebbbd41
 8008ec0:	af25de2c 	.word	0xaf25de2c
 8008ec4:	3f11566a 	.word	0x3f11566a
 8008ec8:	16bebd93 	.word	0x16bebd93
 8008ecc:	3f66c16c 	.word	0x3f66c16c
 8008ed0:	5555553e 	.word	0x5555553e
 8008ed4:	3fc55555 	.word	0x3fc55555
 8008ed8:	3fe00000 	.word	0x3fe00000
 8008edc:	000fffff 	.word	0x000fffff
 8008ee0:	3ff00000 	.word	0x3ff00000
 8008ee4:	4090cbff 	.word	0x4090cbff
 8008ee8:	3f6f3400 	.word	0x3f6f3400
 8008eec:	652b82fe 	.word	0x652b82fe
 8008ef0:	3c971547 	.word	0x3c971547

08008ef4 <__ieee754_sqrt>:
 8008ef4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8008ef8:	ec55 4b10 	vmov	r4, r5, d0
 8008efc:	4e55      	ldr	r6, [pc, #340]	; (8009054 <__ieee754_sqrt+0x160>)
 8008efe:	43ae      	bics	r6, r5
 8008f00:	ee10 0a10 	vmov	r0, s0
 8008f04:	ee10 3a10 	vmov	r3, s0
 8008f08:	462a      	mov	r2, r5
 8008f0a:	4629      	mov	r1, r5
 8008f0c:	d110      	bne.n	8008f30 <__ieee754_sqrt+0x3c>
 8008f0e:	ee10 2a10 	vmov	r2, s0
 8008f12:	462b      	mov	r3, r5
 8008f14:	f7f7 fb68 	bl	80005e8 <__aeabi_dmul>
 8008f18:	4602      	mov	r2, r0
 8008f1a:	460b      	mov	r3, r1
 8008f1c:	4620      	mov	r0, r4
 8008f1e:	4629      	mov	r1, r5
 8008f20:	f7f7 f9ac 	bl	800027c <__adddf3>
 8008f24:	4604      	mov	r4, r0
 8008f26:	460d      	mov	r5, r1
 8008f28:	ec45 4b10 	vmov	d0, r4, r5
 8008f2c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8008f30:	2d00      	cmp	r5, #0
 8008f32:	dc10      	bgt.n	8008f56 <__ieee754_sqrt+0x62>
 8008f34:	f025 4600 	bic.w	r6, r5, #2147483648	; 0x80000000
 8008f38:	4330      	orrs	r0, r6
 8008f3a:	d0f5      	beq.n	8008f28 <__ieee754_sqrt+0x34>
 8008f3c:	b15d      	cbz	r5, 8008f56 <__ieee754_sqrt+0x62>
 8008f3e:	ee10 2a10 	vmov	r2, s0
 8008f42:	462b      	mov	r3, r5
 8008f44:	ee10 0a10 	vmov	r0, s0
 8008f48:	f7f7 f996 	bl	8000278 <__aeabi_dsub>
 8008f4c:	4602      	mov	r2, r0
 8008f4e:	460b      	mov	r3, r1
 8008f50:	f7f7 fc74 	bl	800083c <__aeabi_ddiv>
 8008f54:	e7e6      	b.n	8008f24 <__ieee754_sqrt+0x30>
 8008f56:	1512      	asrs	r2, r2, #20
 8008f58:	d074      	beq.n	8009044 <__ieee754_sqrt+0x150>
 8008f5a:	07d4      	lsls	r4, r2, #31
 8008f5c:	f3c1 0113 	ubfx	r1, r1, #0, #20
 8008f60:	f2a2 37ff 	subw	r7, r2, #1023	; 0x3ff
 8008f64:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8008f68:	bf5e      	ittt	pl
 8008f6a:	0fda      	lsrpl	r2, r3, #31
 8008f6c:	005b      	lslpl	r3, r3, #1
 8008f6e:	eb02 0141 	addpl.w	r1, r2, r1, lsl #1
 8008f72:	2400      	movs	r4, #0
 8008f74:	0fda      	lsrs	r2, r3, #31
 8008f76:	eb02 0141 	add.w	r1, r2, r1, lsl #1
 8008f7a:	107f      	asrs	r7, r7, #1
 8008f7c:	005b      	lsls	r3, r3, #1
 8008f7e:	2516      	movs	r5, #22
 8008f80:	4620      	mov	r0, r4
 8008f82:	f44f 1200 	mov.w	r2, #2097152	; 0x200000
 8008f86:	1886      	adds	r6, r0, r2
 8008f88:	428e      	cmp	r6, r1
 8008f8a:	bfde      	ittt	le
 8008f8c:	1b89      	suble	r1, r1, r6
 8008f8e:	18b0      	addle	r0, r6, r2
 8008f90:	18a4      	addle	r4, r4, r2
 8008f92:	0049      	lsls	r1, r1, #1
 8008f94:	3d01      	subs	r5, #1
 8008f96:	eb01 71d3 	add.w	r1, r1, r3, lsr #31
 8008f9a:	ea4f 0252 	mov.w	r2, r2, lsr #1
 8008f9e:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8008fa2:	d1f0      	bne.n	8008f86 <__ieee754_sqrt+0x92>
 8008fa4:	462a      	mov	r2, r5
 8008fa6:	f04f 0e20 	mov.w	lr, #32
 8008faa:	f04f 4600 	mov.w	r6, #2147483648	; 0x80000000
 8008fae:	4281      	cmp	r1, r0
 8008fb0:	eb06 0c05 	add.w	ip, r6, r5
 8008fb4:	dc02      	bgt.n	8008fbc <__ieee754_sqrt+0xc8>
 8008fb6:	d113      	bne.n	8008fe0 <__ieee754_sqrt+0xec>
 8008fb8:	459c      	cmp	ip, r3
 8008fba:	d811      	bhi.n	8008fe0 <__ieee754_sqrt+0xec>
 8008fbc:	f1bc 0f00 	cmp.w	ip, #0
 8008fc0:	eb0c 0506 	add.w	r5, ip, r6
 8008fc4:	da43      	bge.n	800904e <__ieee754_sqrt+0x15a>
 8008fc6:	2d00      	cmp	r5, #0
 8008fc8:	db41      	blt.n	800904e <__ieee754_sqrt+0x15a>
 8008fca:	f100 0801 	add.w	r8, r0, #1
 8008fce:	1a09      	subs	r1, r1, r0
 8008fd0:	459c      	cmp	ip, r3
 8008fd2:	bf88      	it	hi
 8008fd4:	f101 31ff 	addhi.w	r1, r1, #4294967295
 8008fd8:	eba3 030c 	sub.w	r3, r3, ip
 8008fdc:	4432      	add	r2, r6
 8008fde:	4640      	mov	r0, r8
 8008fe0:	ea4f 7cd3 	mov.w	ip, r3, lsr #31
 8008fe4:	f1be 0e01 	subs.w	lr, lr, #1
 8008fe8:	eb0c 0141 	add.w	r1, ip, r1, lsl #1
 8008fec:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8008ff0:	ea4f 0656 	mov.w	r6, r6, lsr #1
 8008ff4:	d1db      	bne.n	8008fae <__ieee754_sqrt+0xba>
 8008ff6:	430b      	orrs	r3, r1
 8008ff8:	d006      	beq.n	8009008 <__ieee754_sqrt+0x114>
 8008ffa:	1c50      	adds	r0, r2, #1
 8008ffc:	bf13      	iteet	ne
 8008ffe:	3201      	addne	r2, #1
 8009000:	3401      	addeq	r4, #1
 8009002:	4672      	moveq	r2, lr
 8009004:	f022 0201 	bicne.w	r2, r2, #1
 8009008:	1063      	asrs	r3, r4, #1
 800900a:	0852      	lsrs	r2, r2, #1
 800900c:	07e1      	lsls	r1, r4, #31
 800900e:	f103 537f 	add.w	r3, r3, #1069547520	; 0x3fc00000
 8009012:	f503 1300 	add.w	r3, r3, #2097152	; 0x200000
 8009016:	bf48      	it	mi
 8009018:	f042 4200 	orrmi.w	r2, r2, #2147483648	; 0x80000000
 800901c:	eb03 5507 	add.w	r5, r3, r7, lsl #20
 8009020:	4614      	mov	r4, r2
 8009022:	e781      	b.n	8008f28 <__ieee754_sqrt+0x34>
 8009024:	0ad9      	lsrs	r1, r3, #11
 8009026:	3815      	subs	r0, #21
 8009028:	055b      	lsls	r3, r3, #21
 800902a:	2900      	cmp	r1, #0
 800902c:	d0fa      	beq.n	8009024 <__ieee754_sqrt+0x130>
 800902e:	02cd      	lsls	r5, r1, #11
 8009030:	d50a      	bpl.n	8009048 <__ieee754_sqrt+0x154>
 8009032:	f1c2 0420 	rsb	r4, r2, #32
 8009036:	fa23 f404 	lsr.w	r4, r3, r4
 800903a:	1e55      	subs	r5, r2, #1
 800903c:	4093      	lsls	r3, r2
 800903e:	4321      	orrs	r1, r4
 8009040:	1b42      	subs	r2, r0, r5
 8009042:	e78a      	b.n	8008f5a <__ieee754_sqrt+0x66>
 8009044:	4610      	mov	r0, r2
 8009046:	e7f0      	b.n	800902a <__ieee754_sqrt+0x136>
 8009048:	0049      	lsls	r1, r1, #1
 800904a:	3201      	adds	r2, #1
 800904c:	e7ef      	b.n	800902e <__ieee754_sqrt+0x13a>
 800904e:	4680      	mov	r8, r0
 8009050:	e7bd      	b.n	8008fce <__ieee754_sqrt+0xda>
 8009052:	bf00      	nop
 8009054:	7ff00000 	.word	0x7ff00000

08009058 <with_errno>:
 8009058:	b570      	push	{r4, r5, r6, lr}
 800905a:	4604      	mov	r4, r0
 800905c:	460d      	mov	r5, r1
 800905e:	4616      	mov	r6, r2
 8009060:	f7fe fc98 	bl	8007994 <__errno>
 8009064:	4629      	mov	r1, r5
 8009066:	6006      	str	r6, [r0, #0]
 8009068:	4620      	mov	r0, r4
 800906a:	bd70      	pop	{r4, r5, r6, pc}

0800906c <xflow>:
 800906c:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800906e:	4614      	mov	r4, r2
 8009070:	461d      	mov	r5, r3
 8009072:	b108      	cbz	r0, 8009078 <xflow+0xc>
 8009074:	f103 4300 	add.w	r3, r3, #2147483648	; 0x80000000
 8009078:	e9cd 2300 	strd	r2, r3, [sp]
 800907c:	e9dd 2300 	ldrd	r2, r3, [sp]
 8009080:	4620      	mov	r0, r4
 8009082:	4629      	mov	r1, r5
 8009084:	f7f7 fab0 	bl	80005e8 <__aeabi_dmul>
 8009088:	2222      	movs	r2, #34	; 0x22
 800908a:	b003      	add	sp, #12
 800908c:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8009090:	f7ff bfe2 	b.w	8009058 <with_errno>

08009094 <__math_uflow>:
 8009094:	b508      	push	{r3, lr}
 8009096:	2200      	movs	r2, #0
 8009098:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 800909c:	f7ff ffe6 	bl	800906c <xflow>
 80090a0:	ec41 0b10 	vmov	d0, r0, r1
 80090a4:	bd08      	pop	{r3, pc}

080090a6 <__math_oflow>:
 80090a6:	b508      	push	{r3, lr}
 80090a8:	2200      	movs	r2, #0
 80090aa:	f04f 43e0 	mov.w	r3, #1879048192	; 0x70000000
 80090ae:	f7ff ffdd 	bl	800906c <xflow>
 80090b2:	ec41 0b10 	vmov	d0, r0, r1
 80090b6:	bd08      	pop	{r3, pc}

080090b8 <fabs>:
 80090b8:	ec51 0b10 	vmov	r0, r1, d0
 80090bc:	ee10 2a10 	vmov	r2, s0
 80090c0:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 80090c4:	ec43 2b10 	vmov	d0, r2, r3
 80090c8:	4770      	bx	lr

080090ca <finite>:
 80090ca:	b082      	sub	sp, #8
 80090cc:	ed8d 0b00 	vstr	d0, [sp]
 80090d0:	9801      	ldr	r0, [sp, #4]
 80090d2:	f040 4000 	orr.w	r0, r0, #2147483648	; 0x80000000
 80090d6:	f500 1080 	add.w	r0, r0, #1048576	; 0x100000
 80090da:	0fc0      	lsrs	r0, r0, #31
 80090dc:	b002      	add	sp, #8
 80090de:	4770      	bx	lr

080090e0 <scalbn>:
 80090e0:	b570      	push	{r4, r5, r6, lr}
 80090e2:	ec55 4b10 	vmov	r4, r5, d0
 80090e6:	f3c5 520a 	ubfx	r2, r5, #20, #11
 80090ea:	4606      	mov	r6, r0
 80090ec:	462b      	mov	r3, r5
 80090ee:	b99a      	cbnz	r2, 8009118 <scalbn+0x38>
 80090f0:	f025 4300 	bic.w	r3, r5, #2147483648	; 0x80000000
 80090f4:	4323      	orrs	r3, r4
 80090f6:	d036      	beq.n	8009166 <scalbn+0x86>
 80090f8:	4b39      	ldr	r3, [pc, #228]	; (80091e0 <scalbn+0x100>)
 80090fa:	4629      	mov	r1, r5
 80090fc:	ee10 0a10 	vmov	r0, s0
 8009100:	2200      	movs	r2, #0
 8009102:	f7f7 fa71 	bl	80005e8 <__aeabi_dmul>
 8009106:	4b37      	ldr	r3, [pc, #220]	; (80091e4 <scalbn+0x104>)
 8009108:	429e      	cmp	r6, r3
 800910a:	4604      	mov	r4, r0
 800910c:	460d      	mov	r5, r1
 800910e:	da10      	bge.n	8009132 <scalbn+0x52>
 8009110:	a32b      	add	r3, pc, #172	; (adr r3, 80091c0 <scalbn+0xe0>)
 8009112:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009116:	e03a      	b.n	800918e <scalbn+0xae>
 8009118:	f240 71ff 	movw	r1, #2047	; 0x7ff
 800911c:	428a      	cmp	r2, r1
 800911e:	d10c      	bne.n	800913a <scalbn+0x5a>
 8009120:	ee10 2a10 	vmov	r2, s0
 8009124:	4620      	mov	r0, r4
 8009126:	4629      	mov	r1, r5
 8009128:	f7f7 f8a8 	bl	800027c <__adddf3>
 800912c:	4604      	mov	r4, r0
 800912e:	460d      	mov	r5, r1
 8009130:	e019      	b.n	8009166 <scalbn+0x86>
 8009132:	f3c1 520a 	ubfx	r2, r1, #20, #11
 8009136:	460b      	mov	r3, r1
 8009138:	3a36      	subs	r2, #54	; 0x36
 800913a:	4432      	add	r2, r6
 800913c:	f240 71fe 	movw	r1, #2046	; 0x7fe
 8009140:	428a      	cmp	r2, r1
 8009142:	dd08      	ble.n	8009156 <scalbn+0x76>
 8009144:	2d00      	cmp	r5, #0
 8009146:	a120      	add	r1, pc, #128	; (adr r1, 80091c8 <scalbn+0xe8>)
 8009148:	e9d1 0100 	ldrd	r0, r1, [r1]
 800914c:	da1c      	bge.n	8009188 <scalbn+0xa8>
 800914e:	a120      	add	r1, pc, #128	; (adr r1, 80091d0 <scalbn+0xf0>)
 8009150:	e9d1 0100 	ldrd	r0, r1, [r1]
 8009154:	e018      	b.n	8009188 <scalbn+0xa8>
 8009156:	2a00      	cmp	r2, #0
 8009158:	dd08      	ble.n	800916c <scalbn+0x8c>
 800915a:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 800915e:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 8009162:	ea43 5502 	orr.w	r5, r3, r2, lsl #20
 8009166:	ec45 4b10 	vmov	d0, r4, r5
 800916a:	bd70      	pop	{r4, r5, r6, pc}
 800916c:	f112 0f35 	cmn.w	r2, #53	; 0x35
 8009170:	da19      	bge.n	80091a6 <scalbn+0xc6>
 8009172:	f24c 3350 	movw	r3, #50000	; 0xc350
 8009176:	429e      	cmp	r6, r3
 8009178:	f005 4300 	and.w	r3, r5, #2147483648	; 0x80000000
 800917c:	dd0a      	ble.n	8009194 <scalbn+0xb4>
 800917e:	a112      	add	r1, pc, #72	; (adr r1, 80091c8 <scalbn+0xe8>)
 8009180:	e9d1 0100 	ldrd	r0, r1, [r1]
 8009184:	2b00      	cmp	r3, #0
 8009186:	d1e2      	bne.n	800914e <scalbn+0x6e>
 8009188:	a30f      	add	r3, pc, #60	; (adr r3, 80091c8 <scalbn+0xe8>)
 800918a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800918e:	f7f7 fa2b 	bl	80005e8 <__aeabi_dmul>
 8009192:	e7cb      	b.n	800912c <scalbn+0x4c>
 8009194:	a10a      	add	r1, pc, #40	; (adr r1, 80091c0 <scalbn+0xe0>)
 8009196:	e9d1 0100 	ldrd	r0, r1, [r1]
 800919a:	2b00      	cmp	r3, #0
 800919c:	d0b8      	beq.n	8009110 <scalbn+0x30>
 800919e:	a10e      	add	r1, pc, #56	; (adr r1, 80091d8 <scalbn+0xf8>)
 80091a0:	e9d1 0100 	ldrd	r0, r1, [r1]
 80091a4:	e7b4      	b.n	8009110 <scalbn+0x30>
 80091a6:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 80091aa:	3236      	adds	r2, #54	; 0x36
 80091ac:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 80091b0:	ea43 5102 	orr.w	r1, r3, r2, lsl #20
 80091b4:	4620      	mov	r0, r4
 80091b6:	4b0c      	ldr	r3, [pc, #48]	; (80091e8 <scalbn+0x108>)
 80091b8:	2200      	movs	r2, #0
 80091ba:	e7e8      	b.n	800918e <scalbn+0xae>
 80091bc:	f3af 8000 	nop.w
 80091c0:	c2f8f359 	.word	0xc2f8f359
 80091c4:	01a56e1f 	.word	0x01a56e1f
 80091c8:	8800759c 	.word	0x8800759c
 80091cc:	7e37e43c 	.word	0x7e37e43c
 80091d0:	8800759c 	.word	0x8800759c
 80091d4:	fe37e43c 	.word	0xfe37e43c
 80091d8:	c2f8f359 	.word	0xc2f8f359
 80091dc:	81a56e1f 	.word	0x81a56e1f
 80091e0:	43500000 	.word	0x43500000
 80091e4:	ffff3cb0 	.word	0xffff3cb0
 80091e8:	3c900000 	.word	0x3c900000

080091ec <_init>:
 80091ec:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80091ee:	bf00      	nop
 80091f0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80091f2:	bc08      	pop	{r3}
 80091f4:	469e      	mov	lr, r3
 80091f6:	4770      	bx	lr

080091f8 <_fini>:
 80091f8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80091fa:	bf00      	nop
 80091fc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80091fe:	bc08      	pop	{r3}
 8009200:	469e      	mov	lr, r3
 8009202:	4770      	bx	lr
