
L4_IOT_SENSORS.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00008614  08000190  08000190  00010190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000128  080087a8  080087a8  000187a8  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080088d0  080088d0  000201e0  2**0
                  CONTENTS
  4 .ARM          00000008  080088d0  080088d0  000188d0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  080088d8  080088d8  000201e0  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080088d8  080088d8  000188d8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080088dc  080088dc  000188dc  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000001e0  20000000  080088e0  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000e5c  200001e0  08008ac0  000201e0  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  2000103c  08008ac0  0002103c  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  000201e0  2**0
                  CONTENTS, READONLY
 12 .debug_info   0001c52a  00000000  00000000  00020210  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00003a46  00000000  00000000  0003c73a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001898  00000000  00000000  00040180  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00001700  00000000  00000000  00041a18  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00029b69  00000000  00000000  00043118  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0001c8dd  00000000  00000000  0006cc81  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000f7e4d  00000000  00000000  0008955e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  001813ab  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00007098  00000000  00000000  001813fc  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	; (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	; (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	200001e0 	.word	0x200001e0
 80001ac:	00000000 	.word	0x00000000
 80001b0:	0800878c 	.word	0x0800878c

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	; (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	; (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	; (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	200001e4 	.word	0x200001e4
 80001cc:	0800878c 	.word	0x0800878c

080001d0 <memchr>:
 80001d0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001d4:	2a10      	cmp	r2, #16
 80001d6:	db2b      	blt.n	8000230 <memchr+0x60>
 80001d8:	f010 0f07 	tst.w	r0, #7
 80001dc:	d008      	beq.n	80001f0 <memchr+0x20>
 80001de:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001e2:	3a01      	subs	r2, #1
 80001e4:	428b      	cmp	r3, r1
 80001e6:	d02d      	beq.n	8000244 <memchr+0x74>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	b342      	cbz	r2, 8000240 <memchr+0x70>
 80001ee:	d1f6      	bne.n	80001de <memchr+0xe>
 80001f0:	b4f0      	push	{r4, r5, r6, r7}
 80001f2:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 80001f6:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 80001fa:	f022 0407 	bic.w	r4, r2, #7
 80001fe:	f07f 0700 	mvns.w	r7, #0
 8000202:	2300      	movs	r3, #0
 8000204:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000208:	3c08      	subs	r4, #8
 800020a:	ea85 0501 	eor.w	r5, r5, r1
 800020e:	ea86 0601 	eor.w	r6, r6, r1
 8000212:	fa85 f547 	uadd8	r5, r5, r7
 8000216:	faa3 f587 	sel	r5, r3, r7
 800021a:	fa86 f647 	uadd8	r6, r6, r7
 800021e:	faa5 f687 	sel	r6, r5, r7
 8000222:	b98e      	cbnz	r6, 8000248 <memchr+0x78>
 8000224:	d1ee      	bne.n	8000204 <memchr+0x34>
 8000226:	bcf0      	pop	{r4, r5, r6, r7}
 8000228:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800022c:	f002 0207 	and.w	r2, r2, #7
 8000230:	b132      	cbz	r2, 8000240 <memchr+0x70>
 8000232:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000236:	3a01      	subs	r2, #1
 8000238:	ea83 0301 	eor.w	r3, r3, r1
 800023c:	b113      	cbz	r3, 8000244 <memchr+0x74>
 800023e:	d1f8      	bne.n	8000232 <memchr+0x62>
 8000240:	2000      	movs	r0, #0
 8000242:	4770      	bx	lr
 8000244:	3801      	subs	r0, #1
 8000246:	4770      	bx	lr
 8000248:	2d00      	cmp	r5, #0
 800024a:	bf06      	itte	eq
 800024c:	4635      	moveq	r5, r6
 800024e:	3803      	subeq	r0, #3
 8000250:	3807      	subne	r0, #7
 8000252:	f015 0f01 	tst.w	r5, #1
 8000256:	d107      	bne.n	8000268 <memchr+0x98>
 8000258:	3001      	adds	r0, #1
 800025a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800025e:	bf02      	ittt	eq
 8000260:	3001      	addeq	r0, #1
 8000262:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000266:	3001      	addeq	r0, #1
 8000268:	bcf0      	pop	{r4, r5, r6, r7}
 800026a:	3801      	subs	r0, #1
 800026c:	4770      	bx	lr
 800026e:	bf00      	nop

08000270 <__aeabi_drsub>:
 8000270:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000274:	e002      	b.n	800027c <__adddf3>
 8000276:	bf00      	nop

08000278 <__aeabi_dsub>:
 8000278:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

0800027c <__adddf3>:
 800027c:	b530      	push	{r4, r5, lr}
 800027e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000282:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000286:	ea94 0f05 	teq	r4, r5
 800028a:	bf08      	it	eq
 800028c:	ea90 0f02 	teqeq	r0, r2
 8000290:	bf1f      	itttt	ne
 8000292:	ea54 0c00 	orrsne.w	ip, r4, r0
 8000296:	ea55 0c02 	orrsne.w	ip, r5, r2
 800029a:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 800029e:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002a2:	f000 80e2 	beq.w	800046a <__adddf3+0x1ee>
 80002a6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002aa:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002ae:	bfb8      	it	lt
 80002b0:	426d      	neglt	r5, r5
 80002b2:	dd0c      	ble.n	80002ce <__adddf3+0x52>
 80002b4:	442c      	add	r4, r5
 80002b6:	ea80 0202 	eor.w	r2, r0, r2
 80002ba:	ea81 0303 	eor.w	r3, r1, r3
 80002be:	ea82 0000 	eor.w	r0, r2, r0
 80002c2:	ea83 0101 	eor.w	r1, r3, r1
 80002c6:	ea80 0202 	eor.w	r2, r0, r2
 80002ca:	ea81 0303 	eor.w	r3, r1, r3
 80002ce:	2d36      	cmp	r5, #54	; 0x36
 80002d0:	bf88      	it	hi
 80002d2:	bd30      	pophi	{r4, r5, pc}
 80002d4:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80002d8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80002dc:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 80002e0:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80002e4:	d002      	beq.n	80002ec <__adddf3+0x70>
 80002e6:	4240      	negs	r0, r0
 80002e8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80002ec:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 80002f0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80002f4:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 80002f8:	d002      	beq.n	8000300 <__adddf3+0x84>
 80002fa:	4252      	negs	r2, r2
 80002fc:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000300:	ea94 0f05 	teq	r4, r5
 8000304:	f000 80a7 	beq.w	8000456 <__adddf3+0x1da>
 8000308:	f1a4 0401 	sub.w	r4, r4, #1
 800030c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000310:	db0d      	blt.n	800032e <__adddf3+0xb2>
 8000312:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000316:	fa22 f205 	lsr.w	r2, r2, r5
 800031a:	1880      	adds	r0, r0, r2
 800031c:	f141 0100 	adc.w	r1, r1, #0
 8000320:	fa03 f20e 	lsl.w	r2, r3, lr
 8000324:	1880      	adds	r0, r0, r2
 8000326:	fa43 f305 	asr.w	r3, r3, r5
 800032a:	4159      	adcs	r1, r3
 800032c:	e00e      	b.n	800034c <__adddf3+0xd0>
 800032e:	f1a5 0520 	sub.w	r5, r5, #32
 8000332:	f10e 0e20 	add.w	lr, lr, #32
 8000336:	2a01      	cmp	r2, #1
 8000338:	fa03 fc0e 	lsl.w	ip, r3, lr
 800033c:	bf28      	it	cs
 800033e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000342:	fa43 f305 	asr.w	r3, r3, r5
 8000346:	18c0      	adds	r0, r0, r3
 8000348:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800034c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000350:	d507      	bpl.n	8000362 <__adddf3+0xe6>
 8000352:	f04f 0e00 	mov.w	lr, #0
 8000356:	f1dc 0c00 	rsbs	ip, ip, #0
 800035a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800035e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000362:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000366:	d31b      	bcc.n	80003a0 <__adddf3+0x124>
 8000368:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800036c:	d30c      	bcc.n	8000388 <__adddf3+0x10c>
 800036e:	0849      	lsrs	r1, r1, #1
 8000370:	ea5f 0030 	movs.w	r0, r0, rrx
 8000374:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000378:	f104 0401 	add.w	r4, r4, #1
 800037c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000380:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 8000384:	f080 809a 	bcs.w	80004bc <__adddf3+0x240>
 8000388:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 800038c:	bf08      	it	eq
 800038e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000392:	f150 0000 	adcs.w	r0, r0, #0
 8000396:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800039a:	ea41 0105 	orr.w	r1, r1, r5
 800039e:	bd30      	pop	{r4, r5, pc}
 80003a0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003a4:	4140      	adcs	r0, r0
 80003a6:	eb41 0101 	adc.w	r1, r1, r1
 80003aa:	3c01      	subs	r4, #1
 80003ac:	bf28      	it	cs
 80003ae:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 80003b2:	d2e9      	bcs.n	8000388 <__adddf3+0x10c>
 80003b4:	f091 0f00 	teq	r1, #0
 80003b8:	bf04      	itt	eq
 80003ba:	4601      	moveq	r1, r0
 80003bc:	2000      	moveq	r0, #0
 80003be:	fab1 f381 	clz	r3, r1
 80003c2:	bf08      	it	eq
 80003c4:	3320      	addeq	r3, #32
 80003c6:	f1a3 030b 	sub.w	r3, r3, #11
 80003ca:	f1b3 0220 	subs.w	r2, r3, #32
 80003ce:	da0c      	bge.n	80003ea <__adddf3+0x16e>
 80003d0:	320c      	adds	r2, #12
 80003d2:	dd08      	ble.n	80003e6 <__adddf3+0x16a>
 80003d4:	f102 0c14 	add.w	ip, r2, #20
 80003d8:	f1c2 020c 	rsb	r2, r2, #12
 80003dc:	fa01 f00c 	lsl.w	r0, r1, ip
 80003e0:	fa21 f102 	lsr.w	r1, r1, r2
 80003e4:	e00c      	b.n	8000400 <__adddf3+0x184>
 80003e6:	f102 0214 	add.w	r2, r2, #20
 80003ea:	bfd8      	it	le
 80003ec:	f1c2 0c20 	rsble	ip, r2, #32
 80003f0:	fa01 f102 	lsl.w	r1, r1, r2
 80003f4:	fa20 fc0c 	lsr.w	ip, r0, ip
 80003f8:	bfdc      	itt	le
 80003fa:	ea41 010c 	orrle.w	r1, r1, ip
 80003fe:	4090      	lslle	r0, r2
 8000400:	1ae4      	subs	r4, r4, r3
 8000402:	bfa2      	ittt	ge
 8000404:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000408:	4329      	orrge	r1, r5
 800040a:	bd30      	popge	{r4, r5, pc}
 800040c:	ea6f 0404 	mvn.w	r4, r4
 8000410:	3c1f      	subs	r4, #31
 8000412:	da1c      	bge.n	800044e <__adddf3+0x1d2>
 8000414:	340c      	adds	r4, #12
 8000416:	dc0e      	bgt.n	8000436 <__adddf3+0x1ba>
 8000418:	f104 0414 	add.w	r4, r4, #20
 800041c:	f1c4 0220 	rsb	r2, r4, #32
 8000420:	fa20 f004 	lsr.w	r0, r0, r4
 8000424:	fa01 f302 	lsl.w	r3, r1, r2
 8000428:	ea40 0003 	orr.w	r0, r0, r3
 800042c:	fa21 f304 	lsr.w	r3, r1, r4
 8000430:	ea45 0103 	orr.w	r1, r5, r3
 8000434:	bd30      	pop	{r4, r5, pc}
 8000436:	f1c4 040c 	rsb	r4, r4, #12
 800043a:	f1c4 0220 	rsb	r2, r4, #32
 800043e:	fa20 f002 	lsr.w	r0, r0, r2
 8000442:	fa01 f304 	lsl.w	r3, r1, r4
 8000446:	ea40 0003 	orr.w	r0, r0, r3
 800044a:	4629      	mov	r1, r5
 800044c:	bd30      	pop	{r4, r5, pc}
 800044e:	fa21 f004 	lsr.w	r0, r1, r4
 8000452:	4629      	mov	r1, r5
 8000454:	bd30      	pop	{r4, r5, pc}
 8000456:	f094 0f00 	teq	r4, #0
 800045a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800045e:	bf06      	itte	eq
 8000460:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000464:	3401      	addeq	r4, #1
 8000466:	3d01      	subne	r5, #1
 8000468:	e74e      	b.n	8000308 <__adddf3+0x8c>
 800046a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800046e:	bf18      	it	ne
 8000470:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000474:	d029      	beq.n	80004ca <__adddf3+0x24e>
 8000476:	ea94 0f05 	teq	r4, r5
 800047a:	bf08      	it	eq
 800047c:	ea90 0f02 	teqeq	r0, r2
 8000480:	d005      	beq.n	800048e <__adddf3+0x212>
 8000482:	ea54 0c00 	orrs.w	ip, r4, r0
 8000486:	bf04      	itt	eq
 8000488:	4619      	moveq	r1, r3
 800048a:	4610      	moveq	r0, r2
 800048c:	bd30      	pop	{r4, r5, pc}
 800048e:	ea91 0f03 	teq	r1, r3
 8000492:	bf1e      	ittt	ne
 8000494:	2100      	movne	r1, #0
 8000496:	2000      	movne	r0, #0
 8000498:	bd30      	popne	{r4, r5, pc}
 800049a:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 800049e:	d105      	bne.n	80004ac <__adddf3+0x230>
 80004a0:	0040      	lsls	r0, r0, #1
 80004a2:	4149      	adcs	r1, r1
 80004a4:	bf28      	it	cs
 80004a6:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80004aa:	bd30      	pop	{r4, r5, pc}
 80004ac:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80004b0:	bf3c      	itt	cc
 80004b2:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80004b6:	bd30      	popcc	{r4, r5, pc}
 80004b8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004bc:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80004c0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80004c4:	f04f 0000 	mov.w	r0, #0
 80004c8:	bd30      	pop	{r4, r5, pc}
 80004ca:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004ce:	bf1a      	itte	ne
 80004d0:	4619      	movne	r1, r3
 80004d2:	4610      	movne	r0, r2
 80004d4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80004d8:	bf1c      	itt	ne
 80004da:	460b      	movne	r3, r1
 80004dc:	4602      	movne	r2, r0
 80004de:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80004e2:	bf06      	itte	eq
 80004e4:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80004e8:	ea91 0f03 	teqeq	r1, r3
 80004ec:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 80004f0:	bd30      	pop	{r4, r5, pc}
 80004f2:	bf00      	nop

080004f4 <__aeabi_ui2d>:
 80004f4:	f090 0f00 	teq	r0, #0
 80004f8:	bf04      	itt	eq
 80004fa:	2100      	moveq	r1, #0
 80004fc:	4770      	bxeq	lr
 80004fe:	b530      	push	{r4, r5, lr}
 8000500:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000504:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000508:	f04f 0500 	mov.w	r5, #0
 800050c:	f04f 0100 	mov.w	r1, #0
 8000510:	e750      	b.n	80003b4 <__adddf3+0x138>
 8000512:	bf00      	nop

08000514 <__aeabi_i2d>:
 8000514:	f090 0f00 	teq	r0, #0
 8000518:	bf04      	itt	eq
 800051a:	2100      	moveq	r1, #0
 800051c:	4770      	bxeq	lr
 800051e:	b530      	push	{r4, r5, lr}
 8000520:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000524:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000528:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800052c:	bf48      	it	mi
 800052e:	4240      	negmi	r0, r0
 8000530:	f04f 0100 	mov.w	r1, #0
 8000534:	e73e      	b.n	80003b4 <__adddf3+0x138>
 8000536:	bf00      	nop

08000538 <__aeabi_f2d>:
 8000538:	0042      	lsls	r2, r0, #1
 800053a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800053e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000542:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000546:	bf1f      	itttt	ne
 8000548:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800054c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000550:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000554:	4770      	bxne	lr
 8000556:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800055a:	bf08      	it	eq
 800055c:	4770      	bxeq	lr
 800055e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000562:	bf04      	itt	eq
 8000564:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000568:	4770      	bxeq	lr
 800056a:	b530      	push	{r4, r5, lr}
 800056c:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000570:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000574:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000578:	e71c      	b.n	80003b4 <__adddf3+0x138>
 800057a:	bf00      	nop

0800057c <__aeabi_ul2d>:
 800057c:	ea50 0201 	orrs.w	r2, r0, r1
 8000580:	bf08      	it	eq
 8000582:	4770      	bxeq	lr
 8000584:	b530      	push	{r4, r5, lr}
 8000586:	f04f 0500 	mov.w	r5, #0
 800058a:	e00a      	b.n	80005a2 <__aeabi_l2d+0x16>

0800058c <__aeabi_l2d>:
 800058c:	ea50 0201 	orrs.w	r2, r0, r1
 8000590:	bf08      	it	eq
 8000592:	4770      	bxeq	lr
 8000594:	b530      	push	{r4, r5, lr}
 8000596:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 800059a:	d502      	bpl.n	80005a2 <__aeabi_l2d+0x16>
 800059c:	4240      	negs	r0, r0
 800059e:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005a2:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80005a6:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80005aa:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005ae:	f43f aed8 	beq.w	8000362 <__adddf3+0xe6>
 80005b2:	f04f 0203 	mov.w	r2, #3
 80005b6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005ba:	bf18      	it	ne
 80005bc:	3203      	addne	r2, #3
 80005be:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005c2:	bf18      	it	ne
 80005c4:	3203      	addne	r2, #3
 80005c6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80005ca:	f1c2 0320 	rsb	r3, r2, #32
 80005ce:	fa00 fc03 	lsl.w	ip, r0, r3
 80005d2:	fa20 f002 	lsr.w	r0, r0, r2
 80005d6:	fa01 fe03 	lsl.w	lr, r1, r3
 80005da:	ea40 000e 	orr.w	r0, r0, lr
 80005de:	fa21 f102 	lsr.w	r1, r1, r2
 80005e2:	4414      	add	r4, r2
 80005e4:	e6bd      	b.n	8000362 <__adddf3+0xe6>
 80005e6:	bf00      	nop

080005e8 <__aeabi_dmul>:
 80005e8:	b570      	push	{r4, r5, r6, lr}
 80005ea:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80005ee:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 80005f2:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80005f6:	bf1d      	ittte	ne
 80005f8:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80005fc:	ea94 0f0c 	teqne	r4, ip
 8000600:	ea95 0f0c 	teqne	r5, ip
 8000604:	f000 f8de 	bleq	80007c4 <__aeabi_dmul+0x1dc>
 8000608:	442c      	add	r4, r5
 800060a:	ea81 0603 	eor.w	r6, r1, r3
 800060e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000612:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000616:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800061a:	bf18      	it	ne
 800061c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000620:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000624:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000628:	d038      	beq.n	800069c <__aeabi_dmul+0xb4>
 800062a:	fba0 ce02 	umull	ip, lr, r0, r2
 800062e:	f04f 0500 	mov.w	r5, #0
 8000632:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000636:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800063a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800063e:	f04f 0600 	mov.w	r6, #0
 8000642:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000646:	f09c 0f00 	teq	ip, #0
 800064a:	bf18      	it	ne
 800064c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000650:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000654:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000658:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800065c:	d204      	bcs.n	8000668 <__aeabi_dmul+0x80>
 800065e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000662:	416d      	adcs	r5, r5
 8000664:	eb46 0606 	adc.w	r6, r6, r6
 8000668:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800066c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000670:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000674:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000678:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800067c:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000680:	bf88      	it	hi
 8000682:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000686:	d81e      	bhi.n	80006c6 <__aeabi_dmul+0xde>
 8000688:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 800068c:	bf08      	it	eq
 800068e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 8000692:	f150 0000 	adcs.w	r0, r0, #0
 8000696:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800069a:	bd70      	pop	{r4, r5, r6, pc}
 800069c:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80006a0:	ea46 0101 	orr.w	r1, r6, r1
 80006a4:	ea40 0002 	orr.w	r0, r0, r2
 80006a8:	ea81 0103 	eor.w	r1, r1, r3
 80006ac:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006b0:	bfc2      	ittt	gt
 80006b2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006b6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006ba:	bd70      	popgt	{r4, r5, r6, pc}
 80006bc:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80006c0:	f04f 0e00 	mov.w	lr, #0
 80006c4:	3c01      	subs	r4, #1
 80006c6:	f300 80ab 	bgt.w	8000820 <__aeabi_dmul+0x238>
 80006ca:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80006ce:	bfde      	ittt	le
 80006d0:	2000      	movle	r0, #0
 80006d2:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 80006d6:	bd70      	pople	{r4, r5, r6, pc}
 80006d8:	f1c4 0400 	rsb	r4, r4, #0
 80006dc:	3c20      	subs	r4, #32
 80006de:	da35      	bge.n	800074c <__aeabi_dmul+0x164>
 80006e0:	340c      	adds	r4, #12
 80006e2:	dc1b      	bgt.n	800071c <__aeabi_dmul+0x134>
 80006e4:	f104 0414 	add.w	r4, r4, #20
 80006e8:	f1c4 0520 	rsb	r5, r4, #32
 80006ec:	fa00 f305 	lsl.w	r3, r0, r5
 80006f0:	fa20 f004 	lsr.w	r0, r0, r4
 80006f4:	fa01 f205 	lsl.w	r2, r1, r5
 80006f8:	ea40 0002 	orr.w	r0, r0, r2
 80006fc:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000700:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000704:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000708:	fa21 f604 	lsr.w	r6, r1, r4
 800070c:	eb42 0106 	adc.w	r1, r2, r6
 8000710:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000714:	bf08      	it	eq
 8000716:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800071a:	bd70      	pop	{r4, r5, r6, pc}
 800071c:	f1c4 040c 	rsb	r4, r4, #12
 8000720:	f1c4 0520 	rsb	r5, r4, #32
 8000724:	fa00 f304 	lsl.w	r3, r0, r4
 8000728:	fa20 f005 	lsr.w	r0, r0, r5
 800072c:	fa01 f204 	lsl.w	r2, r1, r4
 8000730:	ea40 0002 	orr.w	r0, r0, r2
 8000734:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000738:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800073c:	f141 0100 	adc.w	r1, r1, #0
 8000740:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000744:	bf08      	it	eq
 8000746:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800074a:	bd70      	pop	{r4, r5, r6, pc}
 800074c:	f1c4 0520 	rsb	r5, r4, #32
 8000750:	fa00 f205 	lsl.w	r2, r0, r5
 8000754:	ea4e 0e02 	orr.w	lr, lr, r2
 8000758:	fa20 f304 	lsr.w	r3, r0, r4
 800075c:	fa01 f205 	lsl.w	r2, r1, r5
 8000760:	ea43 0302 	orr.w	r3, r3, r2
 8000764:	fa21 f004 	lsr.w	r0, r1, r4
 8000768:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800076c:	fa21 f204 	lsr.w	r2, r1, r4
 8000770:	ea20 0002 	bic.w	r0, r0, r2
 8000774:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000778:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800077c:	bf08      	it	eq
 800077e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000782:	bd70      	pop	{r4, r5, r6, pc}
 8000784:	f094 0f00 	teq	r4, #0
 8000788:	d10f      	bne.n	80007aa <__aeabi_dmul+0x1c2>
 800078a:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 800078e:	0040      	lsls	r0, r0, #1
 8000790:	eb41 0101 	adc.w	r1, r1, r1
 8000794:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000798:	bf08      	it	eq
 800079a:	3c01      	subeq	r4, #1
 800079c:	d0f7      	beq.n	800078e <__aeabi_dmul+0x1a6>
 800079e:	ea41 0106 	orr.w	r1, r1, r6
 80007a2:	f095 0f00 	teq	r5, #0
 80007a6:	bf18      	it	ne
 80007a8:	4770      	bxne	lr
 80007aa:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 80007ae:	0052      	lsls	r2, r2, #1
 80007b0:	eb43 0303 	adc.w	r3, r3, r3
 80007b4:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80007b8:	bf08      	it	eq
 80007ba:	3d01      	subeq	r5, #1
 80007bc:	d0f7      	beq.n	80007ae <__aeabi_dmul+0x1c6>
 80007be:	ea43 0306 	orr.w	r3, r3, r6
 80007c2:	4770      	bx	lr
 80007c4:	ea94 0f0c 	teq	r4, ip
 80007c8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80007cc:	bf18      	it	ne
 80007ce:	ea95 0f0c 	teqne	r5, ip
 80007d2:	d00c      	beq.n	80007ee <__aeabi_dmul+0x206>
 80007d4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80007d8:	bf18      	it	ne
 80007da:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007de:	d1d1      	bne.n	8000784 <__aeabi_dmul+0x19c>
 80007e0:	ea81 0103 	eor.w	r1, r1, r3
 80007e4:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80007e8:	f04f 0000 	mov.w	r0, #0
 80007ec:	bd70      	pop	{r4, r5, r6, pc}
 80007ee:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80007f2:	bf06      	itte	eq
 80007f4:	4610      	moveq	r0, r2
 80007f6:	4619      	moveq	r1, r3
 80007f8:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007fc:	d019      	beq.n	8000832 <__aeabi_dmul+0x24a>
 80007fe:	ea94 0f0c 	teq	r4, ip
 8000802:	d102      	bne.n	800080a <__aeabi_dmul+0x222>
 8000804:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000808:	d113      	bne.n	8000832 <__aeabi_dmul+0x24a>
 800080a:	ea95 0f0c 	teq	r5, ip
 800080e:	d105      	bne.n	800081c <__aeabi_dmul+0x234>
 8000810:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000814:	bf1c      	itt	ne
 8000816:	4610      	movne	r0, r2
 8000818:	4619      	movne	r1, r3
 800081a:	d10a      	bne.n	8000832 <__aeabi_dmul+0x24a>
 800081c:	ea81 0103 	eor.w	r1, r1, r3
 8000820:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000824:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000828:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800082c:	f04f 0000 	mov.w	r0, #0
 8000830:	bd70      	pop	{r4, r5, r6, pc}
 8000832:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000836:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800083a:	bd70      	pop	{r4, r5, r6, pc}

0800083c <__aeabi_ddiv>:
 800083c:	b570      	push	{r4, r5, r6, lr}
 800083e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000842:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000846:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800084a:	bf1d      	ittte	ne
 800084c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000850:	ea94 0f0c 	teqne	r4, ip
 8000854:	ea95 0f0c 	teqne	r5, ip
 8000858:	f000 f8a7 	bleq	80009aa <__aeabi_ddiv+0x16e>
 800085c:	eba4 0405 	sub.w	r4, r4, r5
 8000860:	ea81 0e03 	eor.w	lr, r1, r3
 8000864:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000868:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800086c:	f000 8088 	beq.w	8000980 <__aeabi_ddiv+0x144>
 8000870:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000874:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8000878:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800087c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000880:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000884:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000888:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 800088c:	ea4f 2600 	mov.w	r6, r0, lsl #8
 8000890:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 8000894:	429d      	cmp	r5, r3
 8000896:	bf08      	it	eq
 8000898:	4296      	cmpeq	r6, r2
 800089a:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 800089e:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80008a2:	d202      	bcs.n	80008aa <__aeabi_ddiv+0x6e>
 80008a4:	085b      	lsrs	r3, r3, #1
 80008a6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008aa:	1ab6      	subs	r6, r6, r2
 80008ac:	eb65 0503 	sbc.w	r5, r5, r3
 80008b0:	085b      	lsrs	r3, r3, #1
 80008b2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008b6:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80008ba:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 80008be:	ebb6 0e02 	subs.w	lr, r6, r2
 80008c2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008c6:	bf22      	ittt	cs
 80008c8:	1ab6      	subcs	r6, r6, r2
 80008ca:	4675      	movcs	r5, lr
 80008cc:	ea40 000c 	orrcs.w	r0, r0, ip
 80008d0:	085b      	lsrs	r3, r3, #1
 80008d2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008d6:	ebb6 0e02 	subs.w	lr, r6, r2
 80008da:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008de:	bf22      	ittt	cs
 80008e0:	1ab6      	subcs	r6, r6, r2
 80008e2:	4675      	movcs	r5, lr
 80008e4:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80008e8:	085b      	lsrs	r3, r3, #1
 80008ea:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ee:	ebb6 0e02 	subs.w	lr, r6, r2
 80008f2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008f6:	bf22      	ittt	cs
 80008f8:	1ab6      	subcs	r6, r6, r2
 80008fa:	4675      	movcs	r5, lr
 80008fc:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000900:	085b      	lsrs	r3, r3, #1
 8000902:	ea4f 0232 	mov.w	r2, r2, rrx
 8000906:	ebb6 0e02 	subs.w	lr, r6, r2
 800090a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800090e:	bf22      	ittt	cs
 8000910:	1ab6      	subcs	r6, r6, r2
 8000912:	4675      	movcs	r5, lr
 8000914:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000918:	ea55 0e06 	orrs.w	lr, r5, r6
 800091c:	d018      	beq.n	8000950 <__aeabi_ddiv+0x114>
 800091e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000922:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000926:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800092a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800092e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000932:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000936:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800093a:	d1c0      	bne.n	80008be <__aeabi_ddiv+0x82>
 800093c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000940:	d10b      	bne.n	800095a <__aeabi_ddiv+0x11e>
 8000942:	ea41 0100 	orr.w	r1, r1, r0
 8000946:	f04f 0000 	mov.w	r0, #0
 800094a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800094e:	e7b6      	b.n	80008be <__aeabi_ddiv+0x82>
 8000950:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000954:	bf04      	itt	eq
 8000956:	4301      	orreq	r1, r0
 8000958:	2000      	moveq	r0, #0
 800095a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800095e:	bf88      	it	hi
 8000960:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000964:	f63f aeaf 	bhi.w	80006c6 <__aeabi_dmul+0xde>
 8000968:	ebb5 0c03 	subs.w	ip, r5, r3
 800096c:	bf04      	itt	eq
 800096e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000972:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000976:	f150 0000 	adcs.w	r0, r0, #0
 800097a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800097e:	bd70      	pop	{r4, r5, r6, pc}
 8000980:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 8000984:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000988:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 800098c:	bfc2      	ittt	gt
 800098e:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000992:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000996:	bd70      	popgt	{r4, r5, r6, pc}
 8000998:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 800099c:	f04f 0e00 	mov.w	lr, #0
 80009a0:	3c01      	subs	r4, #1
 80009a2:	e690      	b.n	80006c6 <__aeabi_dmul+0xde>
 80009a4:	ea45 0e06 	orr.w	lr, r5, r6
 80009a8:	e68d      	b.n	80006c6 <__aeabi_dmul+0xde>
 80009aa:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009ae:	ea94 0f0c 	teq	r4, ip
 80009b2:	bf08      	it	eq
 80009b4:	ea95 0f0c 	teqeq	r5, ip
 80009b8:	f43f af3b 	beq.w	8000832 <__aeabi_dmul+0x24a>
 80009bc:	ea94 0f0c 	teq	r4, ip
 80009c0:	d10a      	bne.n	80009d8 <__aeabi_ddiv+0x19c>
 80009c2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80009c6:	f47f af34 	bne.w	8000832 <__aeabi_dmul+0x24a>
 80009ca:	ea95 0f0c 	teq	r5, ip
 80009ce:	f47f af25 	bne.w	800081c <__aeabi_dmul+0x234>
 80009d2:	4610      	mov	r0, r2
 80009d4:	4619      	mov	r1, r3
 80009d6:	e72c      	b.n	8000832 <__aeabi_dmul+0x24a>
 80009d8:	ea95 0f0c 	teq	r5, ip
 80009dc:	d106      	bne.n	80009ec <__aeabi_ddiv+0x1b0>
 80009de:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80009e2:	f43f aefd 	beq.w	80007e0 <__aeabi_dmul+0x1f8>
 80009e6:	4610      	mov	r0, r2
 80009e8:	4619      	mov	r1, r3
 80009ea:	e722      	b.n	8000832 <__aeabi_dmul+0x24a>
 80009ec:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80009f0:	bf18      	it	ne
 80009f2:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80009f6:	f47f aec5 	bne.w	8000784 <__aeabi_dmul+0x19c>
 80009fa:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 80009fe:	f47f af0d 	bne.w	800081c <__aeabi_dmul+0x234>
 8000a02:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a06:	f47f aeeb 	bne.w	80007e0 <__aeabi_dmul+0x1f8>
 8000a0a:	e712      	b.n	8000832 <__aeabi_dmul+0x24a>

08000a0c <__gedf2>:
 8000a0c:	f04f 3cff 	mov.w	ip, #4294967295
 8000a10:	e006      	b.n	8000a20 <__cmpdf2+0x4>
 8000a12:	bf00      	nop

08000a14 <__ledf2>:
 8000a14:	f04f 0c01 	mov.w	ip, #1
 8000a18:	e002      	b.n	8000a20 <__cmpdf2+0x4>
 8000a1a:	bf00      	nop

08000a1c <__cmpdf2>:
 8000a1c:	f04f 0c01 	mov.w	ip, #1
 8000a20:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a24:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a28:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a2c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a30:	bf18      	it	ne
 8000a32:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a36:	d01b      	beq.n	8000a70 <__cmpdf2+0x54>
 8000a38:	b001      	add	sp, #4
 8000a3a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a3e:	bf0c      	ite	eq
 8000a40:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a44:	ea91 0f03 	teqne	r1, r3
 8000a48:	bf02      	ittt	eq
 8000a4a:	ea90 0f02 	teqeq	r0, r2
 8000a4e:	2000      	moveq	r0, #0
 8000a50:	4770      	bxeq	lr
 8000a52:	f110 0f00 	cmn.w	r0, #0
 8000a56:	ea91 0f03 	teq	r1, r3
 8000a5a:	bf58      	it	pl
 8000a5c:	4299      	cmppl	r1, r3
 8000a5e:	bf08      	it	eq
 8000a60:	4290      	cmpeq	r0, r2
 8000a62:	bf2c      	ite	cs
 8000a64:	17d8      	asrcs	r0, r3, #31
 8000a66:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000a6a:	f040 0001 	orr.w	r0, r0, #1
 8000a6e:	4770      	bx	lr
 8000a70:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a74:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a78:	d102      	bne.n	8000a80 <__cmpdf2+0x64>
 8000a7a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a7e:	d107      	bne.n	8000a90 <__cmpdf2+0x74>
 8000a80:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a84:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a88:	d1d6      	bne.n	8000a38 <__cmpdf2+0x1c>
 8000a8a:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000a8e:	d0d3      	beq.n	8000a38 <__cmpdf2+0x1c>
 8000a90:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000a94:	4770      	bx	lr
 8000a96:	bf00      	nop

08000a98 <__aeabi_cdrcmple>:
 8000a98:	4684      	mov	ip, r0
 8000a9a:	4610      	mov	r0, r2
 8000a9c:	4662      	mov	r2, ip
 8000a9e:	468c      	mov	ip, r1
 8000aa0:	4619      	mov	r1, r3
 8000aa2:	4663      	mov	r3, ip
 8000aa4:	e000      	b.n	8000aa8 <__aeabi_cdcmpeq>
 8000aa6:	bf00      	nop

08000aa8 <__aeabi_cdcmpeq>:
 8000aa8:	b501      	push	{r0, lr}
 8000aaa:	f7ff ffb7 	bl	8000a1c <__cmpdf2>
 8000aae:	2800      	cmp	r0, #0
 8000ab0:	bf48      	it	mi
 8000ab2:	f110 0f00 	cmnmi.w	r0, #0
 8000ab6:	bd01      	pop	{r0, pc}

08000ab8 <__aeabi_dcmpeq>:
 8000ab8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000abc:	f7ff fff4 	bl	8000aa8 <__aeabi_cdcmpeq>
 8000ac0:	bf0c      	ite	eq
 8000ac2:	2001      	moveq	r0, #1
 8000ac4:	2000      	movne	r0, #0
 8000ac6:	f85d fb08 	ldr.w	pc, [sp], #8
 8000aca:	bf00      	nop

08000acc <__aeabi_dcmplt>:
 8000acc:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000ad0:	f7ff ffea 	bl	8000aa8 <__aeabi_cdcmpeq>
 8000ad4:	bf34      	ite	cc
 8000ad6:	2001      	movcc	r0, #1
 8000ad8:	2000      	movcs	r0, #0
 8000ada:	f85d fb08 	ldr.w	pc, [sp], #8
 8000ade:	bf00      	nop

08000ae0 <__aeabi_dcmple>:
 8000ae0:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000ae4:	f7ff ffe0 	bl	8000aa8 <__aeabi_cdcmpeq>
 8000ae8:	bf94      	ite	ls
 8000aea:	2001      	movls	r0, #1
 8000aec:	2000      	movhi	r0, #0
 8000aee:	f85d fb08 	ldr.w	pc, [sp], #8
 8000af2:	bf00      	nop

08000af4 <__aeabi_dcmpge>:
 8000af4:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000af8:	f7ff ffce 	bl	8000a98 <__aeabi_cdrcmple>
 8000afc:	bf94      	ite	ls
 8000afe:	2001      	movls	r0, #1
 8000b00:	2000      	movhi	r0, #0
 8000b02:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b06:	bf00      	nop

08000b08 <__aeabi_dcmpgt>:
 8000b08:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b0c:	f7ff ffc4 	bl	8000a98 <__aeabi_cdrcmple>
 8000b10:	bf34      	ite	cc
 8000b12:	2001      	movcc	r0, #1
 8000b14:	2000      	movcs	r0, #0
 8000b16:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b1a:	bf00      	nop

08000b1c <__aeabi_dcmpun>:
 8000b1c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b20:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b24:	d102      	bne.n	8000b2c <__aeabi_dcmpun+0x10>
 8000b26:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b2a:	d10a      	bne.n	8000b42 <__aeabi_dcmpun+0x26>
 8000b2c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b30:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b34:	d102      	bne.n	8000b3c <__aeabi_dcmpun+0x20>
 8000b36:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b3a:	d102      	bne.n	8000b42 <__aeabi_dcmpun+0x26>
 8000b3c:	f04f 0000 	mov.w	r0, #0
 8000b40:	4770      	bx	lr
 8000b42:	f04f 0001 	mov.w	r0, #1
 8000b46:	4770      	bx	lr

08000b48 <__aeabi_d2iz>:
 8000b48:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b4c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000b50:	d215      	bcs.n	8000b7e <__aeabi_d2iz+0x36>
 8000b52:	d511      	bpl.n	8000b78 <__aeabi_d2iz+0x30>
 8000b54:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000b58:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b5c:	d912      	bls.n	8000b84 <__aeabi_d2iz+0x3c>
 8000b5e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b62:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000b66:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000b6a:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000b6e:	fa23 f002 	lsr.w	r0, r3, r2
 8000b72:	bf18      	it	ne
 8000b74:	4240      	negne	r0, r0
 8000b76:	4770      	bx	lr
 8000b78:	f04f 0000 	mov.w	r0, #0
 8000b7c:	4770      	bx	lr
 8000b7e:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000b82:	d105      	bne.n	8000b90 <__aeabi_d2iz+0x48>
 8000b84:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000b88:	bf08      	it	eq
 8000b8a:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000b8e:	4770      	bx	lr
 8000b90:	f04f 0000 	mov.w	r0, #0
 8000b94:	4770      	bx	lr
 8000b96:	bf00      	nop

08000b98 <__aeabi_uldivmod>:
 8000b98:	b953      	cbnz	r3, 8000bb0 <__aeabi_uldivmod+0x18>
 8000b9a:	b94a      	cbnz	r2, 8000bb0 <__aeabi_uldivmod+0x18>
 8000b9c:	2900      	cmp	r1, #0
 8000b9e:	bf08      	it	eq
 8000ba0:	2800      	cmpeq	r0, #0
 8000ba2:	bf1c      	itt	ne
 8000ba4:	f04f 31ff 	movne.w	r1, #4294967295
 8000ba8:	f04f 30ff 	movne.w	r0, #4294967295
 8000bac:	f000 b974 	b.w	8000e98 <__aeabi_idiv0>
 8000bb0:	f1ad 0c08 	sub.w	ip, sp, #8
 8000bb4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000bb8:	f000 f806 	bl	8000bc8 <__udivmoddi4>
 8000bbc:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000bc0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000bc4:	b004      	add	sp, #16
 8000bc6:	4770      	bx	lr

08000bc8 <__udivmoddi4>:
 8000bc8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000bcc:	9d08      	ldr	r5, [sp, #32]
 8000bce:	4604      	mov	r4, r0
 8000bd0:	468e      	mov	lr, r1
 8000bd2:	2b00      	cmp	r3, #0
 8000bd4:	d14d      	bne.n	8000c72 <__udivmoddi4+0xaa>
 8000bd6:	428a      	cmp	r2, r1
 8000bd8:	4694      	mov	ip, r2
 8000bda:	d969      	bls.n	8000cb0 <__udivmoddi4+0xe8>
 8000bdc:	fab2 f282 	clz	r2, r2
 8000be0:	b152      	cbz	r2, 8000bf8 <__udivmoddi4+0x30>
 8000be2:	fa01 f302 	lsl.w	r3, r1, r2
 8000be6:	f1c2 0120 	rsb	r1, r2, #32
 8000bea:	fa20 f101 	lsr.w	r1, r0, r1
 8000bee:	fa0c fc02 	lsl.w	ip, ip, r2
 8000bf2:	ea41 0e03 	orr.w	lr, r1, r3
 8000bf6:	4094      	lsls	r4, r2
 8000bf8:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000bfc:	0c21      	lsrs	r1, r4, #16
 8000bfe:	fbbe f6f8 	udiv	r6, lr, r8
 8000c02:	fa1f f78c 	uxth.w	r7, ip
 8000c06:	fb08 e316 	mls	r3, r8, r6, lr
 8000c0a:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 8000c0e:	fb06 f107 	mul.w	r1, r6, r7
 8000c12:	4299      	cmp	r1, r3
 8000c14:	d90a      	bls.n	8000c2c <__udivmoddi4+0x64>
 8000c16:	eb1c 0303 	adds.w	r3, ip, r3
 8000c1a:	f106 30ff 	add.w	r0, r6, #4294967295
 8000c1e:	f080 811f 	bcs.w	8000e60 <__udivmoddi4+0x298>
 8000c22:	4299      	cmp	r1, r3
 8000c24:	f240 811c 	bls.w	8000e60 <__udivmoddi4+0x298>
 8000c28:	3e02      	subs	r6, #2
 8000c2a:	4463      	add	r3, ip
 8000c2c:	1a5b      	subs	r3, r3, r1
 8000c2e:	b2a4      	uxth	r4, r4
 8000c30:	fbb3 f0f8 	udiv	r0, r3, r8
 8000c34:	fb08 3310 	mls	r3, r8, r0, r3
 8000c38:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000c3c:	fb00 f707 	mul.w	r7, r0, r7
 8000c40:	42a7      	cmp	r7, r4
 8000c42:	d90a      	bls.n	8000c5a <__udivmoddi4+0x92>
 8000c44:	eb1c 0404 	adds.w	r4, ip, r4
 8000c48:	f100 33ff 	add.w	r3, r0, #4294967295
 8000c4c:	f080 810a 	bcs.w	8000e64 <__udivmoddi4+0x29c>
 8000c50:	42a7      	cmp	r7, r4
 8000c52:	f240 8107 	bls.w	8000e64 <__udivmoddi4+0x29c>
 8000c56:	4464      	add	r4, ip
 8000c58:	3802      	subs	r0, #2
 8000c5a:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000c5e:	1be4      	subs	r4, r4, r7
 8000c60:	2600      	movs	r6, #0
 8000c62:	b11d      	cbz	r5, 8000c6c <__udivmoddi4+0xa4>
 8000c64:	40d4      	lsrs	r4, r2
 8000c66:	2300      	movs	r3, #0
 8000c68:	e9c5 4300 	strd	r4, r3, [r5]
 8000c6c:	4631      	mov	r1, r6
 8000c6e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000c72:	428b      	cmp	r3, r1
 8000c74:	d909      	bls.n	8000c8a <__udivmoddi4+0xc2>
 8000c76:	2d00      	cmp	r5, #0
 8000c78:	f000 80ef 	beq.w	8000e5a <__udivmoddi4+0x292>
 8000c7c:	2600      	movs	r6, #0
 8000c7e:	e9c5 0100 	strd	r0, r1, [r5]
 8000c82:	4630      	mov	r0, r6
 8000c84:	4631      	mov	r1, r6
 8000c86:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000c8a:	fab3 f683 	clz	r6, r3
 8000c8e:	2e00      	cmp	r6, #0
 8000c90:	d14a      	bne.n	8000d28 <__udivmoddi4+0x160>
 8000c92:	428b      	cmp	r3, r1
 8000c94:	d302      	bcc.n	8000c9c <__udivmoddi4+0xd4>
 8000c96:	4282      	cmp	r2, r0
 8000c98:	f200 80f9 	bhi.w	8000e8e <__udivmoddi4+0x2c6>
 8000c9c:	1a84      	subs	r4, r0, r2
 8000c9e:	eb61 0303 	sbc.w	r3, r1, r3
 8000ca2:	2001      	movs	r0, #1
 8000ca4:	469e      	mov	lr, r3
 8000ca6:	2d00      	cmp	r5, #0
 8000ca8:	d0e0      	beq.n	8000c6c <__udivmoddi4+0xa4>
 8000caa:	e9c5 4e00 	strd	r4, lr, [r5]
 8000cae:	e7dd      	b.n	8000c6c <__udivmoddi4+0xa4>
 8000cb0:	b902      	cbnz	r2, 8000cb4 <__udivmoddi4+0xec>
 8000cb2:	deff      	udf	#255	; 0xff
 8000cb4:	fab2 f282 	clz	r2, r2
 8000cb8:	2a00      	cmp	r2, #0
 8000cba:	f040 8092 	bne.w	8000de2 <__udivmoddi4+0x21a>
 8000cbe:	eba1 010c 	sub.w	r1, r1, ip
 8000cc2:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000cc6:	fa1f fe8c 	uxth.w	lr, ip
 8000cca:	2601      	movs	r6, #1
 8000ccc:	0c20      	lsrs	r0, r4, #16
 8000cce:	fbb1 f3f7 	udiv	r3, r1, r7
 8000cd2:	fb07 1113 	mls	r1, r7, r3, r1
 8000cd6:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000cda:	fb0e f003 	mul.w	r0, lr, r3
 8000cde:	4288      	cmp	r0, r1
 8000ce0:	d908      	bls.n	8000cf4 <__udivmoddi4+0x12c>
 8000ce2:	eb1c 0101 	adds.w	r1, ip, r1
 8000ce6:	f103 38ff 	add.w	r8, r3, #4294967295
 8000cea:	d202      	bcs.n	8000cf2 <__udivmoddi4+0x12a>
 8000cec:	4288      	cmp	r0, r1
 8000cee:	f200 80cb 	bhi.w	8000e88 <__udivmoddi4+0x2c0>
 8000cf2:	4643      	mov	r3, r8
 8000cf4:	1a09      	subs	r1, r1, r0
 8000cf6:	b2a4      	uxth	r4, r4
 8000cf8:	fbb1 f0f7 	udiv	r0, r1, r7
 8000cfc:	fb07 1110 	mls	r1, r7, r0, r1
 8000d00:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 8000d04:	fb0e fe00 	mul.w	lr, lr, r0
 8000d08:	45a6      	cmp	lr, r4
 8000d0a:	d908      	bls.n	8000d1e <__udivmoddi4+0x156>
 8000d0c:	eb1c 0404 	adds.w	r4, ip, r4
 8000d10:	f100 31ff 	add.w	r1, r0, #4294967295
 8000d14:	d202      	bcs.n	8000d1c <__udivmoddi4+0x154>
 8000d16:	45a6      	cmp	lr, r4
 8000d18:	f200 80bb 	bhi.w	8000e92 <__udivmoddi4+0x2ca>
 8000d1c:	4608      	mov	r0, r1
 8000d1e:	eba4 040e 	sub.w	r4, r4, lr
 8000d22:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 8000d26:	e79c      	b.n	8000c62 <__udivmoddi4+0x9a>
 8000d28:	f1c6 0720 	rsb	r7, r6, #32
 8000d2c:	40b3      	lsls	r3, r6
 8000d2e:	fa22 fc07 	lsr.w	ip, r2, r7
 8000d32:	ea4c 0c03 	orr.w	ip, ip, r3
 8000d36:	fa20 f407 	lsr.w	r4, r0, r7
 8000d3a:	fa01 f306 	lsl.w	r3, r1, r6
 8000d3e:	431c      	orrs	r4, r3
 8000d40:	40f9      	lsrs	r1, r7
 8000d42:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000d46:	fa00 f306 	lsl.w	r3, r0, r6
 8000d4a:	fbb1 f8f9 	udiv	r8, r1, r9
 8000d4e:	0c20      	lsrs	r0, r4, #16
 8000d50:	fa1f fe8c 	uxth.w	lr, ip
 8000d54:	fb09 1118 	mls	r1, r9, r8, r1
 8000d58:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000d5c:	fb08 f00e 	mul.w	r0, r8, lr
 8000d60:	4288      	cmp	r0, r1
 8000d62:	fa02 f206 	lsl.w	r2, r2, r6
 8000d66:	d90b      	bls.n	8000d80 <__udivmoddi4+0x1b8>
 8000d68:	eb1c 0101 	adds.w	r1, ip, r1
 8000d6c:	f108 3aff 	add.w	sl, r8, #4294967295
 8000d70:	f080 8088 	bcs.w	8000e84 <__udivmoddi4+0x2bc>
 8000d74:	4288      	cmp	r0, r1
 8000d76:	f240 8085 	bls.w	8000e84 <__udivmoddi4+0x2bc>
 8000d7a:	f1a8 0802 	sub.w	r8, r8, #2
 8000d7e:	4461      	add	r1, ip
 8000d80:	1a09      	subs	r1, r1, r0
 8000d82:	b2a4      	uxth	r4, r4
 8000d84:	fbb1 f0f9 	udiv	r0, r1, r9
 8000d88:	fb09 1110 	mls	r1, r9, r0, r1
 8000d8c:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 8000d90:	fb00 fe0e 	mul.w	lr, r0, lr
 8000d94:	458e      	cmp	lr, r1
 8000d96:	d908      	bls.n	8000daa <__udivmoddi4+0x1e2>
 8000d98:	eb1c 0101 	adds.w	r1, ip, r1
 8000d9c:	f100 34ff 	add.w	r4, r0, #4294967295
 8000da0:	d26c      	bcs.n	8000e7c <__udivmoddi4+0x2b4>
 8000da2:	458e      	cmp	lr, r1
 8000da4:	d96a      	bls.n	8000e7c <__udivmoddi4+0x2b4>
 8000da6:	3802      	subs	r0, #2
 8000da8:	4461      	add	r1, ip
 8000daa:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 8000dae:	fba0 9402 	umull	r9, r4, r0, r2
 8000db2:	eba1 010e 	sub.w	r1, r1, lr
 8000db6:	42a1      	cmp	r1, r4
 8000db8:	46c8      	mov	r8, r9
 8000dba:	46a6      	mov	lr, r4
 8000dbc:	d356      	bcc.n	8000e6c <__udivmoddi4+0x2a4>
 8000dbe:	d053      	beq.n	8000e68 <__udivmoddi4+0x2a0>
 8000dc0:	b15d      	cbz	r5, 8000dda <__udivmoddi4+0x212>
 8000dc2:	ebb3 0208 	subs.w	r2, r3, r8
 8000dc6:	eb61 010e 	sbc.w	r1, r1, lr
 8000dca:	fa01 f707 	lsl.w	r7, r1, r7
 8000dce:	fa22 f306 	lsr.w	r3, r2, r6
 8000dd2:	40f1      	lsrs	r1, r6
 8000dd4:	431f      	orrs	r7, r3
 8000dd6:	e9c5 7100 	strd	r7, r1, [r5]
 8000dda:	2600      	movs	r6, #0
 8000ddc:	4631      	mov	r1, r6
 8000dde:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000de2:	f1c2 0320 	rsb	r3, r2, #32
 8000de6:	40d8      	lsrs	r0, r3
 8000de8:	fa0c fc02 	lsl.w	ip, ip, r2
 8000dec:	fa21 f303 	lsr.w	r3, r1, r3
 8000df0:	4091      	lsls	r1, r2
 8000df2:	4301      	orrs	r1, r0
 8000df4:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000df8:	fa1f fe8c 	uxth.w	lr, ip
 8000dfc:	fbb3 f0f7 	udiv	r0, r3, r7
 8000e00:	fb07 3610 	mls	r6, r7, r0, r3
 8000e04:	0c0b      	lsrs	r3, r1, #16
 8000e06:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 8000e0a:	fb00 f60e 	mul.w	r6, r0, lr
 8000e0e:	429e      	cmp	r6, r3
 8000e10:	fa04 f402 	lsl.w	r4, r4, r2
 8000e14:	d908      	bls.n	8000e28 <__udivmoddi4+0x260>
 8000e16:	eb1c 0303 	adds.w	r3, ip, r3
 8000e1a:	f100 38ff 	add.w	r8, r0, #4294967295
 8000e1e:	d22f      	bcs.n	8000e80 <__udivmoddi4+0x2b8>
 8000e20:	429e      	cmp	r6, r3
 8000e22:	d92d      	bls.n	8000e80 <__udivmoddi4+0x2b8>
 8000e24:	3802      	subs	r0, #2
 8000e26:	4463      	add	r3, ip
 8000e28:	1b9b      	subs	r3, r3, r6
 8000e2a:	b289      	uxth	r1, r1
 8000e2c:	fbb3 f6f7 	udiv	r6, r3, r7
 8000e30:	fb07 3316 	mls	r3, r7, r6, r3
 8000e34:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000e38:	fb06 f30e 	mul.w	r3, r6, lr
 8000e3c:	428b      	cmp	r3, r1
 8000e3e:	d908      	bls.n	8000e52 <__udivmoddi4+0x28a>
 8000e40:	eb1c 0101 	adds.w	r1, ip, r1
 8000e44:	f106 38ff 	add.w	r8, r6, #4294967295
 8000e48:	d216      	bcs.n	8000e78 <__udivmoddi4+0x2b0>
 8000e4a:	428b      	cmp	r3, r1
 8000e4c:	d914      	bls.n	8000e78 <__udivmoddi4+0x2b0>
 8000e4e:	3e02      	subs	r6, #2
 8000e50:	4461      	add	r1, ip
 8000e52:	1ac9      	subs	r1, r1, r3
 8000e54:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 8000e58:	e738      	b.n	8000ccc <__udivmoddi4+0x104>
 8000e5a:	462e      	mov	r6, r5
 8000e5c:	4628      	mov	r0, r5
 8000e5e:	e705      	b.n	8000c6c <__udivmoddi4+0xa4>
 8000e60:	4606      	mov	r6, r0
 8000e62:	e6e3      	b.n	8000c2c <__udivmoddi4+0x64>
 8000e64:	4618      	mov	r0, r3
 8000e66:	e6f8      	b.n	8000c5a <__udivmoddi4+0x92>
 8000e68:	454b      	cmp	r3, r9
 8000e6a:	d2a9      	bcs.n	8000dc0 <__udivmoddi4+0x1f8>
 8000e6c:	ebb9 0802 	subs.w	r8, r9, r2
 8000e70:	eb64 0e0c 	sbc.w	lr, r4, ip
 8000e74:	3801      	subs	r0, #1
 8000e76:	e7a3      	b.n	8000dc0 <__udivmoddi4+0x1f8>
 8000e78:	4646      	mov	r6, r8
 8000e7a:	e7ea      	b.n	8000e52 <__udivmoddi4+0x28a>
 8000e7c:	4620      	mov	r0, r4
 8000e7e:	e794      	b.n	8000daa <__udivmoddi4+0x1e2>
 8000e80:	4640      	mov	r0, r8
 8000e82:	e7d1      	b.n	8000e28 <__udivmoddi4+0x260>
 8000e84:	46d0      	mov	r8, sl
 8000e86:	e77b      	b.n	8000d80 <__udivmoddi4+0x1b8>
 8000e88:	3b02      	subs	r3, #2
 8000e8a:	4461      	add	r1, ip
 8000e8c:	e732      	b.n	8000cf4 <__udivmoddi4+0x12c>
 8000e8e:	4630      	mov	r0, r6
 8000e90:	e709      	b.n	8000ca6 <__udivmoddi4+0xde>
 8000e92:	4464      	add	r4, ip
 8000e94:	3802      	subs	r0, #2
 8000e96:	e742      	b.n	8000d1e <__udivmoddi4+0x156>

08000e98 <__aeabi_idiv0>:
 8000e98:	4770      	bx	lr
 8000e9a:	bf00      	nop

08000e9c <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000e9c:	b580      	push	{r7, lr}
 8000e9e:	b09e      	sub	sp, #120	; 0x78
 8000ea0:	af02      	add	r7, sp, #8
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000ea2:	f001 fe97 	bl	8002bd4 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000ea6:	f000 f9c3 	bl	8001230 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000eaa:	f000 fbcd 	bl	8001648 <MX_GPIO_Init>
  MX_DFSDM1_Init();
 8000eae:	f000 fa21 	bl	80012f4 <MX_DFSDM1_Init>
  MX_QUADSPI_Init();
 8000eb2:	f000 fad7 	bl	8001464 <MX_QUADSPI_Init>
  MX_SPI3_Init();
 8000eb6:	f000 fafb 	bl	80014b0 <MX_SPI3_Init>
  MX_USART3_UART_Init();
 8000eba:	f000 fb67 	bl	800158c <MX_USART3_UART_Init>
  MX_USB_OTG_FS_PCD_Init();
 8000ebe:	f000 fb95 	bl	80015ec <MX_USB_OTG_FS_PCD_Init>
  MX_I2C1_Init();
 8000ec2:	f000 fa4f 	bl	8001364 <MX_I2C1_Init>
  MX_USART1_UART_Init();
 8000ec6:	f000 fb31 	bl	800152c <MX_USART1_UART_Init>
  MX_I2C2_Init();
 8000eca:	f000 fa8b 	bl	80013e4 <MX_I2C2_Init>
  /* USER CODE BEGIN 2 */

	//Temperature Sensor
	HAL_UART_Transmit(&huart1, msg1, sizeof(msg1), 1000);
 8000ece:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000ed2:	2230      	movs	r2, #48	; 0x30
 8000ed4:	49c2      	ldr	r1, [pc, #776]	; (80011e0 <main+0x344>)
 8000ed6:	48c3      	ldr	r0, [pc, #780]	; (80011e4 <main+0x348>)
 8000ed8:	f005 f87b 	bl	8005fd2 <HAL_UART_Transmit>
	HAL_UART_Transmit(&huart1, msg2, sizeof(msg2), 1000);
 8000edc:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000ee0:	222f      	movs	r2, #47	; 0x2f
 8000ee2:	49c1      	ldr	r1, [pc, #772]	; (80011e8 <main+0x34c>)
 8000ee4:	48bf      	ldr	r0, [pc, #764]	; (80011e4 <main+0x348>)
 8000ee6:	f005 f874 	bl	8005fd2 <HAL_UART_Transmit>
	BSP_TSENSOR_Init();
 8000eea:	f001 fc7d 	bl	80027e8 <BSP_TSENSOR_Init>
	HAL_UART_Transmit(&huart1, msg3, sizeof(msg3), 1000);
 8000eee:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000ef2:	2231      	movs	r2, #49	; 0x31
 8000ef4:	49bd      	ldr	r1, [pc, #756]	; (80011ec <main+0x350>)
 8000ef6:	48bb      	ldr	r0, [pc, #748]	; (80011e4 <main+0x348>)
 8000ef8:	f005 f86b 	bl	8005fd2 <HAL_UART_Transmit>

	//Accelerometer Sensor
	HAL_UART_Transmit(&huart1, msg7, sizeof(msg7), 1000);
 8000efc:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000f00:	2231      	movs	r2, #49	; 0x31
 8000f02:	49bb      	ldr	r1, [pc, #748]	; (80011f0 <main+0x354>)
 8000f04:	48b7      	ldr	r0, [pc, #732]	; (80011e4 <main+0x348>)
 8000f06:	f005 f864 	bl	8005fd2 <HAL_UART_Transmit>
	HAL_UART_Transmit(&huart1, msg8, sizeof(msg8), 1000);
 8000f0a:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000f0e:	2230      	movs	r2, #48	; 0x30
 8000f10:	49b8      	ldr	r1, [pc, #736]	; (80011f4 <main+0x358>)
 8000f12:	48b4      	ldr	r0, [pc, #720]	; (80011e4 <main+0x348>)
 8000f14:	f005 f85d 	bl	8005fd2 <HAL_UART_Transmit>
	BSP_ACCELERO_Init();
 8000f18:	f001 fc10 	bl	800273c <BSP_ACCELERO_Init>
	HAL_UART_Transmit(&huart1, msg9, sizeof(msg9), 1000);
 8000f1c:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000f20:	2233      	movs	r2, #51	; 0x33
 8000f22:	49b5      	ldr	r1, [pc, #724]	; (80011f8 <main+0x35c>)
 8000f24:	48af      	ldr	r0, [pc, #700]	; (80011e4 <main+0x348>)
 8000f26:	f005 f854 	bl	8005fd2 <HAL_UART_Transmit>

	//Display oled i2c
	ssd1306_Init();
 8000f2a:	f000 fd69 	bl	8001a00 <ssd1306_Init>
  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */

	float buf_temp[10] = {};
 8000f2e:	463b      	mov	r3, r7
 8000f30:	2228      	movs	r2, #40	; 0x28
 8000f32:	2100      	movs	r1, #0
 8000f34:	4618      	mov	r0, r3
 8000f36:	f006 f84f 	bl	8006fd8 <memset>
	int i = 0;
 8000f3a:	2300      	movs	r3, #0
 8000f3c:	66fb      	str	r3, [r7, #108]	; 0x6c
	bool fullArray = false;
 8000f3e:	2300      	movs	r3, #0
 8000f40:	f887 306b 	strb.w	r3, [r7, #107]	; 0x6b
	float new_temp = 0;
 8000f44:	f04f 0300 	mov.w	r3, #0
 8000f48:	667b      	str	r3, [r7, #100]	; 0x64
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */

		//Temperature Sensor
		temp_value = BSP_TSENSOR_ReadTemp();
 8000f4a:	f001 fc69 	bl	8002820 <BSP_TSENSOR_ReadTemp>
 8000f4e:	eef0 7a40 	vmov.f32	s15, s0
 8000f52:	4baa      	ldr	r3, [pc, #680]	; (80011fc <main+0x360>)
 8000f54:	edc3 7a00 	vstr	s15, [r3]
		int tmpInt1 = temp_value;
 8000f58:	4ba8      	ldr	r3, [pc, #672]	; (80011fc <main+0x360>)
 8000f5a:	edd3 7a00 	vldr	s15, [r3]
 8000f5e:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8000f62:	ee17 3a90 	vmov	r3, s15
 8000f66:	663b      	str	r3, [r7, #96]	; 0x60
		float tmpFrac = temp_value - tmpInt1;
 8000f68:	4ba4      	ldr	r3, [pc, #656]	; (80011fc <main+0x360>)
 8000f6a:	ed93 7a00 	vldr	s14, [r3]
 8000f6e:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8000f70:	ee07 3a90 	vmov	s15, r3
 8000f74:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8000f78:	ee77 7a67 	vsub.f32	s15, s14, s15
 8000f7c:	edc7 7a17 	vstr	s15, [r7, #92]	; 0x5c
		int tmpInt2 = trunc(tmpFrac * 100);
 8000f80:	edd7 7a17 	vldr	s15, [r7, #92]	; 0x5c
 8000f84:	ed9f 7a9e 	vldr	s14, [pc, #632]	; 8001200 <main+0x364>
 8000f88:	ee67 7a87 	vmul.f32	s15, s15, s14
 8000f8c:	ee17 0a90 	vmov	r0, s15
 8000f90:	f7ff fad2 	bl	8000538 <__aeabi_f2d>
 8000f94:	4602      	mov	r2, r0
 8000f96:	460b      	mov	r3, r1
 8000f98:	ec43 2b10 	vmov	d0, r2, r3
 8000f9c:	f006 fc7e 	bl	800789c <trunc>
 8000fa0:	ec53 2b10 	vmov	r2, r3, d0
 8000fa4:	4610      	mov	r0, r2
 8000fa6:	4619      	mov	r1, r3
 8000fa8:	f7ff fdce 	bl	8000b48 <__aeabi_d2iz>
 8000fac:	4603      	mov	r3, r0
 8000fae:	65bb      	str	r3, [r7, #88]	; 0x58
		snprintf(str_tmp, 100, " TEMPERATURE = %d.%02d\n\r", tmpInt1, tmpInt2);
 8000fb0:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8000fb2:	9300      	str	r3, [sp, #0]
 8000fb4:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8000fb6:	4a93      	ldr	r2, [pc, #588]	; (8001204 <main+0x368>)
 8000fb8:	2164      	movs	r1, #100	; 0x64
 8000fba:	4893      	ldr	r0, [pc, #588]	; (8001208 <main+0x36c>)
 8000fbc:	f006 f814 	bl	8006fe8 <sniprintf>
		HAL_UART_Transmit(&huart1, (uint8_t*) str_tmp, sizeof(str_tmp), 1000);
 8000fc0:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000fc4:	2264      	movs	r2, #100	; 0x64
 8000fc6:	4990      	ldr	r1, [pc, #576]	; (8001208 <main+0x36c>)
 8000fc8:	4886      	ldr	r0, [pc, #536]	; (80011e4 <main+0x348>)
 8000fca:	f005 f802 	bl	8005fd2 <HAL_UART_Transmit>




		//Accelerometer Sensor
		BSP_ACCELERO_AccGetXYZ(acelerometer_value);
 8000fce:	488f      	ldr	r0, [pc, #572]	; (800120c <main+0x370>)
 8000fd0:	f001 fbf2 	bl	80027b8 <BSP_ACCELERO_AccGetXYZ>
		int acelXInt1 = acelerometer_value[0];
 8000fd4:	4b8d      	ldr	r3, [pc, #564]	; (800120c <main+0x370>)
 8000fd6:	f9b3 3000 	ldrsh.w	r3, [r3]
 8000fda:	657b      	str	r3, [r7, #84]	; 0x54
		float acelXFrac = acelerometer_value[0] - acelXInt1;
 8000fdc:	4b8b      	ldr	r3, [pc, #556]	; (800120c <main+0x370>)
 8000fde:	f9b3 3000 	ldrsh.w	r3, [r3]
 8000fe2:	461a      	mov	r2, r3
 8000fe4:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8000fe6:	1ad3      	subs	r3, r2, r3
 8000fe8:	ee07 3a90 	vmov	s15, r3
 8000fec:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8000ff0:	edc7 7a14 	vstr	s15, [r7, #80]	; 0x50
		int acelXInt2 = trunc(acelXFrac * 100);
 8000ff4:	edd7 7a14 	vldr	s15, [r7, #80]	; 0x50
 8000ff8:	ed9f 7a81 	vldr	s14, [pc, #516]	; 8001200 <main+0x364>
 8000ffc:	ee67 7a87 	vmul.f32	s15, s15, s14
 8001000:	ee17 0a90 	vmov	r0, s15
 8001004:	f7ff fa98 	bl	8000538 <__aeabi_f2d>
 8001008:	4602      	mov	r2, r0
 800100a:	460b      	mov	r3, r1
 800100c:	ec43 2b10 	vmov	d0, r2, r3
 8001010:	f006 fc44 	bl	800789c <trunc>
 8001014:	ec53 2b10 	vmov	r2, r3, d0
 8001018:	4610      	mov	r0, r2
 800101a:	4619      	mov	r1, r3
 800101c:	f7ff fd94 	bl	8000b48 <__aeabi_d2iz>
 8001020:	4603      	mov	r3, r0
 8001022:	64fb      	str	r3, [r7, #76]	; 0x4c

		int acelYInt1 = acelerometer_value[1];
 8001024:	4b79      	ldr	r3, [pc, #484]	; (800120c <main+0x370>)
 8001026:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 800102a:	64bb      	str	r3, [r7, #72]	; 0x48
		float acelYFrac = acelerometer_value[1] - acelYInt1;
 800102c:	4b77      	ldr	r3, [pc, #476]	; (800120c <main+0x370>)
 800102e:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 8001032:	461a      	mov	r2, r3
 8001034:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8001036:	1ad3      	subs	r3, r2, r3
 8001038:	ee07 3a90 	vmov	s15, r3
 800103c:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001040:	edc7 7a11 	vstr	s15, [r7, #68]	; 0x44
		int acelYInt2 = trunc(acelYFrac * 100);
 8001044:	edd7 7a11 	vldr	s15, [r7, #68]	; 0x44
 8001048:	ed9f 7a6d 	vldr	s14, [pc, #436]	; 8001200 <main+0x364>
 800104c:	ee67 7a87 	vmul.f32	s15, s15, s14
 8001050:	ee17 0a90 	vmov	r0, s15
 8001054:	f7ff fa70 	bl	8000538 <__aeabi_f2d>
 8001058:	4602      	mov	r2, r0
 800105a:	460b      	mov	r3, r1
 800105c:	ec43 2b10 	vmov	d0, r2, r3
 8001060:	f006 fc1c 	bl	800789c <trunc>
 8001064:	ec53 2b10 	vmov	r2, r3, d0
 8001068:	4610      	mov	r0, r2
 800106a:	4619      	mov	r1, r3
 800106c:	f7ff fd6c 	bl	8000b48 <__aeabi_d2iz>
 8001070:	4603      	mov	r3, r0
 8001072:	643b      	str	r3, [r7, #64]	; 0x40

		int acelZInt1 = acelerometer_value[2];
 8001074:	4b65      	ldr	r3, [pc, #404]	; (800120c <main+0x370>)
 8001076:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 800107a:	63fb      	str	r3, [r7, #60]	; 0x3c
		float acelZFrac = acelerometer_value[2] - acelZInt1;
 800107c:	4b63      	ldr	r3, [pc, #396]	; (800120c <main+0x370>)
 800107e:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 8001082:	461a      	mov	r2, r3
 8001084:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8001086:	1ad3      	subs	r3, r2, r3
 8001088:	ee07 3a90 	vmov	s15, r3
 800108c:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001090:	edc7 7a0e 	vstr	s15, [r7, #56]	; 0x38
		int acelZInt2 = trunc(acelZFrac * 100);
 8001094:	edd7 7a0e 	vldr	s15, [r7, #56]	; 0x38
 8001098:	ed9f 7a59 	vldr	s14, [pc, #356]	; 8001200 <main+0x364>
 800109c:	ee67 7a87 	vmul.f32	s15, s15, s14
 80010a0:	ee17 0a90 	vmov	r0, s15
 80010a4:	f7ff fa48 	bl	8000538 <__aeabi_f2d>
 80010a8:	4602      	mov	r2, r0
 80010aa:	460b      	mov	r3, r1
 80010ac:	ec43 2b10 	vmov	d0, r2, r3
 80010b0:	f006 fbf4 	bl	800789c <trunc>
 80010b4:	ec53 2b10 	vmov	r2, r3, d0
 80010b8:	4610      	mov	r0, r2
 80010ba:	4619      	mov	r1, r3
 80010bc:	f7ff fd44 	bl	8000b48 <__aeabi_d2iz>
 80010c0:	4603      	mov	r3, r0
 80010c2:	637b      	str	r3, [r7, #52]	; 0x34

		snprintf(str_acel1, 100, " ACEL_X = %d.%02d\n\r", acelXInt1, acelXInt2);
 80010c4:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80010c6:	9300      	str	r3, [sp, #0]
 80010c8:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80010ca:	4a51      	ldr	r2, [pc, #324]	; (8001210 <main+0x374>)
 80010cc:	2164      	movs	r1, #100	; 0x64
 80010ce:	4851      	ldr	r0, [pc, #324]	; (8001214 <main+0x378>)
 80010d0:	f005 ff8a 	bl	8006fe8 <sniprintf>
		snprintf(str_acel2, 100, " ACEL_Y = %d.%02d\n\r", acelYInt1, acelYInt2);
 80010d4:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80010d6:	9300      	str	r3, [sp, #0]
 80010d8:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80010da:	4a4f      	ldr	r2, [pc, #316]	; (8001218 <main+0x37c>)
 80010dc:	2164      	movs	r1, #100	; 0x64
 80010de:	484f      	ldr	r0, [pc, #316]	; (800121c <main+0x380>)
 80010e0:	f005 ff82 	bl	8006fe8 <sniprintf>
		snprintf(str_acel3, 100, " ACEL_Z = %d.%02d\n\n\r", acelZInt1,
 80010e4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80010e6:	9300      	str	r3, [sp, #0]
 80010e8:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80010ea:	4a4d      	ldr	r2, [pc, #308]	; (8001220 <main+0x384>)
 80010ec:	2164      	movs	r1, #100	; 0x64
 80010ee:	484d      	ldr	r0, [pc, #308]	; (8001224 <main+0x388>)
 80010f0:	f005 ff7a 	bl	8006fe8 <sniprintf>
				acelZInt2);
		HAL_UART_Transmit(&huart1, (uint8_t*) str_acel1, sizeof(str_acel1),
 80010f4:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80010f8:	2264      	movs	r2, #100	; 0x64
 80010fa:	4946      	ldr	r1, [pc, #280]	; (8001214 <main+0x378>)
 80010fc:	4839      	ldr	r0, [pc, #228]	; (80011e4 <main+0x348>)
 80010fe:	f004 ff68 	bl	8005fd2 <HAL_UART_Transmit>
				1000);
		HAL_UART_Transmit(&huart1, (uint8_t*) str_acel2, sizeof(str_acel2),
 8001102:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001106:	2264      	movs	r2, #100	; 0x64
 8001108:	4944      	ldr	r1, [pc, #272]	; (800121c <main+0x380>)
 800110a:	4836      	ldr	r0, [pc, #216]	; (80011e4 <main+0x348>)
 800110c:	f004 ff61 	bl	8005fd2 <HAL_UART_Transmit>
				1000);
		HAL_UART_Transmit(&huart1, (uint8_t*) str_acel3, sizeof(str_acel3),
 8001110:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001114:	2264      	movs	r2, #100	; 0x64
 8001116:	4943      	ldr	r1, [pc, #268]	; (8001224 <main+0x388>)
 8001118:	4832      	ldr	r0, [pc, #200]	; (80011e4 <main+0x348>)
 800111a:	f004 ff5a 	bl	8005fd2 <HAL_UART_Transmit>

		// Criação do buffer de temperatura



			buf_temp[i] = temp_value;
 800111e:	4b37      	ldr	r3, [pc, #220]	; (80011fc <main+0x360>)
 8001120:	681a      	ldr	r2, [r3, #0]
 8001122:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8001124:	009b      	lsls	r3, r3, #2
 8001126:	3370      	adds	r3, #112	; 0x70
 8001128:	443b      	add	r3, r7
 800112a:	3b70      	subs	r3, #112	; 0x70
 800112c:	601a      	str	r2, [r3, #0]
			i++;
 800112e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8001130:	3301      	adds	r3, #1
 8001132:	66fb      	str	r3, [r7, #108]	; 0x6c

			if(fullArray){
 8001134:	f897 306b 	ldrb.w	r3, [r7, #107]	; 0x6b
 8001138:	2b00      	cmp	r3, #0
 800113a:	d007      	beq.n	800114c <main+0x2b0>
				new_temp = valorRMS(buf_temp, 10);
 800113c:	463b      	mov	r3, r7
 800113e:	210a      	movs	r1, #10
 8001140:	4618      	mov	r0, r3
 8001142:	f001 f911 	bl	8002368 <valorRMS>
 8001146:	ed87 0a19 	vstr	s0, [r7, #100]	; 0x64
 800114a:	e006      	b.n	800115a <main+0x2be>
			}
			else{
				new_temp = valorRMS(buf_temp,i);
 800114c:	463b      	mov	r3, r7
 800114e:	6ef9      	ldr	r1, [r7, #108]	; 0x6c
 8001150:	4618      	mov	r0, r3
 8001152:	f001 f909 	bl	8002368 <valorRMS>
 8001156:	ed87 0a19 	vstr	s0, [r7, #100]	; 0x64
		 }

			if(i == 10){
 800115a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800115c:	2b0a      	cmp	r3, #10
 800115e:	d104      	bne.n	800116a <main+0x2ce>
				i = 0;
 8001160:	2300      	movs	r3, #0
 8001162:	66fb      	str	r3, [r7, #108]	; 0x6c
				fullArray = true;
 8001164:	2301      	movs	r3, #1
 8001166:	f887 306b 	strb.w	r3, [r7, #107]	; 0x6b
			}


		int NtmpInt1 = new_temp;
 800116a:	edd7 7a19 	vldr	s15, [r7, #100]	; 0x64
 800116e:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8001172:	ee17 3a90 	vmov	r3, s15
 8001176:	633b      	str	r3, [r7, #48]	; 0x30
		float NtmpFrac = new_temp - NtmpInt1;
 8001178:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800117a:	ee07 3a90 	vmov	s15, r3
 800117e:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001182:	ed97 7a19 	vldr	s14, [r7, #100]	; 0x64
 8001186:	ee77 7a67 	vsub.f32	s15, s14, s15
 800118a:	edc7 7a0b 	vstr	s15, [r7, #44]	; 0x2c
		int NtmpInt2 = trunc(NtmpFrac * 100);
 800118e:	edd7 7a0b 	vldr	s15, [r7, #44]	; 0x2c
 8001192:	ed9f 7a1b 	vldr	s14, [pc, #108]	; 8001200 <main+0x364>
 8001196:	ee67 7a87 	vmul.f32	s15, s15, s14
 800119a:	ee17 0a90 	vmov	r0, s15
 800119e:	f7ff f9cb 	bl	8000538 <__aeabi_f2d>
 80011a2:	4602      	mov	r2, r0
 80011a4:	460b      	mov	r3, r1
 80011a6:	ec43 2b10 	vmov	d0, r2, r3
 80011aa:	f006 fb77 	bl	800789c <trunc>
 80011ae:	ec53 2b10 	vmov	r2, r3, d0
 80011b2:	4610      	mov	r0, r2
 80011b4:	4619      	mov	r1, r3
 80011b6:	f7ff fcc7 	bl	8000b48 <__aeabi_d2iz>
 80011ba:	4603      	mov	r3, r0
 80011bc:	62bb      	str	r3, [r7, #40]	; 0x28
		snprintf(str_tmp2, 100, " RMS TEMPERATURE = %d.%02d\n\r", NtmpInt1, NtmpInt2);
 80011be:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80011c0:	9300      	str	r3, [sp, #0]
 80011c2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80011c4:	4a18      	ldr	r2, [pc, #96]	; (8001228 <main+0x38c>)
 80011c6:	2164      	movs	r1, #100	; 0x64
 80011c8:	4818      	ldr	r0, [pc, #96]	; (800122c <main+0x390>)
 80011ca:	f005 ff0d 	bl	8006fe8 <sniprintf>
		HAL_UART_Transmit(&huart1, (uint8_t*) str_tmp2, sizeof(str_tmp2), 1000);
 80011ce:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80011d2:	2264      	movs	r2, #100	; 0x64
 80011d4:	4915      	ldr	r1, [pc, #84]	; (800122c <main+0x390>)
 80011d6:	4803      	ldr	r0, [pc, #12]	; (80011e4 <main+0x348>)
 80011d8:	f004 fefb 	bl	8005fd2 <HAL_UART_Transmit>
	while (1) {
 80011dc:	e6b5      	b.n	8000f4a <main+0xae>
 80011de:	bf00      	nop
 80011e0:	20000000 	.word	0x20000000
 80011e4:	20000384 	.word	0x20000384
 80011e8:	20000030 	.word	0x20000030
 80011ec:	20000060 	.word	0x20000060
 80011f0:	20000094 	.word	0x20000094
 80011f4:	200000c8 	.word	0x200000c8
 80011f8:	200000f8 	.word	0x200000f8
 80011fc:	20000998 	.word	0x20000998
 8001200:	42c80000 	.word	0x42c80000
 8001204:	080087a8 	.word	0x080087a8
 8001208:	2000099c 	.word	0x2000099c
 800120c:	20000a64 	.word	0x20000a64
 8001210:	080087c4 	.word	0x080087c4
 8001214:	20000a6c 	.word	0x20000a6c
 8001218:	080087d8 	.word	0x080087d8
 800121c:	20000ad0 	.word	0x20000ad0
 8001220:	080087ec 	.word	0x080087ec
 8001224:	20000b34 	.word	0x20000b34
 8001228:	08008804 	.word	0x08008804
 800122c:	20000a00 	.word	0x20000a00

08001230 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001230:	b580      	push	{r7, lr}
 8001232:	b096      	sub	sp, #88	; 0x58
 8001234:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8001236:	f107 0314 	add.w	r3, r7, #20
 800123a:	2244      	movs	r2, #68	; 0x44
 800123c:	2100      	movs	r1, #0
 800123e:	4618      	mov	r0, r3
 8001240:	f005 feca 	bl	8006fd8 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001244:	463b      	mov	r3, r7
 8001246:	2200      	movs	r2, #0
 8001248:	601a      	str	r2, [r3, #0]
 800124a:	605a      	str	r2, [r3, #4]
 800124c:	609a      	str	r2, [r3, #8]
 800124e:	60da      	str	r2, [r3, #12]
 8001250:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  if (HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1) != HAL_OK)
 8001252:	f44f 7000 	mov.w	r0, #512	; 0x200
 8001256:	f003 f9dd 	bl	8004614 <HAL_PWREx_ControlVoltageScaling>
 800125a:	4603      	mov	r3, r0
 800125c:	2b00      	cmp	r3, #0
 800125e:	d001      	beq.n	8001264 <SystemClock_Config+0x34>
  {
    Error_Handler();
 8001260:	f000 fb90 	bl	8001984 <Error_Handler>
  }

  /** Configure LSE Drive Capability
  */
  HAL_PWR_EnableBkUpAccess();
 8001264:	f003 f9b8 	bl	80045d8 <HAL_PWR_EnableBkUpAccess>
  __HAL_RCC_LSEDRIVE_CONFIG(RCC_LSEDRIVE_LOW);
 8001268:	4b21      	ldr	r3, [pc, #132]	; (80012f0 <SystemClock_Config+0xc0>)
 800126a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800126e:	4a20      	ldr	r2, [pc, #128]	; (80012f0 <SystemClock_Config+0xc0>)
 8001270:	f023 0318 	bic.w	r3, r3, #24
 8001274:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_LSE|RCC_OSCILLATORTYPE_MSI;
 8001278:	2314      	movs	r3, #20
 800127a:	617b      	str	r3, [r7, #20]
  RCC_OscInitStruct.LSEState = RCC_LSE_ON;
 800127c:	2301      	movs	r3, #1
 800127e:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.MSIState = RCC_MSI_ON;
 8001280:	2301      	movs	r3, #1
 8001282:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.MSICalibrationValue = 0;
 8001284:	2300      	movs	r3, #0
 8001286:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.MSIClockRange = RCC_MSIRANGE_6;
 8001288:	2360      	movs	r3, #96	; 0x60
 800128a:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800128c:	2302      	movs	r3, #2
 800128e:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_MSI;
 8001290:	2301      	movs	r3, #1
 8001292:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLM = 1;
 8001294:	2301      	movs	r3, #1
 8001296:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLN = 40;
 8001298:	2328      	movs	r3, #40	; 0x28
 800129a:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV7;
 800129c:	2307      	movs	r3, #7
 800129e:	64fb      	str	r3, [r7, #76]	; 0x4c
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 80012a0:	2302      	movs	r3, #2
 80012a2:	653b      	str	r3, [r7, #80]	; 0x50
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 80012a4:	2302      	movs	r3, #2
 80012a6:	657b      	str	r3, [r7, #84]	; 0x54
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80012a8:	f107 0314 	add.w	r3, r7, #20
 80012ac:	4618      	mov	r0, r3
 80012ae:	f003 fad3 	bl	8004858 <HAL_RCC_OscConfig>
 80012b2:	4603      	mov	r3, r0
 80012b4:	2b00      	cmp	r3, #0
 80012b6:	d001      	beq.n	80012bc <SystemClock_Config+0x8c>
  {
    Error_Handler();
 80012b8:	f000 fb64 	bl	8001984 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80012bc:	230f      	movs	r3, #15
 80012be:	603b      	str	r3, [r7, #0]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80012c0:	2303      	movs	r3, #3
 80012c2:	607b      	str	r3, [r7, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80012c4:	2300      	movs	r3, #0
 80012c6:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 80012c8:	2300      	movs	r3, #0
 80012ca:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80012cc:	2300      	movs	r3, #0
 80012ce:	613b      	str	r3, [r7, #16]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK)
 80012d0:	463b      	mov	r3, r7
 80012d2:	2104      	movs	r1, #4
 80012d4:	4618      	mov	r0, r3
 80012d6:	f003 fe9b 	bl	8005010 <HAL_RCC_ClockConfig>
 80012da:	4603      	mov	r3, r0
 80012dc:	2b00      	cmp	r3, #0
 80012de:	d001      	beq.n	80012e4 <SystemClock_Config+0xb4>
  {
    Error_Handler();
 80012e0:	f000 fb50 	bl	8001984 <Error_Handler>
  }

  /** Enable MSI Auto calibration
  */
  HAL_RCCEx_EnableMSIPLLMode();
 80012e4:	f004 fba2 	bl	8005a2c <HAL_RCCEx_EnableMSIPLLMode>
}
 80012e8:	bf00      	nop
 80012ea:	3758      	adds	r7, #88	; 0x58
 80012ec:	46bd      	mov	sp, r7
 80012ee:	bd80      	pop	{r7, pc}
 80012f0:	40021000 	.word	0x40021000

080012f4 <MX_DFSDM1_Init>:
  * @brief DFSDM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_DFSDM1_Init(void)
{
 80012f4:	b580      	push	{r7, lr}
 80012f6:	af00      	add	r7, sp, #0
  /* USER CODE END DFSDM1_Init 0 */

  /* USER CODE BEGIN DFSDM1_Init 1 */

  /* USER CODE END DFSDM1_Init 1 */
  hdfsdm1_channel1.Instance = DFSDM1_Channel1;
 80012f8:	4b18      	ldr	r3, [pc, #96]	; (800135c <MX_DFSDM1_Init+0x68>)
 80012fa:	4a19      	ldr	r2, [pc, #100]	; (8001360 <MX_DFSDM1_Init+0x6c>)
 80012fc:	601a      	str	r2, [r3, #0]
  hdfsdm1_channel1.Init.OutputClock.Activation = ENABLE;
 80012fe:	4b17      	ldr	r3, [pc, #92]	; (800135c <MX_DFSDM1_Init+0x68>)
 8001300:	2201      	movs	r2, #1
 8001302:	711a      	strb	r2, [r3, #4]
  hdfsdm1_channel1.Init.OutputClock.Selection = DFSDM_CHANNEL_OUTPUT_CLOCK_SYSTEM;
 8001304:	4b15      	ldr	r3, [pc, #84]	; (800135c <MX_DFSDM1_Init+0x68>)
 8001306:	2200      	movs	r2, #0
 8001308:	609a      	str	r2, [r3, #8]
  hdfsdm1_channel1.Init.OutputClock.Divider = 2;
 800130a:	4b14      	ldr	r3, [pc, #80]	; (800135c <MX_DFSDM1_Init+0x68>)
 800130c:	2202      	movs	r2, #2
 800130e:	60da      	str	r2, [r3, #12]
  hdfsdm1_channel1.Init.Input.Multiplexer = DFSDM_CHANNEL_EXTERNAL_INPUTS;
 8001310:	4b12      	ldr	r3, [pc, #72]	; (800135c <MX_DFSDM1_Init+0x68>)
 8001312:	2200      	movs	r2, #0
 8001314:	611a      	str	r2, [r3, #16]
  hdfsdm1_channel1.Init.Input.DataPacking = DFSDM_CHANNEL_STANDARD_MODE;
 8001316:	4b11      	ldr	r3, [pc, #68]	; (800135c <MX_DFSDM1_Init+0x68>)
 8001318:	2200      	movs	r2, #0
 800131a:	615a      	str	r2, [r3, #20]
  hdfsdm1_channel1.Init.Input.Pins = DFSDM_CHANNEL_FOLLOWING_CHANNEL_PINS;
 800131c:	4b0f      	ldr	r3, [pc, #60]	; (800135c <MX_DFSDM1_Init+0x68>)
 800131e:	f44f 7280 	mov.w	r2, #256	; 0x100
 8001322:	619a      	str	r2, [r3, #24]
  hdfsdm1_channel1.Init.SerialInterface.Type = DFSDM_CHANNEL_SPI_RISING;
 8001324:	4b0d      	ldr	r3, [pc, #52]	; (800135c <MX_DFSDM1_Init+0x68>)
 8001326:	2200      	movs	r2, #0
 8001328:	61da      	str	r2, [r3, #28]
  hdfsdm1_channel1.Init.SerialInterface.SpiClock = DFSDM_CHANNEL_SPI_CLOCK_INTERNAL;
 800132a:	4b0c      	ldr	r3, [pc, #48]	; (800135c <MX_DFSDM1_Init+0x68>)
 800132c:	2204      	movs	r2, #4
 800132e:	621a      	str	r2, [r3, #32]
  hdfsdm1_channel1.Init.Awd.FilterOrder = DFSDM_CHANNEL_FASTSINC_ORDER;
 8001330:	4b0a      	ldr	r3, [pc, #40]	; (800135c <MX_DFSDM1_Init+0x68>)
 8001332:	2200      	movs	r2, #0
 8001334:	625a      	str	r2, [r3, #36]	; 0x24
  hdfsdm1_channel1.Init.Awd.Oversampling = 1;
 8001336:	4b09      	ldr	r3, [pc, #36]	; (800135c <MX_DFSDM1_Init+0x68>)
 8001338:	2201      	movs	r2, #1
 800133a:	629a      	str	r2, [r3, #40]	; 0x28
  hdfsdm1_channel1.Init.Offset = 0;
 800133c:	4b07      	ldr	r3, [pc, #28]	; (800135c <MX_DFSDM1_Init+0x68>)
 800133e:	2200      	movs	r2, #0
 8001340:	62da      	str	r2, [r3, #44]	; 0x2c
  hdfsdm1_channel1.Init.RightBitShift = 0x00;
 8001342:	4b06      	ldr	r3, [pc, #24]	; (800135c <MX_DFSDM1_Init+0x68>)
 8001344:	2200      	movs	r2, #0
 8001346:	631a      	str	r2, [r3, #48]	; 0x30
  if (HAL_DFSDM_ChannelInit(&hdfsdm1_channel1) != HAL_OK)
 8001348:	4804      	ldr	r0, [pc, #16]	; (800135c <MX_DFSDM1_Init+0x68>)
 800134a:	f001 fded 	bl	8002f28 <HAL_DFSDM_ChannelInit>
 800134e:	4603      	mov	r3, r0
 8001350:	2b00      	cmp	r3, #0
 8001352:	d001      	beq.n	8001358 <MX_DFSDM1_Init+0x64>
  {
    Error_Handler();
 8001354:	f000 fb16 	bl	8001984 <Error_Handler>
  }
  /* USER CODE BEGIN DFSDM1_Init 2 */

  /* USER CODE END DFSDM1_Init 2 */

}
 8001358:	bf00      	nop
 800135a:	bd80      	pop	{r7, pc}
 800135c:	200001fc 	.word	0x200001fc
 8001360:	40016020 	.word	0x40016020

08001364 <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 8001364:	b580      	push	{r7, lr}
 8001366:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8001368:	4b1b      	ldr	r3, [pc, #108]	; (80013d8 <MX_I2C1_Init+0x74>)
 800136a:	4a1c      	ldr	r2, [pc, #112]	; (80013dc <MX_I2C1_Init+0x78>)
 800136c:	601a      	str	r2, [r3, #0]
  hi2c1.Init.Timing = 0x00702991;
 800136e:	4b1a      	ldr	r3, [pc, #104]	; (80013d8 <MX_I2C1_Init+0x74>)
 8001370:	4a1b      	ldr	r2, [pc, #108]	; (80013e0 <MX_I2C1_Init+0x7c>)
 8001372:	605a      	str	r2, [r3, #4]
  hi2c1.Init.OwnAddress1 = 0;
 8001374:	4b18      	ldr	r3, [pc, #96]	; (80013d8 <MX_I2C1_Init+0x74>)
 8001376:	2200      	movs	r2, #0
 8001378:	609a      	str	r2, [r3, #8]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 800137a:	4b17      	ldr	r3, [pc, #92]	; (80013d8 <MX_I2C1_Init+0x74>)
 800137c:	2201      	movs	r2, #1
 800137e:	60da      	str	r2, [r3, #12]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8001380:	4b15      	ldr	r3, [pc, #84]	; (80013d8 <MX_I2C1_Init+0x74>)
 8001382:	2200      	movs	r2, #0
 8001384:	611a      	str	r2, [r3, #16]
  hi2c1.Init.OwnAddress2 = 0;
 8001386:	4b14      	ldr	r3, [pc, #80]	; (80013d8 <MX_I2C1_Init+0x74>)
 8001388:	2200      	movs	r2, #0
 800138a:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 800138c:	4b12      	ldr	r3, [pc, #72]	; (80013d8 <MX_I2C1_Init+0x74>)
 800138e:	2200      	movs	r2, #0
 8001390:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8001392:	4b11      	ldr	r3, [pc, #68]	; (80013d8 <MX_I2C1_Init+0x74>)
 8001394:	2200      	movs	r2, #0
 8001396:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8001398:	4b0f      	ldr	r3, [pc, #60]	; (80013d8 <MX_I2C1_Init+0x74>)
 800139a:	2200      	movs	r2, #0
 800139c:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 800139e:	480e      	ldr	r0, [pc, #56]	; (80013d8 <MX_I2C1_Init+0x74>)
 80013a0:	f002 f9a7 	bl	80036f2 <HAL_I2C_Init>
 80013a4:	4603      	mov	r3, r0
 80013a6:	2b00      	cmp	r3, #0
 80013a8:	d001      	beq.n	80013ae <MX_I2C1_Init+0x4a>
  {
    Error_Handler();
 80013aa:	f000 faeb 	bl	8001984 <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c1, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 80013ae:	2100      	movs	r1, #0
 80013b0:	4809      	ldr	r0, [pc, #36]	; (80013d8 <MX_I2C1_Init+0x74>)
 80013b2:	f002 ff31 	bl	8004218 <HAL_I2CEx_ConfigAnalogFilter>
 80013b6:	4603      	mov	r3, r0
 80013b8:	2b00      	cmp	r3, #0
 80013ba:	d001      	beq.n	80013c0 <MX_I2C1_Init+0x5c>
  {
    Error_Handler();
 80013bc:	f000 fae2 	bl	8001984 <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c1, 0) != HAL_OK)
 80013c0:	2100      	movs	r1, #0
 80013c2:	4805      	ldr	r0, [pc, #20]	; (80013d8 <MX_I2C1_Init+0x74>)
 80013c4:	f002 ff73 	bl	80042ae <HAL_I2CEx_ConfigDigitalFilter>
 80013c8:	4603      	mov	r3, r0
 80013ca:	2b00      	cmp	r3, #0
 80013cc:	d001      	beq.n	80013d2 <MX_I2C1_Init+0x6e>
  {
    Error_Handler();
 80013ce:	f000 fad9 	bl	8001984 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 80013d2:	bf00      	nop
 80013d4:	bd80      	pop	{r7, pc}
 80013d6:	bf00      	nop
 80013d8:	20000234 	.word	0x20000234
 80013dc:	40005400 	.word	0x40005400
 80013e0:	00702991 	.word	0x00702991

080013e4 <MX_I2C2_Init>:
  * @brief I2C2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C2_Init(void)
{
 80013e4:	b580      	push	{r7, lr}
 80013e6:	af00      	add	r7, sp, #0
  /* USER CODE END I2C2_Init 0 */

  /* USER CODE BEGIN I2C2_Init 1 */

  /* USER CODE END I2C2_Init 1 */
  hi2c2.Instance = I2C2;
 80013e8:	4b1b      	ldr	r3, [pc, #108]	; (8001458 <MX_I2C2_Init+0x74>)
 80013ea:	4a1c      	ldr	r2, [pc, #112]	; (800145c <MX_I2C2_Init+0x78>)
 80013ec:	601a      	str	r2, [r3, #0]
  hi2c2.Init.Timing = 0x00702991;
 80013ee:	4b1a      	ldr	r3, [pc, #104]	; (8001458 <MX_I2C2_Init+0x74>)
 80013f0:	4a1b      	ldr	r2, [pc, #108]	; (8001460 <MX_I2C2_Init+0x7c>)
 80013f2:	605a      	str	r2, [r3, #4]
  hi2c2.Init.OwnAddress1 = 0;
 80013f4:	4b18      	ldr	r3, [pc, #96]	; (8001458 <MX_I2C2_Init+0x74>)
 80013f6:	2200      	movs	r2, #0
 80013f8:	609a      	str	r2, [r3, #8]
  hi2c2.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 80013fa:	4b17      	ldr	r3, [pc, #92]	; (8001458 <MX_I2C2_Init+0x74>)
 80013fc:	2201      	movs	r2, #1
 80013fe:	60da      	str	r2, [r3, #12]
  hi2c2.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8001400:	4b15      	ldr	r3, [pc, #84]	; (8001458 <MX_I2C2_Init+0x74>)
 8001402:	2200      	movs	r2, #0
 8001404:	611a      	str	r2, [r3, #16]
  hi2c2.Init.OwnAddress2 = 0;
 8001406:	4b14      	ldr	r3, [pc, #80]	; (8001458 <MX_I2C2_Init+0x74>)
 8001408:	2200      	movs	r2, #0
 800140a:	615a      	str	r2, [r3, #20]
  hi2c2.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 800140c:	4b12      	ldr	r3, [pc, #72]	; (8001458 <MX_I2C2_Init+0x74>)
 800140e:	2200      	movs	r2, #0
 8001410:	619a      	str	r2, [r3, #24]
  hi2c2.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8001412:	4b11      	ldr	r3, [pc, #68]	; (8001458 <MX_I2C2_Init+0x74>)
 8001414:	2200      	movs	r2, #0
 8001416:	61da      	str	r2, [r3, #28]
  hi2c2.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8001418:	4b0f      	ldr	r3, [pc, #60]	; (8001458 <MX_I2C2_Init+0x74>)
 800141a:	2200      	movs	r2, #0
 800141c:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c2) != HAL_OK)
 800141e:	480e      	ldr	r0, [pc, #56]	; (8001458 <MX_I2C2_Init+0x74>)
 8001420:	f002 f967 	bl	80036f2 <HAL_I2C_Init>
 8001424:	4603      	mov	r3, r0
 8001426:	2b00      	cmp	r3, #0
 8001428:	d001      	beq.n	800142e <MX_I2C2_Init+0x4a>
  {
    Error_Handler();
 800142a:	f000 faab 	bl	8001984 <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c2, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 800142e:	2100      	movs	r1, #0
 8001430:	4809      	ldr	r0, [pc, #36]	; (8001458 <MX_I2C2_Init+0x74>)
 8001432:	f002 fef1 	bl	8004218 <HAL_I2CEx_ConfigAnalogFilter>
 8001436:	4603      	mov	r3, r0
 8001438:	2b00      	cmp	r3, #0
 800143a:	d001      	beq.n	8001440 <MX_I2C2_Init+0x5c>
  {
    Error_Handler();
 800143c:	f000 faa2 	bl	8001984 <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c2, 0) != HAL_OK)
 8001440:	2100      	movs	r1, #0
 8001442:	4805      	ldr	r0, [pc, #20]	; (8001458 <MX_I2C2_Init+0x74>)
 8001444:	f002 ff33 	bl	80042ae <HAL_I2CEx_ConfigDigitalFilter>
 8001448:	4603      	mov	r3, r0
 800144a:	2b00      	cmp	r3, #0
 800144c:	d001      	beq.n	8001452 <MX_I2C2_Init+0x6e>
  {
    Error_Handler();
 800144e:	f000 fa99 	bl	8001984 <Error_Handler>
  }
  /* USER CODE BEGIN I2C2_Init 2 */

  /* USER CODE END I2C2_Init 2 */

}
 8001452:	bf00      	nop
 8001454:	bd80      	pop	{r7, pc}
 8001456:	bf00      	nop
 8001458:	20000288 	.word	0x20000288
 800145c:	40005800 	.word	0x40005800
 8001460:	00702991 	.word	0x00702991

08001464 <MX_QUADSPI_Init>:
  * @brief QUADSPI Initialization Function
  * @param None
  * @retval None
  */
static void MX_QUADSPI_Init(void)
{
 8001464:	b580      	push	{r7, lr}
 8001466:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN QUADSPI_Init 1 */

  /* USER CODE END QUADSPI_Init 1 */
  /* QUADSPI parameter configuration*/
  hqspi.Instance = QUADSPI;
 8001468:	4b0f      	ldr	r3, [pc, #60]	; (80014a8 <MX_QUADSPI_Init+0x44>)
 800146a:	4a10      	ldr	r2, [pc, #64]	; (80014ac <MX_QUADSPI_Init+0x48>)
 800146c:	601a      	str	r2, [r3, #0]
  hqspi.Init.ClockPrescaler = 2;
 800146e:	4b0e      	ldr	r3, [pc, #56]	; (80014a8 <MX_QUADSPI_Init+0x44>)
 8001470:	2202      	movs	r2, #2
 8001472:	605a      	str	r2, [r3, #4]
  hqspi.Init.FifoThreshold = 4;
 8001474:	4b0c      	ldr	r3, [pc, #48]	; (80014a8 <MX_QUADSPI_Init+0x44>)
 8001476:	2204      	movs	r2, #4
 8001478:	609a      	str	r2, [r3, #8]
  hqspi.Init.SampleShifting = QSPI_SAMPLE_SHIFTING_HALFCYCLE;
 800147a:	4b0b      	ldr	r3, [pc, #44]	; (80014a8 <MX_QUADSPI_Init+0x44>)
 800147c:	2210      	movs	r2, #16
 800147e:	60da      	str	r2, [r3, #12]
  hqspi.Init.FlashSize = 23;
 8001480:	4b09      	ldr	r3, [pc, #36]	; (80014a8 <MX_QUADSPI_Init+0x44>)
 8001482:	2217      	movs	r2, #23
 8001484:	611a      	str	r2, [r3, #16]
  hqspi.Init.ChipSelectHighTime = QSPI_CS_HIGH_TIME_1_CYCLE;
 8001486:	4b08      	ldr	r3, [pc, #32]	; (80014a8 <MX_QUADSPI_Init+0x44>)
 8001488:	2200      	movs	r2, #0
 800148a:	615a      	str	r2, [r3, #20]
  hqspi.Init.ClockMode = QSPI_CLOCK_MODE_0;
 800148c:	4b06      	ldr	r3, [pc, #24]	; (80014a8 <MX_QUADSPI_Init+0x44>)
 800148e:	2200      	movs	r2, #0
 8001490:	619a      	str	r2, [r3, #24]
  if (HAL_QSPI_Init(&hqspi) != HAL_OK)
 8001492:	4805      	ldr	r0, [pc, #20]	; (80014a8 <MX_QUADSPI_Init+0x44>)
 8001494:	f003 f924 	bl	80046e0 <HAL_QSPI_Init>
 8001498:	4603      	mov	r3, r0
 800149a:	2b00      	cmp	r3, #0
 800149c:	d001      	beq.n	80014a2 <MX_QUADSPI_Init+0x3e>
  {
    Error_Handler();
 800149e:	f000 fa71 	bl	8001984 <Error_Handler>
  }
  /* USER CODE BEGIN QUADSPI_Init 2 */

  /* USER CODE END QUADSPI_Init 2 */

}
 80014a2:	bf00      	nop
 80014a4:	bd80      	pop	{r7, pc}
 80014a6:	bf00      	nop
 80014a8:	200002dc 	.word	0x200002dc
 80014ac:	a0001000 	.word	0xa0001000

080014b0 <MX_SPI3_Init>:
  * @brief SPI3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI3_Init(void)
{
 80014b0:	b580      	push	{r7, lr}
 80014b2:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI3_Init 1 */

  /* USER CODE END SPI3_Init 1 */
  /* SPI3 parameter configuration*/
  hspi3.Instance = SPI3;
 80014b4:	4b1b      	ldr	r3, [pc, #108]	; (8001524 <MX_SPI3_Init+0x74>)
 80014b6:	4a1c      	ldr	r2, [pc, #112]	; (8001528 <MX_SPI3_Init+0x78>)
 80014b8:	601a      	str	r2, [r3, #0]
  hspi3.Init.Mode = SPI_MODE_MASTER;
 80014ba:	4b1a      	ldr	r3, [pc, #104]	; (8001524 <MX_SPI3_Init+0x74>)
 80014bc:	f44f 7282 	mov.w	r2, #260	; 0x104
 80014c0:	605a      	str	r2, [r3, #4]
  hspi3.Init.Direction = SPI_DIRECTION_2LINES;
 80014c2:	4b18      	ldr	r3, [pc, #96]	; (8001524 <MX_SPI3_Init+0x74>)
 80014c4:	2200      	movs	r2, #0
 80014c6:	609a      	str	r2, [r3, #8]
  hspi3.Init.DataSize = SPI_DATASIZE_4BIT;
 80014c8:	4b16      	ldr	r3, [pc, #88]	; (8001524 <MX_SPI3_Init+0x74>)
 80014ca:	f44f 7240 	mov.w	r2, #768	; 0x300
 80014ce:	60da      	str	r2, [r3, #12]
  hspi3.Init.CLKPolarity = SPI_POLARITY_LOW;
 80014d0:	4b14      	ldr	r3, [pc, #80]	; (8001524 <MX_SPI3_Init+0x74>)
 80014d2:	2200      	movs	r2, #0
 80014d4:	611a      	str	r2, [r3, #16]
  hspi3.Init.CLKPhase = SPI_PHASE_1EDGE;
 80014d6:	4b13      	ldr	r3, [pc, #76]	; (8001524 <MX_SPI3_Init+0x74>)
 80014d8:	2200      	movs	r2, #0
 80014da:	615a      	str	r2, [r3, #20]
  hspi3.Init.NSS = SPI_NSS_SOFT;
 80014dc:	4b11      	ldr	r3, [pc, #68]	; (8001524 <MX_SPI3_Init+0x74>)
 80014de:	f44f 7200 	mov.w	r2, #512	; 0x200
 80014e2:	619a      	str	r2, [r3, #24]
  hspi3.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 80014e4:	4b0f      	ldr	r3, [pc, #60]	; (8001524 <MX_SPI3_Init+0x74>)
 80014e6:	2200      	movs	r2, #0
 80014e8:	61da      	str	r2, [r3, #28]
  hspi3.Init.FirstBit = SPI_FIRSTBIT_MSB;
 80014ea:	4b0e      	ldr	r3, [pc, #56]	; (8001524 <MX_SPI3_Init+0x74>)
 80014ec:	2200      	movs	r2, #0
 80014ee:	621a      	str	r2, [r3, #32]
  hspi3.Init.TIMode = SPI_TIMODE_DISABLE;
 80014f0:	4b0c      	ldr	r3, [pc, #48]	; (8001524 <MX_SPI3_Init+0x74>)
 80014f2:	2200      	movs	r2, #0
 80014f4:	625a      	str	r2, [r3, #36]	; 0x24
  hspi3.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80014f6:	4b0b      	ldr	r3, [pc, #44]	; (8001524 <MX_SPI3_Init+0x74>)
 80014f8:	2200      	movs	r2, #0
 80014fa:	629a      	str	r2, [r3, #40]	; 0x28
  hspi3.Init.CRCPolynomial = 7;
 80014fc:	4b09      	ldr	r3, [pc, #36]	; (8001524 <MX_SPI3_Init+0x74>)
 80014fe:	2207      	movs	r2, #7
 8001500:	62da      	str	r2, [r3, #44]	; 0x2c
  hspi3.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 8001502:	4b08      	ldr	r3, [pc, #32]	; (8001524 <MX_SPI3_Init+0x74>)
 8001504:	2200      	movs	r2, #0
 8001506:	631a      	str	r2, [r3, #48]	; 0x30
  hspi3.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 8001508:	4b06      	ldr	r3, [pc, #24]	; (8001524 <MX_SPI3_Init+0x74>)
 800150a:	2208      	movs	r2, #8
 800150c:	635a      	str	r2, [r3, #52]	; 0x34
  if (HAL_SPI_Init(&hspi3) != HAL_OK)
 800150e:	4805      	ldr	r0, [pc, #20]	; (8001524 <MX_SPI3_Init+0x74>)
 8001510:	f004 fc6e 	bl	8005df0 <HAL_SPI_Init>
 8001514:	4603      	mov	r3, r0
 8001516:	2b00      	cmp	r3, #0
 8001518:	d001      	beq.n	800151e <MX_SPI3_Init+0x6e>
  {
    Error_Handler();
 800151a:	f000 fa33 	bl	8001984 <Error_Handler>
  }
  /* USER CODE BEGIN SPI3_Init 2 */

  /* USER CODE END SPI3_Init 2 */

}
 800151e:	bf00      	nop
 8001520:	bd80      	pop	{r7, pc}
 8001522:	bf00      	nop
 8001524:	20000320 	.word	0x20000320
 8001528:	40003c00 	.word	0x40003c00

0800152c <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 800152c:	b580      	push	{r7, lr}
 800152e:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8001530:	4b14      	ldr	r3, [pc, #80]	; (8001584 <MX_USART1_UART_Init+0x58>)
 8001532:	4a15      	ldr	r2, [pc, #84]	; (8001588 <MX_USART1_UART_Init+0x5c>)
 8001534:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 8001536:	4b13      	ldr	r3, [pc, #76]	; (8001584 <MX_USART1_UART_Init+0x58>)
 8001538:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 800153c:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 800153e:	4b11      	ldr	r3, [pc, #68]	; (8001584 <MX_USART1_UART_Init+0x58>)
 8001540:	2200      	movs	r2, #0
 8001542:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8001544:	4b0f      	ldr	r3, [pc, #60]	; (8001584 <MX_USART1_UART_Init+0x58>)
 8001546:	2200      	movs	r2, #0
 8001548:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 800154a:	4b0e      	ldr	r3, [pc, #56]	; (8001584 <MX_USART1_UART_Init+0x58>)
 800154c:	2200      	movs	r2, #0
 800154e:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8001550:	4b0c      	ldr	r3, [pc, #48]	; (8001584 <MX_USART1_UART_Init+0x58>)
 8001552:	220c      	movs	r2, #12
 8001554:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001556:	4b0b      	ldr	r3, [pc, #44]	; (8001584 <MX_USART1_UART_Init+0x58>)
 8001558:	2200      	movs	r2, #0
 800155a:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 800155c:	4b09      	ldr	r3, [pc, #36]	; (8001584 <MX_USART1_UART_Init+0x58>)
 800155e:	2200      	movs	r2, #0
 8001560:	61da      	str	r2, [r3, #28]
  huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8001562:	4b08      	ldr	r3, [pc, #32]	; (8001584 <MX_USART1_UART_Init+0x58>)
 8001564:	2200      	movs	r2, #0
 8001566:	621a      	str	r2, [r3, #32]
  huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8001568:	4b06      	ldr	r3, [pc, #24]	; (8001584 <MX_USART1_UART_Init+0x58>)
 800156a:	2200      	movs	r2, #0
 800156c:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart1) != HAL_OK)
 800156e:	4805      	ldr	r0, [pc, #20]	; (8001584 <MX_USART1_UART_Init+0x58>)
 8001570:	f004 fce1 	bl	8005f36 <HAL_UART_Init>
 8001574:	4603      	mov	r3, r0
 8001576:	2b00      	cmp	r3, #0
 8001578:	d001      	beq.n	800157e <MX_USART1_UART_Init+0x52>
  {
    Error_Handler();
 800157a:	f000 fa03 	bl	8001984 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 800157e:	bf00      	nop
 8001580:	bd80      	pop	{r7, pc}
 8001582:	bf00      	nop
 8001584:	20000384 	.word	0x20000384
 8001588:	40013800 	.word	0x40013800

0800158c <MX_USART3_UART_Init>:
  * @brief USART3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART3_UART_Init(void)
{
 800158c:	b580      	push	{r7, lr}
 800158e:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 8001590:	4b14      	ldr	r3, [pc, #80]	; (80015e4 <MX_USART3_UART_Init+0x58>)
 8001592:	4a15      	ldr	r2, [pc, #84]	; (80015e8 <MX_USART3_UART_Init+0x5c>)
 8001594:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 115200;
 8001596:	4b13      	ldr	r3, [pc, #76]	; (80015e4 <MX_USART3_UART_Init+0x58>)
 8001598:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 800159c:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 800159e:	4b11      	ldr	r3, [pc, #68]	; (80015e4 <MX_USART3_UART_Init+0x58>)
 80015a0:	2200      	movs	r2, #0
 80015a2:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 80015a4:	4b0f      	ldr	r3, [pc, #60]	; (80015e4 <MX_USART3_UART_Init+0x58>)
 80015a6:	2200      	movs	r2, #0
 80015a8:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 80015aa:	4b0e      	ldr	r3, [pc, #56]	; (80015e4 <MX_USART3_UART_Init+0x58>)
 80015ac:	2200      	movs	r2, #0
 80015ae:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 80015b0:	4b0c      	ldr	r3, [pc, #48]	; (80015e4 <MX_USART3_UART_Init+0x58>)
 80015b2:	220c      	movs	r2, #12
 80015b4:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80015b6:	4b0b      	ldr	r3, [pc, #44]	; (80015e4 <MX_USART3_UART_Init+0x58>)
 80015b8:	2200      	movs	r2, #0
 80015ba:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 80015bc:	4b09      	ldr	r3, [pc, #36]	; (80015e4 <MX_USART3_UART_Init+0x58>)
 80015be:	2200      	movs	r2, #0
 80015c0:	61da      	str	r2, [r3, #28]
  huart3.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 80015c2:	4b08      	ldr	r3, [pc, #32]	; (80015e4 <MX_USART3_UART_Init+0x58>)
 80015c4:	2200      	movs	r2, #0
 80015c6:	621a      	str	r2, [r3, #32]
  huart3.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 80015c8:	4b06      	ldr	r3, [pc, #24]	; (80015e4 <MX_USART3_UART_Init+0x58>)
 80015ca:	2200      	movs	r2, #0
 80015cc:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart3) != HAL_OK)
 80015ce:	4805      	ldr	r0, [pc, #20]	; (80015e4 <MX_USART3_UART_Init+0x58>)
 80015d0:	f004 fcb1 	bl	8005f36 <HAL_UART_Init>
 80015d4:	4603      	mov	r3, r0
 80015d6:	2b00      	cmp	r3, #0
 80015d8:	d001      	beq.n	80015de <MX_USART3_UART_Init+0x52>
  {
    Error_Handler();
 80015da:	f000 f9d3 	bl	8001984 <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 80015de:	bf00      	nop
 80015e0:	bd80      	pop	{r7, pc}
 80015e2:	bf00      	nop
 80015e4:	20000408 	.word	0x20000408
 80015e8:	40004800 	.word	0x40004800

080015ec <MX_USB_OTG_FS_PCD_Init>:
  * @brief USB_OTG_FS Initialization Function
  * @param None
  * @retval None
  */
static void MX_USB_OTG_FS_PCD_Init(void)
{
 80015ec:	b580      	push	{r7, lr}
 80015ee:	af00      	add	r7, sp, #0
  /* USER CODE END USB_OTG_FS_Init 0 */

  /* USER CODE BEGIN USB_OTG_FS_Init 1 */

  /* USER CODE END USB_OTG_FS_Init 1 */
  hpcd_USB_OTG_FS.Instance = USB_OTG_FS;
 80015f0:	4b14      	ldr	r3, [pc, #80]	; (8001644 <MX_USB_OTG_FS_PCD_Init+0x58>)
 80015f2:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
 80015f6:	601a      	str	r2, [r3, #0]
  hpcd_USB_OTG_FS.Init.dev_endpoints = 6;
 80015f8:	4b12      	ldr	r3, [pc, #72]	; (8001644 <MX_USB_OTG_FS_PCD_Init+0x58>)
 80015fa:	2206      	movs	r2, #6
 80015fc:	605a      	str	r2, [r3, #4]
  hpcd_USB_OTG_FS.Init.speed = PCD_SPEED_FULL;
 80015fe:	4b11      	ldr	r3, [pc, #68]	; (8001644 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8001600:	2202      	movs	r2, #2
 8001602:	60da      	str	r2, [r3, #12]
  hpcd_USB_OTG_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 8001604:	4b0f      	ldr	r3, [pc, #60]	; (8001644 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8001606:	2202      	movs	r2, #2
 8001608:	619a      	str	r2, [r3, #24]
  hpcd_USB_OTG_FS.Init.Sof_enable = DISABLE;
 800160a:	4b0e      	ldr	r3, [pc, #56]	; (8001644 <MX_USB_OTG_FS_PCD_Init+0x58>)
 800160c:	2200      	movs	r2, #0
 800160e:	61da      	str	r2, [r3, #28]
  hpcd_USB_OTG_FS.Init.low_power_enable = DISABLE;
 8001610:	4b0c      	ldr	r3, [pc, #48]	; (8001644 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8001612:	2200      	movs	r2, #0
 8001614:	621a      	str	r2, [r3, #32]
  hpcd_USB_OTG_FS.Init.lpm_enable = DISABLE;
 8001616:	4b0b      	ldr	r3, [pc, #44]	; (8001644 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8001618:	2200      	movs	r2, #0
 800161a:	625a      	str	r2, [r3, #36]	; 0x24
  hpcd_USB_OTG_FS.Init.battery_charging_enable = DISABLE;
 800161c:	4b09      	ldr	r3, [pc, #36]	; (8001644 <MX_USB_OTG_FS_PCD_Init+0x58>)
 800161e:	2200      	movs	r2, #0
 8001620:	629a      	str	r2, [r3, #40]	; 0x28
  hpcd_USB_OTG_FS.Init.use_dedicated_ep1 = DISABLE;
 8001622:	4b08      	ldr	r3, [pc, #32]	; (8001644 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8001624:	2200      	movs	r2, #0
 8001626:	631a      	str	r2, [r3, #48]	; 0x30
  hpcd_USB_OTG_FS.Init.vbus_sensing_enable = DISABLE;
 8001628:	4b06      	ldr	r3, [pc, #24]	; (8001644 <MX_USB_OTG_FS_PCD_Init+0x58>)
 800162a:	2200      	movs	r2, #0
 800162c:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_PCD_Init(&hpcd_USB_OTG_FS) != HAL_OK)
 800162e:	4805      	ldr	r0, [pc, #20]	; (8001644 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8001630:	f002 fe89 	bl	8004346 <HAL_PCD_Init>
 8001634:	4603      	mov	r3, r0
 8001636:	2b00      	cmp	r3, #0
 8001638:	d001      	beq.n	800163e <MX_USB_OTG_FS_PCD_Init+0x52>
  {
    Error_Handler();
 800163a:	f000 f9a3 	bl	8001984 <Error_Handler>
  }
  /* USER CODE BEGIN USB_OTG_FS_Init 2 */

  /* USER CODE END USB_OTG_FS_Init 2 */

}
 800163e:	bf00      	nop
 8001640:	bd80      	pop	{r7, pc}
 8001642:	bf00      	nop
 8001644:	2000048c 	.word	0x2000048c

08001648 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8001648:	b580      	push	{r7, lr}
 800164a:	b08a      	sub	sp, #40	; 0x28
 800164c:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800164e:	f107 0314 	add.w	r3, r7, #20
 8001652:	2200      	movs	r2, #0
 8001654:	601a      	str	r2, [r3, #0]
 8001656:	605a      	str	r2, [r3, #4]
 8001658:	609a      	str	r2, [r3, #8]
 800165a:	60da      	str	r2, [r3, #12]
 800165c:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 800165e:	4bbe      	ldr	r3, [pc, #760]	; (8001958 <MX_GPIO_Init+0x310>)
 8001660:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001662:	4abd      	ldr	r2, [pc, #756]	; (8001958 <MX_GPIO_Init+0x310>)
 8001664:	f043 0310 	orr.w	r3, r3, #16
 8001668:	64d3      	str	r3, [r2, #76]	; 0x4c
 800166a:	4bbb      	ldr	r3, [pc, #748]	; (8001958 <MX_GPIO_Init+0x310>)
 800166c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800166e:	f003 0310 	and.w	r3, r3, #16
 8001672:	613b      	str	r3, [r7, #16]
 8001674:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8001676:	4bb8      	ldr	r3, [pc, #736]	; (8001958 <MX_GPIO_Init+0x310>)
 8001678:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800167a:	4ab7      	ldr	r2, [pc, #732]	; (8001958 <MX_GPIO_Init+0x310>)
 800167c:	f043 0304 	orr.w	r3, r3, #4
 8001680:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001682:	4bb5      	ldr	r3, [pc, #724]	; (8001958 <MX_GPIO_Init+0x310>)
 8001684:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001686:	f003 0304 	and.w	r3, r3, #4
 800168a:	60fb      	str	r3, [r7, #12]
 800168c:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800168e:	4bb2      	ldr	r3, [pc, #712]	; (8001958 <MX_GPIO_Init+0x310>)
 8001690:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001692:	4ab1      	ldr	r2, [pc, #708]	; (8001958 <MX_GPIO_Init+0x310>)
 8001694:	f043 0301 	orr.w	r3, r3, #1
 8001698:	64d3      	str	r3, [r2, #76]	; 0x4c
 800169a:	4baf      	ldr	r3, [pc, #700]	; (8001958 <MX_GPIO_Init+0x310>)
 800169c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800169e:	f003 0301 	and.w	r3, r3, #1
 80016a2:	60bb      	str	r3, [r7, #8]
 80016a4:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80016a6:	4bac      	ldr	r3, [pc, #688]	; (8001958 <MX_GPIO_Init+0x310>)
 80016a8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80016aa:	4aab      	ldr	r2, [pc, #684]	; (8001958 <MX_GPIO_Init+0x310>)
 80016ac:	f043 0302 	orr.w	r3, r3, #2
 80016b0:	64d3      	str	r3, [r2, #76]	; 0x4c
 80016b2:	4ba9      	ldr	r3, [pc, #676]	; (8001958 <MX_GPIO_Init+0x310>)
 80016b4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80016b6:	f003 0302 	and.w	r3, r3, #2
 80016ba:	607b      	str	r3, [r7, #4]
 80016bc:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 80016be:	4ba6      	ldr	r3, [pc, #664]	; (8001958 <MX_GPIO_Init+0x310>)
 80016c0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80016c2:	4aa5      	ldr	r2, [pc, #660]	; (8001958 <MX_GPIO_Init+0x310>)
 80016c4:	f043 0308 	orr.w	r3, r3, #8
 80016c8:	64d3      	str	r3, [r2, #76]	; 0x4c
 80016ca:	4ba3      	ldr	r3, [pc, #652]	; (8001958 <MX_GPIO_Init+0x310>)
 80016cc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80016ce:	f003 0308 	and.w	r3, r3, #8
 80016d2:	603b      	str	r3, [r7, #0]
 80016d4:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOE, M24SR64_Y_RF_DISABLE_Pin|M24SR64_Y_GPO_Pin|ISM43362_RST_Pin, GPIO_PIN_RESET);
 80016d6:	2200      	movs	r2, #0
 80016d8:	f44f 718a 	mov.w	r1, #276	; 0x114
 80016dc:	489f      	ldr	r0, [pc, #636]	; (800195c <MX_GPIO_Init+0x314>)
 80016de:	f001 ffcd 	bl	800367c <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, ARD_D10_Pin|SPBTLE_RF_RST_Pin|ARD_D9_Pin, GPIO_PIN_RESET);
 80016e2:	2200      	movs	r2, #0
 80016e4:	f248 1104 	movw	r1, #33028	; 0x8104
 80016e8:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80016ec:	f001 ffc6 	bl	800367c <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, ARD_D8_Pin|ISM43362_BOOT0_Pin|ISM43362_WAKEUP_Pin|LED2_Pin
 80016f0:	2200      	movs	r2, #0
 80016f2:	f24f 0114 	movw	r1, #61460	; 0xf014
 80016f6:	489a      	ldr	r0, [pc, #616]	; (8001960 <MX_GPIO_Init+0x318>)
 80016f8:	f001 ffc0 	bl	800367c <HAL_GPIO_WritePin>
                          |SPSGRF_915_SDN_Pin|ARD_D5_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOD, USB_OTG_FS_PWR_EN_Pin|PMOD_RESET_Pin|STSAFE_A100_RESET_Pin, GPIO_PIN_RESET);
 80016fc:	2200      	movs	r2, #0
 80016fe:	f241 0181 	movw	r1, #4225	; 0x1081
 8001702:	4898      	ldr	r0, [pc, #608]	; (8001964 <MX_GPIO_Init+0x31c>)
 8001704:	f001 ffba 	bl	800367c <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(SPBTLE_RF_SPI3_CSN_GPIO_Port, SPBTLE_RF_SPI3_CSN_Pin, GPIO_PIN_SET);
 8001708:	2201      	movs	r2, #1
 800170a:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 800170e:	4895      	ldr	r0, [pc, #596]	; (8001964 <MX_GPIO_Init+0x31c>)
 8001710:	f001 ffb4 	bl	800367c <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, VL53L0X_XSHUT_Pin|LED3_WIFI__LED4_BLE_Pin, GPIO_PIN_RESET);
 8001714:	2200      	movs	r2, #0
 8001716:	f44f 7110 	mov.w	r1, #576	; 0x240
 800171a:	4893      	ldr	r0, [pc, #588]	; (8001968 <MX_GPIO_Init+0x320>)
 800171c:	f001 ffae 	bl	800367c <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(SPSGRF_915_SPI3_CSN_GPIO_Port, SPSGRF_915_SPI3_CSN_Pin, GPIO_PIN_SET);
 8001720:	2201      	movs	r2, #1
 8001722:	2120      	movs	r1, #32
 8001724:	488e      	ldr	r0, [pc, #568]	; (8001960 <MX_GPIO_Init+0x318>)
 8001726:	f001 ffa9 	bl	800367c <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(ISM43362_SPI3_CSN_GPIO_Port, ISM43362_SPI3_CSN_Pin, GPIO_PIN_SET);
 800172a:	2201      	movs	r2, #1
 800172c:	2101      	movs	r1, #1
 800172e:	488b      	ldr	r0, [pc, #556]	; (800195c <MX_GPIO_Init+0x314>)
 8001730:	f001 ffa4 	bl	800367c <HAL_GPIO_WritePin>

  /*Configure GPIO pins : M24SR64_Y_RF_DISABLE_Pin M24SR64_Y_GPO_Pin ISM43362_RST_Pin ISM43362_SPI3_CSN_Pin */
  GPIO_InitStruct.Pin = M24SR64_Y_RF_DISABLE_Pin|M24SR64_Y_GPO_Pin|ISM43362_RST_Pin|ISM43362_SPI3_CSN_Pin;
 8001734:	f240 1315 	movw	r3, #277	; 0x115
 8001738:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800173a:	2301      	movs	r3, #1
 800173c:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800173e:	2300      	movs	r3, #0
 8001740:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001742:	2300      	movs	r3, #0
 8001744:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8001746:	f107 0314 	add.w	r3, r7, #20
 800174a:	4619      	mov	r1, r3
 800174c:	4883      	ldr	r0, [pc, #524]	; (800195c <MX_GPIO_Init+0x314>)
 800174e:	f001 fcf7 	bl	8003140 <HAL_GPIO_Init>

  /*Configure GPIO pins : USB_OTG_FS_OVRCR_EXTI3_Pin SPSGRF_915_GPIO3_EXTI5_Pin SPBTLE_RF_IRQ_EXTI6_Pin ISM43362_DRDY_EXTI1_Pin */
  GPIO_InitStruct.Pin = USB_OTG_FS_OVRCR_EXTI3_Pin|SPSGRF_915_GPIO3_EXTI5_Pin|SPBTLE_RF_IRQ_EXTI6_Pin|ISM43362_DRDY_EXTI1_Pin;
 8001752:	236a      	movs	r3, #106	; 0x6a
 8001754:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8001756:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 800175a:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800175c:	2300      	movs	r3, #0
 800175e:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8001760:	f107 0314 	add.w	r3, r7, #20
 8001764:	4619      	mov	r1, r3
 8001766:	487d      	ldr	r0, [pc, #500]	; (800195c <MX_GPIO_Init+0x314>)
 8001768:	f001 fcea 	bl	8003140 <HAL_GPIO_Init>

  /*Configure GPIO pin : BUTTON_EXTI13_Pin */
  GPIO_InitStruct.Pin = BUTTON_EXTI13_Pin;
 800176c:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8001770:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 8001772:	f44f 1304 	mov.w	r3, #2162688	; 0x210000
 8001776:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001778:	2300      	movs	r3, #0
 800177a:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(BUTTON_EXTI13_GPIO_Port, &GPIO_InitStruct);
 800177c:	f107 0314 	add.w	r3, r7, #20
 8001780:	4619      	mov	r1, r3
 8001782:	4879      	ldr	r0, [pc, #484]	; (8001968 <MX_GPIO_Init+0x320>)
 8001784:	f001 fcdc 	bl	8003140 <HAL_GPIO_Init>

  /*Configure GPIO pins : ARD_A5_Pin ARD_A4_Pin ARD_A3_Pin ARD_A2_Pin
                           ARD_A1_Pin ARD_A0_Pin */
  GPIO_InitStruct.Pin = ARD_A5_Pin|ARD_A4_Pin|ARD_A3_Pin|ARD_A2_Pin
 8001788:	233f      	movs	r3, #63	; 0x3f
 800178a:	617b      	str	r3, [r7, #20]
                          |ARD_A1_Pin|ARD_A0_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG_ADC_CONTROL;
 800178c:	230b      	movs	r3, #11
 800178e:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001790:	2300      	movs	r3, #0
 8001792:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001794:	f107 0314 	add.w	r3, r7, #20
 8001798:	4619      	mov	r1, r3
 800179a:	4873      	ldr	r0, [pc, #460]	; (8001968 <MX_GPIO_Init+0x320>)
 800179c:	f001 fcd0 	bl	8003140 <HAL_GPIO_Init>

  /*Configure GPIO pins : ARD_D1_Pin ARD_D0_Pin */
  GPIO_InitStruct.Pin = ARD_D1_Pin|ARD_D0_Pin;
 80017a0:	2303      	movs	r3, #3
 80017a2:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80017a4:	2302      	movs	r3, #2
 80017a6:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80017a8:	2300      	movs	r3, #0
 80017aa:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80017ac:	2303      	movs	r3, #3
 80017ae:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Alternate = GPIO_AF8_UART4;
 80017b0:	2308      	movs	r3, #8
 80017b2:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80017b4:	f107 0314 	add.w	r3, r7, #20
 80017b8:	4619      	mov	r1, r3
 80017ba:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80017be:	f001 fcbf 	bl	8003140 <HAL_GPIO_Init>

  /*Configure GPIO pins : ARD_D10_Pin SPBTLE_RF_RST_Pin ARD_D9_Pin */
  GPIO_InitStruct.Pin = ARD_D10_Pin|SPBTLE_RF_RST_Pin|ARD_D9_Pin;
 80017c2:	f248 1304 	movw	r3, #33028	; 0x8104
 80017c6:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80017c8:	2301      	movs	r3, #1
 80017ca:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80017cc:	2300      	movs	r3, #0
 80017ce:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80017d0:	2300      	movs	r3, #0
 80017d2:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80017d4:	f107 0314 	add.w	r3, r7, #20
 80017d8:	4619      	mov	r1, r3
 80017da:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80017de:	f001 fcaf 	bl	8003140 <HAL_GPIO_Init>

  /*Configure GPIO pin : ARD_D4_Pin */
  GPIO_InitStruct.Pin = ARD_D4_Pin;
 80017e2:	2308      	movs	r3, #8
 80017e4:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80017e6:	2302      	movs	r3, #2
 80017e8:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80017ea:	2300      	movs	r3, #0
 80017ec:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80017ee:	2300      	movs	r3, #0
 80017f0:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 80017f2:	2301      	movs	r3, #1
 80017f4:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(ARD_D4_GPIO_Port, &GPIO_InitStruct);
 80017f6:	f107 0314 	add.w	r3, r7, #20
 80017fa:	4619      	mov	r1, r3
 80017fc:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001800:	f001 fc9e 	bl	8003140 <HAL_GPIO_Init>

  /*Configure GPIO pin : ARD_D7_Pin */
  GPIO_InitStruct.Pin = ARD_D7_Pin;
 8001804:	2310      	movs	r3, #16
 8001806:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG_ADC_CONTROL;
 8001808:	230b      	movs	r3, #11
 800180a:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800180c:	2300      	movs	r3, #0
 800180e:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(ARD_D7_GPIO_Port, &GPIO_InitStruct);
 8001810:	f107 0314 	add.w	r3, r7, #20
 8001814:	4619      	mov	r1, r3
 8001816:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800181a:	f001 fc91 	bl	8003140 <HAL_GPIO_Init>

  /*Configure GPIO pins : ARD_D13_Pin ARD_D12_Pin ARD_D11_Pin */
  GPIO_InitStruct.Pin = ARD_D13_Pin|ARD_D12_Pin|ARD_D11_Pin;
 800181e:	23e0      	movs	r3, #224	; 0xe0
 8001820:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001822:	2302      	movs	r3, #2
 8001824:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001826:	2300      	movs	r3, #0
 8001828:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800182a:	2303      	movs	r3, #3
 800182c:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 800182e:	2305      	movs	r3, #5
 8001830:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001832:	f107 0314 	add.w	r3, r7, #20
 8001836:	4619      	mov	r1, r3
 8001838:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800183c:	f001 fc80 	bl	8003140 <HAL_GPIO_Init>

  /*Configure GPIO pin : ARD_D3_Pin */
  GPIO_InitStruct.Pin = ARD_D3_Pin;
 8001840:	2301      	movs	r3, #1
 8001842:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8001844:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 8001848:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800184a:	2300      	movs	r3, #0
 800184c:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(ARD_D3_GPIO_Port, &GPIO_InitStruct);
 800184e:	f107 0314 	add.w	r3, r7, #20
 8001852:	4619      	mov	r1, r3
 8001854:	4842      	ldr	r0, [pc, #264]	; (8001960 <MX_GPIO_Init+0x318>)
 8001856:	f001 fc73 	bl	8003140 <HAL_GPIO_Init>

  /*Configure GPIO pin : ARD_D6_Pin */
  GPIO_InitStruct.Pin = ARD_D6_Pin;
 800185a:	2302      	movs	r3, #2
 800185c:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG_ADC_CONTROL;
 800185e:	230b      	movs	r3, #11
 8001860:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001862:	2300      	movs	r3, #0
 8001864:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(ARD_D6_GPIO_Port, &GPIO_InitStruct);
 8001866:	f107 0314 	add.w	r3, r7, #20
 800186a:	4619      	mov	r1, r3
 800186c:	483c      	ldr	r0, [pc, #240]	; (8001960 <MX_GPIO_Init+0x318>)
 800186e:	f001 fc67 	bl	8003140 <HAL_GPIO_Init>

  /*Configure GPIO pins : ARD_D8_Pin ISM43362_BOOT0_Pin ISM43362_WAKEUP_Pin LED2_Pin
                           SPSGRF_915_SDN_Pin ARD_D5_Pin SPSGRF_915_SPI3_CSN_Pin */
  GPIO_InitStruct.Pin = ARD_D8_Pin|ISM43362_BOOT0_Pin|ISM43362_WAKEUP_Pin|LED2_Pin
 8001872:	f24f 0334 	movw	r3, #61492	; 0xf034
 8001876:	617b      	str	r3, [r7, #20]
                          |SPSGRF_915_SDN_Pin|ARD_D5_Pin|SPSGRF_915_SPI3_CSN_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001878:	2301      	movs	r3, #1
 800187a:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800187c:	2300      	movs	r3, #0
 800187e:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001880:	2300      	movs	r3, #0
 8001882:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001884:	f107 0314 	add.w	r3, r7, #20
 8001888:	4619      	mov	r1, r3
 800188a:	4835      	ldr	r0, [pc, #212]	; (8001960 <MX_GPIO_Init+0x318>)
 800188c:	f001 fc58 	bl	8003140 <HAL_GPIO_Init>

  /*Configure GPIO pins : LPS22HB_INT_DRDY_EXTI0_Pin LSM6DSL_INT1_EXTI11_Pin ARD_D2_Pin HTS221_DRDY_EXTI15_Pin
                           PMOD_IRQ_EXTI12_Pin */
  GPIO_InitStruct.Pin = LPS22HB_INT_DRDY_EXTI0_Pin|LSM6DSL_INT1_EXTI11_Pin|ARD_D2_Pin|HTS221_DRDY_EXTI15_Pin
 8001890:	f64c 4304 	movw	r3, #52228	; 0xcc04
 8001894:	617b      	str	r3, [r7, #20]
                          |PMOD_IRQ_EXTI12_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8001896:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 800189a:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800189c:	2300      	movs	r3, #0
 800189e:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80018a0:	f107 0314 	add.w	r3, r7, #20
 80018a4:	4619      	mov	r1, r3
 80018a6:	482f      	ldr	r0, [pc, #188]	; (8001964 <MX_GPIO_Init+0x31c>)
 80018a8:	f001 fc4a 	bl	8003140 <HAL_GPIO_Init>

  /*Configure GPIO pins : USB_OTG_FS_PWR_EN_Pin SPBTLE_RF_SPI3_CSN_Pin PMOD_RESET_Pin STSAFE_A100_RESET_Pin */
  GPIO_InitStruct.Pin = USB_OTG_FS_PWR_EN_Pin|SPBTLE_RF_SPI3_CSN_Pin|PMOD_RESET_Pin|STSAFE_A100_RESET_Pin;
 80018ac:	f243 0381 	movw	r3, #12417	; 0x3081
 80018b0:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80018b2:	2301      	movs	r3, #1
 80018b4:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80018b6:	2300      	movs	r3, #0
 80018b8:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80018ba:	2300      	movs	r3, #0
 80018bc:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80018be:	f107 0314 	add.w	r3, r7, #20
 80018c2:	4619      	mov	r1, r3
 80018c4:	4827      	ldr	r0, [pc, #156]	; (8001964 <MX_GPIO_Init+0x31c>)
 80018c6:	f001 fc3b 	bl	8003140 <HAL_GPIO_Init>

  /*Configure GPIO pins : VL53L0X_XSHUT_Pin LED3_WIFI__LED4_BLE_Pin */
  GPIO_InitStruct.Pin = VL53L0X_XSHUT_Pin|LED3_WIFI__LED4_BLE_Pin;
 80018ca:	f44f 7310 	mov.w	r3, #576	; 0x240
 80018ce:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80018d0:	2301      	movs	r3, #1
 80018d2:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80018d4:	2300      	movs	r3, #0
 80018d6:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80018d8:	2300      	movs	r3, #0
 80018da:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80018dc:	f107 0314 	add.w	r3, r7, #20
 80018e0:	4619      	mov	r1, r3
 80018e2:	4821      	ldr	r0, [pc, #132]	; (8001968 <MX_GPIO_Init+0x320>)
 80018e4:	f001 fc2c 	bl	8003140 <HAL_GPIO_Init>

  /*Configure GPIO pins : VL53L0X_GPIO1_EXTI7_Pin LSM3MDL_DRDY_EXTI8_Pin */
  GPIO_InitStruct.Pin = VL53L0X_GPIO1_EXTI7_Pin|LSM3MDL_DRDY_EXTI8_Pin;
 80018e8:	f44f 73c0 	mov.w	r3, #384	; 0x180
 80018ec:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 80018ee:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 80018f2:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80018f4:	2300      	movs	r3, #0
 80018f6:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80018f8:	f107 0314 	add.w	r3, r7, #20
 80018fc:	4619      	mov	r1, r3
 80018fe:	481a      	ldr	r0, [pc, #104]	; (8001968 <MX_GPIO_Init+0x320>)
 8001900:	f001 fc1e 	bl	8003140 <HAL_GPIO_Init>

  /*Configure GPIO pin : PMOD_SPI2_SCK_Pin */
  GPIO_InitStruct.Pin = PMOD_SPI2_SCK_Pin;
 8001904:	2302      	movs	r3, #2
 8001906:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001908:	2302      	movs	r3, #2
 800190a:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800190c:	2300      	movs	r3, #0
 800190e:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001910:	2303      	movs	r3, #3
 8001912:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 8001914:	2305      	movs	r3, #5
 8001916:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(PMOD_SPI2_SCK_GPIO_Port, &GPIO_InitStruct);
 8001918:	f107 0314 	add.w	r3, r7, #20
 800191c:	4619      	mov	r1, r3
 800191e:	4811      	ldr	r0, [pc, #68]	; (8001964 <MX_GPIO_Init+0x31c>)
 8001920:	f001 fc0e 	bl	8003140 <HAL_GPIO_Init>

  /*Configure GPIO pins : PMOD_UART2_CTS_Pin PMOD_UART2_RTS_Pin PMOD_UART2_TX_Pin PMOD_UART2_RX_Pin */
  GPIO_InitStruct.Pin = PMOD_UART2_CTS_Pin|PMOD_UART2_RTS_Pin|PMOD_UART2_TX_Pin|PMOD_UART2_RX_Pin;
 8001924:	2378      	movs	r3, #120	; 0x78
 8001926:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001928:	2302      	movs	r3, #2
 800192a:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800192c:	2300      	movs	r3, #0
 800192e:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001930:	2303      	movs	r3, #3
 8001932:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8001934:	2307      	movs	r3, #7
 8001936:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8001938:	f107 0314 	add.w	r3, r7, #20
 800193c:	4619      	mov	r1, r3
 800193e:	4809      	ldr	r0, [pc, #36]	; (8001964 <MX_GPIO_Init+0x31c>)
 8001940:	f001 fbfe 	bl	8003140 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI9_5_IRQn, 0, 0);
 8001944:	2200      	movs	r2, #0
 8001946:	2100      	movs	r1, #0
 8001948:	2017      	movs	r0, #23
 800194a:	f001 fab6 	bl	8002eba <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI9_5_IRQn);
 800194e:	2017      	movs	r0, #23
 8001950:	f001 facf 	bl	8002ef2 <HAL_NVIC_EnableIRQ>
 8001954:	e00a      	b.n	800196c <MX_GPIO_Init+0x324>
 8001956:	bf00      	nop
 8001958:	40021000 	.word	0x40021000
 800195c:	48001000 	.word	0x48001000
 8001960:	48000400 	.word	0x48000400
 8001964:	48000c00 	.word	0x48000c00
 8001968:	48000800 	.word	0x48000800

  HAL_NVIC_SetPriority(EXTI15_10_IRQn, 0, 0);
 800196c:	2200      	movs	r2, #0
 800196e:	2100      	movs	r1, #0
 8001970:	2028      	movs	r0, #40	; 0x28
 8001972:	f001 faa2 	bl	8002eba <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 8001976:	2028      	movs	r0, #40	; 0x28
 8001978:	f001 fabb 	bl	8002ef2 <HAL_NVIC_EnableIRQ>

}
 800197c:	bf00      	nop
 800197e:	3728      	adds	r7, #40	; 0x28
 8001980:	46bd      	mov	sp, r7
 8001982:	bd80      	pop	{r7, pc}

08001984 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001984:	b480      	push	{r7}
 8001986:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001988:	b672      	cpsid	i
}
 800198a:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
	/* User can add his own implementation to report the HAL error return state */
	__disable_irq();
	while (1) {
 800198c:	e7fe      	b.n	800198c <Error_Handler+0x8>

0800198e <ssd1306_Reset>:
#include <stdlib.h>
#include <string.h>  // For memcpy

#if defined(SSD1306_USE_I2C)

void ssd1306_Reset(void) {
 800198e:	b480      	push	{r7}
 8001990:	af00      	add	r7, sp, #0
    /* for I2C - do nothing */
}
 8001992:	bf00      	nop
 8001994:	46bd      	mov	sp, r7
 8001996:	f85d 7b04 	ldr.w	r7, [sp], #4
 800199a:	4770      	bx	lr

0800199c <ssd1306_WriteCommand>:

// Send a byte to the command register
void ssd1306_WriteCommand(uint8_t byte) {
 800199c:	b580      	push	{r7, lr}
 800199e:	b086      	sub	sp, #24
 80019a0:	af04      	add	r7, sp, #16
 80019a2:	4603      	mov	r3, r0
 80019a4:	71fb      	strb	r3, [r7, #7]
    HAL_I2C_Mem_Write(&SSD1306_I2C_PORT, SSD1306_I2C_ADDR, 0x00, 1, &byte, 1, HAL_MAX_DELAY);
 80019a6:	f04f 33ff 	mov.w	r3, #4294967295
 80019aa:	9302      	str	r3, [sp, #8]
 80019ac:	2301      	movs	r3, #1
 80019ae:	9301      	str	r3, [sp, #4]
 80019b0:	1dfb      	adds	r3, r7, #7
 80019b2:	9300      	str	r3, [sp, #0]
 80019b4:	2301      	movs	r3, #1
 80019b6:	2200      	movs	r2, #0
 80019b8:	2178      	movs	r1, #120	; 0x78
 80019ba:	4803      	ldr	r0, [pc, #12]	; (80019c8 <ssd1306_WriteCommand+0x2c>)
 80019bc:	f001 ff58 	bl	8003870 <HAL_I2C_Mem_Write>
}
 80019c0:	bf00      	nop
 80019c2:	3708      	adds	r7, #8
 80019c4:	46bd      	mov	sp, r7
 80019c6:	bd80      	pop	{r7, pc}
 80019c8:	20000234 	.word	0x20000234

080019cc <ssd1306_WriteData>:

// Send data
void ssd1306_WriteData(uint8_t* buffer, size_t buff_size) {
 80019cc:	b580      	push	{r7, lr}
 80019ce:	b086      	sub	sp, #24
 80019d0:	af04      	add	r7, sp, #16
 80019d2:	6078      	str	r0, [r7, #4]
 80019d4:	6039      	str	r1, [r7, #0]
    HAL_I2C_Mem_Write(&SSD1306_I2C_PORT, SSD1306_I2C_ADDR, 0x40, 1, buffer, buff_size, HAL_MAX_DELAY);
 80019d6:	683b      	ldr	r3, [r7, #0]
 80019d8:	b29b      	uxth	r3, r3
 80019da:	f04f 32ff 	mov.w	r2, #4294967295
 80019de:	9202      	str	r2, [sp, #8]
 80019e0:	9301      	str	r3, [sp, #4]
 80019e2:	687b      	ldr	r3, [r7, #4]
 80019e4:	9300      	str	r3, [sp, #0]
 80019e6:	2301      	movs	r3, #1
 80019e8:	2240      	movs	r2, #64	; 0x40
 80019ea:	2178      	movs	r1, #120	; 0x78
 80019ec:	4803      	ldr	r0, [pc, #12]	; (80019fc <ssd1306_WriteData+0x30>)
 80019ee:	f001 ff3f 	bl	8003870 <HAL_I2C_Mem_Write>
}
 80019f2:	bf00      	nop
 80019f4:	3708      	adds	r7, #8
 80019f6:	46bd      	mov	sp, r7
 80019f8:	bd80      	pop	{r7, pc}
 80019fa:	bf00      	nop
 80019fc:	20000234 	.word	0x20000234

08001a00 <ssd1306_Init>:
    }
    return ret;
}

// Initialize the oled screen
void ssd1306_Init(void) {
 8001a00:	b580      	push	{r7, lr}
 8001a02:	af00      	add	r7, sp, #0
    // Reset OLED
    ssd1306_Reset();
 8001a04:	f7ff ffc3 	bl	800198e <ssd1306_Reset>

    // Wait for the screen to boot
    HAL_Delay(100);
 8001a08:	2064      	movs	r0, #100	; 0x64
 8001a0a:	f001 f957 	bl	8002cbc <HAL_Delay>

    // Init OLED
    ssd1306_SetDisplayOn(0); //display off
 8001a0e:	2000      	movs	r0, #0
 8001a10:	f000 f8c0 	bl	8001b94 <ssd1306_SetDisplayOn>

    ssd1306_WriteCommand(0x20); //Set Memory Addressing Mode
 8001a14:	2020      	movs	r0, #32
 8001a16:	f7ff ffc1 	bl	800199c <ssd1306_WriteCommand>
    ssd1306_WriteCommand(0x00); // 00b,Horizontal Addressing Mode; 01b,Vertical Addressing Mode;
 8001a1a:	2000      	movs	r0, #0
 8001a1c:	f7ff ffbe 	bl	800199c <ssd1306_WriteCommand>
                                // 10b,Page Addressing Mode (RESET); 11b,Invalid

    ssd1306_WriteCommand(0xB0); //Set Page Start Address for Page Addressing Mode,0-7
 8001a20:	20b0      	movs	r0, #176	; 0xb0
 8001a22:	f7ff ffbb 	bl	800199c <ssd1306_WriteCommand>

#ifdef SSD1306_MIRROR_VERT
    ssd1306_WriteCommand(0xC0); // Mirror vertically
#else
    ssd1306_WriteCommand(0xC8); //Set COM Output Scan Direction
 8001a26:	20c8      	movs	r0, #200	; 0xc8
 8001a28:	f7ff ffb8 	bl	800199c <ssd1306_WriteCommand>
#endif

    ssd1306_WriteCommand(0x00); //---set low column address
 8001a2c:	2000      	movs	r0, #0
 8001a2e:	f7ff ffb5 	bl	800199c <ssd1306_WriteCommand>
    ssd1306_WriteCommand(0x10); //---set high column address
 8001a32:	2010      	movs	r0, #16
 8001a34:	f7ff ffb2 	bl	800199c <ssd1306_WriteCommand>

    ssd1306_WriteCommand(0x40); //--set start line address - CHECK
 8001a38:	2040      	movs	r0, #64	; 0x40
 8001a3a:	f7ff ffaf 	bl	800199c <ssd1306_WriteCommand>

    ssd1306_SetContrast(0xFF);
 8001a3e:	20ff      	movs	r0, #255	; 0xff
 8001a40:	f000 f894 	bl	8001b6c <ssd1306_SetContrast>

#ifdef SSD1306_MIRROR_HORIZ
    ssd1306_WriteCommand(0xA0); // Mirror horizontally
#else
    ssd1306_WriteCommand(0xA1); //--set segment re-map 0 to 127 - CHECK
 8001a44:	20a1      	movs	r0, #161	; 0xa1
 8001a46:	f7ff ffa9 	bl	800199c <ssd1306_WriteCommand>
#endif

#ifdef SSD1306_INVERSE_COLOR
    ssd1306_WriteCommand(0xA7); //--set inverse color
#else
    ssd1306_WriteCommand(0xA6); //--set normal color
 8001a4a:	20a6      	movs	r0, #166	; 0xa6
 8001a4c:	f7ff ffa6 	bl	800199c <ssd1306_WriteCommand>
// Set multiplex ratio.
#if (SSD1306_HEIGHT == 128)
    // Found in the Luma Python lib for SH1106.
    ssd1306_WriteCommand(0xFF);
#else
    ssd1306_WriteCommand(0xA8); //--set multiplex ratio(1 to 64) - CHECK
 8001a50:	20a8      	movs	r0, #168	; 0xa8
 8001a52:	f7ff ffa3 	bl	800199c <ssd1306_WriteCommand>
#endif

#if (SSD1306_HEIGHT == 32)
    ssd1306_WriteCommand(0x1F); //
#elif (SSD1306_HEIGHT == 64)
    ssd1306_WriteCommand(0x3F); //
 8001a56:	203f      	movs	r0, #63	; 0x3f
 8001a58:	f7ff ffa0 	bl	800199c <ssd1306_WriteCommand>
    ssd1306_WriteCommand(0x3F); // Seems to work for 128px high displays too.
#else
#error "Only 32, 64, or 128 lines of height are supported!"
#endif

    ssd1306_WriteCommand(0xA4); //0xa4,Output follows RAM content;0xa5,Output ignores RAM content
 8001a5c:	20a4      	movs	r0, #164	; 0xa4
 8001a5e:	f7ff ff9d 	bl	800199c <ssd1306_WriteCommand>

    ssd1306_WriteCommand(0xD3); //-set display offset - CHECK
 8001a62:	20d3      	movs	r0, #211	; 0xd3
 8001a64:	f7ff ff9a 	bl	800199c <ssd1306_WriteCommand>
    ssd1306_WriteCommand(0x00); //-not offset
 8001a68:	2000      	movs	r0, #0
 8001a6a:	f7ff ff97 	bl	800199c <ssd1306_WriteCommand>

    ssd1306_WriteCommand(0xD5); //--set display clock divide ratio/oscillator frequency
 8001a6e:	20d5      	movs	r0, #213	; 0xd5
 8001a70:	f7ff ff94 	bl	800199c <ssd1306_WriteCommand>
    ssd1306_WriteCommand(0xF0); //--set divide ratio
 8001a74:	20f0      	movs	r0, #240	; 0xf0
 8001a76:	f7ff ff91 	bl	800199c <ssd1306_WriteCommand>

    ssd1306_WriteCommand(0xD9); //--set pre-charge period
 8001a7a:	20d9      	movs	r0, #217	; 0xd9
 8001a7c:	f7ff ff8e 	bl	800199c <ssd1306_WriteCommand>
    ssd1306_WriteCommand(0x22); //
 8001a80:	2022      	movs	r0, #34	; 0x22
 8001a82:	f7ff ff8b 	bl	800199c <ssd1306_WriteCommand>

    ssd1306_WriteCommand(0xDA); //--set com pins hardware configuration - CHECK
 8001a86:	20da      	movs	r0, #218	; 0xda
 8001a88:	f7ff ff88 	bl	800199c <ssd1306_WriteCommand>
#if (SSD1306_HEIGHT == 32)
    ssd1306_WriteCommand(0x02);
#elif (SSD1306_HEIGHT == 64)
    ssd1306_WriteCommand(0x12);
 8001a8c:	2012      	movs	r0, #18
 8001a8e:	f7ff ff85 	bl	800199c <ssd1306_WriteCommand>
    ssd1306_WriteCommand(0x12);
#else
#error "Only 32, 64, or 128 lines of height are supported!"
#endif

    ssd1306_WriteCommand(0xDB); //--set vcomh
 8001a92:	20db      	movs	r0, #219	; 0xdb
 8001a94:	f7ff ff82 	bl	800199c <ssd1306_WriteCommand>
    ssd1306_WriteCommand(0x20); //0x20,0.77xVcc
 8001a98:	2020      	movs	r0, #32
 8001a9a:	f7ff ff7f 	bl	800199c <ssd1306_WriteCommand>

    ssd1306_WriteCommand(0x8D); //--set DC-DC enable
 8001a9e:	208d      	movs	r0, #141	; 0x8d
 8001aa0:	f7ff ff7c 	bl	800199c <ssd1306_WriteCommand>
    ssd1306_WriteCommand(0x14); //
 8001aa4:	2014      	movs	r0, #20
 8001aa6:	f7ff ff79 	bl	800199c <ssd1306_WriteCommand>
    ssd1306_SetDisplayOn(1); //--turn on SSD1306 panel
 8001aaa:	2001      	movs	r0, #1
 8001aac:	f000 f872 	bl	8001b94 <ssd1306_SetDisplayOn>

    // Clear screen
    ssd1306_Fill(Black);
 8001ab0:	2000      	movs	r0, #0
 8001ab2:	f000 f80f 	bl	8001ad4 <ssd1306_Fill>
    
    // Flush buffer to screen
    ssd1306_UpdateScreen();
 8001ab6:	f000 f831 	bl	8001b1c <ssd1306_UpdateScreen>
    
    // Set default values for screen object
    SSD1306.CurrentX = 0;
 8001aba:	4b05      	ldr	r3, [pc, #20]	; (8001ad0 <ssd1306_Init+0xd0>)
 8001abc:	2200      	movs	r2, #0
 8001abe:	801a      	strh	r2, [r3, #0]
    SSD1306.CurrentY = 0;
 8001ac0:	4b03      	ldr	r3, [pc, #12]	; (8001ad0 <ssd1306_Init+0xd0>)
 8001ac2:	2200      	movs	r2, #0
 8001ac4:	805a      	strh	r2, [r3, #2]
    
    SSD1306.Initialized = 1;
 8001ac6:	4b02      	ldr	r3, [pc, #8]	; (8001ad0 <ssd1306_Init+0xd0>)
 8001ac8:	2201      	movs	r2, #1
 8001aca:	711a      	strb	r2, [r3, #4]
}
 8001acc:	bf00      	nop
 8001ace:	bd80      	pop	{r7, pc}
 8001ad0:	20000f98 	.word	0x20000f98

08001ad4 <ssd1306_Fill>:

// Fill the whole screen with the given color
void ssd1306_Fill(SSD1306_COLOR color) {
 8001ad4:	b480      	push	{r7}
 8001ad6:	b085      	sub	sp, #20
 8001ad8:	af00      	add	r7, sp, #0
 8001ada:	4603      	mov	r3, r0
 8001adc:	71fb      	strb	r3, [r7, #7]
    /* Set memory */
    uint32_t i;

    for(i = 0; i < sizeof(SSD1306_Buffer); i++) {
 8001ade:	2300      	movs	r3, #0
 8001ae0:	60fb      	str	r3, [r7, #12]
 8001ae2:	e00d      	b.n	8001b00 <ssd1306_Fill+0x2c>
        SSD1306_Buffer[i] = (color == Black) ? 0x00 : 0xFF;
 8001ae4:	79fb      	ldrb	r3, [r7, #7]
 8001ae6:	2b00      	cmp	r3, #0
 8001ae8:	d101      	bne.n	8001aee <ssd1306_Fill+0x1a>
 8001aea:	2100      	movs	r1, #0
 8001aec:	e000      	b.n	8001af0 <ssd1306_Fill+0x1c>
 8001aee:	21ff      	movs	r1, #255	; 0xff
 8001af0:	4a09      	ldr	r2, [pc, #36]	; (8001b18 <ssd1306_Fill+0x44>)
 8001af2:	68fb      	ldr	r3, [r7, #12]
 8001af4:	4413      	add	r3, r2
 8001af6:	460a      	mov	r2, r1
 8001af8:	701a      	strb	r2, [r3, #0]
    for(i = 0; i < sizeof(SSD1306_Buffer); i++) {
 8001afa:	68fb      	ldr	r3, [r7, #12]
 8001afc:	3301      	adds	r3, #1
 8001afe:	60fb      	str	r3, [r7, #12]
 8001b00:	68fb      	ldr	r3, [r7, #12]
 8001b02:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8001b06:	d3ed      	bcc.n	8001ae4 <ssd1306_Fill+0x10>
    }
}
 8001b08:	bf00      	nop
 8001b0a:	bf00      	nop
 8001b0c:	3714      	adds	r7, #20
 8001b0e:	46bd      	mov	sp, r7
 8001b10:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b14:	4770      	bx	lr
 8001b16:	bf00      	nop
 8001b18:	20000b98 	.word	0x20000b98

08001b1c <ssd1306_UpdateScreen>:

// Write the screenbuffer with changed to the screen
void ssd1306_UpdateScreen(void) {
 8001b1c:	b580      	push	{r7, lr}
 8001b1e:	b082      	sub	sp, #8
 8001b20:	af00      	add	r7, sp, #0
    // depends on the screen height:
    //
    //  * 32px   ==  4 pages
    //  * 64px   ==  8 pages
    //  * 128px  ==  16 pages
    for(uint8_t i = 0; i < SSD1306_HEIGHT/8; i++) {
 8001b22:	2300      	movs	r3, #0
 8001b24:	71fb      	strb	r3, [r7, #7]
 8001b26:	e016      	b.n	8001b56 <ssd1306_UpdateScreen+0x3a>
        ssd1306_WriteCommand(0xB0 + i); // Set the current RAM page address.
 8001b28:	79fb      	ldrb	r3, [r7, #7]
 8001b2a:	3b50      	subs	r3, #80	; 0x50
 8001b2c:	b2db      	uxtb	r3, r3
 8001b2e:	4618      	mov	r0, r3
 8001b30:	f7ff ff34 	bl	800199c <ssd1306_WriteCommand>
        ssd1306_WriteCommand(0x00 + SSD1306_X_OFFSET_LOWER);
 8001b34:	2000      	movs	r0, #0
 8001b36:	f7ff ff31 	bl	800199c <ssd1306_WriteCommand>
        ssd1306_WriteCommand(0x10 + SSD1306_X_OFFSET_UPPER);
 8001b3a:	2010      	movs	r0, #16
 8001b3c:	f7ff ff2e 	bl	800199c <ssd1306_WriteCommand>
        ssd1306_WriteData(&SSD1306_Buffer[SSD1306_WIDTH*i],SSD1306_WIDTH);
 8001b40:	79fb      	ldrb	r3, [r7, #7]
 8001b42:	01db      	lsls	r3, r3, #7
 8001b44:	4a08      	ldr	r2, [pc, #32]	; (8001b68 <ssd1306_UpdateScreen+0x4c>)
 8001b46:	4413      	add	r3, r2
 8001b48:	2180      	movs	r1, #128	; 0x80
 8001b4a:	4618      	mov	r0, r3
 8001b4c:	f7ff ff3e 	bl	80019cc <ssd1306_WriteData>
    for(uint8_t i = 0; i < SSD1306_HEIGHT/8; i++) {
 8001b50:	79fb      	ldrb	r3, [r7, #7]
 8001b52:	3301      	adds	r3, #1
 8001b54:	71fb      	strb	r3, [r7, #7]
 8001b56:	79fb      	ldrb	r3, [r7, #7]
 8001b58:	2b07      	cmp	r3, #7
 8001b5a:	d9e5      	bls.n	8001b28 <ssd1306_UpdateScreen+0xc>
    }
}
 8001b5c:	bf00      	nop
 8001b5e:	bf00      	nop
 8001b60:	3708      	adds	r7, #8
 8001b62:	46bd      	mov	sp, r7
 8001b64:	bd80      	pop	{r7, pc}
 8001b66:	bf00      	nop
 8001b68:	20000b98 	.word	0x20000b98

08001b6c <ssd1306_SetContrast>:
        }
    }
    return;
}

void ssd1306_SetContrast(const uint8_t value) {
 8001b6c:	b580      	push	{r7, lr}
 8001b6e:	b084      	sub	sp, #16
 8001b70:	af00      	add	r7, sp, #0
 8001b72:	4603      	mov	r3, r0
 8001b74:	71fb      	strb	r3, [r7, #7]
    const uint8_t kSetContrastControlRegister = 0x81;
 8001b76:	2381      	movs	r3, #129	; 0x81
 8001b78:	73fb      	strb	r3, [r7, #15]
    ssd1306_WriteCommand(kSetContrastControlRegister);
 8001b7a:	7bfb      	ldrb	r3, [r7, #15]
 8001b7c:	4618      	mov	r0, r3
 8001b7e:	f7ff ff0d 	bl	800199c <ssd1306_WriteCommand>
    ssd1306_WriteCommand(value);
 8001b82:	79fb      	ldrb	r3, [r7, #7]
 8001b84:	4618      	mov	r0, r3
 8001b86:	f7ff ff09 	bl	800199c <ssd1306_WriteCommand>
}
 8001b8a:	bf00      	nop
 8001b8c:	3710      	adds	r7, #16
 8001b8e:	46bd      	mov	sp, r7
 8001b90:	bd80      	pop	{r7, pc}
	...

08001b94 <ssd1306_SetDisplayOn>:

void ssd1306_SetDisplayOn(const uint8_t on) {
 8001b94:	b580      	push	{r7, lr}
 8001b96:	b084      	sub	sp, #16
 8001b98:	af00      	add	r7, sp, #0
 8001b9a:	4603      	mov	r3, r0
 8001b9c:	71fb      	strb	r3, [r7, #7]
    uint8_t value;
    if (on) {
 8001b9e:	79fb      	ldrb	r3, [r7, #7]
 8001ba0:	2b00      	cmp	r3, #0
 8001ba2:	d005      	beq.n	8001bb0 <ssd1306_SetDisplayOn+0x1c>
        value = 0xAF;   // Display on
 8001ba4:	23af      	movs	r3, #175	; 0xaf
 8001ba6:	73fb      	strb	r3, [r7, #15]
        SSD1306.DisplayOn = 1;
 8001ba8:	4b08      	ldr	r3, [pc, #32]	; (8001bcc <ssd1306_SetDisplayOn+0x38>)
 8001baa:	2201      	movs	r2, #1
 8001bac:	715a      	strb	r2, [r3, #5]
 8001bae:	e004      	b.n	8001bba <ssd1306_SetDisplayOn+0x26>
    } else {
        value = 0xAE;   // Display off
 8001bb0:	23ae      	movs	r3, #174	; 0xae
 8001bb2:	73fb      	strb	r3, [r7, #15]
        SSD1306.DisplayOn = 0;
 8001bb4:	4b05      	ldr	r3, [pc, #20]	; (8001bcc <ssd1306_SetDisplayOn+0x38>)
 8001bb6:	2200      	movs	r2, #0
 8001bb8:	715a      	strb	r2, [r3, #5]
    }
    ssd1306_WriteCommand(value);
 8001bba:	7bfb      	ldrb	r3, [r7, #15]
 8001bbc:	4618      	mov	r0, r3
 8001bbe:	f7ff feed 	bl	800199c <ssd1306_WriteCommand>
}
 8001bc2:	bf00      	nop
 8001bc4:	3710      	adds	r7, #16
 8001bc6:	46bd      	mov	sp, r7
 8001bc8:	bd80      	pop	{r7, pc}
 8001bca:	bf00      	nop
 8001bcc:	20000f98 	.word	0x20000f98

08001bd0 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001bd0:	b480      	push	{r7}
 8001bd2:	b083      	sub	sp, #12
 8001bd4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001bd6:	4b0f      	ldr	r3, [pc, #60]	; (8001c14 <HAL_MspInit+0x44>)
 8001bd8:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001bda:	4a0e      	ldr	r2, [pc, #56]	; (8001c14 <HAL_MspInit+0x44>)
 8001bdc:	f043 0301 	orr.w	r3, r3, #1
 8001be0:	6613      	str	r3, [r2, #96]	; 0x60
 8001be2:	4b0c      	ldr	r3, [pc, #48]	; (8001c14 <HAL_MspInit+0x44>)
 8001be4:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001be6:	f003 0301 	and.w	r3, r3, #1
 8001bea:	607b      	str	r3, [r7, #4]
 8001bec:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8001bee:	4b09      	ldr	r3, [pc, #36]	; (8001c14 <HAL_MspInit+0x44>)
 8001bf0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001bf2:	4a08      	ldr	r2, [pc, #32]	; (8001c14 <HAL_MspInit+0x44>)
 8001bf4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001bf8:	6593      	str	r3, [r2, #88]	; 0x58
 8001bfa:	4b06      	ldr	r3, [pc, #24]	; (8001c14 <HAL_MspInit+0x44>)
 8001bfc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001bfe:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001c02:	603b      	str	r3, [r7, #0]
 8001c04:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001c06:	bf00      	nop
 8001c08:	370c      	adds	r7, #12
 8001c0a:	46bd      	mov	sp, r7
 8001c0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c10:	4770      	bx	lr
 8001c12:	bf00      	nop
 8001c14:	40021000 	.word	0x40021000

08001c18 <HAL_DFSDM_ChannelMspInit>:
* This function configures the hardware resources used in this example
* @param hdfsdm_channel: DFSDM_Channel handle pointer
* @retval None
*/
void HAL_DFSDM_ChannelMspInit(DFSDM_Channel_HandleTypeDef* hdfsdm_channel)
{
 8001c18:	b580      	push	{r7, lr}
 8001c1a:	b0ac      	sub	sp, #176	; 0xb0
 8001c1c:	af00      	add	r7, sp, #0
 8001c1e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001c20:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 8001c24:	2200      	movs	r2, #0
 8001c26:	601a      	str	r2, [r3, #0]
 8001c28:	605a      	str	r2, [r3, #4]
 8001c2a:	609a      	str	r2, [r3, #8]
 8001c2c:	60da      	str	r2, [r3, #12]
 8001c2e:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8001c30:	f107 0314 	add.w	r3, r7, #20
 8001c34:	2288      	movs	r2, #136	; 0x88
 8001c36:	2100      	movs	r1, #0
 8001c38:	4618      	mov	r0, r3
 8001c3a:	f005 f9cd 	bl	8006fd8 <memset>
  if(DFSDM1_Init == 0)
 8001c3e:	4b25      	ldr	r3, [pc, #148]	; (8001cd4 <HAL_DFSDM_ChannelMspInit+0xbc>)
 8001c40:	681b      	ldr	r3, [r3, #0]
 8001c42:	2b00      	cmp	r3, #0
 8001c44:	d142      	bne.n	8001ccc <HAL_DFSDM_ChannelMspInit+0xb4>

  /* USER CODE END DFSDM1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_DFSDM1;
 8001c46:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8001c4a:	617b      	str	r3, [r7, #20]
    PeriphClkInit.Dfsdm1ClockSelection = RCC_DFSDM1CLKSOURCE_PCLK;
 8001c4c:	2300      	movs	r3, #0
 8001c4e:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8001c52:	f107 0314 	add.w	r3, r7, #20
 8001c56:	4618      	mov	r0, r3
 8001c58:	f003 fbfe 	bl	8005458 <HAL_RCCEx_PeriphCLKConfig>
 8001c5c:	4603      	mov	r3, r0
 8001c5e:	2b00      	cmp	r3, #0
 8001c60:	d001      	beq.n	8001c66 <HAL_DFSDM_ChannelMspInit+0x4e>
    {
      Error_Handler();
 8001c62:	f7ff fe8f 	bl	8001984 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_DFSDM1_CLK_ENABLE();
 8001c66:	4b1c      	ldr	r3, [pc, #112]	; (8001cd8 <HAL_DFSDM_ChannelMspInit+0xc0>)
 8001c68:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001c6a:	4a1b      	ldr	r2, [pc, #108]	; (8001cd8 <HAL_DFSDM_ChannelMspInit+0xc0>)
 8001c6c:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8001c70:	6613      	str	r3, [r2, #96]	; 0x60
 8001c72:	4b19      	ldr	r3, [pc, #100]	; (8001cd8 <HAL_DFSDM_ChannelMspInit+0xc0>)
 8001c74:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001c76:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8001c7a:	613b      	str	r3, [r7, #16]
 8001c7c:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOE_CLK_ENABLE();
 8001c7e:	4b16      	ldr	r3, [pc, #88]	; (8001cd8 <HAL_DFSDM_ChannelMspInit+0xc0>)
 8001c80:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001c82:	4a15      	ldr	r2, [pc, #84]	; (8001cd8 <HAL_DFSDM_ChannelMspInit+0xc0>)
 8001c84:	f043 0310 	orr.w	r3, r3, #16
 8001c88:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001c8a:	4b13      	ldr	r3, [pc, #76]	; (8001cd8 <HAL_DFSDM_ChannelMspInit+0xc0>)
 8001c8c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001c8e:	f003 0310 	and.w	r3, r3, #16
 8001c92:	60fb      	str	r3, [r7, #12]
 8001c94:	68fb      	ldr	r3, [r7, #12]
    /**DFSDM1 GPIO Configuration
    PE7     ------> DFSDM1_DATIN2
    PE9     ------> DFSDM1_CKOUT
    */
    GPIO_InitStruct.Pin = DFSDM1_DATIN2_Pin|DFSDM1_CKOUT_Pin;
 8001c96:	f44f 7320 	mov.w	r3, #640	; 0x280
 8001c9a:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001c9e:	2302      	movs	r3, #2
 8001ca0:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001ca4:	2300      	movs	r3, #0
 8001ca6:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001caa:	2300      	movs	r3, #0
 8001cac:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
    GPIO_InitStruct.Alternate = GPIO_AF6_DFSDM1;
 8001cb0:	2306      	movs	r3, #6
 8001cb2:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8001cb6:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 8001cba:	4619      	mov	r1, r3
 8001cbc:	4807      	ldr	r0, [pc, #28]	; (8001cdc <HAL_DFSDM_ChannelMspInit+0xc4>)
 8001cbe:	f001 fa3f 	bl	8003140 <HAL_GPIO_Init>

  /* USER CODE BEGIN DFSDM1_MspInit 1 */

  /* USER CODE END DFSDM1_MspInit 1 */
  DFSDM1_Init++;
 8001cc2:	4b04      	ldr	r3, [pc, #16]	; (8001cd4 <HAL_DFSDM_ChannelMspInit+0xbc>)
 8001cc4:	681b      	ldr	r3, [r3, #0]
 8001cc6:	3301      	adds	r3, #1
 8001cc8:	4a02      	ldr	r2, [pc, #8]	; (8001cd4 <HAL_DFSDM_ChannelMspInit+0xbc>)
 8001cca:	6013      	str	r3, [r2, #0]
  }

}
 8001ccc:	bf00      	nop
 8001cce:	37b0      	adds	r7, #176	; 0xb0
 8001cd0:	46bd      	mov	sp, r7
 8001cd2:	bd80      	pop	{r7, pc}
 8001cd4:	20000fa0 	.word	0x20000fa0
 8001cd8:	40021000 	.word	0x40021000
 8001cdc:	48001000 	.word	0x48001000

08001ce0 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8001ce0:	b580      	push	{r7, lr}
 8001ce2:	b0ae      	sub	sp, #184	; 0xb8
 8001ce4:	af00      	add	r7, sp, #0
 8001ce6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001ce8:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
 8001cec:	2200      	movs	r2, #0
 8001cee:	601a      	str	r2, [r3, #0]
 8001cf0:	605a      	str	r2, [r3, #4]
 8001cf2:	609a      	str	r2, [r3, #8]
 8001cf4:	60da      	str	r2, [r3, #12]
 8001cf6:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8001cf8:	f107 031c 	add.w	r3, r7, #28
 8001cfc:	2288      	movs	r2, #136	; 0x88
 8001cfe:	2100      	movs	r1, #0
 8001d00:	4618      	mov	r0, r3
 8001d02:	f005 f969 	bl	8006fd8 <memset>
  if(hi2c->Instance==I2C1)
 8001d06:	687b      	ldr	r3, [r7, #4]
 8001d08:	681b      	ldr	r3, [r3, #0]
 8001d0a:	4a42      	ldr	r2, [pc, #264]	; (8001e14 <HAL_I2C_MspInit+0x134>)
 8001d0c:	4293      	cmp	r3, r2
 8001d0e:	d13c      	bne.n	8001d8a <HAL_I2C_MspInit+0xaa>

  /* USER CODE END I2C1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_I2C1;
 8001d10:	2340      	movs	r3, #64	; 0x40
 8001d12:	61fb      	str	r3, [r7, #28]
    PeriphClkInit.I2c1ClockSelection = RCC_I2C1CLKSOURCE_PCLK1;
 8001d14:	2300      	movs	r3, #0
 8001d16:	66fb      	str	r3, [r7, #108]	; 0x6c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8001d18:	f107 031c 	add.w	r3, r7, #28
 8001d1c:	4618      	mov	r0, r3
 8001d1e:	f003 fb9b 	bl	8005458 <HAL_RCCEx_PeriphCLKConfig>
 8001d22:	4603      	mov	r3, r0
 8001d24:	2b00      	cmp	r3, #0
 8001d26:	d001      	beq.n	8001d2c <HAL_I2C_MspInit+0x4c>
    {
      Error_Handler();
 8001d28:	f7ff fe2c 	bl	8001984 <Error_Handler>
    }

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001d2c:	4b3a      	ldr	r3, [pc, #232]	; (8001e18 <HAL_I2C_MspInit+0x138>)
 8001d2e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001d30:	4a39      	ldr	r2, [pc, #228]	; (8001e18 <HAL_I2C_MspInit+0x138>)
 8001d32:	f043 0302 	orr.w	r3, r3, #2
 8001d36:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001d38:	4b37      	ldr	r3, [pc, #220]	; (8001e18 <HAL_I2C_MspInit+0x138>)
 8001d3a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001d3c:	f003 0302 	and.w	r3, r3, #2
 8001d40:	61bb      	str	r3, [r7, #24]
 8001d42:	69bb      	ldr	r3, [r7, #24]
    /**I2C1 GPIO Configuration
    PB8     ------> I2C1_SCL
    PB9     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = ARD_D15_Pin|GPIO_PIN_9;
 8001d44:	f44f 7340 	mov.w	r3, #768	; 0x300
 8001d48:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8001d4c:	2312      	movs	r3, #18
 8001d4e:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001d52:	2300      	movs	r3, #0
 8001d54:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001d58:	2303      	movs	r3, #3
 8001d5a:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8001d5e:	2304      	movs	r3, #4
 8001d60:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001d64:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
 8001d68:	4619      	mov	r1, r3
 8001d6a:	482c      	ldr	r0, [pc, #176]	; (8001e1c <HAL_I2C_MspInit+0x13c>)
 8001d6c:	f001 f9e8 	bl	8003140 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8001d70:	4b29      	ldr	r3, [pc, #164]	; (8001e18 <HAL_I2C_MspInit+0x138>)
 8001d72:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001d74:	4a28      	ldr	r2, [pc, #160]	; (8001e18 <HAL_I2C_MspInit+0x138>)
 8001d76:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8001d7a:	6593      	str	r3, [r2, #88]	; 0x58
 8001d7c:	4b26      	ldr	r3, [pc, #152]	; (8001e18 <HAL_I2C_MspInit+0x138>)
 8001d7e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001d80:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001d84:	617b      	str	r3, [r7, #20]
 8001d86:	697b      	ldr	r3, [r7, #20]
  /* USER CODE BEGIN I2C2_MspInit 1 */

  /* USER CODE END I2C2_MspInit 1 */
  }

}
 8001d88:	e040      	b.n	8001e0c <HAL_I2C_MspInit+0x12c>
  else if(hi2c->Instance==I2C2)
 8001d8a:	687b      	ldr	r3, [r7, #4]
 8001d8c:	681b      	ldr	r3, [r3, #0]
 8001d8e:	4a24      	ldr	r2, [pc, #144]	; (8001e20 <HAL_I2C_MspInit+0x140>)
 8001d90:	4293      	cmp	r3, r2
 8001d92:	d13b      	bne.n	8001e0c <HAL_I2C_MspInit+0x12c>
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_I2C2;
 8001d94:	2380      	movs	r3, #128	; 0x80
 8001d96:	61fb      	str	r3, [r7, #28]
    PeriphClkInit.I2c2ClockSelection = RCC_I2C2CLKSOURCE_PCLK1;
 8001d98:	2300      	movs	r3, #0
 8001d9a:	673b      	str	r3, [r7, #112]	; 0x70
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8001d9c:	f107 031c 	add.w	r3, r7, #28
 8001da0:	4618      	mov	r0, r3
 8001da2:	f003 fb59 	bl	8005458 <HAL_RCCEx_PeriphCLKConfig>
 8001da6:	4603      	mov	r3, r0
 8001da8:	2b00      	cmp	r3, #0
 8001daa:	d001      	beq.n	8001db0 <HAL_I2C_MspInit+0xd0>
      Error_Handler();
 8001dac:	f7ff fdea 	bl	8001984 <Error_Handler>
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001db0:	4b19      	ldr	r3, [pc, #100]	; (8001e18 <HAL_I2C_MspInit+0x138>)
 8001db2:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001db4:	4a18      	ldr	r2, [pc, #96]	; (8001e18 <HAL_I2C_MspInit+0x138>)
 8001db6:	f043 0302 	orr.w	r3, r3, #2
 8001dba:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001dbc:	4b16      	ldr	r3, [pc, #88]	; (8001e18 <HAL_I2C_MspInit+0x138>)
 8001dbe:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001dc0:	f003 0302 	and.w	r3, r3, #2
 8001dc4:	613b      	str	r3, [r7, #16]
 8001dc6:	693b      	ldr	r3, [r7, #16]
    GPIO_InitStruct.Pin = INTERNAL_I2C2_SCL_Pin|INTERNAL_I2C2_SDA_Pin;
 8001dc8:	f44f 6340 	mov.w	r3, #3072	; 0xc00
 8001dcc:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8001dd0:	2312      	movs	r3, #18
 8001dd2:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8001dd6:	2301      	movs	r3, #1
 8001dd8:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001ddc:	2303      	movs	r3, #3
 8001dde:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C2;
 8001de2:	2304      	movs	r3, #4
 8001de4:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001de8:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
 8001dec:	4619      	mov	r1, r3
 8001dee:	480b      	ldr	r0, [pc, #44]	; (8001e1c <HAL_I2C_MspInit+0x13c>)
 8001df0:	f001 f9a6 	bl	8003140 <HAL_GPIO_Init>
    __HAL_RCC_I2C2_CLK_ENABLE();
 8001df4:	4b08      	ldr	r3, [pc, #32]	; (8001e18 <HAL_I2C_MspInit+0x138>)
 8001df6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001df8:	4a07      	ldr	r2, [pc, #28]	; (8001e18 <HAL_I2C_MspInit+0x138>)
 8001dfa:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8001dfe:	6593      	str	r3, [r2, #88]	; 0x58
 8001e00:	4b05      	ldr	r3, [pc, #20]	; (8001e18 <HAL_I2C_MspInit+0x138>)
 8001e02:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001e04:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001e08:	60fb      	str	r3, [r7, #12]
 8001e0a:	68fb      	ldr	r3, [r7, #12]
}
 8001e0c:	bf00      	nop
 8001e0e:	37b8      	adds	r7, #184	; 0xb8
 8001e10:	46bd      	mov	sp, r7
 8001e12:	bd80      	pop	{r7, pc}
 8001e14:	40005400 	.word	0x40005400
 8001e18:	40021000 	.word	0x40021000
 8001e1c:	48000400 	.word	0x48000400
 8001e20:	40005800 	.word	0x40005800

08001e24 <HAL_I2C_MspDeInit>:
* This function freeze the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspDeInit(I2C_HandleTypeDef* hi2c)
{
 8001e24:	b580      	push	{r7, lr}
 8001e26:	b082      	sub	sp, #8
 8001e28:	af00      	add	r7, sp, #0
 8001e2a:	6078      	str	r0, [r7, #4]
  if(hi2c->Instance==I2C1)
 8001e2c:	687b      	ldr	r3, [r7, #4]
 8001e2e:	681b      	ldr	r3, [r3, #0]
 8001e30:	4a16      	ldr	r2, [pc, #88]	; (8001e8c <HAL_I2C_MspDeInit+0x68>)
 8001e32:	4293      	cmp	r3, r2
 8001e34:	d110      	bne.n	8001e58 <HAL_I2C_MspDeInit+0x34>
  {
  /* USER CODE BEGIN I2C1_MspDeInit 0 */

  /* USER CODE END I2C1_MspDeInit 0 */
    /* Peripheral clock disable */
    __HAL_RCC_I2C1_CLK_DISABLE();
 8001e36:	4b16      	ldr	r3, [pc, #88]	; (8001e90 <HAL_I2C_MspDeInit+0x6c>)
 8001e38:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001e3a:	4a15      	ldr	r2, [pc, #84]	; (8001e90 <HAL_I2C_MspDeInit+0x6c>)
 8001e3c:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8001e40:	6593      	str	r3, [r2, #88]	; 0x58

    /**I2C1 GPIO Configuration
    PB8     ------> I2C1_SCL
    PB9     ------> I2C1_SDA
    */
    HAL_GPIO_DeInit(ARD_D15_GPIO_Port, ARD_D15_Pin);
 8001e42:	f44f 7180 	mov.w	r1, #256	; 0x100
 8001e46:	4813      	ldr	r0, [pc, #76]	; (8001e94 <HAL_I2C_MspDeInit+0x70>)
 8001e48:	f001 fb24 	bl	8003494 <HAL_GPIO_DeInit>

    HAL_GPIO_DeInit(GPIOB, GPIO_PIN_9);
 8001e4c:	f44f 7100 	mov.w	r1, #512	; 0x200
 8001e50:	4810      	ldr	r0, [pc, #64]	; (8001e94 <HAL_I2C_MspDeInit+0x70>)
 8001e52:	f001 fb1f 	bl	8003494 <HAL_GPIO_DeInit>
  /* USER CODE BEGIN I2C2_MspDeInit 1 */

  /* USER CODE END I2C2_MspDeInit 1 */
  }

}
 8001e56:	e014      	b.n	8001e82 <HAL_I2C_MspDeInit+0x5e>
  else if(hi2c->Instance==I2C2)
 8001e58:	687b      	ldr	r3, [r7, #4]
 8001e5a:	681b      	ldr	r3, [r3, #0]
 8001e5c:	4a0e      	ldr	r2, [pc, #56]	; (8001e98 <HAL_I2C_MspDeInit+0x74>)
 8001e5e:	4293      	cmp	r3, r2
 8001e60:	d10f      	bne.n	8001e82 <HAL_I2C_MspDeInit+0x5e>
    __HAL_RCC_I2C2_CLK_DISABLE();
 8001e62:	4b0b      	ldr	r3, [pc, #44]	; (8001e90 <HAL_I2C_MspDeInit+0x6c>)
 8001e64:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001e66:	4a0a      	ldr	r2, [pc, #40]	; (8001e90 <HAL_I2C_MspDeInit+0x6c>)
 8001e68:	f423 0380 	bic.w	r3, r3, #4194304	; 0x400000
 8001e6c:	6593      	str	r3, [r2, #88]	; 0x58
    HAL_GPIO_DeInit(INTERNAL_I2C2_SCL_GPIO_Port, INTERNAL_I2C2_SCL_Pin);
 8001e6e:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8001e72:	4808      	ldr	r0, [pc, #32]	; (8001e94 <HAL_I2C_MspDeInit+0x70>)
 8001e74:	f001 fb0e 	bl	8003494 <HAL_GPIO_DeInit>
    HAL_GPIO_DeInit(INTERNAL_I2C2_SDA_GPIO_Port, INTERNAL_I2C2_SDA_Pin);
 8001e78:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8001e7c:	4805      	ldr	r0, [pc, #20]	; (8001e94 <HAL_I2C_MspDeInit+0x70>)
 8001e7e:	f001 fb09 	bl	8003494 <HAL_GPIO_DeInit>
}
 8001e82:	bf00      	nop
 8001e84:	3708      	adds	r7, #8
 8001e86:	46bd      	mov	sp, r7
 8001e88:	bd80      	pop	{r7, pc}
 8001e8a:	bf00      	nop
 8001e8c:	40005400 	.word	0x40005400
 8001e90:	40021000 	.word	0x40021000
 8001e94:	48000400 	.word	0x48000400
 8001e98:	40005800 	.word	0x40005800

08001e9c <HAL_QSPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hqspi: QSPI handle pointer
* @retval None
*/
void HAL_QSPI_MspInit(QSPI_HandleTypeDef* hqspi)
{
 8001e9c:	b580      	push	{r7, lr}
 8001e9e:	b08a      	sub	sp, #40	; 0x28
 8001ea0:	af00      	add	r7, sp, #0
 8001ea2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001ea4:	f107 0314 	add.w	r3, r7, #20
 8001ea8:	2200      	movs	r2, #0
 8001eaa:	601a      	str	r2, [r3, #0]
 8001eac:	605a      	str	r2, [r3, #4]
 8001eae:	609a      	str	r2, [r3, #8]
 8001eb0:	60da      	str	r2, [r3, #12]
 8001eb2:	611a      	str	r2, [r3, #16]
  if(hqspi->Instance==QUADSPI)
 8001eb4:	687b      	ldr	r3, [r7, #4]
 8001eb6:	681b      	ldr	r3, [r3, #0]
 8001eb8:	4a17      	ldr	r2, [pc, #92]	; (8001f18 <HAL_QSPI_MspInit+0x7c>)
 8001eba:	4293      	cmp	r3, r2
 8001ebc:	d128      	bne.n	8001f10 <HAL_QSPI_MspInit+0x74>
  {
  /* USER CODE BEGIN QUADSPI_MspInit 0 */

  /* USER CODE END QUADSPI_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_QSPI_CLK_ENABLE();
 8001ebe:	4b17      	ldr	r3, [pc, #92]	; (8001f1c <HAL_QSPI_MspInit+0x80>)
 8001ec0:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8001ec2:	4a16      	ldr	r2, [pc, #88]	; (8001f1c <HAL_QSPI_MspInit+0x80>)
 8001ec4:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001ec8:	6513      	str	r3, [r2, #80]	; 0x50
 8001eca:	4b14      	ldr	r3, [pc, #80]	; (8001f1c <HAL_QSPI_MspInit+0x80>)
 8001ecc:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8001ece:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001ed2:	613b      	str	r3, [r7, #16]
 8001ed4:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOE_CLK_ENABLE();
 8001ed6:	4b11      	ldr	r3, [pc, #68]	; (8001f1c <HAL_QSPI_MspInit+0x80>)
 8001ed8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001eda:	4a10      	ldr	r2, [pc, #64]	; (8001f1c <HAL_QSPI_MspInit+0x80>)
 8001edc:	f043 0310 	orr.w	r3, r3, #16
 8001ee0:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001ee2:	4b0e      	ldr	r3, [pc, #56]	; (8001f1c <HAL_QSPI_MspInit+0x80>)
 8001ee4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001ee6:	f003 0310 	and.w	r3, r3, #16
 8001eea:	60fb      	str	r3, [r7, #12]
 8001eec:	68fb      	ldr	r3, [r7, #12]
    PE12     ------> QUADSPI_BK1_IO0
    PE13     ------> QUADSPI_BK1_IO1
    PE14     ------> QUADSPI_BK1_IO2
    PE15     ------> QUADSPI_BK1_IO3
    */
    GPIO_InitStruct.Pin = QUADSPI_CLK_Pin|QUADSPI_NCS_Pin|OQUADSPI_BK1_IO0_Pin|QUADSPI_BK1_IO1_Pin
 8001eee:	f44f 437c 	mov.w	r3, #64512	; 0xfc00
 8001ef2:	617b      	str	r3, [r7, #20]
                          |QUAD_SPI_BK1_IO2_Pin|QUAD_SPI_BK1_IO3_Pin;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001ef4:	2302      	movs	r3, #2
 8001ef6:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001ef8:	2300      	movs	r3, #0
 8001efa:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001efc:	2303      	movs	r3, #3
 8001efe:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF10_QUADSPI;
 8001f00:	230a      	movs	r3, #10
 8001f02:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8001f04:	f107 0314 	add.w	r3, r7, #20
 8001f08:	4619      	mov	r1, r3
 8001f0a:	4805      	ldr	r0, [pc, #20]	; (8001f20 <HAL_QSPI_MspInit+0x84>)
 8001f0c:	f001 f918 	bl	8003140 <HAL_GPIO_Init>
  /* USER CODE BEGIN QUADSPI_MspInit 1 */

  /* USER CODE END QUADSPI_MspInit 1 */
  }

}
 8001f10:	bf00      	nop
 8001f12:	3728      	adds	r7, #40	; 0x28
 8001f14:	46bd      	mov	sp, r7
 8001f16:	bd80      	pop	{r7, pc}
 8001f18:	a0001000 	.word	0xa0001000
 8001f1c:	40021000 	.word	0x40021000
 8001f20:	48001000 	.word	0x48001000

08001f24 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8001f24:	b580      	push	{r7, lr}
 8001f26:	b08a      	sub	sp, #40	; 0x28
 8001f28:	af00      	add	r7, sp, #0
 8001f2a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001f2c:	f107 0314 	add.w	r3, r7, #20
 8001f30:	2200      	movs	r2, #0
 8001f32:	601a      	str	r2, [r3, #0]
 8001f34:	605a      	str	r2, [r3, #4]
 8001f36:	609a      	str	r2, [r3, #8]
 8001f38:	60da      	str	r2, [r3, #12]
 8001f3a:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI3)
 8001f3c:	687b      	ldr	r3, [r7, #4]
 8001f3e:	681b      	ldr	r3, [r3, #0]
 8001f40:	4a17      	ldr	r2, [pc, #92]	; (8001fa0 <HAL_SPI_MspInit+0x7c>)
 8001f42:	4293      	cmp	r3, r2
 8001f44:	d128      	bne.n	8001f98 <HAL_SPI_MspInit+0x74>
  {
  /* USER CODE BEGIN SPI3_MspInit 0 */

  /* USER CODE END SPI3_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI3_CLK_ENABLE();
 8001f46:	4b17      	ldr	r3, [pc, #92]	; (8001fa4 <HAL_SPI_MspInit+0x80>)
 8001f48:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001f4a:	4a16      	ldr	r2, [pc, #88]	; (8001fa4 <HAL_SPI_MspInit+0x80>)
 8001f4c:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8001f50:	6593      	str	r3, [r2, #88]	; 0x58
 8001f52:	4b14      	ldr	r3, [pc, #80]	; (8001fa4 <HAL_SPI_MspInit+0x80>)
 8001f54:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001f56:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8001f5a:	613b      	str	r3, [r7, #16]
 8001f5c:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8001f5e:	4b11      	ldr	r3, [pc, #68]	; (8001fa4 <HAL_SPI_MspInit+0x80>)
 8001f60:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001f62:	4a10      	ldr	r2, [pc, #64]	; (8001fa4 <HAL_SPI_MspInit+0x80>)
 8001f64:	f043 0304 	orr.w	r3, r3, #4
 8001f68:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001f6a:	4b0e      	ldr	r3, [pc, #56]	; (8001fa4 <HAL_SPI_MspInit+0x80>)
 8001f6c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001f6e:	f003 0304 	and.w	r3, r3, #4
 8001f72:	60fb      	str	r3, [r7, #12]
 8001f74:	68fb      	ldr	r3, [r7, #12]
    /**SPI3 GPIO Configuration
    PC10     ------> SPI3_SCK
    PC11     ------> SPI3_MISO
    PC12     ------> SPI3_MOSI
    */
    GPIO_InitStruct.Pin = INTERNAL_SPI3_SCK_Pin|INTERNAL_SPI3_MISO_Pin|INTERNAL_SPI3_MOSI_Pin;
 8001f76:	f44f 53e0 	mov.w	r3, #7168	; 0x1c00
 8001f7a:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001f7c:	2302      	movs	r3, #2
 8001f7e:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001f80:	2300      	movs	r3, #0
 8001f82:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001f84:	2303      	movs	r3, #3
 8001f86:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 8001f88:	2306      	movs	r3, #6
 8001f8a:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001f8c:	f107 0314 	add.w	r3, r7, #20
 8001f90:	4619      	mov	r1, r3
 8001f92:	4805      	ldr	r0, [pc, #20]	; (8001fa8 <HAL_SPI_MspInit+0x84>)
 8001f94:	f001 f8d4 	bl	8003140 <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI3_MspInit 1 */

  /* USER CODE END SPI3_MspInit 1 */
  }

}
 8001f98:	bf00      	nop
 8001f9a:	3728      	adds	r7, #40	; 0x28
 8001f9c:	46bd      	mov	sp, r7
 8001f9e:	bd80      	pop	{r7, pc}
 8001fa0:	40003c00 	.word	0x40003c00
 8001fa4:	40021000 	.word	0x40021000
 8001fa8:	48000800 	.word	0x48000800

08001fac <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8001fac:	b580      	push	{r7, lr}
 8001fae:	b0ae      	sub	sp, #184	; 0xb8
 8001fb0:	af00      	add	r7, sp, #0
 8001fb2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001fb4:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
 8001fb8:	2200      	movs	r2, #0
 8001fba:	601a      	str	r2, [r3, #0]
 8001fbc:	605a      	str	r2, [r3, #4]
 8001fbe:	609a      	str	r2, [r3, #8]
 8001fc0:	60da      	str	r2, [r3, #12]
 8001fc2:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8001fc4:	f107 031c 	add.w	r3, r7, #28
 8001fc8:	2288      	movs	r2, #136	; 0x88
 8001fca:	2100      	movs	r1, #0
 8001fcc:	4618      	mov	r0, r3
 8001fce:	f005 f803 	bl	8006fd8 <memset>
  if(huart->Instance==USART1)
 8001fd2:	687b      	ldr	r3, [r7, #4]
 8001fd4:	681b      	ldr	r3, [r3, #0]
 8001fd6:	4a42      	ldr	r2, [pc, #264]	; (80020e0 <HAL_UART_MspInit+0x134>)
 8001fd8:	4293      	cmp	r3, r2
 8001fda:	d13b      	bne.n	8002054 <HAL_UART_MspInit+0xa8>

  /* USER CODE END USART1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART1;
 8001fdc:	2301      	movs	r3, #1
 8001fde:	61fb      	str	r3, [r7, #28]
    PeriphClkInit.Usart1ClockSelection = RCC_USART1CLKSOURCE_PCLK2;
 8001fe0:	2300      	movs	r3, #0
 8001fe2:	657b      	str	r3, [r7, #84]	; 0x54
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8001fe4:	f107 031c 	add.w	r3, r7, #28
 8001fe8:	4618      	mov	r0, r3
 8001fea:	f003 fa35 	bl	8005458 <HAL_RCCEx_PeriphCLKConfig>
 8001fee:	4603      	mov	r3, r0
 8001ff0:	2b00      	cmp	r3, #0
 8001ff2:	d001      	beq.n	8001ff8 <HAL_UART_MspInit+0x4c>
    {
      Error_Handler();
 8001ff4:	f7ff fcc6 	bl	8001984 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8001ff8:	4b3a      	ldr	r3, [pc, #232]	; (80020e4 <HAL_UART_MspInit+0x138>)
 8001ffa:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001ffc:	4a39      	ldr	r2, [pc, #228]	; (80020e4 <HAL_UART_MspInit+0x138>)
 8001ffe:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8002002:	6613      	str	r3, [r2, #96]	; 0x60
 8002004:	4b37      	ldr	r3, [pc, #220]	; (80020e4 <HAL_UART_MspInit+0x138>)
 8002006:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002008:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800200c:	61bb      	str	r3, [r7, #24]
 800200e:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8002010:	4b34      	ldr	r3, [pc, #208]	; (80020e4 <HAL_UART_MspInit+0x138>)
 8002012:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002014:	4a33      	ldr	r2, [pc, #204]	; (80020e4 <HAL_UART_MspInit+0x138>)
 8002016:	f043 0302 	orr.w	r3, r3, #2
 800201a:	64d3      	str	r3, [r2, #76]	; 0x4c
 800201c:	4b31      	ldr	r3, [pc, #196]	; (80020e4 <HAL_UART_MspInit+0x138>)
 800201e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002020:	f003 0302 	and.w	r3, r3, #2
 8002024:	617b      	str	r3, [r7, #20]
 8002026:	697b      	ldr	r3, [r7, #20]
    /**USART1 GPIO Configuration
    PB6     ------> USART1_TX
    PB7     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8002028:	23c0      	movs	r3, #192	; 0xc0
 800202a:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800202e:	2302      	movs	r3, #2
 8002030:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002034:	2300      	movs	r3, #0
 8002036:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800203a:	2303      	movs	r3, #3
 800203c:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8002040:	2307      	movs	r3, #7
 8002042:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002046:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
 800204a:	4619      	mov	r1, r3
 800204c:	4826      	ldr	r0, [pc, #152]	; (80020e8 <HAL_UART_MspInit+0x13c>)
 800204e:	f001 f877 	bl	8003140 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }

}
 8002052:	e040      	b.n	80020d6 <HAL_UART_MspInit+0x12a>
  else if(huart->Instance==USART3)
 8002054:	687b      	ldr	r3, [r7, #4]
 8002056:	681b      	ldr	r3, [r3, #0]
 8002058:	4a24      	ldr	r2, [pc, #144]	; (80020ec <HAL_UART_MspInit+0x140>)
 800205a:	4293      	cmp	r3, r2
 800205c:	d13b      	bne.n	80020d6 <HAL_UART_MspInit+0x12a>
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART3;
 800205e:	2304      	movs	r3, #4
 8002060:	61fb      	str	r3, [r7, #28]
    PeriphClkInit.Usart3ClockSelection = RCC_USART3CLKSOURCE_PCLK1;
 8002062:	2300      	movs	r3, #0
 8002064:	65fb      	str	r3, [r7, #92]	; 0x5c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8002066:	f107 031c 	add.w	r3, r7, #28
 800206a:	4618      	mov	r0, r3
 800206c:	f003 f9f4 	bl	8005458 <HAL_RCCEx_PeriphCLKConfig>
 8002070:	4603      	mov	r3, r0
 8002072:	2b00      	cmp	r3, #0
 8002074:	d001      	beq.n	800207a <HAL_UART_MspInit+0xce>
      Error_Handler();
 8002076:	f7ff fc85 	bl	8001984 <Error_Handler>
    __HAL_RCC_USART3_CLK_ENABLE();
 800207a:	4b1a      	ldr	r3, [pc, #104]	; (80020e4 <HAL_UART_MspInit+0x138>)
 800207c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800207e:	4a19      	ldr	r2, [pc, #100]	; (80020e4 <HAL_UART_MspInit+0x138>)
 8002080:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8002084:	6593      	str	r3, [r2, #88]	; 0x58
 8002086:	4b17      	ldr	r3, [pc, #92]	; (80020e4 <HAL_UART_MspInit+0x138>)
 8002088:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800208a:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800208e:	613b      	str	r3, [r7, #16]
 8002090:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 8002092:	4b14      	ldr	r3, [pc, #80]	; (80020e4 <HAL_UART_MspInit+0x138>)
 8002094:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002096:	4a13      	ldr	r2, [pc, #76]	; (80020e4 <HAL_UART_MspInit+0x138>)
 8002098:	f043 0308 	orr.w	r3, r3, #8
 800209c:	64d3      	str	r3, [r2, #76]	; 0x4c
 800209e:	4b11      	ldr	r3, [pc, #68]	; (80020e4 <HAL_UART_MspInit+0x138>)
 80020a0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80020a2:	f003 0308 	and.w	r3, r3, #8
 80020a6:	60fb      	str	r3, [r7, #12]
 80020a8:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = INTERNAL_UART3_TX_Pin|INTERNAL_UART3_RX_Pin;
 80020aa:	f44f 7340 	mov.w	r3, #768	; 0x300
 80020ae:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80020b2:	2302      	movs	r3, #2
 80020b4:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80020b8:	2300      	movs	r3, #0
 80020ba:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80020be:	2303      	movs	r3, #3
 80020c0:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 80020c4:	2307      	movs	r3, #7
 80020c6:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80020ca:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
 80020ce:	4619      	mov	r1, r3
 80020d0:	4807      	ldr	r0, [pc, #28]	; (80020f0 <HAL_UART_MspInit+0x144>)
 80020d2:	f001 f835 	bl	8003140 <HAL_GPIO_Init>
}
 80020d6:	bf00      	nop
 80020d8:	37b8      	adds	r7, #184	; 0xb8
 80020da:	46bd      	mov	sp, r7
 80020dc:	bd80      	pop	{r7, pc}
 80020de:	bf00      	nop
 80020e0:	40013800 	.word	0x40013800
 80020e4:	40021000 	.word	0x40021000
 80020e8:	48000400 	.word	0x48000400
 80020ec:	40004800 	.word	0x40004800
 80020f0:	48000c00 	.word	0x48000c00

080020f4 <HAL_PCD_MspInit>:
* This function configures the hardware resources used in this example
* @param hpcd: PCD handle pointer
* @retval None
*/
void HAL_PCD_MspInit(PCD_HandleTypeDef* hpcd)
{
 80020f4:	b580      	push	{r7, lr}
 80020f6:	b0ac      	sub	sp, #176	; 0xb0
 80020f8:	af00      	add	r7, sp, #0
 80020fa:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80020fc:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 8002100:	2200      	movs	r2, #0
 8002102:	601a      	str	r2, [r3, #0]
 8002104:	605a      	str	r2, [r3, #4]
 8002106:	609a      	str	r2, [r3, #8]
 8002108:	60da      	str	r2, [r3, #12]
 800210a:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 800210c:	f107 0314 	add.w	r3, r7, #20
 8002110:	2288      	movs	r2, #136	; 0x88
 8002112:	2100      	movs	r1, #0
 8002114:	4618      	mov	r0, r3
 8002116:	f004 ff5f 	bl	8006fd8 <memset>
  if(hpcd->Instance==USB_OTG_FS)
 800211a:	687b      	ldr	r3, [r7, #4]
 800211c:	681b      	ldr	r3, [r3, #0]
 800211e:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8002122:	d17c      	bne.n	800221e <HAL_PCD_MspInit+0x12a>

  /* USER CODE END USB_OTG_FS_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USB;
 8002124:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8002128:	617b      	str	r3, [r7, #20]
    PeriphClkInit.UsbClockSelection = RCC_USBCLKSOURCE_PLLSAI1;
 800212a:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
 800212e:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
    PeriphClkInit.PLLSAI1.PLLSAI1Source = RCC_PLLSOURCE_MSI;
 8002132:	2301      	movs	r3, #1
 8002134:	61bb      	str	r3, [r7, #24]
    PeriphClkInit.PLLSAI1.PLLSAI1M = 1;
 8002136:	2301      	movs	r3, #1
 8002138:	61fb      	str	r3, [r7, #28]
    PeriphClkInit.PLLSAI1.PLLSAI1N = 24;
 800213a:	2318      	movs	r3, #24
 800213c:	623b      	str	r3, [r7, #32]
    PeriphClkInit.PLLSAI1.PLLSAI1P = RCC_PLLP_DIV7;
 800213e:	2307      	movs	r3, #7
 8002140:	627b      	str	r3, [r7, #36]	; 0x24
    PeriphClkInit.PLLSAI1.PLLSAI1Q = RCC_PLLQ_DIV2;
 8002142:	2302      	movs	r3, #2
 8002144:	62bb      	str	r3, [r7, #40]	; 0x28
    PeriphClkInit.PLLSAI1.PLLSAI1R = RCC_PLLR_DIV2;
 8002146:	2302      	movs	r3, #2
 8002148:	62fb      	str	r3, [r7, #44]	; 0x2c
    PeriphClkInit.PLLSAI1.PLLSAI1ClockOut = RCC_PLLSAI1_48M2CLK;
 800214a:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 800214e:	633b      	str	r3, [r7, #48]	; 0x30
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8002150:	f107 0314 	add.w	r3, r7, #20
 8002154:	4618      	mov	r0, r3
 8002156:	f003 f97f 	bl	8005458 <HAL_RCCEx_PeriphCLKConfig>
 800215a:	4603      	mov	r3, r0
 800215c:	2b00      	cmp	r3, #0
 800215e:	d001      	beq.n	8002164 <HAL_PCD_MspInit+0x70>
    {
      Error_Handler();
 8002160:	f7ff fc10 	bl	8001984 <Error_Handler>
    }

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002164:	4b30      	ldr	r3, [pc, #192]	; (8002228 <HAL_PCD_MspInit+0x134>)
 8002166:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002168:	4a2f      	ldr	r2, [pc, #188]	; (8002228 <HAL_PCD_MspInit+0x134>)
 800216a:	f043 0301 	orr.w	r3, r3, #1
 800216e:	64d3      	str	r3, [r2, #76]	; 0x4c
 8002170:	4b2d      	ldr	r3, [pc, #180]	; (8002228 <HAL_PCD_MspInit+0x134>)
 8002172:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002174:	f003 0301 	and.w	r3, r3, #1
 8002178:	613b      	str	r3, [r7, #16]
 800217a:	693b      	ldr	r3, [r7, #16]
    PA9     ------> USB_OTG_FS_VBUS
    PA10     ------> USB_OTG_FS_ID
    PA11     ------> USB_OTG_FS_DM
    PA12     ------> USB_OTG_FS_DP
    */
    GPIO_InitStruct.Pin = USB_OTG_FS_VBUS_Pin;
 800217c:	f44f 7300 	mov.w	r3, #512	; 0x200
 8002180:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8002184:	2300      	movs	r3, #0
 8002186:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800218a:	2300      	movs	r3, #0
 800218c:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    HAL_GPIO_Init(USB_OTG_FS_VBUS_GPIO_Port, &GPIO_InitStruct);
 8002190:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 8002194:	4619      	mov	r1, r3
 8002196:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800219a:	f000 ffd1 	bl	8003140 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = USB_OTG_FS_ID_Pin|USB_OTG_FS_DM_Pin|USB_OTG_FS_DP_Pin;
 800219e:	f44f 53e0 	mov.w	r3, #7168	; 0x1c00
 80021a2:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80021a6:	2302      	movs	r3, #2
 80021a8:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80021ac:	2300      	movs	r3, #0
 80021ae:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80021b2:	2303      	movs	r3, #3
 80021b4:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 80021b8:	230a      	movs	r3, #10
 80021ba:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80021be:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 80021c2:	4619      	mov	r1, r3
 80021c4:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80021c8:	f000 ffba 	bl	8003140 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 80021cc:	4b16      	ldr	r3, [pc, #88]	; (8002228 <HAL_PCD_MspInit+0x134>)
 80021ce:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80021d0:	4a15      	ldr	r2, [pc, #84]	; (8002228 <HAL_PCD_MspInit+0x134>)
 80021d2:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 80021d6:	64d3      	str	r3, [r2, #76]	; 0x4c
 80021d8:	4b13      	ldr	r3, [pc, #76]	; (8002228 <HAL_PCD_MspInit+0x134>)
 80021da:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80021dc:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80021e0:	60fb      	str	r3, [r7, #12]
 80021e2:	68fb      	ldr	r3, [r7, #12]

    /* Enable VDDUSB */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 80021e4:	4b10      	ldr	r3, [pc, #64]	; (8002228 <HAL_PCD_MspInit+0x134>)
 80021e6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80021e8:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80021ec:	2b00      	cmp	r3, #0
 80021ee:	d114      	bne.n	800221a <HAL_PCD_MspInit+0x126>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80021f0:	4b0d      	ldr	r3, [pc, #52]	; (8002228 <HAL_PCD_MspInit+0x134>)
 80021f2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80021f4:	4a0c      	ldr	r2, [pc, #48]	; (8002228 <HAL_PCD_MspInit+0x134>)
 80021f6:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80021fa:	6593      	str	r3, [r2, #88]	; 0x58
 80021fc:	4b0a      	ldr	r3, [pc, #40]	; (8002228 <HAL_PCD_MspInit+0x134>)
 80021fe:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002200:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002204:	60bb      	str	r3, [r7, #8]
 8002206:	68bb      	ldr	r3, [r7, #8]
      HAL_PWREx_EnableVddUSB();
 8002208:	f002 fa5a 	bl	80046c0 <HAL_PWREx_EnableVddUSB>
      __HAL_RCC_PWR_CLK_DISABLE();
 800220c:	4b06      	ldr	r3, [pc, #24]	; (8002228 <HAL_PCD_MspInit+0x134>)
 800220e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002210:	4a05      	ldr	r2, [pc, #20]	; (8002228 <HAL_PCD_MspInit+0x134>)
 8002212:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002216:	6593      	str	r3, [r2, #88]	; 0x58
  /* USER CODE BEGIN USB_OTG_FS_MspInit 1 */

  /* USER CODE END USB_OTG_FS_MspInit 1 */
  }

}
 8002218:	e001      	b.n	800221e <HAL_PCD_MspInit+0x12a>
      HAL_PWREx_EnableVddUSB();
 800221a:	f002 fa51 	bl	80046c0 <HAL_PWREx_EnableVddUSB>
}
 800221e:	bf00      	nop
 8002220:	37b0      	adds	r7, #176	; 0xb0
 8002222:	46bd      	mov	sp, r7
 8002224:	bd80      	pop	{r7, pc}
 8002226:	bf00      	nop
 8002228:	40021000 	.word	0x40021000

0800222c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 800222c:	b480      	push	{r7}
 800222e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8002230:	e7fe      	b.n	8002230 <NMI_Handler+0x4>

08002232 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8002232:	b480      	push	{r7}
 8002234:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8002236:	e7fe      	b.n	8002236 <HardFault_Handler+0x4>

08002238 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8002238:	b480      	push	{r7}
 800223a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 800223c:	e7fe      	b.n	800223c <MemManage_Handler+0x4>

0800223e <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800223e:	b480      	push	{r7}
 8002240:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8002242:	e7fe      	b.n	8002242 <BusFault_Handler+0x4>

08002244 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8002244:	b480      	push	{r7}
 8002246:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8002248:	e7fe      	b.n	8002248 <UsageFault_Handler+0x4>

0800224a <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 800224a:	b480      	push	{r7}
 800224c:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 800224e:	bf00      	nop
 8002250:	46bd      	mov	sp, r7
 8002252:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002256:	4770      	bx	lr

08002258 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8002258:	b480      	push	{r7}
 800225a:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 800225c:	bf00      	nop
 800225e:	46bd      	mov	sp, r7
 8002260:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002264:	4770      	bx	lr

08002266 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8002266:	b480      	push	{r7}
 8002268:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 800226a:	bf00      	nop
 800226c:	46bd      	mov	sp, r7
 800226e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002272:	4770      	bx	lr

08002274 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8002274:	b580      	push	{r7, lr}
 8002276:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8002278:	f000 fd00 	bl	8002c7c <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 800227c:	bf00      	nop
 800227e:	bd80      	pop	{r7, pc}

08002280 <EXTI9_5_IRQHandler>:

/**
  * @brief This function handles EXTI line[9:5] interrupts.
  */
void EXTI9_5_IRQHandler(void)
{
 8002280:	b580      	push	{r7, lr}
 8002282:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI9_5_IRQn 0 */

  /* USER CODE END EXTI9_5_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(SPSGRF_915_GPIO3_EXTI5_Pin);
 8002284:	2020      	movs	r0, #32
 8002286:	f001 fa11 	bl	80036ac <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(SPBTLE_RF_IRQ_EXTI6_Pin);
 800228a:	2040      	movs	r0, #64	; 0x40
 800228c:	f001 fa0e 	bl	80036ac <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(VL53L0X_GPIO1_EXTI7_Pin);
 8002290:	2080      	movs	r0, #128	; 0x80
 8002292:	f001 fa0b 	bl	80036ac <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(LSM3MDL_DRDY_EXTI8_Pin);
 8002296:	f44f 7080 	mov.w	r0, #256	; 0x100
 800229a:	f001 fa07 	bl	80036ac <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI9_5_IRQn 1 */

  /* USER CODE END EXTI9_5_IRQn 1 */
}
 800229e:	bf00      	nop
 80022a0:	bd80      	pop	{r7, pc}

080022a2 <EXTI15_10_IRQHandler>:

/**
  * @brief This function handles EXTI line[15:10] interrupts.
  */
void EXTI15_10_IRQHandler(void)
{
 80022a2:	b580      	push	{r7, lr}
 80022a4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */

  /* USER CODE END EXTI15_10_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(LPS22HB_INT_DRDY_EXTI0_Pin);
 80022a6:	f44f 6080 	mov.w	r0, #1024	; 0x400
 80022aa:	f001 f9ff 	bl	80036ac <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(LSM6DSL_INT1_EXTI11_Pin);
 80022ae:	f44f 6000 	mov.w	r0, #2048	; 0x800
 80022b2:	f001 f9fb 	bl	80036ac <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(BUTTON_EXTI13_Pin);
 80022b6:	f44f 5000 	mov.w	r0, #8192	; 0x2000
 80022ba:	f001 f9f7 	bl	80036ac <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(ARD_D2_Pin);
 80022be:	f44f 4080 	mov.w	r0, #16384	; 0x4000
 80022c2:	f001 f9f3 	bl	80036ac <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(HTS221_DRDY_EXTI15_Pin);
 80022c6:	f44f 4000 	mov.w	r0, #32768	; 0x8000
 80022ca:	f001 f9ef 	bl	80036ac <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI15_10_IRQn 1 */

  /* USER CODE END EXTI15_10_IRQn 1 */
}
 80022ce:	bf00      	nop
 80022d0:	bd80      	pop	{r7, pc}
	...

080022d4 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 80022d4:	b580      	push	{r7, lr}
 80022d6:	b086      	sub	sp, #24
 80022d8:	af00      	add	r7, sp, #0
 80022da:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 80022dc:	4a14      	ldr	r2, [pc, #80]	; (8002330 <_sbrk+0x5c>)
 80022de:	4b15      	ldr	r3, [pc, #84]	; (8002334 <_sbrk+0x60>)
 80022e0:	1ad3      	subs	r3, r2, r3
 80022e2:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 80022e4:	697b      	ldr	r3, [r7, #20]
 80022e6:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 80022e8:	4b13      	ldr	r3, [pc, #76]	; (8002338 <_sbrk+0x64>)
 80022ea:	681b      	ldr	r3, [r3, #0]
 80022ec:	2b00      	cmp	r3, #0
 80022ee:	d102      	bne.n	80022f6 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 80022f0:	4b11      	ldr	r3, [pc, #68]	; (8002338 <_sbrk+0x64>)
 80022f2:	4a12      	ldr	r2, [pc, #72]	; (800233c <_sbrk+0x68>)
 80022f4:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 80022f6:	4b10      	ldr	r3, [pc, #64]	; (8002338 <_sbrk+0x64>)
 80022f8:	681a      	ldr	r2, [r3, #0]
 80022fa:	687b      	ldr	r3, [r7, #4]
 80022fc:	4413      	add	r3, r2
 80022fe:	693a      	ldr	r2, [r7, #16]
 8002300:	429a      	cmp	r2, r3
 8002302:	d207      	bcs.n	8002314 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8002304:	f004 fe16 	bl	8006f34 <__errno>
 8002308:	4603      	mov	r3, r0
 800230a:	220c      	movs	r2, #12
 800230c:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 800230e:	f04f 33ff 	mov.w	r3, #4294967295
 8002312:	e009      	b.n	8002328 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8002314:	4b08      	ldr	r3, [pc, #32]	; (8002338 <_sbrk+0x64>)
 8002316:	681b      	ldr	r3, [r3, #0]
 8002318:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 800231a:	4b07      	ldr	r3, [pc, #28]	; (8002338 <_sbrk+0x64>)
 800231c:	681a      	ldr	r2, [r3, #0]
 800231e:	687b      	ldr	r3, [r7, #4]
 8002320:	4413      	add	r3, r2
 8002322:	4a05      	ldr	r2, [pc, #20]	; (8002338 <_sbrk+0x64>)
 8002324:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8002326:	68fb      	ldr	r3, [r7, #12]
}
 8002328:	4618      	mov	r0, r3
 800232a:	3718      	adds	r7, #24
 800232c:	46bd      	mov	sp, r7
 800232e:	bd80      	pop	{r7, pc}
 8002330:	20018000 	.word	0x20018000
 8002334:	00000400 	.word	0x00000400
 8002338:	20000fa4 	.word	0x20000fa4
 800233c:	20001040 	.word	0x20001040

08002340 <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @retval None
  */

void SystemInit(void)
{
 8002340:	b480      	push	{r7}
 8002342:	af00      	add	r7, sp, #0
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET;
#endif

  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 20U)|(3UL << 22U));  /* set CP10 and CP11 Full Access */
 8002344:	4b06      	ldr	r3, [pc, #24]	; (8002360 <SystemInit+0x20>)
 8002346:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800234a:	4a05      	ldr	r2, [pc, #20]	; (8002360 <SystemInit+0x20>)
 800234c:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8002350:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
#endif
}
 8002354:	bf00      	nop
 8002356:	46bd      	mov	sp, r7
 8002358:	f85d 7b04 	ldr.w	r7, [sp], #4
 800235c:	4770      	bx	lr
 800235e:	bf00      	nop
 8002360:	e000ed00 	.word	0xe000ed00
 8002364:	00000000 	.word	0x00000000

08002368 <valorRMS>:


#include <math.h>
#include <stdlib.h>

float valorRMS (float sinal[],int tam){
 8002368:	b5b0      	push	{r4, r5, r7, lr}
 800236a:	b086      	sub	sp, #24
 800236c:	af00      	add	r7, sp, #0
 800236e:	6078      	str	r0, [r7, #4]
 8002370:	6039      	str	r1, [r7, #0]
    short sum = 0,med,valor_rms;
 8002372:	2300      	movs	r3, #0
 8002374:	82fb      	strh	r3, [r7, #22]
    int i;
    for( i = 0;i<tam;i++){
 8002376:	2300      	movs	r3, #0
 8002378:	613b      	str	r3, [r7, #16]
 800237a:	e027      	b.n	80023cc <valorRMS+0x64>
        sum+=pow(sinal[i],2);
 800237c:	693b      	ldr	r3, [r7, #16]
 800237e:	009b      	lsls	r3, r3, #2
 8002380:	687a      	ldr	r2, [r7, #4]
 8002382:	4413      	add	r3, r2
 8002384:	681b      	ldr	r3, [r3, #0]
 8002386:	4618      	mov	r0, r3
 8002388:	f7fe f8d6 	bl	8000538 <__aeabi_f2d>
 800238c:	4602      	mov	r2, r0
 800238e:	460b      	mov	r3, r1
 8002390:	ed9f 1b2b 	vldr	d1, [pc, #172]	; 8002440 <valorRMS+0xd8>
 8002394:	ec43 2b10 	vmov	d0, r2, r3
 8002398:	f005 fab2 	bl	8007900 <pow>
 800239c:	ec55 4b10 	vmov	r4, r5, d0
 80023a0:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 80023a4:	4618      	mov	r0, r3
 80023a6:	f7fe f8b5 	bl	8000514 <__aeabi_i2d>
 80023aa:	4602      	mov	r2, r0
 80023ac:	460b      	mov	r3, r1
 80023ae:	4620      	mov	r0, r4
 80023b0:	4629      	mov	r1, r5
 80023b2:	f7fd ff63 	bl	800027c <__adddf3>
 80023b6:	4602      	mov	r2, r0
 80023b8:	460b      	mov	r3, r1
 80023ba:	4610      	mov	r0, r2
 80023bc:	4619      	mov	r1, r3
 80023be:	f7fe fbc3 	bl	8000b48 <__aeabi_d2iz>
 80023c2:	4603      	mov	r3, r0
 80023c4:	82fb      	strh	r3, [r7, #22]
    for( i = 0;i<tam;i++){
 80023c6:	693b      	ldr	r3, [r7, #16]
 80023c8:	3301      	adds	r3, #1
 80023ca:	613b      	str	r3, [r7, #16]
 80023cc:	693a      	ldr	r2, [r7, #16]
 80023ce:	683b      	ldr	r3, [r7, #0]
 80023d0:	429a      	cmp	r2, r3
 80023d2:	dbd3      	blt.n	800237c <valorRMS+0x14>
    }
    med = (float) sum/i;
 80023d4:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 80023d8:	ee07 3a90 	vmov	s15, r3
 80023dc:	eef8 6ae7 	vcvt.f32.s32	s13, s15
 80023e0:	693b      	ldr	r3, [r7, #16]
 80023e2:	ee07 3a90 	vmov	s15, r3
 80023e6:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 80023ea:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80023ee:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80023f2:	ee17 3a90 	vmov	r3, s15
 80023f6:	81fb      	strh	r3, [r7, #14]
    valor_rms = sqrt(sum/i);
 80023f8:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 80023fc:	693b      	ldr	r3, [r7, #16]
 80023fe:	fb92 f3f3 	sdiv	r3, r2, r3
 8002402:	4618      	mov	r0, r3
 8002404:	f7fe f886 	bl	8000514 <__aeabi_i2d>
 8002408:	4602      	mov	r2, r0
 800240a:	460b      	mov	r3, r1
 800240c:	ec43 2b10 	vmov	d0, r2, r3
 8002410:	f005 fae6 	bl	80079e0 <sqrt>
 8002414:	ec53 2b10 	vmov	r2, r3, d0
 8002418:	4610      	mov	r0, r2
 800241a:	4619      	mov	r1, r3
 800241c:	f7fe fb94 	bl	8000b48 <__aeabi_d2iz>
 8002420:	4603      	mov	r3, r0
 8002422:	81bb      	strh	r3, [r7, #12]
    return valor_rms;
 8002424:	f9b7 300c 	ldrsh.w	r3, [r7, #12]
 8002428:	ee07 3a90 	vmov	s15, r3
 800242c:	eef8 7ae7 	vcvt.f32.s32	s15, s15
}
 8002430:	eeb0 0a67 	vmov.f32	s0, s15
 8002434:	3718      	adds	r7, #24
 8002436:	46bd      	mov	sp, r7
 8002438:	bdb0      	pop	{r4, r5, r7, pc}
 800243a:	bf00      	nop
 800243c:	f3af 8000 	nop.w
 8002440:	00000000 	.word	0x00000000
 8002444:	40000000 	.word	0x40000000

08002448 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Set stack pointer */
 8002448:	f8df d034 	ldr.w	sp, [pc, #52]	; 8002480 <LoopForever+0x2>

/* Call the clock system initialization function.*/
    bl  SystemInit
 800244c:	f7ff ff78 	bl	8002340 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8002450:	480c      	ldr	r0, [pc, #48]	; (8002484 <LoopForever+0x6>)
  ldr r1, =_edata
 8002452:	490d      	ldr	r1, [pc, #52]	; (8002488 <LoopForever+0xa>)
  ldr r2, =_sidata
 8002454:	4a0d      	ldr	r2, [pc, #52]	; (800248c <LoopForever+0xe>)
  movs r3, #0
 8002456:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8002458:	e002      	b.n	8002460 <LoopCopyDataInit>

0800245a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800245a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 800245c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800245e:	3304      	adds	r3, #4

08002460 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8002460:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8002462:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8002464:	d3f9      	bcc.n	800245a <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8002466:	4a0a      	ldr	r2, [pc, #40]	; (8002490 <LoopForever+0x12>)
  ldr r4, =_ebss
 8002468:	4c0a      	ldr	r4, [pc, #40]	; (8002494 <LoopForever+0x16>)
  movs r3, #0
 800246a:	2300      	movs	r3, #0
  b LoopFillZerobss
 800246c:	e001      	b.n	8002472 <LoopFillZerobss>

0800246e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800246e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8002470:	3204      	adds	r2, #4

08002472 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8002472:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8002474:	d3fb      	bcc.n	800246e <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8002476:	f004 fd63 	bl	8006f40 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 800247a:	f7fe fd0f 	bl	8000e9c <main>

0800247e <LoopForever>:

LoopForever:
    b LoopForever
 800247e:	e7fe      	b.n	800247e <LoopForever>
  ldr   sp, =_estack    /* Set stack pointer */
 8002480:	20018000 	.word	0x20018000
  ldr r0, =_sdata
 8002484:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8002488:	200001e0 	.word	0x200001e0
  ldr r2, =_sidata
 800248c:	080088e0 	.word	0x080088e0
  ldr r2, =_sbss
 8002490:	200001e0 	.word	0x200001e0
  ldr r4, =_ebss
 8002494:	2000103c 	.word	0x2000103c

08002498 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8002498:	e7fe      	b.n	8002498 <ADC1_2_IRQHandler>
	...

0800249c <I2Cx_MspInit>:
  * @brief  Initializes I2C MSP.
  * @param  i2c_handler  I2C handler
  * @retval None
  */
static void I2Cx_MspInit(I2C_HandleTypeDef *i2c_handler)
{
 800249c:	b580      	push	{r7, lr}
 800249e:	b08a      	sub	sp, #40	; 0x28
 80024a0:	af00      	add	r7, sp, #0
 80024a2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef  gpio_init_structure;

  /*** Configure the GPIOs ***/
  /* Enable GPIO clock */
  DISCOVERY_I2Cx_SCL_SDA_GPIO_CLK_ENABLE();
 80024a4:	4b27      	ldr	r3, [pc, #156]	; (8002544 <I2Cx_MspInit+0xa8>)
 80024a6:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80024a8:	4a26      	ldr	r2, [pc, #152]	; (8002544 <I2Cx_MspInit+0xa8>)
 80024aa:	f043 0302 	orr.w	r3, r3, #2
 80024ae:	64d3      	str	r3, [r2, #76]	; 0x4c
 80024b0:	4b24      	ldr	r3, [pc, #144]	; (8002544 <I2Cx_MspInit+0xa8>)
 80024b2:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80024b4:	f003 0302 	and.w	r3, r3, #2
 80024b8:	613b      	str	r3, [r7, #16]
 80024ba:	693b      	ldr	r3, [r7, #16]

  /* Configure I2C Tx, Rx as alternate function */
  gpio_init_structure.Pin = DISCOVERY_I2Cx_SCL_PIN | DISCOVERY_I2Cx_SDA_PIN;
 80024bc:	f44f 6340 	mov.w	r3, #3072	; 0xc00
 80024c0:	617b      	str	r3, [r7, #20]
  gpio_init_structure.Mode = GPIO_MODE_AF_OD;
 80024c2:	2312      	movs	r3, #18
 80024c4:	61bb      	str	r3, [r7, #24]
  gpio_init_structure.Pull = GPIO_PULLUP;
 80024c6:	2301      	movs	r3, #1
 80024c8:	61fb      	str	r3, [r7, #28]
  gpio_init_structure.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80024ca:	2303      	movs	r3, #3
 80024cc:	623b      	str	r3, [r7, #32]
  gpio_init_structure.Alternate = DISCOVERY_I2Cx_SCL_SDA_AF;
 80024ce:	2304      	movs	r3, #4
 80024d0:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(DISCOVERY_I2Cx_SCL_SDA_GPIO_PORT, &gpio_init_structure);
 80024d2:	f107 0314 	add.w	r3, r7, #20
 80024d6:	4619      	mov	r1, r3
 80024d8:	481b      	ldr	r0, [pc, #108]	; (8002548 <I2Cx_MspInit+0xac>)
 80024da:	f000 fe31 	bl	8003140 <HAL_GPIO_Init>

  HAL_GPIO_Init(DISCOVERY_I2Cx_SCL_SDA_GPIO_PORT, &gpio_init_structure);
 80024de:	f107 0314 	add.w	r3, r7, #20
 80024e2:	4619      	mov	r1, r3
 80024e4:	4818      	ldr	r0, [pc, #96]	; (8002548 <I2Cx_MspInit+0xac>)
 80024e6:	f000 fe2b 	bl	8003140 <HAL_GPIO_Init>

  /*** Configure the I2C peripheral ***/
  /* Enable I2C clock */
  DISCOVERY_I2Cx_CLK_ENABLE();
 80024ea:	4b16      	ldr	r3, [pc, #88]	; (8002544 <I2Cx_MspInit+0xa8>)
 80024ec:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80024ee:	4a15      	ldr	r2, [pc, #84]	; (8002544 <I2Cx_MspInit+0xa8>)
 80024f0:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 80024f4:	6593      	str	r3, [r2, #88]	; 0x58
 80024f6:	4b13      	ldr	r3, [pc, #76]	; (8002544 <I2Cx_MspInit+0xa8>)
 80024f8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80024fa:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80024fe:	60fb      	str	r3, [r7, #12]
 8002500:	68fb      	ldr	r3, [r7, #12]

  /* Force the I2C peripheral clock reset */
  DISCOVERY_I2Cx_FORCE_RESET();
 8002502:	4b10      	ldr	r3, [pc, #64]	; (8002544 <I2Cx_MspInit+0xa8>)
 8002504:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002506:	4a0f      	ldr	r2, [pc, #60]	; (8002544 <I2Cx_MspInit+0xa8>)
 8002508:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 800250c:	6393      	str	r3, [r2, #56]	; 0x38

  /* Release the I2C peripheral clock reset */
  DISCOVERY_I2Cx_RELEASE_RESET();
 800250e:	4b0d      	ldr	r3, [pc, #52]	; (8002544 <I2Cx_MspInit+0xa8>)
 8002510:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002512:	4a0c      	ldr	r2, [pc, #48]	; (8002544 <I2Cx_MspInit+0xa8>)
 8002514:	f423 0380 	bic.w	r3, r3, #4194304	; 0x400000
 8002518:	6393      	str	r3, [r2, #56]	; 0x38

  /* Enable and set I2Cx Interrupt to a lower priority */
  HAL_NVIC_SetPriority(DISCOVERY_I2Cx_EV_IRQn, 0x0F, 0);
 800251a:	2200      	movs	r2, #0
 800251c:	210f      	movs	r1, #15
 800251e:	2021      	movs	r0, #33	; 0x21
 8002520:	f000 fccb 	bl	8002eba <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DISCOVERY_I2Cx_EV_IRQn);
 8002524:	2021      	movs	r0, #33	; 0x21
 8002526:	f000 fce4 	bl	8002ef2 <HAL_NVIC_EnableIRQ>

  /* Enable and set I2Cx Interrupt to a lower priority */
  HAL_NVIC_SetPriority(DISCOVERY_I2Cx_ER_IRQn, 0x0F, 0);
 800252a:	2200      	movs	r2, #0
 800252c:	210f      	movs	r1, #15
 800252e:	2022      	movs	r0, #34	; 0x22
 8002530:	f000 fcc3 	bl	8002eba <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DISCOVERY_I2Cx_ER_IRQn);
 8002534:	2022      	movs	r0, #34	; 0x22
 8002536:	f000 fcdc 	bl	8002ef2 <HAL_NVIC_EnableIRQ>
}
 800253a:	bf00      	nop
 800253c:	3728      	adds	r7, #40	; 0x28
 800253e:	46bd      	mov	sp, r7
 8002540:	bd80      	pop	{r7, pc}
 8002542:	bf00      	nop
 8002544:	40021000 	.word	0x40021000
 8002548:	48000400 	.word	0x48000400

0800254c <I2Cx_Init>:
  * @brief  Initializes I2C HAL.
  * @param  i2c_handler  I2C handler
  * @retval None
  */
static void I2Cx_Init(I2C_HandleTypeDef *i2c_handler)
{
 800254c:	b580      	push	{r7, lr}
 800254e:	b082      	sub	sp, #8
 8002550:	af00      	add	r7, sp, #0
 8002552:	6078      	str	r0, [r7, #4]
  /* I2C configuration */
  i2c_handler->Instance              = DISCOVERY_I2Cx;
 8002554:	687b      	ldr	r3, [r7, #4]
 8002556:	4a12      	ldr	r2, [pc, #72]	; (80025a0 <I2Cx_Init+0x54>)
 8002558:	601a      	str	r2, [r3, #0]
  i2c_handler->Init.Timing           = DISCOVERY_I2Cx_TIMING;
 800255a:	687b      	ldr	r3, [r7, #4]
 800255c:	4a11      	ldr	r2, [pc, #68]	; (80025a4 <I2Cx_Init+0x58>)
 800255e:	605a      	str	r2, [r3, #4]
  i2c_handler->Init.OwnAddress1      = 0;
 8002560:	687b      	ldr	r3, [r7, #4]
 8002562:	2200      	movs	r2, #0
 8002564:	609a      	str	r2, [r3, #8]
  i2c_handler->Init.AddressingMode   = I2C_ADDRESSINGMODE_7BIT;
 8002566:	687b      	ldr	r3, [r7, #4]
 8002568:	2201      	movs	r2, #1
 800256a:	60da      	str	r2, [r3, #12]
  i2c_handler->Init.DualAddressMode  = I2C_DUALADDRESS_DISABLE;
 800256c:	687b      	ldr	r3, [r7, #4]
 800256e:	2200      	movs	r2, #0
 8002570:	611a      	str	r2, [r3, #16]
  i2c_handler->Init.OwnAddress2      = 0;
 8002572:	687b      	ldr	r3, [r7, #4]
 8002574:	2200      	movs	r2, #0
 8002576:	615a      	str	r2, [r3, #20]
  i2c_handler->Init.GeneralCallMode  = I2C_GENERALCALL_DISABLE;
 8002578:	687b      	ldr	r3, [r7, #4]
 800257a:	2200      	movs	r2, #0
 800257c:	61da      	str	r2, [r3, #28]
  i2c_handler->Init.NoStretchMode    = I2C_NOSTRETCH_DISABLE;
 800257e:	687b      	ldr	r3, [r7, #4]
 8002580:	2200      	movs	r2, #0
 8002582:	621a      	str	r2, [r3, #32]

  /* Init the I2C */
  I2Cx_MspInit(i2c_handler);
 8002584:	6878      	ldr	r0, [r7, #4]
 8002586:	f7ff ff89 	bl	800249c <I2Cx_MspInit>
  HAL_I2C_Init(i2c_handler);
 800258a:	6878      	ldr	r0, [r7, #4]
 800258c:	f001 f8b1 	bl	80036f2 <HAL_I2C_Init>
  
  /**Configure Analogue filter */
  HAL_I2CEx_ConfigAnalogFilter(i2c_handler, I2C_ANALOGFILTER_ENABLE);  
 8002590:	2100      	movs	r1, #0
 8002592:	6878      	ldr	r0, [r7, #4]
 8002594:	f001 fe40 	bl	8004218 <HAL_I2CEx_ConfigAnalogFilter>
}
 8002598:	bf00      	nop
 800259a:	3708      	adds	r7, #8
 800259c:	46bd      	mov	sp, r7
 800259e:	bd80      	pop	{r7, pc}
 80025a0:	40005800 	.word	0x40005800
 80025a4:	00702681 	.word	0x00702681

080025a8 <I2Cx_ReadMultiple>:
  * @param  Buffer  Pointer to data buffer
  * @param  Length  Length of the data
  * @retval HAL status
  */
static HAL_StatusTypeDef I2Cx_ReadMultiple(I2C_HandleTypeDef *i2c_handler, uint8_t Addr, uint16_t Reg, uint16_t MemAddress, uint8_t *Buffer, uint16_t Length)
{
 80025a8:	b580      	push	{r7, lr}
 80025aa:	b08a      	sub	sp, #40	; 0x28
 80025ac:	af04      	add	r7, sp, #16
 80025ae:	60f8      	str	r0, [r7, #12]
 80025b0:	4608      	mov	r0, r1
 80025b2:	4611      	mov	r1, r2
 80025b4:	461a      	mov	r2, r3
 80025b6:	4603      	mov	r3, r0
 80025b8:	72fb      	strb	r3, [r7, #11]
 80025ba:	460b      	mov	r3, r1
 80025bc:	813b      	strh	r3, [r7, #8]
 80025be:	4613      	mov	r3, r2
 80025c0:	80fb      	strh	r3, [r7, #6]
  HAL_StatusTypeDef status = HAL_OK;
 80025c2:	2300      	movs	r3, #0
 80025c4:	75fb      	strb	r3, [r7, #23]

  status = HAL_I2C_Mem_Read(i2c_handler, Addr, (uint16_t)Reg, MemAddress, Buffer, Length, 1000);
 80025c6:	7afb      	ldrb	r3, [r7, #11]
 80025c8:	b299      	uxth	r1, r3
 80025ca:	88f8      	ldrh	r0, [r7, #6]
 80025cc:	893a      	ldrh	r2, [r7, #8]
 80025ce:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80025d2:	9302      	str	r3, [sp, #8]
 80025d4:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 80025d6:	9301      	str	r3, [sp, #4]
 80025d8:	6a3b      	ldr	r3, [r7, #32]
 80025da:	9300      	str	r3, [sp, #0]
 80025dc:	4603      	mov	r3, r0
 80025de:	68f8      	ldr	r0, [r7, #12]
 80025e0:	f001 fa5a 	bl	8003a98 <HAL_I2C_Mem_Read>
 80025e4:	4603      	mov	r3, r0
 80025e6:	75fb      	strb	r3, [r7, #23]

  /* Check the communication status */
  if(status != HAL_OK)
 80025e8:	7dfb      	ldrb	r3, [r7, #23]
 80025ea:	2b00      	cmp	r3, #0
 80025ec:	d004      	beq.n	80025f8 <I2Cx_ReadMultiple+0x50>
  {
    /* I2C error occurred */
    I2Cx_Error(i2c_handler, Addr);
 80025ee:	7afb      	ldrb	r3, [r7, #11]
 80025f0:	4619      	mov	r1, r3
 80025f2:	68f8      	ldr	r0, [r7, #12]
 80025f4:	f000 f832 	bl	800265c <I2Cx_Error>
  }
  return status;
 80025f8:	7dfb      	ldrb	r3, [r7, #23]
}
 80025fa:	4618      	mov	r0, r3
 80025fc:	3718      	adds	r7, #24
 80025fe:	46bd      	mov	sp, r7
 8002600:	bd80      	pop	{r7, pc}

08002602 <I2Cx_WriteMultiple>:
  * @param  Buffer  The target register value to be written
  * @param  Length  buffer size to be written
  * @retval HAL status
  */
static HAL_StatusTypeDef I2Cx_WriteMultiple(I2C_HandleTypeDef *i2c_handler, uint8_t Addr, uint16_t Reg, uint16_t MemAddress, uint8_t *Buffer, uint16_t Length)
{
 8002602:	b580      	push	{r7, lr}
 8002604:	b08a      	sub	sp, #40	; 0x28
 8002606:	af04      	add	r7, sp, #16
 8002608:	60f8      	str	r0, [r7, #12]
 800260a:	4608      	mov	r0, r1
 800260c:	4611      	mov	r1, r2
 800260e:	461a      	mov	r2, r3
 8002610:	4603      	mov	r3, r0
 8002612:	72fb      	strb	r3, [r7, #11]
 8002614:	460b      	mov	r3, r1
 8002616:	813b      	strh	r3, [r7, #8]
 8002618:	4613      	mov	r3, r2
 800261a:	80fb      	strh	r3, [r7, #6]
  HAL_StatusTypeDef status = HAL_OK;
 800261c:	2300      	movs	r3, #0
 800261e:	75fb      	strb	r3, [r7, #23]

  status = HAL_I2C_Mem_Write(i2c_handler, Addr, (uint16_t)Reg, MemAddress, Buffer, Length, 1000);
 8002620:	7afb      	ldrb	r3, [r7, #11]
 8002622:	b299      	uxth	r1, r3
 8002624:	88f8      	ldrh	r0, [r7, #6]
 8002626:	893a      	ldrh	r2, [r7, #8]
 8002628:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800262c:	9302      	str	r3, [sp, #8]
 800262e:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8002630:	9301      	str	r3, [sp, #4]
 8002632:	6a3b      	ldr	r3, [r7, #32]
 8002634:	9300      	str	r3, [sp, #0]
 8002636:	4603      	mov	r3, r0
 8002638:	68f8      	ldr	r0, [r7, #12]
 800263a:	f001 f919 	bl	8003870 <HAL_I2C_Mem_Write>
 800263e:	4603      	mov	r3, r0
 8002640:	75fb      	strb	r3, [r7, #23]

  /* Check the communication status */
  if(status != HAL_OK)
 8002642:	7dfb      	ldrb	r3, [r7, #23]
 8002644:	2b00      	cmp	r3, #0
 8002646:	d004      	beq.n	8002652 <I2Cx_WriteMultiple+0x50>
  {
    /* Re-Initiaize the I2C Bus */
    I2Cx_Error(i2c_handler, Addr);
 8002648:	7afb      	ldrb	r3, [r7, #11]
 800264a:	4619      	mov	r1, r3
 800264c:	68f8      	ldr	r0, [r7, #12]
 800264e:	f000 f805 	bl	800265c <I2Cx_Error>
  }
  return status;
 8002652:	7dfb      	ldrb	r3, [r7, #23]
}
 8002654:	4618      	mov	r0, r3
 8002656:	3718      	adds	r7, #24
 8002658:	46bd      	mov	sp, r7
 800265a:	bd80      	pop	{r7, pc}

0800265c <I2Cx_Error>:
  * @param  i2c_handler  I2C handler
  * @param  Addr  I2C Address
  * @retval None
  */
static void I2Cx_Error(I2C_HandleTypeDef *i2c_handler, uint8_t Addr)
{
 800265c:	b580      	push	{r7, lr}
 800265e:	b082      	sub	sp, #8
 8002660:	af00      	add	r7, sp, #0
 8002662:	6078      	str	r0, [r7, #4]
 8002664:	460b      	mov	r3, r1
 8002666:	70fb      	strb	r3, [r7, #3]
  /* De-initialize the I2C communication bus */
  HAL_I2C_DeInit(i2c_handler);
 8002668:	6878      	ldr	r0, [r7, #4]
 800266a:	f001 f8d1 	bl	8003810 <HAL_I2C_DeInit>
  
  /* Re-Initialize the I2C communication bus */
  I2Cx_Init(i2c_handler);
 800266e:	6878      	ldr	r0, [r7, #4]
 8002670:	f7ff ff6c 	bl	800254c <I2Cx_Init>
}
 8002674:	bf00      	nop
 8002676:	3708      	adds	r7, #8
 8002678:	46bd      	mov	sp, r7
 800267a:	bd80      	pop	{r7, pc}

0800267c <SENSOR_IO_Init>:
/**
  * @brief  Initializes Sensors low level.
  * @retval None
  */
void SENSOR_IO_Init(void)
{
 800267c:	b580      	push	{r7, lr}
 800267e:	af00      	add	r7, sp, #0
  I2Cx_Init(&hI2cHandler);
 8002680:	4802      	ldr	r0, [pc, #8]	; (800268c <SENSOR_IO_Init+0x10>)
 8002682:	f7ff ff63 	bl	800254c <I2Cx_Init>
}
 8002686:	bf00      	nop
 8002688:	bd80      	pop	{r7, pc}
 800268a:	bf00      	nop
 800268c:	20000fa8 	.word	0x20000fa8

08002690 <SENSOR_IO_Write>:
  * @param  Reg  Reg address
  * @param  Value  Data to be written
  * @retval None
  */
void SENSOR_IO_Write(uint8_t Addr, uint8_t Reg, uint8_t Value)
{
 8002690:	b580      	push	{r7, lr}
 8002692:	b084      	sub	sp, #16
 8002694:	af02      	add	r7, sp, #8
 8002696:	4603      	mov	r3, r0
 8002698:	71fb      	strb	r3, [r7, #7]
 800269a:	460b      	mov	r3, r1
 800269c:	71bb      	strb	r3, [r7, #6]
 800269e:	4613      	mov	r3, r2
 80026a0:	717b      	strb	r3, [r7, #5]
  I2Cx_WriteMultiple(&hI2cHandler, Addr, (uint16_t)Reg, I2C_MEMADD_SIZE_8BIT,(uint8_t*)&Value, 1);
 80026a2:	79bb      	ldrb	r3, [r7, #6]
 80026a4:	b29a      	uxth	r2, r3
 80026a6:	79f9      	ldrb	r1, [r7, #7]
 80026a8:	2301      	movs	r3, #1
 80026aa:	9301      	str	r3, [sp, #4]
 80026ac:	1d7b      	adds	r3, r7, #5
 80026ae:	9300      	str	r3, [sp, #0]
 80026b0:	2301      	movs	r3, #1
 80026b2:	4803      	ldr	r0, [pc, #12]	; (80026c0 <SENSOR_IO_Write+0x30>)
 80026b4:	f7ff ffa5 	bl	8002602 <I2Cx_WriteMultiple>
}
 80026b8:	bf00      	nop
 80026ba:	3708      	adds	r7, #8
 80026bc:	46bd      	mov	sp, r7
 80026be:	bd80      	pop	{r7, pc}
 80026c0:	20000fa8 	.word	0x20000fa8

080026c4 <SENSOR_IO_Read>:
  * @param  Addr  I2C address
  * @param  Reg  Reg address
  * @retval Data to be read
  */
uint8_t SENSOR_IO_Read(uint8_t Addr, uint8_t Reg)
{
 80026c4:	b580      	push	{r7, lr}
 80026c6:	b086      	sub	sp, #24
 80026c8:	af02      	add	r7, sp, #8
 80026ca:	4603      	mov	r3, r0
 80026cc:	460a      	mov	r2, r1
 80026ce:	71fb      	strb	r3, [r7, #7]
 80026d0:	4613      	mov	r3, r2
 80026d2:	71bb      	strb	r3, [r7, #6]
  uint8_t read_value = 0;
 80026d4:	2300      	movs	r3, #0
 80026d6:	73fb      	strb	r3, [r7, #15]

  I2Cx_ReadMultiple(&hI2cHandler, Addr, Reg, I2C_MEMADD_SIZE_8BIT, (uint8_t*)&read_value, 1);
 80026d8:	79bb      	ldrb	r3, [r7, #6]
 80026da:	b29a      	uxth	r2, r3
 80026dc:	79f9      	ldrb	r1, [r7, #7]
 80026de:	2301      	movs	r3, #1
 80026e0:	9301      	str	r3, [sp, #4]
 80026e2:	f107 030f 	add.w	r3, r7, #15
 80026e6:	9300      	str	r3, [sp, #0]
 80026e8:	2301      	movs	r3, #1
 80026ea:	4804      	ldr	r0, [pc, #16]	; (80026fc <SENSOR_IO_Read+0x38>)
 80026ec:	f7ff ff5c 	bl	80025a8 <I2Cx_ReadMultiple>

  return read_value;
 80026f0:	7bfb      	ldrb	r3, [r7, #15]
}
 80026f2:	4618      	mov	r0, r3
 80026f4:	3710      	adds	r7, #16
 80026f6:	46bd      	mov	sp, r7
 80026f8:	bd80      	pop	{r7, pc}
 80026fa:	bf00      	nop
 80026fc:	20000fa8 	.word	0x20000fa8

08002700 <SENSOR_IO_ReadMultiple>:
  * @param  Buffer  Pointer to data buffer
  * @param  Length  Length of the data
  * @retval HAL status
  */
uint16_t SENSOR_IO_ReadMultiple(uint8_t Addr, uint8_t Reg, uint8_t *Buffer, uint16_t Length)
{
 8002700:	b580      	push	{r7, lr}
 8002702:	b084      	sub	sp, #16
 8002704:	af02      	add	r7, sp, #8
 8002706:	603a      	str	r2, [r7, #0]
 8002708:	461a      	mov	r2, r3
 800270a:	4603      	mov	r3, r0
 800270c:	71fb      	strb	r3, [r7, #7]
 800270e:	460b      	mov	r3, r1
 8002710:	71bb      	strb	r3, [r7, #6]
 8002712:	4613      	mov	r3, r2
 8002714:	80bb      	strh	r3, [r7, #4]
 return I2Cx_ReadMultiple(&hI2cHandler, Addr, (uint16_t)Reg, I2C_MEMADD_SIZE_8BIT, Buffer, Length);
 8002716:	79bb      	ldrb	r3, [r7, #6]
 8002718:	b29a      	uxth	r2, r3
 800271a:	79f9      	ldrb	r1, [r7, #7]
 800271c:	88bb      	ldrh	r3, [r7, #4]
 800271e:	9301      	str	r3, [sp, #4]
 8002720:	683b      	ldr	r3, [r7, #0]
 8002722:	9300      	str	r3, [sp, #0]
 8002724:	2301      	movs	r3, #1
 8002726:	4804      	ldr	r0, [pc, #16]	; (8002738 <SENSOR_IO_ReadMultiple+0x38>)
 8002728:	f7ff ff3e 	bl	80025a8 <I2Cx_ReadMultiple>
 800272c:	4603      	mov	r3, r0
 800272e:	b29b      	uxth	r3, r3
}
 8002730:	4618      	mov	r0, r3
 8002732:	3708      	adds	r7, #8
 8002734:	46bd      	mov	sp, r7
 8002736:	bd80      	pop	{r7, pc}
 8002738:	20000fa8 	.word	0x20000fa8

0800273c <BSP_ACCELERO_Init>:
/**
  * @brief  Initialize the ACCELERO.
  * @retval ACCELERO_OK or ACCELERO_ERROR
  */
ACCELERO_StatusTypeDef BSP_ACCELERO_Init(void)
{  
 800273c:	b580      	push	{r7, lr}
 800273e:	b084      	sub	sp, #16
 8002740:	af00      	add	r7, sp, #0
  ACCELERO_StatusTypeDef ret = ACCELERO_OK;
 8002742:	2300      	movs	r3, #0
 8002744:	73fb      	strb	r3, [r7, #15]
  uint16_t ctrl = 0x0000;
 8002746:	2300      	movs	r3, #0
 8002748:	81bb      	strh	r3, [r7, #12]
  ACCELERO_InitTypeDef LSM6DSL_InitStructure;

  if(Lsm6dslAccDrv.ReadID() != LSM6DSL_ACC_GYRO_WHO_AM_I)
 800274a:	4b19      	ldr	r3, [pc, #100]	; (80027b0 <BSP_ACCELERO_Init+0x74>)
 800274c:	689b      	ldr	r3, [r3, #8]
 800274e:	4798      	blx	r3
 8002750:	4603      	mov	r3, r0
 8002752:	2b6a      	cmp	r3, #106	; 0x6a
 8002754:	d002      	beq.n	800275c <BSP_ACCELERO_Init+0x20>
  {
    ret = ACCELERO_ERROR;
 8002756:	2301      	movs	r3, #1
 8002758:	73fb      	strb	r3, [r7, #15]
 800275a:	e024      	b.n	80027a6 <BSP_ACCELERO_Init+0x6a>
  }
  else
  {
    /* Initialize the ACCELERO accelerometer driver structure */
    AccelerometerDrv = &Lsm6dslAccDrv;
 800275c:	4b15      	ldr	r3, [pc, #84]	; (80027b4 <BSP_ACCELERO_Init+0x78>)
 800275e:	4a14      	ldr	r2, [pc, #80]	; (80027b0 <BSP_ACCELERO_Init+0x74>)
 8002760:	601a      	str	r2, [r3, #0]
  
    /* MEMS configuration ------------------------------------------------------*/
    /* Fill the ACCELERO accelerometer structure */
    LSM6DSL_InitStructure.AccOutput_DataRate = LSM6DSL_ODR_52Hz;
 8002762:	2330      	movs	r3, #48	; 0x30
 8002764:	717b      	strb	r3, [r7, #5]
    LSM6DSL_InitStructure.Axes_Enable = 0;
 8002766:	2300      	movs	r3, #0
 8002768:	71bb      	strb	r3, [r7, #6]
    LSM6DSL_InitStructure.AccFull_Scale = LSM6DSL_ACC_FULLSCALE_2G;
 800276a:	2300      	movs	r3, #0
 800276c:	72bb      	strb	r3, [r7, #10]
    LSM6DSL_InitStructure.BlockData_Update = LSM6DSL_BDU_BLOCK_UPDATE;
 800276e:	2340      	movs	r3, #64	; 0x40
 8002770:	723b      	strb	r3, [r7, #8]
    LSM6DSL_InitStructure.High_Resolution = 0;
 8002772:	2300      	movs	r3, #0
 8002774:	71fb      	strb	r3, [r7, #7]
    LSM6DSL_InitStructure.Communication_Mode = 0;
 8002776:	2300      	movs	r3, #0
 8002778:	72fb      	strb	r3, [r7, #11]
        
    /* Configure MEMS: data rate, full scale  */
    ctrl =  (LSM6DSL_InitStructure.AccOutput_DataRate | LSM6DSL_InitStructure.AccFull_Scale);
 800277a:	797a      	ldrb	r2, [r7, #5]
 800277c:	7abb      	ldrb	r3, [r7, #10]
 800277e:	4313      	orrs	r3, r2
 8002780:	b2db      	uxtb	r3, r3
 8002782:	81bb      	strh	r3, [r7, #12]
    
    /* Configure MEMS: BDU and Auto-increment for multi read/write */
    ctrl |= ((LSM6DSL_InitStructure.BlockData_Update | LSM6DSL_ACC_GYRO_IF_INC_ENABLED) << 8);
 8002784:	7a3b      	ldrb	r3, [r7, #8]
 8002786:	f043 0304 	orr.w	r3, r3, #4
 800278a:	b2db      	uxtb	r3, r3
 800278c:	021b      	lsls	r3, r3, #8
 800278e:	b21a      	sxth	r2, r3
 8002790:	f9b7 300c 	ldrsh.w	r3, [r7, #12]
 8002794:	4313      	orrs	r3, r2
 8002796:	b21b      	sxth	r3, r3
 8002798:	81bb      	strh	r3, [r7, #12]

    /* Configure the ACCELERO accelerometer main parameters */
    AccelerometerDrv->Init(ctrl);
 800279a:	4b06      	ldr	r3, [pc, #24]	; (80027b4 <BSP_ACCELERO_Init+0x78>)
 800279c:	681b      	ldr	r3, [r3, #0]
 800279e:	681b      	ldr	r3, [r3, #0]
 80027a0:	89ba      	ldrh	r2, [r7, #12]
 80027a2:	4610      	mov	r0, r2
 80027a4:	4798      	blx	r3
  }  

  return ret;
 80027a6:	7bfb      	ldrb	r3, [r7, #15]
}
 80027a8:	4618      	mov	r0, r3
 80027aa:	3710      	adds	r7, #16
 80027ac:	46bd      	mov	sp, r7
 80027ae:	bd80      	pop	{r7, pc}
 80027b0:	20000140 	.word	0x20000140
 80027b4:	20000ffc 	.word	0x20000ffc

080027b8 <BSP_ACCELERO_AccGetXYZ>:
  * @param  pDataXYZ Pointer on 3 angular accelerations table with  
  *                  pDataXYZ[0] = X axis, pDataXYZ[1] = Y axis, pDataXYZ[2] = Z axis
  * @retval None
  */
void BSP_ACCELERO_AccGetXYZ(int16_t *pDataXYZ)
{
 80027b8:	b580      	push	{r7, lr}
 80027ba:	b082      	sub	sp, #8
 80027bc:	af00      	add	r7, sp, #0
 80027be:	6078      	str	r0, [r7, #4]
  if(AccelerometerDrv != NULL)
 80027c0:	4b08      	ldr	r3, [pc, #32]	; (80027e4 <BSP_ACCELERO_AccGetXYZ+0x2c>)
 80027c2:	681b      	ldr	r3, [r3, #0]
 80027c4:	2b00      	cmp	r3, #0
 80027c6:	d009      	beq.n	80027dc <BSP_ACCELERO_AccGetXYZ+0x24>
  {
    if(AccelerometerDrv->GetXYZ != NULL)
 80027c8:	4b06      	ldr	r3, [pc, #24]	; (80027e4 <BSP_ACCELERO_AccGetXYZ+0x2c>)
 80027ca:	681b      	ldr	r3, [r3, #0]
 80027cc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80027ce:	2b00      	cmp	r3, #0
 80027d0:	d004      	beq.n	80027dc <BSP_ACCELERO_AccGetXYZ+0x24>
    {   
      AccelerometerDrv->GetXYZ(pDataXYZ);
 80027d2:	4b04      	ldr	r3, [pc, #16]	; (80027e4 <BSP_ACCELERO_AccGetXYZ+0x2c>)
 80027d4:	681b      	ldr	r3, [r3, #0]
 80027d6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80027d8:	6878      	ldr	r0, [r7, #4]
 80027da:	4798      	blx	r3
    }
  }
}
 80027dc:	bf00      	nop
 80027de:	3708      	adds	r7, #8
 80027e0:	46bd      	mov	sp, r7
 80027e2:	bd80      	pop	{r7, pc}
 80027e4:	20000ffc 	.word	0x20000ffc

080027e8 <BSP_TSENSOR_Init>:
/**
  * @brief  Initializes peripherals used by the I2C Temperature Sensor driver.
  * @retval TSENSOR status
  */
uint32_t BSP_TSENSOR_Init(void)
{  
 80027e8:	b580      	push	{r7, lr}
 80027ea:	b082      	sub	sp, #8
 80027ec:	af00      	add	r7, sp, #0
  uint8_t ret = TSENSOR_ERROR;
 80027ee:	2301      	movs	r3, #1
 80027f0:	71fb      	strb	r3, [r7, #7]

#ifdef USE_LPS22HB_TEMP
  tsensor_drv = &LPS22HB_T_Drv;
#else /* USE_HTS221_TEMP */
  tsensor_drv = &HTS221_T_Drv; 
 80027f2:	4b09      	ldr	r3, [pc, #36]	; (8002818 <BSP_TSENSOR_Init+0x30>)
 80027f4:	4a09      	ldr	r2, [pc, #36]	; (800281c <BSP_TSENSOR_Init+0x34>)
 80027f6:	601a      	str	r2, [r3, #0]
#endif

  /* Low level init */
  SENSOR_IO_Init();
 80027f8:	f7ff ff40 	bl	800267c <SENSOR_IO_Init>

  /* TSENSOR Init */   
  tsensor_drv->Init(TSENSOR_I2C_ADDRESS, NULL);
 80027fc:	4b06      	ldr	r3, [pc, #24]	; (8002818 <BSP_TSENSOR_Init+0x30>)
 80027fe:	681b      	ldr	r3, [r3, #0]
 8002800:	681b      	ldr	r3, [r3, #0]
 8002802:	2100      	movs	r1, #0
 8002804:	20be      	movs	r0, #190	; 0xbe
 8002806:	4798      	blx	r3

  ret = TSENSOR_OK;
 8002808:	2300      	movs	r3, #0
 800280a:	71fb      	strb	r3, [r7, #7]
  
  return ret;
 800280c:	79fb      	ldrb	r3, [r7, #7]
}
 800280e:	4618      	mov	r0, r3
 8002810:	3708      	adds	r7, #8
 8002812:	46bd      	mov	sp, r7
 8002814:	bd80      	pop	{r7, pc}
 8002816:	bf00      	nop
 8002818:	20001000 	.word	0x20001000
 800281c:	20000130 	.word	0x20000130

08002820 <BSP_TSENSOR_ReadTemp>:
/**
  * @brief  Read Temperature register of TS751.
  * @retval STTS751 measured temperature value.
  */
float BSP_TSENSOR_ReadTemp(void)
{ 
 8002820:	b580      	push	{r7, lr}
 8002822:	af00      	add	r7, sp, #0
  return tsensor_drv->ReadTemp(TSENSOR_I2C_ADDRESS);
 8002824:	4b04      	ldr	r3, [pc, #16]	; (8002838 <BSP_TSENSOR_ReadTemp+0x18>)
 8002826:	681b      	ldr	r3, [r3, #0]
 8002828:	68db      	ldr	r3, [r3, #12]
 800282a:	20be      	movs	r0, #190	; 0xbe
 800282c:	4798      	blx	r3
 800282e:	eef0 7a40 	vmov.f32	s15, s0
}
 8002832:	eeb0 0a67 	vmov.f32	s0, s15
 8002836:	bd80      	pop	{r7, pc}
 8002838:	20001000 	.word	0x20001000

0800283c <HTS221_T_Init>:
  * @param  DeviceAddr: I2C device address
  * @param  InitStruct: pointer to a TSENSOR_InitTypeDef structure 
  *         that contains the configuration setting for the HTS221.
  */
void HTS221_T_Init(uint16_t DeviceAddr, TSENSOR_InitTypeDef *pInitStruct)
{  
 800283c:	b580      	push	{r7, lr}
 800283e:	b084      	sub	sp, #16
 8002840:	af00      	add	r7, sp, #0
 8002842:	4603      	mov	r3, r0
 8002844:	6039      	str	r1, [r7, #0]
 8002846:	80fb      	strh	r3, [r7, #6]
  uint8_t tmp;
  
  /* Read CTRL_REG1 */
  tmp = SENSOR_IO_Read(DeviceAddr, HTS221_CTRL_REG1);
 8002848:	88fb      	ldrh	r3, [r7, #6]
 800284a:	b2db      	uxtb	r3, r3
 800284c:	2120      	movs	r1, #32
 800284e:	4618      	mov	r0, r3
 8002850:	f7ff ff38 	bl	80026c4 <SENSOR_IO_Read>
 8002854:	4603      	mov	r3, r0
 8002856:	73fb      	strb	r3, [r7, #15]
  
  /* Enable BDU */
  tmp &= ~HTS221_BDU_MASK;
 8002858:	7bfb      	ldrb	r3, [r7, #15]
 800285a:	f023 0304 	bic.w	r3, r3, #4
 800285e:	73fb      	strb	r3, [r7, #15]
  tmp |= (1 << HTS221_BDU_BIT);
 8002860:	7bfb      	ldrb	r3, [r7, #15]
 8002862:	f043 0304 	orr.w	r3, r3, #4
 8002866:	73fb      	strb	r3, [r7, #15]
  
  /* Set default ODR */
  tmp &= ~HTS221_ODR_MASK;
 8002868:	7bfb      	ldrb	r3, [r7, #15]
 800286a:	f023 0303 	bic.w	r3, r3, #3
 800286e:	73fb      	strb	r3, [r7, #15]
  tmp |= (uint8_t)0x01; /* Set ODR to 1Hz */
 8002870:	7bfb      	ldrb	r3, [r7, #15]
 8002872:	f043 0301 	orr.w	r3, r3, #1
 8002876:	73fb      	strb	r3, [r7, #15]
  
  /* Activate the device */
  tmp |= HTS221_PD_MASK;
 8002878:	7bfb      	ldrb	r3, [r7, #15]
 800287a:	f063 037f 	orn	r3, r3, #127	; 0x7f
 800287e:	73fb      	strb	r3, [r7, #15]
  
  /* Apply settings to CTRL_REG1 */
  SENSOR_IO_Write(DeviceAddr, HTS221_CTRL_REG1, tmp);
 8002880:	88fb      	ldrh	r3, [r7, #6]
 8002882:	b2db      	uxtb	r3, r3
 8002884:	7bfa      	ldrb	r2, [r7, #15]
 8002886:	2120      	movs	r1, #32
 8002888:	4618      	mov	r0, r3
 800288a:	f7ff ff01 	bl	8002690 <SENSOR_IO_Write>
}
 800288e:	bf00      	nop
 8002890:	3710      	adds	r7, #16
 8002892:	46bd      	mov	sp, r7
 8002894:	bd80      	pop	{r7, pc}

08002896 <HTS221_T_ReadTemp>:
  * @brief  Read temperature value of HTS221
  * @param  DeviceAddr: I2C device address
  * @retval temperature value
  */
float HTS221_T_ReadTemp(uint16_t DeviceAddr)
{
 8002896:	b580      	push	{r7, lr}
 8002898:	b088      	sub	sp, #32
 800289a:	af00      	add	r7, sp, #0
 800289c:	4603      	mov	r3, r0
 800289e:	80fb      	strh	r3, [r7, #6]
  int16_t T0_out, T1_out, T_out, T0_degC_x8_u16, T1_degC_x8_u16;
  int16_t T0_degC, T1_degC;
  uint8_t buffer[4], tmp;
  float tmp_f;

  SENSOR_IO_ReadMultiple(DeviceAddr, (HTS221_T0_DEGC_X8 | 0x80), buffer, 2);
 80028a0:	88fb      	ldrh	r3, [r7, #6]
 80028a2:	b2d8      	uxtb	r0, r3
 80028a4:	f107 0208 	add.w	r2, r7, #8
 80028a8:	2302      	movs	r3, #2
 80028aa:	21b2      	movs	r1, #178	; 0xb2
 80028ac:	f7ff ff28 	bl	8002700 <SENSOR_IO_ReadMultiple>
  tmp = SENSOR_IO_Read(DeviceAddr, HTS221_T0_T1_DEGC_H2);
 80028b0:	88fb      	ldrh	r3, [r7, #6]
 80028b2:	b2db      	uxtb	r3, r3
 80028b4:	2135      	movs	r1, #53	; 0x35
 80028b6:	4618      	mov	r0, r3
 80028b8:	f7ff ff04 	bl	80026c4 <SENSOR_IO_Read>
 80028bc:	4603      	mov	r3, r0
 80028be:	77fb      	strb	r3, [r7, #31]

  T0_degC_x8_u16 = (((uint16_t)(tmp & 0x03)) << 8) | ((uint16_t)buffer[0]);
 80028c0:	7ffb      	ldrb	r3, [r7, #31]
 80028c2:	021b      	lsls	r3, r3, #8
 80028c4:	b21b      	sxth	r3, r3
 80028c6:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80028ca:	b21a      	sxth	r2, r3
 80028cc:	7a3b      	ldrb	r3, [r7, #8]
 80028ce:	b21b      	sxth	r3, r3
 80028d0:	4313      	orrs	r3, r2
 80028d2:	83bb      	strh	r3, [r7, #28]
  T1_degC_x8_u16 = (((uint16_t)(tmp & 0x0C)) << 6) | ((uint16_t)buffer[1]);
 80028d4:	7ffb      	ldrb	r3, [r7, #31]
 80028d6:	019b      	lsls	r3, r3, #6
 80028d8:	b21b      	sxth	r3, r3
 80028da:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80028de:	b21a      	sxth	r2, r3
 80028e0:	7a7b      	ldrb	r3, [r7, #9]
 80028e2:	b21b      	sxth	r3, r3
 80028e4:	4313      	orrs	r3, r2
 80028e6:	837b      	strh	r3, [r7, #26]
  T0_degC = T0_degC_x8_u16 >> 3;
 80028e8:	f9b7 301c 	ldrsh.w	r3, [r7, #28]
 80028ec:	10db      	asrs	r3, r3, #3
 80028ee:	833b      	strh	r3, [r7, #24]
  T1_degC = T1_degC_x8_u16 >> 3;
 80028f0:	f9b7 301a 	ldrsh.w	r3, [r7, #26]
 80028f4:	10db      	asrs	r3, r3, #3
 80028f6:	82fb      	strh	r3, [r7, #22]

  SENSOR_IO_ReadMultiple(DeviceAddr, (HTS221_T0_OUT_L | 0x80), buffer, 4);
 80028f8:	88fb      	ldrh	r3, [r7, #6]
 80028fa:	b2d8      	uxtb	r0, r3
 80028fc:	f107 0208 	add.w	r2, r7, #8
 8002900:	2304      	movs	r3, #4
 8002902:	21bc      	movs	r1, #188	; 0xbc
 8002904:	f7ff fefc 	bl	8002700 <SENSOR_IO_ReadMultiple>

  T0_out = (((uint16_t)buffer[1]) << 8) | (uint16_t)buffer[0];
 8002908:	7a7b      	ldrb	r3, [r7, #9]
 800290a:	021b      	lsls	r3, r3, #8
 800290c:	b21a      	sxth	r2, r3
 800290e:	7a3b      	ldrb	r3, [r7, #8]
 8002910:	b21b      	sxth	r3, r3
 8002912:	4313      	orrs	r3, r2
 8002914:	82bb      	strh	r3, [r7, #20]
  T1_out = (((uint16_t)buffer[3]) << 8) | (uint16_t)buffer[2];
 8002916:	7afb      	ldrb	r3, [r7, #11]
 8002918:	021b      	lsls	r3, r3, #8
 800291a:	b21a      	sxth	r2, r3
 800291c:	7abb      	ldrb	r3, [r7, #10]
 800291e:	b21b      	sxth	r3, r3
 8002920:	4313      	orrs	r3, r2
 8002922:	827b      	strh	r3, [r7, #18]

  SENSOR_IO_ReadMultiple(DeviceAddr, (HTS221_TEMP_OUT_L_REG | 0x80), buffer, 2);
 8002924:	88fb      	ldrh	r3, [r7, #6]
 8002926:	b2d8      	uxtb	r0, r3
 8002928:	f107 0208 	add.w	r2, r7, #8
 800292c:	2302      	movs	r3, #2
 800292e:	21aa      	movs	r1, #170	; 0xaa
 8002930:	f7ff fee6 	bl	8002700 <SENSOR_IO_ReadMultiple>

  T_out = (((uint16_t)buffer[1]) << 8) | (uint16_t)buffer[0];
 8002934:	7a7b      	ldrb	r3, [r7, #9]
 8002936:	021b      	lsls	r3, r3, #8
 8002938:	b21a      	sxth	r2, r3
 800293a:	7a3b      	ldrb	r3, [r7, #8]
 800293c:	b21b      	sxth	r3, r3
 800293e:	4313      	orrs	r3, r2
 8002940:	823b      	strh	r3, [r7, #16]

  tmp_f = (float)(T_out - T0_out) * (float)(T1_degC - T0_degC) / (float)(T1_out - T0_out)  +  T0_degC;
 8002942:	f9b7 2010 	ldrsh.w	r2, [r7, #16]
 8002946:	f9b7 3014 	ldrsh.w	r3, [r7, #20]
 800294a:	1ad3      	subs	r3, r2, r3
 800294c:	ee07 3a90 	vmov	s15, r3
 8002950:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8002954:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 8002958:	f9b7 3018 	ldrsh.w	r3, [r7, #24]
 800295c:	1ad3      	subs	r3, r2, r3
 800295e:	ee07 3a90 	vmov	s15, r3
 8002962:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8002966:	ee67 6a27 	vmul.f32	s13, s14, s15
 800296a:	f9b7 2012 	ldrsh.w	r2, [r7, #18]
 800296e:	f9b7 3014 	ldrsh.w	r3, [r7, #20]
 8002972:	1ad3      	subs	r3, r2, r3
 8002974:	ee07 3a90 	vmov	s15, r3
 8002978:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800297c:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8002980:	f9b7 3018 	ldrsh.w	r3, [r7, #24]
 8002984:	ee07 3a90 	vmov	s15, r3
 8002988:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800298c:	ee77 7a27 	vadd.f32	s15, s14, s15
 8002990:	edc7 7a03 	vstr	s15, [r7, #12]

  return tmp_f;
 8002994:	68fb      	ldr	r3, [r7, #12]
 8002996:	ee07 3a90 	vmov	s15, r3
}
 800299a:	eeb0 0a67 	vmov.f32	s0, s15
 800299e:	3720      	adds	r7, #32
 80029a0:	46bd      	mov	sp, r7
 80029a2:	bd80      	pop	{r7, pc}

080029a4 <LSM6DSL_AccInit>:
/**
  * @brief  Set LSM6DSL Accelerometer Initialization.
  * @param  InitStruct: Init parameters
  */
void LSM6DSL_AccInit(uint16_t InitStruct)
{  
 80029a4:	b580      	push	{r7, lr}
 80029a6:	b084      	sub	sp, #16
 80029a8:	af00      	add	r7, sp, #0
 80029aa:	4603      	mov	r3, r0
 80029ac:	80fb      	strh	r3, [r7, #6]
  uint8_t ctrl = 0x00;
 80029ae:	2300      	movs	r3, #0
 80029b0:	73fb      	strb	r3, [r7, #15]
  uint8_t tmp;

  /* Read CTRL1_XL */
  tmp = SENSOR_IO_Read(LSM6DSL_ACC_GYRO_I2C_ADDRESS_LOW, LSM6DSL_ACC_GYRO_CTRL1_XL);
 80029b2:	2110      	movs	r1, #16
 80029b4:	20d4      	movs	r0, #212	; 0xd4
 80029b6:	f7ff fe85 	bl	80026c4 <SENSOR_IO_Read>
 80029ba:	4603      	mov	r3, r0
 80029bc:	73bb      	strb	r3, [r7, #14]

  /* Write value to ACC MEMS CTRL1_XL register: FS and Data Rate */
  ctrl = (uint8_t) InitStruct;
 80029be:	88fb      	ldrh	r3, [r7, #6]
 80029c0:	73fb      	strb	r3, [r7, #15]
  tmp &= ~(0xFC);
 80029c2:	7bbb      	ldrb	r3, [r7, #14]
 80029c4:	f003 0303 	and.w	r3, r3, #3
 80029c8:	73bb      	strb	r3, [r7, #14]
  tmp |= ctrl;
 80029ca:	7bba      	ldrb	r2, [r7, #14]
 80029cc:	7bfb      	ldrb	r3, [r7, #15]
 80029ce:	4313      	orrs	r3, r2
 80029d0:	73bb      	strb	r3, [r7, #14]
  SENSOR_IO_Write(LSM6DSL_ACC_GYRO_I2C_ADDRESS_LOW, LSM6DSL_ACC_GYRO_CTRL1_XL, tmp);
 80029d2:	7bbb      	ldrb	r3, [r7, #14]
 80029d4:	461a      	mov	r2, r3
 80029d6:	2110      	movs	r1, #16
 80029d8:	20d4      	movs	r0, #212	; 0xd4
 80029da:	f7ff fe59 	bl	8002690 <SENSOR_IO_Write>

  /* Read CTRL3_C */
  tmp = SENSOR_IO_Read(LSM6DSL_ACC_GYRO_I2C_ADDRESS_LOW, LSM6DSL_ACC_GYRO_CTRL3_C);
 80029de:	2112      	movs	r1, #18
 80029e0:	20d4      	movs	r0, #212	; 0xd4
 80029e2:	f7ff fe6f 	bl	80026c4 <SENSOR_IO_Read>
 80029e6:	4603      	mov	r3, r0
 80029e8:	73bb      	strb	r3, [r7, #14]

  /* Write value to ACC MEMS CTRL3_C register: BDU and Auto-increment */
  ctrl = ((uint8_t) (InitStruct >> 8));
 80029ea:	88fb      	ldrh	r3, [r7, #6]
 80029ec:	0a1b      	lsrs	r3, r3, #8
 80029ee:	b29b      	uxth	r3, r3
 80029f0:	73fb      	strb	r3, [r7, #15]
  tmp &= ~(0x44);
 80029f2:	7bbb      	ldrb	r3, [r7, #14]
 80029f4:	f023 0344 	bic.w	r3, r3, #68	; 0x44
 80029f8:	73bb      	strb	r3, [r7, #14]
  tmp |= ctrl; 
 80029fa:	7bba      	ldrb	r2, [r7, #14]
 80029fc:	7bfb      	ldrb	r3, [r7, #15]
 80029fe:	4313      	orrs	r3, r2
 8002a00:	73bb      	strb	r3, [r7, #14]
  SENSOR_IO_Write(LSM6DSL_ACC_GYRO_I2C_ADDRESS_LOW, LSM6DSL_ACC_GYRO_CTRL3_C, tmp);
 8002a02:	7bbb      	ldrb	r3, [r7, #14]
 8002a04:	461a      	mov	r2, r3
 8002a06:	2112      	movs	r1, #18
 8002a08:	20d4      	movs	r0, #212	; 0xd4
 8002a0a:	f7ff fe41 	bl	8002690 <SENSOR_IO_Write>
}
 8002a0e:	bf00      	nop
 8002a10:	3710      	adds	r7, #16
 8002a12:	46bd      	mov	sp, r7
 8002a14:	bd80      	pop	{r7, pc}

08002a16 <LSM6DSL_AccDeInit>:

/**
  * @brief  LSM6DSL Accelerometer De-initialization.
  */
void LSM6DSL_AccDeInit(void)
{
 8002a16:	b580      	push	{r7, lr}
 8002a18:	b082      	sub	sp, #8
 8002a1a:	af00      	add	r7, sp, #0
  uint8_t ctrl = 0x00;
 8002a1c:	2300      	movs	r3, #0
 8002a1e:	71fb      	strb	r3, [r7, #7]
  
  /* Read control register 1 value */
  ctrl = SENSOR_IO_Read(LSM6DSL_ACC_GYRO_I2C_ADDRESS_LOW, LSM6DSL_ACC_GYRO_CTRL1_XL);
 8002a20:	2110      	movs	r1, #16
 8002a22:	20d4      	movs	r0, #212	; 0xd4
 8002a24:	f7ff fe4e 	bl	80026c4 <SENSOR_IO_Read>
 8002a28:	4603      	mov	r3, r0
 8002a2a:	71fb      	strb	r3, [r7, #7]

  /* Clear ODR bits */
  ctrl &= ~(LSM6DSL_ODR_BITPOSITION);
 8002a2c:	79fb      	ldrb	r3, [r7, #7]
 8002a2e:	f003 030f 	and.w	r3, r3, #15
 8002a32:	71fb      	strb	r3, [r7, #7]

  /* Set Power down */
  ctrl |= LSM6DSL_ODR_POWER_DOWN;
  
  /* write back control register */
  SENSOR_IO_Write(LSM6DSL_ACC_GYRO_I2C_ADDRESS_LOW, LSM6DSL_ACC_GYRO_CTRL1_XL, ctrl);
 8002a34:	79fb      	ldrb	r3, [r7, #7]
 8002a36:	461a      	mov	r2, r3
 8002a38:	2110      	movs	r1, #16
 8002a3a:	20d4      	movs	r0, #212	; 0xd4
 8002a3c:	f7ff fe28 	bl	8002690 <SENSOR_IO_Write>
}
 8002a40:	bf00      	nop
 8002a42:	3708      	adds	r7, #8
 8002a44:	46bd      	mov	sp, r7
 8002a46:	bd80      	pop	{r7, pc}

08002a48 <LSM6DSL_AccReadID>:
/**
  * @brief  Read LSM6DSL ID.
  * @retval ID 
  */
uint8_t LSM6DSL_AccReadID(void)
{  
 8002a48:	b580      	push	{r7, lr}
 8002a4a:	af00      	add	r7, sp, #0
  /* IO interface initialization */
  SENSOR_IO_Init();
 8002a4c:	f7ff fe16 	bl	800267c <SENSOR_IO_Init>
  /* Read value at Who am I register address */
  return (SENSOR_IO_Read(LSM6DSL_ACC_GYRO_I2C_ADDRESS_LOW, LSM6DSL_ACC_GYRO_WHO_AM_I_REG));
 8002a50:	210f      	movs	r1, #15
 8002a52:	20d4      	movs	r0, #212	; 0xd4
 8002a54:	f7ff fe36 	bl	80026c4 <SENSOR_IO_Read>
 8002a58:	4603      	mov	r3, r0
}
 8002a5a:	4618      	mov	r0, r3
 8002a5c:	bd80      	pop	{r7, pc}

08002a5e <LSM6DSL_AccLowPower>:
/**
  * @brief  Set/Unset Accelerometer in low power mode.
  * @param  status 0 means disable Low Power Mode, otherwise Low Power Mode is enabled
  */
void LSM6DSL_AccLowPower(uint16_t status)
{
 8002a5e:	b580      	push	{r7, lr}
 8002a60:	b084      	sub	sp, #16
 8002a62:	af00      	add	r7, sp, #0
 8002a64:	4603      	mov	r3, r0
 8002a66:	80fb      	strh	r3, [r7, #6]
  uint8_t ctrl = 0x00;
 8002a68:	2300      	movs	r3, #0
 8002a6a:	73fb      	strb	r3, [r7, #15]
  
  /* Read CTRL6_C value */
  ctrl = SENSOR_IO_Read(LSM6DSL_ACC_GYRO_I2C_ADDRESS_LOW, LSM6DSL_ACC_GYRO_CTRL6_C);
 8002a6c:	2115      	movs	r1, #21
 8002a6e:	20d4      	movs	r0, #212	; 0xd4
 8002a70:	f7ff fe28 	bl	80026c4 <SENSOR_IO_Read>
 8002a74:	4603      	mov	r3, r0
 8002a76:	73fb      	strb	r3, [r7, #15]

  /* Clear Low Power Mode bit */
  ctrl &= ~(0x10);
 8002a78:	7bfb      	ldrb	r3, [r7, #15]
 8002a7a:	f023 0310 	bic.w	r3, r3, #16
 8002a7e:	73fb      	strb	r3, [r7, #15]

  /* Set Low Power Mode */
  if(status)
 8002a80:	88fb      	ldrh	r3, [r7, #6]
 8002a82:	2b00      	cmp	r3, #0
 8002a84:	d003      	beq.n	8002a8e <LSM6DSL_AccLowPower+0x30>
  {
    ctrl |= LSM6DSL_ACC_GYRO_LP_XL_ENABLED;
 8002a86:	7bfb      	ldrb	r3, [r7, #15]
 8002a88:	f043 0310 	orr.w	r3, r3, #16
 8002a8c:	73fb      	strb	r3, [r7, #15]
  {
    ctrl |= LSM6DSL_ACC_GYRO_LP_XL_DISABLED;
  }
  
  /* write back control register */
  SENSOR_IO_Write(LSM6DSL_ACC_GYRO_I2C_ADDRESS_LOW, LSM6DSL_ACC_GYRO_CTRL6_C, ctrl);
 8002a8e:	7bfb      	ldrb	r3, [r7, #15]
 8002a90:	461a      	mov	r2, r3
 8002a92:	2115      	movs	r1, #21
 8002a94:	20d4      	movs	r0, #212	; 0xd4
 8002a96:	f7ff fdfb 	bl	8002690 <SENSOR_IO_Write>
}
 8002a9a:	bf00      	nop
 8002a9c:	3710      	adds	r7, #16
 8002a9e:	46bd      	mov	sp, r7
 8002aa0:	bd80      	pop	{r7, pc}
	...

08002aa4 <LSM6DSL_AccReadXYZ>:
/**
  * @brief  Read X, Y & Z Acceleration values 
  * @param  pData: Data out pointer
  */
void LSM6DSL_AccReadXYZ(int16_t* pData)
{
 8002aa4:	b580      	push	{r7, lr}
 8002aa6:	b088      	sub	sp, #32
 8002aa8:	af00      	add	r7, sp, #0
 8002aaa:	6078      	str	r0, [r7, #4]
  int16_t pnRawData[3];
  uint8_t ctrlx= 0;
 8002aac:	2300      	movs	r3, #0
 8002aae:	75fb      	strb	r3, [r7, #23]
  uint8_t buffer[6];
  uint8_t i = 0;
 8002ab0:	2300      	movs	r3, #0
 8002ab2:	77fb      	strb	r3, [r7, #31]
  float sensitivity = 0;
 8002ab4:	f04f 0300 	mov.w	r3, #0
 8002ab8:	61bb      	str	r3, [r7, #24]
  
  /* Read the acceleration control register content */
  ctrlx = SENSOR_IO_Read(LSM6DSL_ACC_GYRO_I2C_ADDRESS_LOW, LSM6DSL_ACC_GYRO_CTRL1_XL);
 8002aba:	2110      	movs	r1, #16
 8002abc:	20d4      	movs	r0, #212	; 0xd4
 8002abe:	f7ff fe01 	bl	80026c4 <SENSOR_IO_Read>
 8002ac2:	4603      	mov	r3, r0
 8002ac4:	75fb      	strb	r3, [r7, #23]
  
  /* Read output register X, Y & Z acceleration */
  SENSOR_IO_ReadMultiple(LSM6DSL_ACC_GYRO_I2C_ADDRESS_LOW, LSM6DSL_ACC_GYRO_OUTX_L_XL, buffer, 6);
 8002ac6:	f107 0208 	add.w	r2, r7, #8
 8002aca:	2306      	movs	r3, #6
 8002acc:	2128      	movs	r1, #40	; 0x28
 8002ace:	20d4      	movs	r0, #212	; 0xd4
 8002ad0:	f7ff fe16 	bl	8002700 <SENSOR_IO_ReadMultiple>
  
  for(i=0; i<3; i++)
 8002ad4:	2300      	movs	r3, #0
 8002ad6:	77fb      	strb	r3, [r7, #31]
 8002ad8:	e01c      	b.n	8002b14 <LSM6DSL_AccReadXYZ+0x70>
  {
    pnRawData[i]=((((uint16_t)buffer[2*i+1]) << 8) + (uint16_t)buffer[2*i]);
 8002ada:	7ffb      	ldrb	r3, [r7, #31]
 8002adc:	005b      	lsls	r3, r3, #1
 8002ade:	3301      	adds	r3, #1
 8002ae0:	3320      	adds	r3, #32
 8002ae2:	443b      	add	r3, r7
 8002ae4:	f813 3c18 	ldrb.w	r3, [r3, #-24]
 8002ae8:	b29b      	uxth	r3, r3
 8002aea:	021b      	lsls	r3, r3, #8
 8002aec:	b29a      	uxth	r2, r3
 8002aee:	7ffb      	ldrb	r3, [r7, #31]
 8002af0:	005b      	lsls	r3, r3, #1
 8002af2:	3320      	adds	r3, #32
 8002af4:	443b      	add	r3, r7
 8002af6:	f813 3c18 	ldrb.w	r3, [r3, #-24]
 8002afa:	b29b      	uxth	r3, r3
 8002afc:	4413      	add	r3, r2
 8002afe:	b29a      	uxth	r2, r3
 8002b00:	7ffb      	ldrb	r3, [r7, #31]
 8002b02:	b212      	sxth	r2, r2
 8002b04:	005b      	lsls	r3, r3, #1
 8002b06:	3320      	adds	r3, #32
 8002b08:	443b      	add	r3, r7
 8002b0a:	f823 2c10 	strh.w	r2, [r3, #-16]
  for(i=0; i<3; i++)
 8002b0e:	7ffb      	ldrb	r3, [r7, #31]
 8002b10:	3301      	adds	r3, #1
 8002b12:	77fb      	strb	r3, [r7, #31]
 8002b14:	7ffb      	ldrb	r3, [r7, #31]
 8002b16:	2b02      	cmp	r3, #2
 8002b18:	d9df      	bls.n	8002ada <LSM6DSL_AccReadXYZ+0x36>
  }
  
  /* Normal mode */
  /* Switch the sensitivity value set in the CRTL1_XL */
  switch(ctrlx & 0x0C)
 8002b1a:	7dfb      	ldrb	r3, [r7, #23]
 8002b1c:	f003 030c 	and.w	r3, r3, #12
 8002b20:	2b0c      	cmp	r3, #12
 8002b22:	d829      	bhi.n	8002b78 <LSM6DSL_AccReadXYZ+0xd4>
 8002b24:	a201      	add	r2, pc, #4	; (adr r2, 8002b2c <LSM6DSL_AccReadXYZ+0x88>)
 8002b26:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002b2a:	bf00      	nop
 8002b2c:	08002b61 	.word	0x08002b61
 8002b30:	08002b79 	.word	0x08002b79
 8002b34:	08002b79 	.word	0x08002b79
 8002b38:	08002b79 	.word	0x08002b79
 8002b3c:	08002b73 	.word	0x08002b73
 8002b40:	08002b79 	.word	0x08002b79
 8002b44:	08002b79 	.word	0x08002b79
 8002b48:	08002b79 	.word	0x08002b79
 8002b4c:	08002b67 	.word	0x08002b67
 8002b50:	08002b79 	.word	0x08002b79
 8002b54:	08002b79 	.word	0x08002b79
 8002b58:	08002b79 	.word	0x08002b79
 8002b5c:	08002b6d 	.word	0x08002b6d
  {
  case LSM6DSL_ACC_FULLSCALE_2G:
    sensitivity = LSM6DSL_ACC_SENSITIVITY_2G;
 8002b60:	4b18      	ldr	r3, [pc, #96]	; (8002bc4 <LSM6DSL_AccReadXYZ+0x120>)
 8002b62:	61bb      	str	r3, [r7, #24]
    break;
 8002b64:	e008      	b.n	8002b78 <LSM6DSL_AccReadXYZ+0xd4>
  case LSM6DSL_ACC_FULLSCALE_4G:
    sensitivity = LSM6DSL_ACC_SENSITIVITY_4G;
 8002b66:	4b18      	ldr	r3, [pc, #96]	; (8002bc8 <LSM6DSL_AccReadXYZ+0x124>)
 8002b68:	61bb      	str	r3, [r7, #24]
    break;
 8002b6a:	e005      	b.n	8002b78 <LSM6DSL_AccReadXYZ+0xd4>
  case LSM6DSL_ACC_FULLSCALE_8G:
    sensitivity = LSM6DSL_ACC_SENSITIVITY_8G;
 8002b6c:	4b17      	ldr	r3, [pc, #92]	; (8002bcc <LSM6DSL_AccReadXYZ+0x128>)
 8002b6e:	61bb      	str	r3, [r7, #24]
    break;
 8002b70:	e002      	b.n	8002b78 <LSM6DSL_AccReadXYZ+0xd4>
  case LSM6DSL_ACC_FULLSCALE_16G:
    sensitivity = LSM6DSL_ACC_SENSITIVITY_16G;
 8002b72:	4b17      	ldr	r3, [pc, #92]	; (8002bd0 <LSM6DSL_AccReadXYZ+0x12c>)
 8002b74:	61bb      	str	r3, [r7, #24]
    break;    
 8002b76:	bf00      	nop
  }
  
  /* Obtain the mg value for the three axis */
  for(i=0; i<3; i++)
 8002b78:	2300      	movs	r3, #0
 8002b7a:	77fb      	strb	r3, [r7, #31]
 8002b7c:	e01a      	b.n	8002bb4 <LSM6DSL_AccReadXYZ+0x110>
  {
    pData[i]=( int16_t )(pnRawData[i] * sensitivity);
 8002b7e:	7ffb      	ldrb	r3, [r7, #31]
 8002b80:	005b      	lsls	r3, r3, #1
 8002b82:	3320      	adds	r3, #32
 8002b84:	443b      	add	r3, r7
 8002b86:	f933 3c10 	ldrsh.w	r3, [r3, #-16]
 8002b8a:	ee07 3a90 	vmov	s15, r3
 8002b8e:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8002b92:	edd7 7a06 	vldr	s15, [r7, #24]
 8002b96:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002b9a:	7ffb      	ldrb	r3, [r7, #31]
 8002b9c:	005b      	lsls	r3, r3, #1
 8002b9e:	687a      	ldr	r2, [r7, #4]
 8002ba0:	4413      	add	r3, r2
 8002ba2:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8002ba6:	ee17 2a90 	vmov	r2, s15
 8002baa:	b212      	sxth	r2, r2
 8002bac:	801a      	strh	r2, [r3, #0]
  for(i=0; i<3; i++)
 8002bae:	7ffb      	ldrb	r3, [r7, #31]
 8002bb0:	3301      	adds	r3, #1
 8002bb2:	77fb      	strb	r3, [r7, #31]
 8002bb4:	7ffb      	ldrb	r3, [r7, #31]
 8002bb6:	2b02      	cmp	r3, #2
 8002bb8:	d9e1      	bls.n	8002b7e <LSM6DSL_AccReadXYZ+0xda>
  }
}
 8002bba:	bf00      	nop
 8002bbc:	bf00      	nop
 8002bbe:	3720      	adds	r7, #32
 8002bc0:	46bd      	mov	sp, r7
 8002bc2:	bd80      	pop	{r7, pc}
 8002bc4:	3d79db23 	.word	0x3d79db23
 8002bc8:	3df9db23 	.word	0x3df9db23
 8002bcc:	3e79db23 	.word	0x3e79db23
 8002bd0:	3ef9db23 	.word	0x3ef9db23

08002bd4 <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8002bd4:	b580      	push	{r7, lr}
 8002bd6:	b082      	sub	sp, #8
 8002bd8:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8002bda:	2300      	movs	r3, #0
 8002bdc:	71fb      	strb	r3, [r7, #7]
#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8002bde:	2003      	movs	r0, #3
 8002be0:	f000 f960 	bl	8002ea4 <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8002be4:	2000      	movs	r0, #0
 8002be6:	f000 f80d 	bl	8002c04 <HAL_InitTick>
 8002bea:	4603      	mov	r3, r0
 8002bec:	2b00      	cmp	r3, #0
 8002bee:	d002      	beq.n	8002bf6 <HAL_Init+0x22>
  {
    status = HAL_ERROR;
 8002bf0:	2301      	movs	r3, #1
 8002bf2:	71fb      	strb	r3, [r7, #7]
 8002bf4:	e001      	b.n	8002bfa <HAL_Init+0x26>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8002bf6:	f7fe ffeb 	bl	8001bd0 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8002bfa:	79fb      	ldrb	r3, [r7, #7]
}
 8002bfc:	4618      	mov	r0, r3
 8002bfe:	3708      	adds	r7, #8
 8002c00:	46bd      	mov	sp, r7
 8002c02:	bd80      	pop	{r7, pc}

08002c04 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority  Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8002c04:	b580      	push	{r7, lr}
 8002c06:	b084      	sub	sp, #16
 8002c08:	af00      	add	r7, sp, #0
 8002c0a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 8002c0c:	2300      	movs	r3, #0
 8002c0e:	73fb      	strb	r3, [r7, #15]

  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that doesn't take the value zero)*/
  if ((uint32_t)uwTickFreq != 0U)
 8002c10:	4b17      	ldr	r3, [pc, #92]	; (8002c70 <HAL_InitTick+0x6c>)
 8002c12:	781b      	ldrb	r3, [r3, #0]
 8002c14:	2b00      	cmp	r3, #0
 8002c16:	d023      	beq.n	8002c60 <HAL_InitTick+0x5c>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / (uint32_t)uwTickFreq)) == 0U)
 8002c18:	4b16      	ldr	r3, [pc, #88]	; (8002c74 <HAL_InitTick+0x70>)
 8002c1a:	681a      	ldr	r2, [r3, #0]
 8002c1c:	4b14      	ldr	r3, [pc, #80]	; (8002c70 <HAL_InitTick+0x6c>)
 8002c1e:	781b      	ldrb	r3, [r3, #0]
 8002c20:	4619      	mov	r1, r3
 8002c22:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8002c26:	fbb3 f3f1 	udiv	r3, r3, r1
 8002c2a:	fbb2 f3f3 	udiv	r3, r2, r3
 8002c2e:	4618      	mov	r0, r3
 8002c30:	f000 f96d 	bl	8002f0e <HAL_SYSTICK_Config>
 8002c34:	4603      	mov	r3, r0
 8002c36:	2b00      	cmp	r3, #0
 8002c38:	d10f      	bne.n	8002c5a <HAL_InitTick+0x56>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8002c3a:	687b      	ldr	r3, [r7, #4]
 8002c3c:	2b0f      	cmp	r3, #15
 8002c3e:	d809      	bhi.n	8002c54 <HAL_InitTick+0x50>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8002c40:	2200      	movs	r2, #0
 8002c42:	6879      	ldr	r1, [r7, #4]
 8002c44:	f04f 30ff 	mov.w	r0, #4294967295
 8002c48:	f000 f937 	bl	8002eba <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8002c4c:	4a0a      	ldr	r2, [pc, #40]	; (8002c78 <HAL_InitTick+0x74>)
 8002c4e:	687b      	ldr	r3, [r7, #4]
 8002c50:	6013      	str	r3, [r2, #0]
 8002c52:	e007      	b.n	8002c64 <HAL_InitTick+0x60>
      }
      else
      {
        status = HAL_ERROR;
 8002c54:	2301      	movs	r3, #1
 8002c56:	73fb      	strb	r3, [r7, #15]
 8002c58:	e004      	b.n	8002c64 <HAL_InitTick+0x60>
      }
    }
    else
    {
      status = HAL_ERROR;
 8002c5a:	2301      	movs	r3, #1
 8002c5c:	73fb      	strb	r3, [r7, #15]
 8002c5e:	e001      	b.n	8002c64 <HAL_InitTick+0x60>
    }
  }
  else
  {
    status = HAL_ERROR;
 8002c60:	2301      	movs	r3, #1
 8002c62:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 8002c64:	7bfb      	ldrb	r3, [r7, #15]
}
 8002c66:	4618      	mov	r0, r3
 8002c68:	3710      	adds	r7, #16
 8002c6a:	46bd      	mov	sp, r7
 8002c6c:	bd80      	pop	{r7, pc}
 8002c6e:	bf00      	nop
 8002c70:	20000178 	.word	0x20000178
 8002c74:	2000012c 	.word	0x2000012c
 8002c78:	20000174 	.word	0x20000174

08002c7c <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8002c7c:	b480      	push	{r7}
 8002c7e:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8002c80:	4b06      	ldr	r3, [pc, #24]	; (8002c9c <HAL_IncTick+0x20>)
 8002c82:	781b      	ldrb	r3, [r3, #0]
 8002c84:	461a      	mov	r2, r3
 8002c86:	4b06      	ldr	r3, [pc, #24]	; (8002ca0 <HAL_IncTick+0x24>)
 8002c88:	681b      	ldr	r3, [r3, #0]
 8002c8a:	4413      	add	r3, r2
 8002c8c:	4a04      	ldr	r2, [pc, #16]	; (8002ca0 <HAL_IncTick+0x24>)
 8002c8e:	6013      	str	r3, [r2, #0]
}
 8002c90:	bf00      	nop
 8002c92:	46bd      	mov	sp, r7
 8002c94:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c98:	4770      	bx	lr
 8002c9a:	bf00      	nop
 8002c9c:	20000178 	.word	0x20000178
 8002ca0:	20001004 	.word	0x20001004

08002ca4 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8002ca4:	b480      	push	{r7}
 8002ca6:	af00      	add	r7, sp, #0
  return uwTick;
 8002ca8:	4b03      	ldr	r3, [pc, #12]	; (8002cb8 <HAL_GetTick+0x14>)
 8002caa:	681b      	ldr	r3, [r3, #0]
}
 8002cac:	4618      	mov	r0, r3
 8002cae:	46bd      	mov	sp, r7
 8002cb0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002cb4:	4770      	bx	lr
 8002cb6:	bf00      	nop
 8002cb8:	20001004 	.word	0x20001004

08002cbc <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8002cbc:	b580      	push	{r7, lr}
 8002cbe:	b084      	sub	sp, #16
 8002cc0:	af00      	add	r7, sp, #0
 8002cc2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8002cc4:	f7ff ffee 	bl	8002ca4 <HAL_GetTick>
 8002cc8:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8002cca:	687b      	ldr	r3, [r7, #4]
 8002ccc:	60fb      	str	r3, [r7, #12]

  /* Add a period to guaranty minimum wait */
  if (wait < HAL_MAX_DELAY)
 8002cce:	68fb      	ldr	r3, [r7, #12]
 8002cd0:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002cd4:	d005      	beq.n	8002ce2 <HAL_Delay+0x26>
  {
    wait += (uint32_t)uwTickFreq;
 8002cd6:	4b0a      	ldr	r3, [pc, #40]	; (8002d00 <HAL_Delay+0x44>)
 8002cd8:	781b      	ldrb	r3, [r3, #0]
 8002cda:	461a      	mov	r2, r3
 8002cdc:	68fb      	ldr	r3, [r7, #12]
 8002cde:	4413      	add	r3, r2
 8002ce0:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8002ce2:	bf00      	nop
 8002ce4:	f7ff ffde 	bl	8002ca4 <HAL_GetTick>
 8002ce8:	4602      	mov	r2, r0
 8002cea:	68bb      	ldr	r3, [r7, #8]
 8002cec:	1ad3      	subs	r3, r2, r3
 8002cee:	68fa      	ldr	r2, [r7, #12]
 8002cf0:	429a      	cmp	r2, r3
 8002cf2:	d8f7      	bhi.n	8002ce4 <HAL_Delay+0x28>
  {
  }
}
 8002cf4:	bf00      	nop
 8002cf6:	bf00      	nop
 8002cf8:	3710      	adds	r7, #16
 8002cfa:	46bd      	mov	sp, r7
 8002cfc:	bd80      	pop	{r7, pc}
 8002cfe:	bf00      	nop
 8002d00:	20000178 	.word	0x20000178

08002d04 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002d04:	b480      	push	{r7}
 8002d06:	b085      	sub	sp, #20
 8002d08:	af00      	add	r7, sp, #0
 8002d0a:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8002d0c:	687b      	ldr	r3, [r7, #4]
 8002d0e:	f003 0307 	and.w	r3, r3, #7
 8002d12:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8002d14:	4b0c      	ldr	r3, [pc, #48]	; (8002d48 <__NVIC_SetPriorityGrouping+0x44>)
 8002d16:	68db      	ldr	r3, [r3, #12]
 8002d18:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8002d1a:	68ba      	ldr	r2, [r7, #8]
 8002d1c:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8002d20:	4013      	ands	r3, r2
 8002d22:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8002d24:	68fb      	ldr	r3, [r7, #12]
 8002d26:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8002d28:	68bb      	ldr	r3, [r7, #8]
 8002d2a:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8002d2c:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8002d30:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002d34:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8002d36:	4a04      	ldr	r2, [pc, #16]	; (8002d48 <__NVIC_SetPriorityGrouping+0x44>)
 8002d38:	68bb      	ldr	r3, [r7, #8]
 8002d3a:	60d3      	str	r3, [r2, #12]
}
 8002d3c:	bf00      	nop
 8002d3e:	3714      	adds	r7, #20
 8002d40:	46bd      	mov	sp, r7
 8002d42:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d46:	4770      	bx	lr
 8002d48:	e000ed00 	.word	0xe000ed00

08002d4c <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8002d4c:	b480      	push	{r7}
 8002d4e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8002d50:	4b04      	ldr	r3, [pc, #16]	; (8002d64 <__NVIC_GetPriorityGrouping+0x18>)
 8002d52:	68db      	ldr	r3, [r3, #12]
 8002d54:	0a1b      	lsrs	r3, r3, #8
 8002d56:	f003 0307 	and.w	r3, r3, #7
}
 8002d5a:	4618      	mov	r0, r3
 8002d5c:	46bd      	mov	sp, r7
 8002d5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d62:	4770      	bx	lr
 8002d64:	e000ed00 	.word	0xe000ed00

08002d68 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002d68:	b480      	push	{r7}
 8002d6a:	b083      	sub	sp, #12
 8002d6c:	af00      	add	r7, sp, #0
 8002d6e:	4603      	mov	r3, r0
 8002d70:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002d72:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002d76:	2b00      	cmp	r3, #0
 8002d78:	db0b      	blt.n	8002d92 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8002d7a:	79fb      	ldrb	r3, [r7, #7]
 8002d7c:	f003 021f 	and.w	r2, r3, #31
 8002d80:	4907      	ldr	r1, [pc, #28]	; (8002da0 <__NVIC_EnableIRQ+0x38>)
 8002d82:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002d86:	095b      	lsrs	r3, r3, #5
 8002d88:	2001      	movs	r0, #1
 8002d8a:	fa00 f202 	lsl.w	r2, r0, r2
 8002d8e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8002d92:	bf00      	nop
 8002d94:	370c      	adds	r7, #12
 8002d96:	46bd      	mov	sp, r7
 8002d98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d9c:	4770      	bx	lr
 8002d9e:	bf00      	nop
 8002da0:	e000e100 	.word	0xe000e100

08002da4 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8002da4:	b480      	push	{r7}
 8002da6:	b083      	sub	sp, #12
 8002da8:	af00      	add	r7, sp, #0
 8002daa:	4603      	mov	r3, r0
 8002dac:	6039      	str	r1, [r7, #0]
 8002dae:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002db0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002db4:	2b00      	cmp	r3, #0
 8002db6:	db0a      	blt.n	8002dce <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002db8:	683b      	ldr	r3, [r7, #0]
 8002dba:	b2da      	uxtb	r2, r3
 8002dbc:	490c      	ldr	r1, [pc, #48]	; (8002df0 <__NVIC_SetPriority+0x4c>)
 8002dbe:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002dc2:	0112      	lsls	r2, r2, #4
 8002dc4:	b2d2      	uxtb	r2, r2
 8002dc6:	440b      	add	r3, r1
 8002dc8:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8002dcc:	e00a      	b.n	8002de4 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002dce:	683b      	ldr	r3, [r7, #0]
 8002dd0:	b2da      	uxtb	r2, r3
 8002dd2:	4908      	ldr	r1, [pc, #32]	; (8002df4 <__NVIC_SetPriority+0x50>)
 8002dd4:	79fb      	ldrb	r3, [r7, #7]
 8002dd6:	f003 030f 	and.w	r3, r3, #15
 8002dda:	3b04      	subs	r3, #4
 8002ddc:	0112      	lsls	r2, r2, #4
 8002dde:	b2d2      	uxtb	r2, r2
 8002de0:	440b      	add	r3, r1
 8002de2:	761a      	strb	r2, [r3, #24]
}
 8002de4:	bf00      	nop
 8002de6:	370c      	adds	r7, #12
 8002de8:	46bd      	mov	sp, r7
 8002dea:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002dee:	4770      	bx	lr
 8002df0:	e000e100 	.word	0xe000e100
 8002df4:	e000ed00 	.word	0xe000ed00

08002df8 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002df8:	b480      	push	{r7}
 8002dfa:	b089      	sub	sp, #36	; 0x24
 8002dfc:	af00      	add	r7, sp, #0
 8002dfe:	60f8      	str	r0, [r7, #12]
 8002e00:	60b9      	str	r1, [r7, #8]
 8002e02:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8002e04:	68fb      	ldr	r3, [r7, #12]
 8002e06:	f003 0307 	and.w	r3, r3, #7
 8002e0a:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8002e0c:	69fb      	ldr	r3, [r7, #28]
 8002e0e:	f1c3 0307 	rsb	r3, r3, #7
 8002e12:	2b04      	cmp	r3, #4
 8002e14:	bf28      	it	cs
 8002e16:	2304      	movcs	r3, #4
 8002e18:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8002e1a:	69fb      	ldr	r3, [r7, #28]
 8002e1c:	3304      	adds	r3, #4
 8002e1e:	2b06      	cmp	r3, #6
 8002e20:	d902      	bls.n	8002e28 <NVIC_EncodePriority+0x30>
 8002e22:	69fb      	ldr	r3, [r7, #28]
 8002e24:	3b03      	subs	r3, #3
 8002e26:	e000      	b.n	8002e2a <NVIC_EncodePriority+0x32>
 8002e28:	2300      	movs	r3, #0
 8002e2a:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002e2c:	f04f 32ff 	mov.w	r2, #4294967295
 8002e30:	69bb      	ldr	r3, [r7, #24]
 8002e32:	fa02 f303 	lsl.w	r3, r2, r3
 8002e36:	43da      	mvns	r2, r3
 8002e38:	68bb      	ldr	r3, [r7, #8]
 8002e3a:	401a      	ands	r2, r3
 8002e3c:	697b      	ldr	r3, [r7, #20]
 8002e3e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8002e40:	f04f 31ff 	mov.w	r1, #4294967295
 8002e44:	697b      	ldr	r3, [r7, #20]
 8002e46:	fa01 f303 	lsl.w	r3, r1, r3
 8002e4a:	43d9      	mvns	r1, r3
 8002e4c:	687b      	ldr	r3, [r7, #4]
 8002e4e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002e50:	4313      	orrs	r3, r2
         );
}
 8002e52:	4618      	mov	r0, r3
 8002e54:	3724      	adds	r7, #36	; 0x24
 8002e56:	46bd      	mov	sp, r7
 8002e58:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e5c:	4770      	bx	lr
	...

08002e60 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8002e60:	b580      	push	{r7, lr}
 8002e62:	b082      	sub	sp, #8
 8002e64:	af00      	add	r7, sp, #0
 8002e66:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8002e68:	687b      	ldr	r3, [r7, #4]
 8002e6a:	3b01      	subs	r3, #1
 8002e6c:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8002e70:	d301      	bcc.n	8002e76 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8002e72:	2301      	movs	r3, #1
 8002e74:	e00f      	b.n	8002e96 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8002e76:	4a0a      	ldr	r2, [pc, #40]	; (8002ea0 <SysTick_Config+0x40>)
 8002e78:	687b      	ldr	r3, [r7, #4]
 8002e7a:	3b01      	subs	r3, #1
 8002e7c:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8002e7e:	210f      	movs	r1, #15
 8002e80:	f04f 30ff 	mov.w	r0, #4294967295
 8002e84:	f7ff ff8e 	bl	8002da4 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8002e88:	4b05      	ldr	r3, [pc, #20]	; (8002ea0 <SysTick_Config+0x40>)
 8002e8a:	2200      	movs	r2, #0
 8002e8c:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8002e8e:	4b04      	ldr	r3, [pc, #16]	; (8002ea0 <SysTick_Config+0x40>)
 8002e90:	2207      	movs	r2, #7
 8002e92:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8002e94:	2300      	movs	r3, #0
}
 8002e96:	4618      	mov	r0, r3
 8002e98:	3708      	adds	r7, #8
 8002e9a:	46bd      	mov	sp, r7
 8002e9c:	bd80      	pop	{r7, pc}
 8002e9e:	bf00      	nop
 8002ea0:	e000e010 	.word	0xe000e010

08002ea4 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002ea4:	b580      	push	{r7, lr}
 8002ea6:	b082      	sub	sp, #8
 8002ea8:	af00      	add	r7, sp, #0
 8002eaa:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8002eac:	6878      	ldr	r0, [r7, #4]
 8002eae:	f7ff ff29 	bl	8002d04 <__NVIC_SetPriorityGrouping>
}
 8002eb2:	bf00      	nop
 8002eb4:	3708      	adds	r7, #8
 8002eb6:	46bd      	mov	sp, r7
 8002eb8:	bd80      	pop	{r7, pc}

08002eba <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002eba:	b580      	push	{r7, lr}
 8002ebc:	b086      	sub	sp, #24
 8002ebe:	af00      	add	r7, sp, #0
 8002ec0:	4603      	mov	r3, r0
 8002ec2:	60b9      	str	r1, [r7, #8]
 8002ec4:	607a      	str	r2, [r7, #4]
 8002ec6:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 8002ec8:	2300      	movs	r3, #0
 8002eca:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8002ecc:	f7ff ff3e 	bl	8002d4c <__NVIC_GetPriorityGrouping>
 8002ed0:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8002ed2:	687a      	ldr	r2, [r7, #4]
 8002ed4:	68b9      	ldr	r1, [r7, #8]
 8002ed6:	6978      	ldr	r0, [r7, #20]
 8002ed8:	f7ff ff8e 	bl	8002df8 <NVIC_EncodePriority>
 8002edc:	4602      	mov	r2, r0
 8002ede:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002ee2:	4611      	mov	r1, r2
 8002ee4:	4618      	mov	r0, r3
 8002ee6:	f7ff ff5d 	bl	8002da4 <__NVIC_SetPriority>
}
 8002eea:	bf00      	nop
 8002eec:	3718      	adds	r7, #24
 8002eee:	46bd      	mov	sp, r7
 8002ef0:	bd80      	pop	{r7, pc}

08002ef2 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32l4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002ef2:	b580      	push	{r7, lr}
 8002ef4:	b082      	sub	sp, #8
 8002ef6:	af00      	add	r7, sp, #0
 8002ef8:	4603      	mov	r3, r0
 8002efa:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8002efc:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002f00:	4618      	mov	r0, r3
 8002f02:	f7ff ff31 	bl	8002d68 <__NVIC_EnableIRQ>
}
 8002f06:	bf00      	nop
 8002f08:	3708      	adds	r7, #8
 8002f0a:	46bd      	mov	sp, r7
 8002f0c:	bd80      	pop	{r7, pc}

08002f0e <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8002f0e:	b580      	push	{r7, lr}
 8002f10:	b082      	sub	sp, #8
 8002f12:	af00      	add	r7, sp, #0
 8002f14:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8002f16:	6878      	ldr	r0, [r7, #4]
 8002f18:	f7ff ffa2 	bl	8002e60 <SysTick_Config>
 8002f1c:	4603      	mov	r3, r0
}
 8002f1e:	4618      	mov	r0, r3
 8002f20:	3708      	adds	r7, #8
 8002f22:	46bd      	mov	sp, r7
 8002f24:	bd80      	pop	{r7, pc}
	...

08002f28 <HAL_DFSDM_ChannelInit>:
  *         in the DFSDM_ChannelInitTypeDef structure and initialize the associated handle.
  * @param  hdfsdm_channel DFSDM channel handle.
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_DFSDM_ChannelInit(DFSDM_Channel_HandleTypeDef *hdfsdm_channel)
{
 8002f28:	b580      	push	{r7, lr}
 8002f2a:	b082      	sub	sp, #8
 8002f2c:	af00      	add	r7, sp, #0
 8002f2e:	6078      	str	r0, [r7, #4]
  /* Check DFSDM Channel handle */
  if (hdfsdm_channel == NULL)
 8002f30:	687b      	ldr	r3, [r7, #4]
 8002f32:	2b00      	cmp	r3, #0
 8002f34:	d101      	bne.n	8002f3a <HAL_DFSDM_ChannelInit+0x12>
  {
    return HAL_ERROR;
 8002f36:	2301      	movs	r3, #1
 8002f38:	e0ac      	b.n	8003094 <HAL_DFSDM_ChannelInit+0x16c>
  assert_param(IS_DFSDM_CHANNEL_FILTER_OVS_RATIO(hdfsdm_channel->Init.Awd.Oversampling));
  assert_param(IS_DFSDM_CHANNEL_OFFSET(hdfsdm_channel->Init.Offset));
  assert_param(IS_DFSDM_CHANNEL_RIGHT_BIT_SHIFT(hdfsdm_channel->Init.RightBitShift));

  /* Check that channel has not been already initialized */
  if (a_dfsdm1ChannelHandle[DFSDM_GetChannelFromInstance(hdfsdm_channel->Instance)] != NULL)
 8002f3a:	687b      	ldr	r3, [r7, #4]
 8002f3c:	681b      	ldr	r3, [r3, #0]
 8002f3e:	4618      	mov	r0, r3
 8002f40:	f000 f8b2 	bl	80030a8 <DFSDM_GetChannelFromInstance>
 8002f44:	4603      	mov	r3, r0
 8002f46:	4a55      	ldr	r2, [pc, #340]	; (800309c <HAL_DFSDM_ChannelInit+0x174>)
 8002f48:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002f4c:	2b00      	cmp	r3, #0
 8002f4e:	d001      	beq.n	8002f54 <HAL_DFSDM_ChannelInit+0x2c>
  {
    return HAL_ERROR;
 8002f50:	2301      	movs	r3, #1
 8002f52:	e09f      	b.n	8003094 <HAL_DFSDM_ChannelInit+0x16c>
    hdfsdm_channel->MspInitCallback = HAL_DFSDM_ChannelMspInit;
  }
  hdfsdm_channel->MspInitCallback(hdfsdm_channel);
#else
  /* Call MSP init function */
  HAL_DFSDM_ChannelMspInit(hdfsdm_channel);
 8002f54:	6878      	ldr	r0, [r7, #4]
 8002f56:	f7fe fe5f 	bl	8001c18 <HAL_DFSDM_ChannelMspInit>
#endif

  /* Update the channel counter */
  v_dfsdm1ChannelCounter++;
 8002f5a:	4b51      	ldr	r3, [pc, #324]	; (80030a0 <HAL_DFSDM_ChannelInit+0x178>)
 8002f5c:	681b      	ldr	r3, [r3, #0]
 8002f5e:	3301      	adds	r3, #1
 8002f60:	4a4f      	ldr	r2, [pc, #316]	; (80030a0 <HAL_DFSDM_ChannelInit+0x178>)
 8002f62:	6013      	str	r3, [r2, #0]

  /* Configure output serial clock and enable global DFSDM interface only for first channel */
  if (v_dfsdm1ChannelCounter == 1U)
 8002f64:	4b4e      	ldr	r3, [pc, #312]	; (80030a0 <HAL_DFSDM_ChannelInit+0x178>)
 8002f66:	681b      	ldr	r3, [r3, #0]
 8002f68:	2b01      	cmp	r3, #1
 8002f6a:	d125      	bne.n	8002fb8 <HAL_DFSDM_ChannelInit+0x90>
  {
    assert_param(IS_DFSDM_CHANNEL_OUTPUT_CLOCK(hdfsdm_channel->Init.OutputClock.Selection));
    /* Set the output serial clock source */
    DFSDM1_Channel0->CHCFGR1 &= ~(DFSDM_CHCFGR1_CKOUTSRC);
 8002f6c:	4b4d      	ldr	r3, [pc, #308]	; (80030a4 <HAL_DFSDM_ChannelInit+0x17c>)
 8002f6e:	681b      	ldr	r3, [r3, #0]
 8002f70:	4a4c      	ldr	r2, [pc, #304]	; (80030a4 <HAL_DFSDM_ChannelInit+0x17c>)
 8002f72:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 8002f76:	6013      	str	r3, [r2, #0]
    DFSDM1_Channel0->CHCFGR1 |= hdfsdm_channel->Init.OutputClock.Selection;
 8002f78:	4b4a      	ldr	r3, [pc, #296]	; (80030a4 <HAL_DFSDM_ChannelInit+0x17c>)
 8002f7a:	681a      	ldr	r2, [r3, #0]
 8002f7c:	687b      	ldr	r3, [r7, #4]
 8002f7e:	689b      	ldr	r3, [r3, #8]
 8002f80:	4948      	ldr	r1, [pc, #288]	; (80030a4 <HAL_DFSDM_ChannelInit+0x17c>)
 8002f82:	4313      	orrs	r3, r2
 8002f84:	600b      	str	r3, [r1, #0]

    /* Reset clock divider */
    DFSDM1_Channel0->CHCFGR1 &= ~(DFSDM_CHCFGR1_CKOUTDIV);
 8002f86:	4b47      	ldr	r3, [pc, #284]	; (80030a4 <HAL_DFSDM_ChannelInit+0x17c>)
 8002f88:	681b      	ldr	r3, [r3, #0]
 8002f8a:	4a46      	ldr	r2, [pc, #280]	; (80030a4 <HAL_DFSDM_ChannelInit+0x17c>)
 8002f8c:	f423 037f 	bic.w	r3, r3, #16711680	; 0xff0000
 8002f90:	6013      	str	r3, [r2, #0]
    if (hdfsdm_channel->Init.OutputClock.Activation == ENABLE)
 8002f92:	687b      	ldr	r3, [r7, #4]
 8002f94:	791b      	ldrb	r3, [r3, #4]
 8002f96:	2b01      	cmp	r3, #1
 8002f98:	d108      	bne.n	8002fac <HAL_DFSDM_ChannelInit+0x84>
    {
      assert_param(IS_DFSDM_CHANNEL_OUTPUT_CLOCK_DIVIDER(hdfsdm_channel->Init.OutputClock.Divider));
      /* Set the output clock divider */
      DFSDM1_Channel0->CHCFGR1 |= (uint32_t)((hdfsdm_channel->Init.OutputClock.Divider - 1U) <<
 8002f9a:	4b42      	ldr	r3, [pc, #264]	; (80030a4 <HAL_DFSDM_ChannelInit+0x17c>)
 8002f9c:	681a      	ldr	r2, [r3, #0]
 8002f9e:	687b      	ldr	r3, [r7, #4]
 8002fa0:	68db      	ldr	r3, [r3, #12]
 8002fa2:	3b01      	subs	r3, #1
 8002fa4:	041b      	lsls	r3, r3, #16
 8002fa6:	493f      	ldr	r1, [pc, #252]	; (80030a4 <HAL_DFSDM_ChannelInit+0x17c>)
 8002fa8:	4313      	orrs	r3, r2
 8002faa:	600b      	str	r3, [r1, #0]
                                             DFSDM_CHCFGR1_CKOUTDIV_Pos);
    }

    /* enable the DFSDM global interface */
    DFSDM1_Channel0->CHCFGR1 |= DFSDM_CHCFGR1_DFSDMEN;
 8002fac:	4b3d      	ldr	r3, [pc, #244]	; (80030a4 <HAL_DFSDM_ChannelInit+0x17c>)
 8002fae:	681b      	ldr	r3, [r3, #0]
 8002fb0:	4a3c      	ldr	r2, [pc, #240]	; (80030a4 <HAL_DFSDM_ChannelInit+0x17c>)
 8002fb2:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8002fb6:	6013      	str	r3, [r2, #0]
  }

  /* Set channel input parameters */
  hdfsdm_channel->Instance->CHCFGR1 &= ~(DFSDM_CHCFGR1_DATPACK | DFSDM_CHCFGR1_DATMPX |
 8002fb8:	687b      	ldr	r3, [r7, #4]
 8002fba:	681b      	ldr	r3, [r3, #0]
 8002fbc:	681a      	ldr	r2, [r3, #0]
 8002fbe:	687b      	ldr	r3, [r7, #4]
 8002fc0:	681b      	ldr	r3, [r3, #0]
 8002fc2:	f422 4271 	bic.w	r2, r2, #61696	; 0xf100
 8002fc6:	601a      	str	r2, [r3, #0]
                                         DFSDM_CHCFGR1_CHINSEL);
  hdfsdm_channel->Instance->CHCFGR1 |= (hdfsdm_channel->Init.Input.Multiplexer |
 8002fc8:	687b      	ldr	r3, [r7, #4]
 8002fca:	681b      	ldr	r3, [r3, #0]
 8002fcc:	6819      	ldr	r1, [r3, #0]
 8002fce:	687b      	ldr	r3, [r7, #4]
 8002fd0:	691a      	ldr	r2, [r3, #16]
                                        hdfsdm_channel->Init.Input.DataPacking |
 8002fd2:	687b      	ldr	r3, [r7, #4]
 8002fd4:	695b      	ldr	r3, [r3, #20]
  hdfsdm_channel->Instance->CHCFGR1 |= (hdfsdm_channel->Init.Input.Multiplexer |
 8002fd6:	431a      	orrs	r2, r3
                                        hdfsdm_channel->Init.Input.Pins);
 8002fd8:	687b      	ldr	r3, [r7, #4]
 8002fda:	699b      	ldr	r3, [r3, #24]
                                        hdfsdm_channel->Init.Input.DataPacking |
 8002fdc:	431a      	orrs	r2, r3
  hdfsdm_channel->Instance->CHCFGR1 |= (hdfsdm_channel->Init.Input.Multiplexer |
 8002fde:	687b      	ldr	r3, [r7, #4]
 8002fe0:	681b      	ldr	r3, [r3, #0]
 8002fe2:	430a      	orrs	r2, r1
 8002fe4:	601a      	str	r2, [r3, #0]

  /* Set serial interface parameters */
  hdfsdm_channel->Instance->CHCFGR1 &= ~(DFSDM_CHCFGR1_SITP | DFSDM_CHCFGR1_SPICKSEL);
 8002fe6:	687b      	ldr	r3, [r7, #4]
 8002fe8:	681b      	ldr	r3, [r3, #0]
 8002fea:	681a      	ldr	r2, [r3, #0]
 8002fec:	687b      	ldr	r3, [r7, #4]
 8002fee:	681b      	ldr	r3, [r3, #0]
 8002ff0:	f022 020f 	bic.w	r2, r2, #15
 8002ff4:	601a      	str	r2, [r3, #0]
  hdfsdm_channel->Instance->CHCFGR1 |= (hdfsdm_channel->Init.SerialInterface.Type |
 8002ff6:	687b      	ldr	r3, [r7, #4]
 8002ff8:	681b      	ldr	r3, [r3, #0]
 8002ffa:	6819      	ldr	r1, [r3, #0]
 8002ffc:	687b      	ldr	r3, [r7, #4]
 8002ffe:	69da      	ldr	r2, [r3, #28]
                                        hdfsdm_channel->Init.SerialInterface.SpiClock);
 8003000:	687b      	ldr	r3, [r7, #4]
 8003002:	6a1b      	ldr	r3, [r3, #32]
  hdfsdm_channel->Instance->CHCFGR1 |= (hdfsdm_channel->Init.SerialInterface.Type |
 8003004:	431a      	orrs	r2, r3
 8003006:	687b      	ldr	r3, [r7, #4]
 8003008:	681b      	ldr	r3, [r3, #0]
 800300a:	430a      	orrs	r2, r1
 800300c:	601a      	str	r2, [r3, #0]

  /* Set analog watchdog parameters */
  hdfsdm_channel->Instance->CHAWSCDR &= ~(DFSDM_CHAWSCDR_AWFORD | DFSDM_CHAWSCDR_AWFOSR);
 800300e:	687b      	ldr	r3, [r7, #4]
 8003010:	681b      	ldr	r3, [r3, #0]
 8003012:	689a      	ldr	r2, [r3, #8]
 8003014:	687b      	ldr	r3, [r7, #4]
 8003016:	681b      	ldr	r3, [r3, #0]
 8003018:	f422 025f 	bic.w	r2, r2, #14614528	; 0xdf0000
 800301c:	609a      	str	r2, [r3, #8]
  hdfsdm_channel->Instance->CHAWSCDR |= (hdfsdm_channel->Init.Awd.FilterOrder |
 800301e:	687b      	ldr	r3, [r7, #4]
 8003020:	681b      	ldr	r3, [r3, #0]
 8003022:	6899      	ldr	r1, [r3, #8]
 8003024:	687b      	ldr	r3, [r7, #4]
 8003026:	6a5a      	ldr	r2, [r3, #36]	; 0x24
                                         ((hdfsdm_channel->Init.Awd.Oversampling - 1U) << DFSDM_CHAWSCDR_AWFOSR_Pos));
 8003028:	687b      	ldr	r3, [r7, #4]
 800302a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800302c:	3b01      	subs	r3, #1
 800302e:	041b      	lsls	r3, r3, #16
  hdfsdm_channel->Instance->CHAWSCDR |= (hdfsdm_channel->Init.Awd.FilterOrder |
 8003030:	431a      	orrs	r2, r3
 8003032:	687b      	ldr	r3, [r7, #4]
 8003034:	681b      	ldr	r3, [r3, #0]
 8003036:	430a      	orrs	r2, r1
 8003038:	609a      	str	r2, [r3, #8]

  /* Set channel offset and right bit shift */
  hdfsdm_channel->Instance->CHCFGR2 &= ~(DFSDM_CHCFGR2_OFFSET | DFSDM_CHCFGR2_DTRBS);
 800303a:	687b      	ldr	r3, [r7, #4]
 800303c:	681b      	ldr	r3, [r3, #0]
 800303e:	685a      	ldr	r2, [r3, #4]
 8003040:	687b      	ldr	r3, [r7, #4]
 8003042:	681b      	ldr	r3, [r3, #0]
 8003044:	f002 0207 	and.w	r2, r2, #7
 8003048:	605a      	str	r2, [r3, #4]
  hdfsdm_channel->Instance->CHCFGR2 |= (((uint32_t) hdfsdm_channel->Init.Offset << DFSDM_CHCFGR2_OFFSET_Pos) |
 800304a:	687b      	ldr	r3, [r7, #4]
 800304c:	681b      	ldr	r3, [r3, #0]
 800304e:	6859      	ldr	r1, [r3, #4]
 8003050:	687b      	ldr	r3, [r7, #4]
 8003052:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003054:	021a      	lsls	r2, r3, #8
                                        (hdfsdm_channel->Init.RightBitShift << DFSDM_CHCFGR2_DTRBS_Pos));
 8003056:	687b      	ldr	r3, [r7, #4]
 8003058:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800305a:	00db      	lsls	r3, r3, #3
  hdfsdm_channel->Instance->CHCFGR2 |= (((uint32_t) hdfsdm_channel->Init.Offset << DFSDM_CHCFGR2_OFFSET_Pos) |
 800305c:	431a      	orrs	r2, r3
 800305e:	687b      	ldr	r3, [r7, #4]
 8003060:	681b      	ldr	r3, [r3, #0]
 8003062:	430a      	orrs	r2, r1
 8003064:	605a      	str	r2, [r3, #4]

  /* Enable DFSDM channel */
  hdfsdm_channel->Instance->CHCFGR1 |= DFSDM_CHCFGR1_CHEN;
 8003066:	687b      	ldr	r3, [r7, #4]
 8003068:	681b      	ldr	r3, [r3, #0]
 800306a:	681a      	ldr	r2, [r3, #0]
 800306c:	687b      	ldr	r3, [r7, #4]
 800306e:	681b      	ldr	r3, [r3, #0]
 8003070:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8003074:	601a      	str	r2, [r3, #0]

  /* Set DFSDM Channel to ready state */
  hdfsdm_channel->State = HAL_DFSDM_CHANNEL_STATE_READY;
 8003076:	687b      	ldr	r3, [r7, #4]
 8003078:	2201      	movs	r2, #1
 800307a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  /* Store channel handle in DFSDM channel handle table */
  a_dfsdm1ChannelHandle[DFSDM_GetChannelFromInstance(hdfsdm_channel->Instance)] = hdfsdm_channel;
 800307e:	687b      	ldr	r3, [r7, #4]
 8003080:	681b      	ldr	r3, [r3, #0]
 8003082:	4618      	mov	r0, r3
 8003084:	f000 f810 	bl	80030a8 <DFSDM_GetChannelFromInstance>
 8003088:	4602      	mov	r2, r0
 800308a:	4904      	ldr	r1, [pc, #16]	; (800309c <HAL_DFSDM_ChannelInit+0x174>)
 800308c:	687b      	ldr	r3, [r7, #4]
 800308e:	f841 3022 	str.w	r3, [r1, r2, lsl #2]

  return HAL_OK;
 8003092:	2300      	movs	r3, #0
}
 8003094:	4618      	mov	r0, r3
 8003096:	3708      	adds	r7, #8
 8003098:	46bd      	mov	sp, r7
 800309a:	bd80      	pop	{r7, pc}
 800309c:	2000100c 	.word	0x2000100c
 80030a0:	20001008 	.word	0x20001008
 80030a4:	40016000 	.word	0x40016000

080030a8 <DFSDM_GetChannelFromInstance>:
  * @brief  This function allows to get the channel number from channel instance.
  * @param  Instance DFSDM channel instance.
  * @retval Channel number.
  */
static uint32_t DFSDM_GetChannelFromInstance(const DFSDM_Channel_TypeDef *Instance)
{
 80030a8:	b480      	push	{r7}
 80030aa:	b085      	sub	sp, #20
 80030ac:	af00      	add	r7, sp, #0
 80030ae:	6078      	str	r0, [r7, #4]
  uint32_t channel;

  /* Get channel from instance */
  if (Instance == DFSDM1_Channel0)
 80030b0:	687b      	ldr	r3, [r7, #4]
 80030b2:	4a1c      	ldr	r2, [pc, #112]	; (8003124 <DFSDM_GetChannelFromInstance+0x7c>)
 80030b4:	4293      	cmp	r3, r2
 80030b6:	d102      	bne.n	80030be <DFSDM_GetChannelFromInstance+0x16>
  {
    channel = 0;
 80030b8:	2300      	movs	r3, #0
 80030ba:	60fb      	str	r3, [r7, #12]
 80030bc:	e02b      	b.n	8003116 <DFSDM_GetChannelFromInstance+0x6e>
  }
  else if (Instance == DFSDM1_Channel1)
 80030be:	687b      	ldr	r3, [r7, #4]
 80030c0:	4a19      	ldr	r2, [pc, #100]	; (8003128 <DFSDM_GetChannelFromInstance+0x80>)
 80030c2:	4293      	cmp	r3, r2
 80030c4:	d102      	bne.n	80030cc <DFSDM_GetChannelFromInstance+0x24>
  {
    channel = 1;
 80030c6:	2301      	movs	r3, #1
 80030c8:	60fb      	str	r3, [r7, #12]
 80030ca:	e024      	b.n	8003116 <DFSDM_GetChannelFromInstance+0x6e>
  }
  else if (Instance == DFSDM1_Channel2)
 80030cc:	687b      	ldr	r3, [r7, #4]
 80030ce:	4a17      	ldr	r2, [pc, #92]	; (800312c <DFSDM_GetChannelFromInstance+0x84>)
 80030d0:	4293      	cmp	r3, r2
 80030d2:	d102      	bne.n	80030da <DFSDM_GetChannelFromInstance+0x32>
  {
    channel = 2;
 80030d4:	2302      	movs	r3, #2
 80030d6:	60fb      	str	r3, [r7, #12]
 80030d8:	e01d      	b.n	8003116 <DFSDM_GetChannelFromInstance+0x6e>
  }
#if defined(STM32L471xx) || defined(STM32L475xx) || defined(STM32L476xx) || defined(STM32L485xx) || defined(STM32L486xx) || \
    defined(STM32L496xx) || defined(STM32L4A6xx) || \
    defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
  else if (Instance == DFSDM1_Channel4)
 80030da:	687b      	ldr	r3, [r7, #4]
 80030dc:	4a14      	ldr	r2, [pc, #80]	; (8003130 <DFSDM_GetChannelFromInstance+0x88>)
 80030de:	4293      	cmp	r3, r2
 80030e0:	d102      	bne.n	80030e8 <DFSDM_GetChannelFromInstance+0x40>
  {
    channel = 4;
 80030e2:	2304      	movs	r3, #4
 80030e4:	60fb      	str	r3, [r7, #12]
 80030e6:	e016      	b.n	8003116 <DFSDM_GetChannelFromInstance+0x6e>
  }
  else if (Instance == DFSDM1_Channel5)
 80030e8:	687b      	ldr	r3, [r7, #4]
 80030ea:	4a12      	ldr	r2, [pc, #72]	; (8003134 <DFSDM_GetChannelFromInstance+0x8c>)
 80030ec:	4293      	cmp	r3, r2
 80030ee:	d102      	bne.n	80030f6 <DFSDM_GetChannelFromInstance+0x4e>
  {
    channel = 5;
 80030f0:	2305      	movs	r3, #5
 80030f2:	60fb      	str	r3, [r7, #12]
 80030f4:	e00f      	b.n	8003116 <DFSDM_GetChannelFromInstance+0x6e>
  }
  else if (Instance == DFSDM1_Channel6)
 80030f6:	687b      	ldr	r3, [r7, #4]
 80030f8:	4a0f      	ldr	r2, [pc, #60]	; (8003138 <DFSDM_GetChannelFromInstance+0x90>)
 80030fa:	4293      	cmp	r3, r2
 80030fc:	d102      	bne.n	8003104 <DFSDM_GetChannelFromInstance+0x5c>
  {
    channel = 6;
 80030fe:	2306      	movs	r3, #6
 8003100:	60fb      	str	r3, [r7, #12]
 8003102:	e008      	b.n	8003116 <DFSDM_GetChannelFromInstance+0x6e>
  }
  else if (Instance == DFSDM1_Channel7)
 8003104:	687b      	ldr	r3, [r7, #4]
 8003106:	4a0d      	ldr	r2, [pc, #52]	; (800313c <DFSDM_GetChannelFromInstance+0x94>)
 8003108:	4293      	cmp	r3, r2
 800310a:	d102      	bne.n	8003112 <DFSDM_GetChannelFromInstance+0x6a>
  {
    channel = 7;
 800310c:	2307      	movs	r3, #7
 800310e:	60fb      	str	r3, [r7, #12]
 8003110:	e001      	b.n	8003116 <DFSDM_GetChannelFromInstance+0x6e>
  }
#endif /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L485xx || STM32L486xx || STM32L496xx || STM32L4A6xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
  else /* DFSDM1_Channel3 */
  {
    channel = 3;
 8003112:	2303      	movs	r3, #3
 8003114:	60fb      	str	r3, [r7, #12]
  }

  return channel;
 8003116:	68fb      	ldr	r3, [r7, #12]
}
 8003118:	4618      	mov	r0, r3
 800311a:	3714      	adds	r7, #20
 800311c:	46bd      	mov	sp, r7
 800311e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003122:	4770      	bx	lr
 8003124:	40016000 	.word	0x40016000
 8003128:	40016020 	.word	0x40016020
 800312c:	40016040 	.word	0x40016040
 8003130:	40016080 	.word	0x40016080
 8003134:	400160a0 	.word	0x400160a0
 8003138:	400160c0 	.word	0x400160c0
 800313c:	400160e0 	.word	0x400160e0

08003140 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8003140:	b480      	push	{r7}
 8003142:	b087      	sub	sp, #28
 8003144:	af00      	add	r7, sp, #0
 8003146:	6078      	str	r0, [r7, #4]
 8003148:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 800314a:	2300      	movs	r3, #0
 800314c:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 800314e:	e17f      	b.n	8003450 <HAL_GPIO_Init+0x310>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8003150:	683b      	ldr	r3, [r7, #0]
 8003152:	681a      	ldr	r2, [r3, #0]
 8003154:	2101      	movs	r1, #1
 8003156:	697b      	ldr	r3, [r7, #20]
 8003158:	fa01 f303 	lsl.w	r3, r1, r3
 800315c:	4013      	ands	r3, r2
 800315e:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8003160:	68fb      	ldr	r3, [r7, #12]
 8003162:	2b00      	cmp	r3, #0
 8003164:	f000 8171 	beq.w	800344a <HAL_GPIO_Init+0x30a>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8003168:	683b      	ldr	r3, [r7, #0]
 800316a:	685b      	ldr	r3, [r3, #4]
 800316c:	f003 0303 	and.w	r3, r3, #3
 8003170:	2b01      	cmp	r3, #1
 8003172:	d005      	beq.n	8003180 <HAL_GPIO_Init+0x40>
 8003174:	683b      	ldr	r3, [r7, #0]
 8003176:	685b      	ldr	r3, [r3, #4]
 8003178:	f003 0303 	and.w	r3, r3, #3
 800317c:	2b02      	cmp	r3, #2
 800317e:	d130      	bne.n	80031e2 <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8003180:	687b      	ldr	r3, [r7, #4]
 8003182:	689b      	ldr	r3, [r3, #8]
 8003184:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 8003186:	697b      	ldr	r3, [r7, #20]
 8003188:	005b      	lsls	r3, r3, #1
 800318a:	2203      	movs	r2, #3
 800318c:	fa02 f303 	lsl.w	r3, r2, r3
 8003190:	43db      	mvns	r3, r3
 8003192:	693a      	ldr	r2, [r7, #16]
 8003194:	4013      	ands	r3, r2
 8003196:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8003198:	683b      	ldr	r3, [r7, #0]
 800319a:	68da      	ldr	r2, [r3, #12]
 800319c:	697b      	ldr	r3, [r7, #20]
 800319e:	005b      	lsls	r3, r3, #1
 80031a0:	fa02 f303 	lsl.w	r3, r2, r3
 80031a4:	693a      	ldr	r2, [r7, #16]
 80031a6:	4313      	orrs	r3, r2
 80031a8:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 80031aa:	687b      	ldr	r3, [r7, #4]
 80031ac:	693a      	ldr	r2, [r7, #16]
 80031ae:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80031b0:	687b      	ldr	r3, [r7, #4]
 80031b2:	685b      	ldr	r3, [r3, #4]
 80031b4:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 80031b6:	2201      	movs	r2, #1
 80031b8:	697b      	ldr	r3, [r7, #20]
 80031ba:	fa02 f303 	lsl.w	r3, r2, r3
 80031be:	43db      	mvns	r3, r3
 80031c0:	693a      	ldr	r2, [r7, #16]
 80031c2:	4013      	ands	r3, r2
 80031c4:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80031c6:	683b      	ldr	r3, [r7, #0]
 80031c8:	685b      	ldr	r3, [r3, #4]
 80031ca:	091b      	lsrs	r3, r3, #4
 80031cc:	f003 0201 	and.w	r2, r3, #1
 80031d0:	697b      	ldr	r3, [r7, #20]
 80031d2:	fa02 f303 	lsl.w	r3, r2, r3
 80031d6:	693a      	ldr	r2, [r7, #16]
 80031d8:	4313      	orrs	r3, r2
 80031da:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 80031dc:	687b      	ldr	r3, [r7, #4]
 80031de:	693a      	ldr	r2, [r7, #16]
 80031e0:	605a      	str	r2, [r3, #4]
      }

#if defined(STM32L471xx) || defined(STM32L475xx) || defined(STM32L476xx) || defined(STM32L485xx) || defined(STM32L486xx)

      /* In case of Analog mode, check if ADC control mode is selected */
      if((GPIO_Init->Mode & GPIO_MODE_ANALOG) == GPIO_MODE_ANALOG)
 80031e2:	683b      	ldr	r3, [r7, #0]
 80031e4:	685b      	ldr	r3, [r3, #4]
 80031e6:	f003 0303 	and.w	r3, r3, #3
 80031ea:	2b03      	cmp	r3, #3
 80031ec:	d118      	bne.n	8003220 <HAL_GPIO_Init+0xe0>
      {
        /* Configure the IO Output Type */
        temp = GPIOx->ASCR;
 80031ee:	687b      	ldr	r3, [r7, #4]
 80031f0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80031f2:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_ASCR_ASC0 << position) ;
 80031f4:	2201      	movs	r2, #1
 80031f6:	697b      	ldr	r3, [r7, #20]
 80031f8:	fa02 f303 	lsl.w	r3, r2, r3
 80031fc:	43db      	mvns	r3, r3
 80031fe:	693a      	ldr	r2, [r7, #16]
 8003200:	4013      	ands	r3, r2
 8003202:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & GPIO_MODE_ANALOG_ADC_CONTROL) >> 3) << position);
 8003204:	683b      	ldr	r3, [r7, #0]
 8003206:	685b      	ldr	r3, [r3, #4]
 8003208:	08db      	lsrs	r3, r3, #3
 800320a:	f003 0201 	and.w	r2, r3, #1
 800320e:	697b      	ldr	r3, [r7, #20]
 8003210:	fa02 f303 	lsl.w	r3, r2, r3
 8003214:	693a      	ldr	r2, [r7, #16]
 8003216:	4313      	orrs	r3, r2
 8003218:	613b      	str	r3, [r7, #16]
        GPIOx->ASCR = temp;
 800321a:	687b      	ldr	r3, [r7, #4]
 800321c:	693a      	ldr	r2, [r7, #16]
 800321e:	62da      	str	r2, [r3, #44]	; 0x2c
      }

#endif /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L485xx || STM32L486xx */

      /* Activate the Pull-up or Pull down resistor for the current IO */
      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8003220:	683b      	ldr	r3, [r7, #0]
 8003222:	685b      	ldr	r3, [r3, #4]
 8003224:	f003 0303 	and.w	r3, r3, #3
 8003228:	2b03      	cmp	r3, #3
 800322a:	d017      	beq.n	800325c <HAL_GPIO_Init+0x11c>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        temp = GPIOx->PUPDR;
 800322c:	687b      	ldr	r3, [r7, #4]
 800322e:	68db      	ldr	r3, [r3, #12]
 8003230:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8003232:	697b      	ldr	r3, [r7, #20]
 8003234:	005b      	lsls	r3, r3, #1
 8003236:	2203      	movs	r2, #3
 8003238:	fa02 f303 	lsl.w	r3, r2, r3
 800323c:	43db      	mvns	r3, r3
 800323e:	693a      	ldr	r2, [r7, #16]
 8003240:	4013      	ands	r3, r2
 8003242:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8003244:	683b      	ldr	r3, [r7, #0]
 8003246:	689a      	ldr	r2, [r3, #8]
 8003248:	697b      	ldr	r3, [r7, #20]
 800324a:	005b      	lsls	r3, r3, #1
 800324c:	fa02 f303 	lsl.w	r3, r2, r3
 8003250:	693a      	ldr	r2, [r7, #16]
 8003252:	4313      	orrs	r3, r2
 8003254:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8003256:	687b      	ldr	r3, [r7, #4]
 8003258:	693a      	ldr	r2, [r7, #16]
 800325a:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800325c:	683b      	ldr	r3, [r7, #0]
 800325e:	685b      	ldr	r3, [r3, #4]
 8003260:	f003 0303 	and.w	r3, r3, #3
 8003264:	2b02      	cmp	r3, #2
 8003266:	d123      	bne.n	80032b0 <HAL_GPIO_Init+0x170>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 8003268:	697b      	ldr	r3, [r7, #20]
 800326a:	08da      	lsrs	r2, r3, #3
 800326c:	687b      	ldr	r3, [r7, #4]
 800326e:	3208      	adds	r2, #8
 8003270:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8003274:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8003276:	697b      	ldr	r3, [r7, #20]
 8003278:	f003 0307 	and.w	r3, r3, #7
 800327c:	009b      	lsls	r3, r3, #2
 800327e:	220f      	movs	r2, #15
 8003280:	fa02 f303 	lsl.w	r3, r2, r3
 8003284:	43db      	mvns	r3, r3
 8003286:	693a      	ldr	r2, [r7, #16]
 8003288:	4013      	ands	r3, r2
 800328a:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 800328c:	683b      	ldr	r3, [r7, #0]
 800328e:	691a      	ldr	r2, [r3, #16]
 8003290:	697b      	ldr	r3, [r7, #20]
 8003292:	f003 0307 	and.w	r3, r3, #7
 8003296:	009b      	lsls	r3, r3, #2
 8003298:	fa02 f303 	lsl.w	r3, r2, r3
 800329c:	693a      	ldr	r2, [r7, #16]
 800329e:	4313      	orrs	r3, r2
 80032a0:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 80032a2:	697b      	ldr	r3, [r7, #20]
 80032a4:	08da      	lsrs	r2, r3, #3
 80032a6:	687b      	ldr	r3, [r7, #4]
 80032a8:	3208      	adds	r2, #8
 80032aa:	6939      	ldr	r1, [r7, #16]
 80032ac:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80032b0:	687b      	ldr	r3, [r7, #4]
 80032b2:	681b      	ldr	r3, [r3, #0]
 80032b4:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 80032b6:	697b      	ldr	r3, [r7, #20]
 80032b8:	005b      	lsls	r3, r3, #1
 80032ba:	2203      	movs	r2, #3
 80032bc:	fa02 f303 	lsl.w	r3, r2, r3
 80032c0:	43db      	mvns	r3, r3
 80032c2:	693a      	ldr	r2, [r7, #16]
 80032c4:	4013      	ands	r3, r2
 80032c6:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 80032c8:	683b      	ldr	r3, [r7, #0]
 80032ca:	685b      	ldr	r3, [r3, #4]
 80032cc:	f003 0203 	and.w	r2, r3, #3
 80032d0:	697b      	ldr	r3, [r7, #20]
 80032d2:	005b      	lsls	r3, r3, #1
 80032d4:	fa02 f303 	lsl.w	r3, r2, r3
 80032d8:	693a      	ldr	r2, [r7, #16]
 80032da:	4313      	orrs	r3, r2
 80032dc:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 80032de:	687b      	ldr	r3, [r7, #4]
 80032e0:	693a      	ldr	r2, [r7, #16]
 80032e2:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 80032e4:	683b      	ldr	r3, [r7, #0]
 80032e6:	685b      	ldr	r3, [r3, #4]
 80032e8:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 80032ec:	2b00      	cmp	r3, #0
 80032ee:	f000 80ac 	beq.w	800344a <HAL_GPIO_Init+0x30a>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80032f2:	4b5f      	ldr	r3, [pc, #380]	; (8003470 <HAL_GPIO_Init+0x330>)
 80032f4:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80032f6:	4a5e      	ldr	r2, [pc, #376]	; (8003470 <HAL_GPIO_Init+0x330>)
 80032f8:	f043 0301 	orr.w	r3, r3, #1
 80032fc:	6613      	str	r3, [r2, #96]	; 0x60
 80032fe:	4b5c      	ldr	r3, [pc, #368]	; (8003470 <HAL_GPIO_Init+0x330>)
 8003300:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003302:	f003 0301 	and.w	r3, r3, #1
 8003306:	60bb      	str	r3, [r7, #8]
 8003308:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 800330a:	4a5a      	ldr	r2, [pc, #360]	; (8003474 <HAL_GPIO_Init+0x334>)
 800330c:	697b      	ldr	r3, [r7, #20]
 800330e:	089b      	lsrs	r3, r3, #2
 8003310:	3302      	adds	r3, #2
 8003312:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003316:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 8003318:	697b      	ldr	r3, [r7, #20]
 800331a:	f003 0303 	and.w	r3, r3, #3
 800331e:	009b      	lsls	r3, r3, #2
 8003320:	220f      	movs	r2, #15
 8003322:	fa02 f303 	lsl.w	r3, r2, r3
 8003326:	43db      	mvns	r3, r3
 8003328:	693a      	ldr	r2, [r7, #16]
 800332a:	4013      	ands	r3, r2
 800332c:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 800332e:	687b      	ldr	r3, [r7, #4]
 8003330:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 8003334:	d025      	beq.n	8003382 <HAL_GPIO_Init+0x242>
 8003336:	687b      	ldr	r3, [r7, #4]
 8003338:	4a4f      	ldr	r2, [pc, #316]	; (8003478 <HAL_GPIO_Init+0x338>)
 800333a:	4293      	cmp	r3, r2
 800333c:	d01f      	beq.n	800337e <HAL_GPIO_Init+0x23e>
 800333e:	687b      	ldr	r3, [r7, #4]
 8003340:	4a4e      	ldr	r2, [pc, #312]	; (800347c <HAL_GPIO_Init+0x33c>)
 8003342:	4293      	cmp	r3, r2
 8003344:	d019      	beq.n	800337a <HAL_GPIO_Init+0x23a>
 8003346:	687b      	ldr	r3, [r7, #4]
 8003348:	4a4d      	ldr	r2, [pc, #308]	; (8003480 <HAL_GPIO_Init+0x340>)
 800334a:	4293      	cmp	r3, r2
 800334c:	d013      	beq.n	8003376 <HAL_GPIO_Init+0x236>
 800334e:	687b      	ldr	r3, [r7, #4]
 8003350:	4a4c      	ldr	r2, [pc, #304]	; (8003484 <HAL_GPIO_Init+0x344>)
 8003352:	4293      	cmp	r3, r2
 8003354:	d00d      	beq.n	8003372 <HAL_GPIO_Init+0x232>
 8003356:	687b      	ldr	r3, [r7, #4]
 8003358:	4a4b      	ldr	r2, [pc, #300]	; (8003488 <HAL_GPIO_Init+0x348>)
 800335a:	4293      	cmp	r3, r2
 800335c:	d007      	beq.n	800336e <HAL_GPIO_Init+0x22e>
 800335e:	687b      	ldr	r3, [r7, #4]
 8003360:	4a4a      	ldr	r2, [pc, #296]	; (800348c <HAL_GPIO_Init+0x34c>)
 8003362:	4293      	cmp	r3, r2
 8003364:	d101      	bne.n	800336a <HAL_GPIO_Init+0x22a>
 8003366:	2306      	movs	r3, #6
 8003368:	e00c      	b.n	8003384 <HAL_GPIO_Init+0x244>
 800336a:	2307      	movs	r3, #7
 800336c:	e00a      	b.n	8003384 <HAL_GPIO_Init+0x244>
 800336e:	2305      	movs	r3, #5
 8003370:	e008      	b.n	8003384 <HAL_GPIO_Init+0x244>
 8003372:	2304      	movs	r3, #4
 8003374:	e006      	b.n	8003384 <HAL_GPIO_Init+0x244>
 8003376:	2303      	movs	r3, #3
 8003378:	e004      	b.n	8003384 <HAL_GPIO_Init+0x244>
 800337a:	2302      	movs	r3, #2
 800337c:	e002      	b.n	8003384 <HAL_GPIO_Init+0x244>
 800337e:	2301      	movs	r3, #1
 8003380:	e000      	b.n	8003384 <HAL_GPIO_Init+0x244>
 8003382:	2300      	movs	r3, #0
 8003384:	697a      	ldr	r2, [r7, #20]
 8003386:	f002 0203 	and.w	r2, r2, #3
 800338a:	0092      	lsls	r2, r2, #2
 800338c:	4093      	lsls	r3, r2
 800338e:	693a      	ldr	r2, [r7, #16]
 8003390:	4313      	orrs	r3, r2
 8003392:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 8003394:	4937      	ldr	r1, [pc, #220]	; (8003474 <HAL_GPIO_Init+0x334>)
 8003396:	697b      	ldr	r3, [r7, #20]
 8003398:	089b      	lsrs	r3, r3, #2
 800339a:	3302      	adds	r3, #2
 800339c:	693a      	ldr	r2, [r7, #16]
 800339e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 80033a2:	4b3b      	ldr	r3, [pc, #236]	; (8003490 <HAL_GPIO_Init+0x350>)
 80033a4:	689b      	ldr	r3, [r3, #8]
 80033a6:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80033a8:	68fb      	ldr	r3, [r7, #12]
 80033aa:	43db      	mvns	r3, r3
 80033ac:	693a      	ldr	r2, [r7, #16]
 80033ae:	4013      	ands	r3, r2
 80033b0:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 80033b2:	683b      	ldr	r3, [r7, #0]
 80033b4:	685b      	ldr	r3, [r3, #4]
 80033b6:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80033ba:	2b00      	cmp	r3, #0
 80033bc:	d003      	beq.n	80033c6 <HAL_GPIO_Init+0x286>
        {
          temp |= iocurrent;
 80033be:	693a      	ldr	r2, [r7, #16]
 80033c0:	68fb      	ldr	r3, [r7, #12]
 80033c2:	4313      	orrs	r3, r2
 80033c4:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 80033c6:	4a32      	ldr	r2, [pc, #200]	; (8003490 <HAL_GPIO_Init+0x350>)
 80033c8:	693b      	ldr	r3, [r7, #16]
 80033ca:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 80033cc:	4b30      	ldr	r3, [pc, #192]	; (8003490 <HAL_GPIO_Init+0x350>)
 80033ce:	68db      	ldr	r3, [r3, #12]
 80033d0:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80033d2:	68fb      	ldr	r3, [r7, #12]
 80033d4:	43db      	mvns	r3, r3
 80033d6:	693a      	ldr	r2, [r7, #16]
 80033d8:	4013      	ands	r3, r2
 80033da:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 80033dc:	683b      	ldr	r3, [r7, #0]
 80033de:	685b      	ldr	r3, [r3, #4]
 80033e0:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80033e4:	2b00      	cmp	r3, #0
 80033e6:	d003      	beq.n	80033f0 <HAL_GPIO_Init+0x2b0>
        {
          temp |= iocurrent;
 80033e8:	693a      	ldr	r2, [r7, #16]
 80033ea:	68fb      	ldr	r3, [r7, #12]
 80033ec:	4313      	orrs	r3, r2
 80033ee:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 80033f0:	4a27      	ldr	r2, [pc, #156]	; (8003490 <HAL_GPIO_Init+0x350>)
 80033f2:	693b      	ldr	r3, [r7, #16]
 80033f4:	60d3      	str	r3, [r2, #12]

        /* Clear EXTI line configuration */
        temp = EXTI->EMR1;
 80033f6:	4b26      	ldr	r3, [pc, #152]	; (8003490 <HAL_GPIO_Init+0x350>)
 80033f8:	685b      	ldr	r3, [r3, #4]
 80033fa:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80033fc:	68fb      	ldr	r3, [r7, #12]
 80033fe:	43db      	mvns	r3, r3
 8003400:	693a      	ldr	r2, [r7, #16]
 8003402:	4013      	ands	r3, r2
 8003404:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8003406:	683b      	ldr	r3, [r7, #0]
 8003408:	685b      	ldr	r3, [r3, #4]
 800340a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800340e:	2b00      	cmp	r3, #0
 8003410:	d003      	beq.n	800341a <HAL_GPIO_Init+0x2da>
        {
          temp |= iocurrent;
 8003412:	693a      	ldr	r2, [r7, #16]
 8003414:	68fb      	ldr	r3, [r7, #12]
 8003416:	4313      	orrs	r3, r2
 8003418:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 800341a:	4a1d      	ldr	r2, [pc, #116]	; (8003490 <HAL_GPIO_Init+0x350>)
 800341c:	693b      	ldr	r3, [r7, #16]
 800341e:	6053      	str	r3, [r2, #4]

        temp = EXTI->IMR1;
 8003420:	4b1b      	ldr	r3, [pc, #108]	; (8003490 <HAL_GPIO_Init+0x350>)
 8003422:	681b      	ldr	r3, [r3, #0]
 8003424:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8003426:	68fb      	ldr	r3, [r7, #12]
 8003428:	43db      	mvns	r3, r3
 800342a:	693a      	ldr	r2, [r7, #16]
 800342c:	4013      	ands	r3, r2
 800342e:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8003430:	683b      	ldr	r3, [r7, #0]
 8003432:	685b      	ldr	r3, [r3, #4]
 8003434:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003438:	2b00      	cmp	r3, #0
 800343a:	d003      	beq.n	8003444 <HAL_GPIO_Init+0x304>
        {
          temp |= iocurrent;
 800343c:	693a      	ldr	r2, [r7, #16]
 800343e:	68fb      	ldr	r3, [r7, #12]
 8003440:	4313      	orrs	r3, r2
 8003442:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 8003444:	4a12      	ldr	r2, [pc, #72]	; (8003490 <HAL_GPIO_Init+0x350>)
 8003446:	693b      	ldr	r3, [r7, #16]
 8003448:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 800344a:	697b      	ldr	r3, [r7, #20]
 800344c:	3301      	adds	r3, #1
 800344e:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8003450:	683b      	ldr	r3, [r7, #0]
 8003452:	681a      	ldr	r2, [r3, #0]
 8003454:	697b      	ldr	r3, [r7, #20]
 8003456:	fa22 f303 	lsr.w	r3, r2, r3
 800345a:	2b00      	cmp	r3, #0
 800345c:	f47f ae78 	bne.w	8003150 <HAL_GPIO_Init+0x10>
  }
}
 8003460:	bf00      	nop
 8003462:	bf00      	nop
 8003464:	371c      	adds	r7, #28
 8003466:	46bd      	mov	sp, r7
 8003468:	f85d 7b04 	ldr.w	r7, [sp], #4
 800346c:	4770      	bx	lr
 800346e:	bf00      	nop
 8003470:	40021000 	.word	0x40021000
 8003474:	40010000 	.word	0x40010000
 8003478:	48000400 	.word	0x48000400
 800347c:	48000800 	.word	0x48000800
 8003480:	48000c00 	.word	0x48000c00
 8003484:	48001000 	.word	0x48001000
 8003488:	48001400 	.word	0x48001400
 800348c:	48001800 	.word	0x48001800
 8003490:	40010400 	.word	0x40010400

08003494 <HAL_GPIO_DeInit>:
  * @param  GPIO_Pin specifies the port bit to be written.
  *         This parameter can be any combination of GPIO_Pin_x where x can be (0..15).
  * @retval None
  */
void HAL_GPIO_DeInit(GPIO_TypeDef  *GPIOx, uint32_t GPIO_Pin)
{
 8003494:	b480      	push	{r7}
 8003496:	b087      	sub	sp, #28
 8003498:	af00      	add	r7, sp, #0
 800349a:	6078      	str	r0, [r7, #4]
 800349c:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 800349e:	2300      	movs	r3, #0
 80034a0:	617b      	str	r3, [r7, #20]
  /* Check the parameters */
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* Configure the port pins */
  while ((GPIO_Pin >> position) != 0x00u)
 80034a2:	e0cd      	b.n	8003640 <HAL_GPIO_DeInit+0x1ac>
  {
    /* Get current io position */
    iocurrent = (GPIO_Pin) & (1uL << position);
 80034a4:	2201      	movs	r2, #1
 80034a6:	697b      	ldr	r3, [r7, #20]
 80034a8:	fa02 f303 	lsl.w	r3, r2, r3
 80034ac:	683a      	ldr	r2, [r7, #0]
 80034ae:	4013      	ands	r3, r2
 80034b0:	613b      	str	r3, [r7, #16]

    if (iocurrent != 0x00u)
 80034b2:	693b      	ldr	r3, [r7, #16]
 80034b4:	2b00      	cmp	r3, #0
 80034b6:	f000 80c0 	beq.w	800363a <HAL_GPIO_DeInit+0x1a6>
    {
      /*------------------------- EXTI Mode Configuration --------------------*/
      /* Clear the External Interrupt or Event for the current IO */

      tmp = SYSCFG->EXTICR[position >> 2u];
 80034ba:	4a68      	ldr	r2, [pc, #416]	; (800365c <HAL_GPIO_DeInit+0x1c8>)
 80034bc:	697b      	ldr	r3, [r7, #20]
 80034be:	089b      	lsrs	r3, r3, #2
 80034c0:	3302      	adds	r3, #2
 80034c2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80034c6:	60fb      	str	r3, [r7, #12]
      tmp &= (0x0FuL << (4u * (position & 0x03u)));
 80034c8:	697b      	ldr	r3, [r7, #20]
 80034ca:	f003 0303 	and.w	r3, r3, #3
 80034ce:	009b      	lsls	r3, r3, #2
 80034d0:	220f      	movs	r2, #15
 80034d2:	fa02 f303 	lsl.w	r3, r2, r3
 80034d6:	68fa      	ldr	r2, [r7, #12]
 80034d8:	4013      	ands	r3, r2
 80034da:	60fb      	str	r3, [r7, #12]
      if (tmp == (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u))))
 80034dc:	687b      	ldr	r3, [r7, #4]
 80034de:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 80034e2:	d025      	beq.n	8003530 <HAL_GPIO_DeInit+0x9c>
 80034e4:	687b      	ldr	r3, [r7, #4]
 80034e6:	4a5e      	ldr	r2, [pc, #376]	; (8003660 <HAL_GPIO_DeInit+0x1cc>)
 80034e8:	4293      	cmp	r3, r2
 80034ea:	d01f      	beq.n	800352c <HAL_GPIO_DeInit+0x98>
 80034ec:	687b      	ldr	r3, [r7, #4]
 80034ee:	4a5d      	ldr	r2, [pc, #372]	; (8003664 <HAL_GPIO_DeInit+0x1d0>)
 80034f0:	4293      	cmp	r3, r2
 80034f2:	d019      	beq.n	8003528 <HAL_GPIO_DeInit+0x94>
 80034f4:	687b      	ldr	r3, [r7, #4]
 80034f6:	4a5c      	ldr	r2, [pc, #368]	; (8003668 <HAL_GPIO_DeInit+0x1d4>)
 80034f8:	4293      	cmp	r3, r2
 80034fa:	d013      	beq.n	8003524 <HAL_GPIO_DeInit+0x90>
 80034fc:	687b      	ldr	r3, [r7, #4]
 80034fe:	4a5b      	ldr	r2, [pc, #364]	; (800366c <HAL_GPIO_DeInit+0x1d8>)
 8003500:	4293      	cmp	r3, r2
 8003502:	d00d      	beq.n	8003520 <HAL_GPIO_DeInit+0x8c>
 8003504:	687b      	ldr	r3, [r7, #4]
 8003506:	4a5a      	ldr	r2, [pc, #360]	; (8003670 <HAL_GPIO_DeInit+0x1dc>)
 8003508:	4293      	cmp	r3, r2
 800350a:	d007      	beq.n	800351c <HAL_GPIO_DeInit+0x88>
 800350c:	687b      	ldr	r3, [r7, #4]
 800350e:	4a59      	ldr	r2, [pc, #356]	; (8003674 <HAL_GPIO_DeInit+0x1e0>)
 8003510:	4293      	cmp	r3, r2
 8003512:	d101      	bne.n	8003518 <HAL_GPIO_DeInit+0x84>
 8003514:	2306      	movs	r3, #6
 8003516:	e00c      	b.n	8003532 <HAL_GPIO_DeInit+0x9e>
 8003518:	2307      	movs	r3, #7
 800351a:	e00a      	b.n	8003532 <HAL_GPIO_DeInit+0x9e>
 800351c:	2305      	movs	r3, #5
 800351e:	e008      	b.n	8003532 <HAL_GPIO_DeInit+0x9e>
 8003520:	2304      	movs	r3, #4
 8003522:	e006      	b.n	8003532 <HAL_GPIO_DeInit+0x9e>
 8003524:	2303      	movs	r3, #3
 8003526:	e004      	b.n	8003532 <HAL_GPIO_DeInit+0x9e>
 8003528:	2302      	movs	r3, #2
 800352a:	e002      	b.n	8003532 <HAL_GPIO_DeInit+0x9e>
 800352c:	2301      	movs	r3, #1
 800352e:	e000      	b.n	8003532 <HAL_GPIO_DeInit+0x9e>
 8003530:	2300      	movs	r3, #0
 8003532:	697a      	ldr	r2, [r7, #20]
 8003534:	f002 0203 	and.w	r2, r2, #3
 8003538:	0092      	lsls	r2, r2, #2
 800353a:	4093      	lsls	r3, r2
 800353c:	68fa      	ldr	r2, [r7, #12]
 800353e:	429a      	cmp	r2, r3
 8003540:	d132      	bne.n	80035a8 <HAL_GPIO_DeInit+0x114>
      {
        /* Clear EXTI line configuration */
        EXTI->IMR1 &= ~(iocurrent);
 8003542:	4b4d      	ldr	r3, [pc, #308]	; (8003678 <HAL_GPIO_DeInit+0x1e4>)
 8003544:	681a      	ldr	r2, [r3, #0]
 8003546:	693b      	ldr	r3, [r7, #16]
 8003548:	43db      	mvns	r3, r3
 800354a:	494b      	ldr	r1, [pc, #300]	; (8003678 <HAL_GPIO_DeInit+0x1e4>)
 800354c:	4013      	ands	r3, r2
 800354e:	600b      	str	r3, [r1, #0]
        EXTI->EMR1 &= ~(iocurrent);
 8003550:	4b49      	ldr	r3, [pc, #292]	; (8003678 <HAL_GPIO_DeInit+0x1e4>)
 8003552:	685a      	ldr	r2, [r3, #4]
 8003554:	693b      	ldr	r3, [r7, #16]
 8003556:	43db      	mvns	r3, r3
 8003558:	4947      	ldr	r1, [pc, #284]	; (8003678 <HAL_GPIO_DeInit+0x1e4>)
 800355a:	4013      	ands	r3, r2
 800355c:	604b      	str	r3, [r1, #4]

        /* Clear Rising Falling edge configuration */
        EXTI->FTSR1 &= ~(iocurrent);
 800355e:	4b46      	ldr	r3, [pc, #280]	; (8003678 <HAL_GPIO_DeInit+0x1e4>)
 8003560:	68da      	ldr	r2, [r3, #12]
 8003562:	693b      	ldr	r3, [r7, #16]
 8003564:	43db      	mvns	r3, r3
 8003566:	4944      	ldr	r1, [pc, #272]	; (8003678 <HAL_GPIO_DeInit+0x1e4>)
 8003568:	4013      	ands	r3, r2
 800356a:	60cb      	str	r3, [r1, #12]
        EXTI->RTSR1 &= ~(iocurrent);
 800356c:	4b42      	ldr	r3, [pc, #264]	; (8003678 <HAL_GPIO_DeInit+0x1e4>)
 800356e:	689a      	ldr	r2, [r3, #8]
 8003570:	693b      	ldr	r3, [r7, #16]
 8003572:	43db      	mvns	r3, r3
 8003574:	4940      	ldr	r1, [pc, #256]	; (8003678 <HAL_GPIO_DeInit+0x1e4>)
 8003576:	4013      	ands	r3, r2
 8003578:	608b      	str	r3, [r1, #8]

        tmp = 0x0FuL << (4u * (position & 0x03u));
 800357a:	697b      	ldr	r3, [r7, #20]
 800357c:	f003 0303 	and.w	r3, r3, #3
 8003580:	009b      	lsls	r3, r3, #2
 8003582:	220f      	movs	r2, #15
 8003584:	fa02 f303 	lsl.w	r3, r2, r3
 8003588:	60fb      	str	r3, [r7, #12]
        SYSCFG->EXTICR[position >> 2u] &= ~tmp;
 800358a:	4a34      	ldr	r2, [pc, #208]	; (800365c <HAL_GPIO_DeInit+0x1c8>)
 800358c:	697b      	ldr	r3, [r7, #20]
 800358e:	089b      	lsrs	r3, r3, #2
 8003590:	3302      	adds	r3, #2
 8003592:	f852 1023 	ldr.w	r1, [r2, r3, lsl #2]
 8003596:	68fb      	ldr	r3, [r7, #12]
 8003598:	43da      	mvns	r2, r3
 800359a:	4830      	ldr	r0, [pc, #192]	; (800365c <HAL_GPIO_DeInit+0x1c8>)
 800359c:	697b      	ldr	r3, [r7, #20]
 800359e:	089b      	lsrs	r3, r3, #2
 80035a0:	400a      	ands	r2, r1
 80035a2:	3302      	adds	r3, #2
 80035a4:	f840 2023 	str.w	r2, [r0, r3, lsl #2]
      }

      /*------------------------- GPIO Mode Configuration --------------------*/
      /* Configure IO in Analog Mode */
      GPIOx->MODER |= (GPIO_MODER_MODE0 << (position * 2u));
 80035a8:	687b      	ldr	r3, [r7, #4]
 80035aa:	681a      	ldr	r2, [r3, #0]
 80035ac:	697b      	ldr	r3, [r7, #20]
 80035ae:	005b      	lsls	r3, r3, #1
 80035b0:	2103      	movs	r1, #3
 80035b2:	fa01 f303 	lsl.w	r3, r1, r3
 80035b6:	431a      	orrs	r2, r3
 80035b8:	687b      	ldr	r3, [r7, #4]
 80035ba:	601a      	str	r2, [r3, #0]

      /* Configure the default Alternate Function in current IO */
      GPIOx->AFR[position >> 3u] &= ~(0xFu << ((position & 0x07u) * 4u)) ;
 80035bc:	697b      	ldr	r3, [r7, #20]
 80035be:	08da      	lsrs	r2, r3, #3
 80035c0:	687b      	ldr	r3, [r7, #4]
 80035c2:	3208      	adds	r2, #8
 80035c4:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 80035c8:	697b      	ldr	r3, [r7, #20]
 80035ca:	f003 0307 	and.w	r3, r3, #7
 80035ce:	009b      	lsls	r3, r3, #2
 80035d0:	220f      	movs	r2, #15
 80035d2:	fa02 f303 	lsl.w	r3, r2, r3
 80035d6:	43db      	mvns	r3, r3
 80035d8:	697a      	ldr	r2, [r7, #20]
 80035da:	08d2      	lsrs	r2, r2, #3
 80035dc:	4019      	ands	r1, r3
 80035de:	687b      	ldr	r3, [r7, #4]
 80035e0:	3208      	adds	r2, #8
 80035e2:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

      /* Configure the default value for IO Speed */
      GPIOx->OSPEEDR &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 80035e6:	687b      	ldr	r3, [r7, #4]
 80035e8:	689a      	ldr	r2, [r3, #8]
 80035ea:	697b      	ldr	r3, [r7, #20]
 80035ec:	005b      	lsls	r3, r3, #1
 80035ee:	2103      	movs	r1, #3
 80035f0:	fa01 f303 	lsl.w	r3, r1, r3
 80035f4:	43db      	mvns	r3, r3
 80035f6:	401a      	ands	r2, r3
 80035f8:	687b      	ldr	r3, [r7, #4]
 80035fa:	609a      	str	r2, [r3, #8]

      /* Configure the default value IO Output Type */
      GPIOx->OTYPER  &= ~(GPIO_OTYPER_OT0 << position) ;
 80035fc:	687b      	ldr	r3, [r7, #4]
 80035fe:	685a      	ldr	r2, [r3, #4]
 8003600:	2101      	movs	r1, #1
 8003602:	697b      	ldr	r3, [r7, #20]
 8003604:	fa01 f303 	lsl.w	r3, r1, r3
 8003608:	43db      	mvns	r3, r3
 800360a:	401a      	ands	r2, r3
 800360c:	687b      	ldr	r3, [r7, #4]
 800360e:	605a      	str	r2, [r3, #4]

      /* Deactivate the Pull-up and Pull-down resistor for the current IO */
      GPIOx->PUPDR &= ~(GPIO_PUPDR_PUPD0 << (position * 2u));
 8003610:	687b      	ldr	r3, [r7, #4]
 8003612:	68da      	ldr	r2, [r3, #12]
 8003614:	697b      	ldr	r3, [r7, #20]
 8003616:	005b      	lsls	r3, r3, #1
 8003618:	2103      	movs	r1, #3
 800361a:	fa01 f303 	lsl.w	r3, r1, r3
 800361e:	43db      	mvns	r3, r3
 8003620:	401a      	ands	r2, r3
 8003622:	687b      	ldr	r3, [r7, #4]
 8003624:	60da      	str	r2, [r3, #12]

#if defined(STM32L471xx) || defined(STM32L475xx) || defined(STM32L476xx) || defined(STM32L485xx) || defined(STM32L486xx)
      /* Deactivate the Control bit of Analog mode for the current IO */
      GPIOx->ASCR &= ~(GPIO_ASCR_ASC0<< position);
 8003626:	687b      	ldr	r3, [r7, #4]
 8003628:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800362a:	2101      	movs	r1, #1
 800362c:	697b      	ldr	r3, [r7, #20]
 800362e:	fa01 f303 	lsl.w	r3, r1, r3
 8003632:	43db      	mvns	r3, r3
 8003634:	401a      	ands	r2, r3
 8003636:	687b      	ldr	r3, [r7, #4]
 8003638:	62da      	str	r2, [r3, #44]	; 0x2c
#endif /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L485xx || STM32L486xx */
    }

    position++;
 800363a:	697b      	ldr	r3, [r7, #20]
 800363c:	3301      	adds	r3, #1
 800363e:	617b      	str	r3, [r7, #20]
  while ((GPIO_Pin >> position) != 0x00u)
 8003640:	683a      	ldr	r2, [r7, #0]
 8003642:	697b      	ldr	r3, [r7, #20]
 8003644:	fa22 f303 	lsr.w	r3, r2, r3
 8003648:	2b00      	cmp	r3, #0
 800364a:	f47f af2b 	bne.w	80034a4 <HAL_GPIO_DeInit+0x10>
  }
}
 800364e:	bf00      	nop
 8003650:	bf00      	nop
 8003652:	371c      	adds	r7, #28
 8003654:	46bd      	mov	sp, r7
 8003656:	f85d 7b04 	ldr.w	r7, [sp], #4
 800365a:	4770      	bx	lr
 800365c:	40010000 	.word	0x40010000
 8003660:	48000400 	.word	0x48000400
 8003664:	48000800 	.word	0x48000800
 8003668:	48000c00 	.word	0x48000c00
 800366c:	48001000 	.word	0x48001000
 8003670:	48001400 	.word	0x48001400
 8003674:	48001800 	.word	0x48001800
 8003678:	40010400 	.word	0x40010400

0800367c <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 800367c:	b480      	push	{r7}
 800367e:	b083      	sub	sp, #12
 8003680:	af00      	add	r7, sp, #0
 8003682:	6078      	str	r0, [r7, #4]
 8003684:	460b      	mov	r3, r1
 8003686:	807b      	strh	r3, [r7, #2]
 8003688:	4613      	mov	r3, r2
 800368a:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 800368c:	787b      	ldrb	r3, [r7, #1]
 800368e:	2b00      	cmp	r3, #0
 8003690:	d003      	beq.n	800369a <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8003692:	887a      	ldrh	r2, [r7, #2]
 8003694:	687b      	ldr	r3, [r7, #4]
 8003696:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8003698:	e002      	b.n	80036a0 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 800369a:	887a      	ldrh	r2, [r7, #2]
 800369c:	687b      	ldr	r3, [r7, #4]
 800369e:	629a      	str	r2, [r3, #40]	; 0x28
}
 80036a0:	bf00      	nop
 80036a2:	370c      	adds	r7, #12
 80036a4:	46bd      	mov	sp, r7
 80036a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80036aa:	4770      	bx	lr

080036ac <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  Handle EXTI interrupt request.
  * @param  GPIO_Pin Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 80036ac:	b580      	push	{r7, lr}
 80036ae:	b082      	sub	sp, #8
 80036b0:	af00      	add	r7, sp, #0
 80036b2:	4603      	mov	r3, r0
 80036b4:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00u)
 80036b6:	4b08      	ldr	r3, [pc, #32]	; (80036d8 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 80036b8:	695a      	ldr	r2, [r3, #20]
 80036ba:	88fb      	ldrh	r3, [r7, #6]
 80036bc:	4013      	ands	r3, r2
 80036be:	2b00      	cmp	r3, #0
 80036c0:	d006      	beq.n	80036d0 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 80036c2:	4a05      	ldr	r2, [pc, #20]	; (80036d8 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 80036c4:	88fb      	ldrh	r3, [r7, #6]
 80036c6:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 80036c8:	88fb      	ldrh	r3, [r7, #6]
 80036ca:	4618      	mov	r0, r3
 80036cc:	f000 f806 	bl	80036dc <HAL_GPIO_EXTI_Callback>
  }
}
 80036d0:	bf00      	nop
 80036d2:	3708      	adds	r7, #8
 80036d4:	46bd      	mov	sp, r7
 80036d6:	bd80      	pop	{r7, pc}
 80036d8:	40010400 	.word	0x40010400

080036dc <HAL_GPIO_EXTI_Callback>:
  * @brief  EXTI line detection callback.
  * @param  GPIO_Pin Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
__weak void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 80036dc:	b480      	push	{r7}
 80036de:	b083      	sub	sp, #12
 80036e0:	af00      	add	r7, sp, #0
 80036e2:	4603      	mov	r3, r0
 80036e4:	80fb      	strh	r3, [r7, #6]
  UNUSED(GPIO_Pin);

  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_GPIO_EXTI_Callback could be implemented in the user file
   */
}
 80036e6:	bf00      	nop
 80036e8:	370c      	adds	r7, #12
 80036ea:	46bd      	mov	sp, r7
 80036ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80036f0:	4770      	bx	lr

080036f2 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 80036f2:	b580      	push	{r7, lr}
 80036f4:	b082      	sub	sp, #8
 80036f6:	af00      	add	r7, sp, #0
 80036f8:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 80036fa:	687b      	ldr	r3, [r7, #4]
 80036fc:	2b00      	cmp	r3, #0
 80036fe:	d101      	bne.n	8003704 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8003700:	2301      	movs	r3, #1
 8003702:	e081      	b.n	8003808 <HAL_I2C_Init+0x116>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8003704:	687b      	ldr	r3, [r7, #4]
 8003706:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800370a:	b2db      	uxtb	r3, r3
 800370c:	2b00      	cmp	r3, #0
 800370e:	d106      	bne.n	800371e <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8003710:	687b      	ldr	r3, [r7, #4]
 8003712:	2200      	movs	r2, #0
 8003714:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 8003718:	6878      	ldr	r0, [r7, #4]
 800371a:	f7fe fae1 	bl	8001ce0 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 800371e:	687b      	ldr	r3, [r7, #4]
 8003720:	2224      	movs	r2, #36	; 0x24
 8003722:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8003726:	687b      	ldr	r3, [r7, #4]
 8003728:	681b      	ldr	r3, [r3, #0]
 800372a:	681a      	ldr	r2, [r3, #0]
 800372c:	687b      	ldr	r3, [r7, #4]
 800372e:	681b      	ldr	r3, [r3, #0]
 8003730:	f022 0201 	bic.w	r2, r2, #1
 8003734:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 8003736:	687b      	ldr	r3, [r7, #4]
 8003738:	685a      	ldr	r2, [r3, #4]
 800373a:	687b      	ldr	r3, [r7, #4]
 800373c:	681b      	ldr	r3, [r3, #0]
 800373e:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8003742:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 8003744:	687b      	ldr	r3, [r7, #4]
 8003746:	681b      	ldr	r3, [r3, #0]
 8003748:	689a      	ldr	r2, [r3, #8]
 800374a:	687b      	ldr	r3, [r7, #4]
 800374c:	681b      	ldr	r3, [r3, #0]
 800374e:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8003752:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8003754:	687b      	ldr	r3, [r7, #4]
 8003756:	68db      	ldr	r3, [r3, #12]
 8003758:	2b01      	cmp	r3, #1
 800375a:	d107      	bne.n	800376c <HAL_I2C_Init+0x7a>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 800375c:	687b      	ldr	r3, [r7, #4]
 800375e:	689a      	ldr	r2, [r3, #8]
 8003760:	687b      	ldr	r3, [r7, #4]
 8003762:	681b      	ldr	r3, [r3, #0]
 8003764:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8003768:	609a      	str	r2, [r3, #8]
 800376a:	e006      	b.n	800377a <HAL_I2C_Init+0x88>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 800376c:	687b      	ldr	r3, [r7, #4]
 800376e:	689a      	ldr	r2, [r3, #8]
 8003770:	687b      	ldr	r3, [r7, #4]
 8003772:	681b      	ldr	r3, [r3, #0]
 8003774:	f442 4204 	orr.w	r2, r2, #33792	; 0x8400
 8003778:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 800377a:	687b      	ldr	r3, [r7, #4]
 800377c:	68db      	ldr	r3, [r3, #12]
 800377e:	2b02      	cmp	r3, #2
 8003780:	d104      	bne.n	800378c <HAL_I2C_Init+0x9a>
  {
    hi2c->Instance->CR2 = (I2C_CR2_ADD10);
 8003782:	687b      	ldr	r3, [r7, #4]
 8003784:	681b      	ldr	r3, [r3, #0]
 8003786:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800378a:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 800378c:	687b      	ldr	r3, [r7, #4]
 800378e:	681b      	ldr	r3, [r3, #0]
 8003790:	685b      	ldr	r3, [r3, #4]
 8003792:	687a      	ldr	r2, [r7, #4]
 8003794:	6812      	ldr	r2, [r2, #0]
 8003796:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 800379a:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800379e:	6053      	str	r3, [r2, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 80037a0:	687b      	ldr	r3, [r7, #4]
 80037a2:	681b      	ldr	r3, [r3, #0]
 80037a4:	68da      	ldr	r2, [r3, #12]
 80037a6:	687b      	ldr	r3, [r7, #4]
 80037a8:	681b      	ldr	r3, [r3, #0]
 80037aa:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 80037ae:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 80037b0:	687b      	ldr	r3, [r7, #4]
 80037b2:	691a      	ldr	r2, [r3, #16]
 80037b4:	687b      	ldr	r3, [r7, #4]
 80037b6:	695b      	ldr	r3, [r3, #20]
 80037b8:	ea42 0103 	orr.w	r1, r2, r3
                          (hi2c->Init.OwnAddress2Masks << 8));
 80037bc:	687b      	ldr	r3, [r7, #4]
 80037be:	699b      	ldr	r3, [r3, #24]
 80037c0:	021a      	lsls	r2, r3, #8
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 80037c2:	687b      	ldr	r3, [r7, #4]
 80037c4:	681b      	ldr	r3, [r3, #0]
 80037c6:	430a      	orrs	r2, r1
 80037c8:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 80037ca:	687b      	ldr	r3, [r7, #4]
 80037cc:	69d9      	ldr	r1, [r3, #28]
 80037ce:	687b      	ldr	r3, [r7, #4]
 80037d0:	6a1a      	ldr	r2, [r3, #32]
 80037d2:	687b      	ldr	r3, [r7, #4]
 80037d4:	681b      	ldr	r3, [r3, #0]
 80037d6:	430a      	orrs	r2, r1
 80037d8:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 80037da:	687b      	ldr	r3, [r7, #4]
 80037dc:	681b      	ldr	r3, [r3, #0]
 80037de:	681a      	ldr	r2, [r3, #0]
 80037e0:	687b      	ldr	r3, [r7, #4]
 80037e2:	681b      	ldr	r3, [r3, #0]
 80037e4:	f042 0201 	orr.w	r2, r2, #1
 80037e8:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80037ea:	687b      	ldr	r3, [r7, #4]
 80037ec:	2200      	movs	r2, #0
 80037ee:	645a      	str	r2, [r3, #68]	; 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 80037f0:	687b      	ldr	r3, [r7, #4]
 80037f2:	2220      	movs	r2, #32
 80037f4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 80037f8:	687b      	ldr	r3, [r7, #4]
 80037fa:	2200      	movs	r2, #0
 80037fc:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 80037fe:	687b      	ldr	r3, [r7, #4]
 8003800:	2200      	movs	r2, #0
 8003802:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

  return HAL_OK;
 8003806:	2300      	movs	r3, #0
}
 8003808:	4618      	mov	r0, r3
 800380a:	3708      	adds	r7, #8
 800380c:	46bd      	mov	sp, r7
 800380e:	bd80      	pop	{r7, pc}

08003810 <HAL_I2C_DeInit>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_DeInit(I2C_HandleTypeDef *hi2c)
{
 8003810:	b580      	push	{r7, lr}
 8003812:	b082      	sub	sp, #8
 8003814:	af00      	add	r7, sp, #0
 8003816:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8003818:	687b      	ldr	r3, [r7, #4]
 800381a:	2b00      	cmp	r3, #0
 800381c:	d101      	bne.n	8003822 <HAL_I2C_DeInit+0x12>
  {
    return HAL_ERROR;
 800381e:	2301      	movs	r3, #1
 8003820:	e021      	b.n	8003866 <HAL_I2C_DeInit+0x56>
  }

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));

  hi2c->State = HAL_I2C_STATE_BUSY;
 8003822:	687b      	ldr	r3, [r7, #4]
 8003824:	2224      	movs	r2, #36	; 0x24
 8003826:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the I2C Peripheral Clock */
  __HAL_I2C_DISABLE(hi2c);
 800382a:	687b      	ldr	r3, [r7, #4]
 800382c:	681b      	ldr	r3, [r3, #0]
 800382e:	681a      	ldr	r2, [r3, #0]
 8003830:	687b      	ldr	r3, [r7, #4]
 8003832:	681b      	ldr	r3, [r3, #0]
 8003834:	f022 0201 	bic.w	r2, r2, #1
 8003838:	601a      	str	r2, [r3, #0]

  /* DeInit the low level hardware: GPIO, CLOCK, NVIC */
  hi2c->MspDeInitCallback(hi2c);
#else
  /* DeInit the low level hardware: GPIO, CLOCK, NVIC */
  HAL_I2C_MspDeInit(hi2c);
 800383a:	6878      	ldr	r0, [r7, #4]
 800383c:	f7fe faf2 	bl	8001e24 <HAL_I2C_MspDeInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8003840:	687b      	ldr	r3, [r7, #4]
 8003842:	2200      	movs	r2, #0
 8003844:	645a      	str	r2, [r3, #68]	; 0x44
  hi2c->State = HAL_I2C_STATE_RESET;
 8003846:	687b      	ldr	r3, [r7, #4]
 8003848:	2200      	movs	r2, #0
 800384a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 800384e:	687b      	ldr	r3, [r7, #4]
 8003850:	2200      	movs	r2, #0
 8003852:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8003854:	687b      	ldr	r3, [r7, #4]
 8003856:	2200      	movs	r2, #0
 8003858:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

  /* Release Lock */
  __HAL_UNLOCK(hi2c);
 800385c:	687b      	ldr	r3, [r7, #4]
 800385e:	2200      	movs	r2, #0
 8003860:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

  return HAL_OK;
 8003864:	2300      	movs	r3, #0
}
 8003866:	4618      	mov	r0, r3
 8003868:	3708      	adds	r7, #8
 800386a:	46bd      	mov	sp, r7
 800386c:	bd80      	pop	{r7, pc}
	...

08003870 <HAL_I2C_Mem_Write>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Write(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress,
                                    uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8003870:	b580      	push	{r7, lr}
 8003872:	b088      	sub	sp, #32
 8003874:	af02      	add	r7, sp, #8
 8003876:	60f8      	str	r0, [r7, #12]
 8003878:	4608      	mov	r0, r1
 800387a:	4611      	mov	r1, r2
 800387c:	461a      	mov	r2, r3
 800387e:	4603      	mov	r3, r0
 8003880:	817b      	strh	r3, [r7, #10]
 8003882:	460b      	mov	r3, r1
 8003884:	813b      	strh	r3, [r7, #8]
 8003886:	4613      	mov	r3, r2
 8003888:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 800388a:	68fb      	ldr	r3, [r7, #12]
 800388c:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8003890:	b2db      	uxtb	r3, r3
 8003892:	2b20      	cmp	r3, #32
 8003894:	f040 80f9 	bne.w	8003a8a <HAL_I2C_Mem_Write+0x21a>
  {
    if ((pData == NULL) || (Size == 0U))
 8003898:	6a3b      	ldr	r3, [r7, #32]
 800389a:	2b00      	cmp	r3, #0
 800389c:	d002      	beq.n	80038a4 <HAL_I2C_Mem_Write+0x34>
 800389e:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 80038a0:	2b00      	cmp	r3, #0
 80038a2:	d105      	bne.n	80038b0 <HAL_I2C_Mem_Write+0x40>
    {
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
 80038a4:	68fb      	ldr	r3, [r7, #12]
 80038a6:	f44f 7200 	mov.w	r2, #512	; 0x200
 80038aa:	645a      	str	r2, [r3, #68]	; 0x44
      return  HAL_ERROR;
 80038ac:	2301      	movs	r3, #1
 80038ae:	e0ed      	b.n	8003a8c <HAL_I2C_Mem_Write+0x21c>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 80038b0:	68fb      	ldr	r3, [r7, #12]
 80038b2:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 80038b6:	2b01      	cmp	r3, #1
 80038b8:	d101      	bne.n	80038be <HAL_I2C_Mem_Write+0x4e>
 80038ba:	2302      	movs	r3, #2
 80038bc:	e0e6      	b.n	8003a8c <HAL_I2C_Mem_Write+0x21c>
 80038be:	68fb      	ldr	r3, [r7, #12]
 80038c0:	2201      	movs	r2, #1
 80038c2:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 80038c6:	f7ff f9ed 	bl	8002ca4 <HAL_GetTick>
 80038ca:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 80038cc:	697b      	ldr	r3, [r7, #20]
 80038ce:	9300      	str	r3, [sp, #0]
 80038d0:	2319      	movs	r3, #25
 80038d2:	2201      	movs	r2, #1
 80038d4:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 80038d8:	68f8      	ldr	r0, [r7, #12]
 80038da:	f000 fac3 	bl	8003e64 <I2C_WaitOnFlagUntilTimeout>
 80038de:	4603      	mov	r3, r0
 80038e0:	2b00      	cmp	r3, #0
 80038e2:	d001      	beq.n	80038e8 <HAL_I2C_Mem_Write+0x78>
    {
      return HAL_ERROR;
 80038e4:	2301      	movs	r3, #1
 80038e6:	e0d1      	b.n	8003a8c <HAL_I2C_Mem_Write+0x21c>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 80038e8:	68fb      	ldr	r3, [r7, #12]
 80038ea:	2221      	movs	r2, #33	; 0x21
 80038ec:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 80038f0:	68fb      	ldr	r3, [r7, #12]
 80038f2:	2240      	movs	r2, #64	; 0x40
 80038f4:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80038f8:	68fb      	ldr	r3, [r7, #12]
 80038fa:	2200      	movs	r2, #0
 80038fc:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 80038fe:	68fb      	ldr	r3, [r7, #12]
 8003900:	6a3a      	ldr	r2, [r7, #32]
 8003902:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount = Size;
 8003904:	68fb      	ldr	r3, [r7, #12]
 8003906:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 8003908:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 800390a:	68fb      	ldr	r3, [r7, #12]
 800390c:	2200      	movs	r2, #0
 800390e:	635a      	str	r2, [r3, #52]	; 0x34

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8003910:	88f8      	ldrh	r0, [r7, #6]
 8003912:	893a      	ldrh	r2, [r7, #8]
 8003914:	8979      	ldrh	r1, [r7, #10]
 8003916:	697b      	ldr	r3, [r7, #20]
 8003918:	9301      	str	r3, [sp, #4]
 800391a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800391c:	9300      	str	r3, [sp, #0]
 800391e:	4603      	mov	r3, r0
 8003920:	68f8      	ldr	r0, [r7, #12]
 8003922:	f000 f9d3 	bl	8003ccc <I2C_RequestMemoryWrite>
 8003926:	4603      	mov	r3, r0
 8003928:	2b00      	cmp	r3, #0
 800392a:	d005      	beq.n	8003938 <HAL_I2C_Mem_Write+0xc8>
    {
      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 800392c:	68fb      	ldr	r3, [r7, #12]
 800392e:	2200      	movs	r2, #0
 8003930:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
      return HAL_ERROR;
 8003934:	2301      	movs	r3, #1
 8003936:	e0a9      	b.n	8003a8c <HAL_I2C_Mem_Write+0x21c>
    }

    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8003938:	68fb      	ldr	r3, [r7, #12]
 800393a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800393c:	b29b      	uxth	r3, r3
 800393e:	2bff      	cmp	r3, #255	; 0xff
 8003940:	d90e      	bls.n	8003960 <HAL_I2C_Mem_Write+0xf0>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8003942:	68fb      	ldr	r3, [r7, #12]
 8003944:	22ff      	movs	r2, #255	; 0xff
 8003946:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE, I2C_NO_STARTSTOP);
 8003948:	68fb      	ldr	r3, [r7, #12]
 800394a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800394c:	b2da      	uxtb	r2, r3
 800394e:	8979      	ldrh	r1, [r7, #10]
 8003950:	2300      	movs	r3, #0
 8003952:	9300      	str	r3, [sp, #0]
 8003954:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8003958:	68f8      	ldr	r0, [r7, #12]
 800395a:	f000 fc2b 	bl	80041b4 <I2C_TransferConfig>
 800395e:	e00f      	b.n	8003980 <HAL_I2C_Mem_Write+0x110>
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 8003960:	68fb      	ldr	r3, [r7, #12]
 8003962:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003964:	b29a      	uxth	r2, r3
 8003966:	68fb      	ldr	r3, [r7, #12]
 8003968:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
 800396a:	68fb      	ldr	r3, [r7, #12]
 800396c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800396e:	b2da      	uxtb	r2, r3
 8003970:	8979      	ldrh	r1, [r7, #10]
 8003972:	2300      	movs	r3, #0
 8003974:	9300      	str	r3, [sp, #0]
 8003976:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 800397a:	68f8      	ldr	r0, [r7, #12]
 800397c:	f000 fc1a 	bl	80041b4 <I2C_TransferConfig>
    }

    do
    {
      /* Wait until TXIS flag is set */
      if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8003980:	697a      	ldr	r2, [r7, #20]
 8003982:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8003984:	68f8      	ldr	r0, [r7, #12]
 8003986:	f000 faad 	bl	8003ee4 <I2C_WaitOnTXISFlagUntilTimeout>
 800398a:	4603      	mov	r3, r0
 800398c:	2b00      	cmp	r3, #0
 800398e:	d001      	beq.n	8003994 <HAL_I2C_Mem_Write+0x124>
      {
        return HAL_ERROR;
 8003990:	2301      	movs	r3, #1
 8003992:	e07b      	b.n	8003a8c <HAL_I2C_Mem_Write+0x21c>
      }

      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 8003994:	68fb      	ldr	r3, [r7, #12]
 8003996:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003998:	781a      	ldrb	r2, [r3, #0]
 800399a:	68fb      	ldr	r3, [r7, #12]
 800399c:	681b      	ldr	r3, [r3, #0]
 800399e:	629a      	str	r2, [r3, #40]	; 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 80039a0:	68fb      	ldr	r3, [r7, #12]
 80039a2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80039a4:	1c5a      	adds	r2, r3, #1
 80039a6:	68fb      	ldr	r3, [r7, #12]
 80039a8:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferCount--;
 80039aa:	68fb      	ldr	r3, [r7, #12]
 80039ac:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80039ae:	b29b      	uxth	r3, r3
 80039b0:	3b01      	subs	r3, #1
 80039b2:	b29a      	uxth	r2, r3
 80039b4:	68fb      	ldr	r3, [r7, #12]
 80039b6:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 80039b8:	68fb      	ldr	r3, [r7, #12]
 80039ba:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80039bc:	3b01      	subs	r3, #1
 80039be:	b29a      	uxth	r2, r3
 80039c0:	68fb      	ldr	r3, [r7, #12]
 80039c2:	851a      	strh	r2, [r3, #40]	; 0x28

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 80039c4:	68fb      	ldr	r3, [r7, #12]
 80039c6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80039c8:	b29b      	uxth	r3, r3
 80039ca:	2b00      	cmp	r3, #0
 80039cc:	d034      	beq.n	8003a38 <HAL_I2C_Mem_Write+0x1c8>
 80039ce:	68fb      	ldr	r3, [r7, #12]
 80039d0:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80039d2:	2b00      	cmp	r3, #0
 80039d4:	d130      	bne.n	8003a38 <HAL_I2C_Mem_Write+0x1c8>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 80039d6:	697b      	ldr	r3, [r7, #20]
 80039d8:	9300      	str	r3, [sp, #0]
 80039da:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80039dc:	2200      	movs	r2, #0
 80039de:	2180      	movs	r1, #128	; 0x80
 80039e0:	68f8      	ldr	r0, [r7, #12]
 80039e2:	f000 fa3f 	bl	8003e64 <I2C_WaitOnFlagUntilTimeout>
 80039e6:	4603      	mov	r3, r0
 80039e8:	2b00      	cmp	r3, #0
 80039ea:	d001      	beq.n	80039f0 <HAL_I2C_Mem_Write+0x180>
        {
          return HAL_ERROR;
 80039ec:	2301      	movs	r3, #1
 80039ee:	e04d      	b.n	8003a8c <HAL_I2C_Mem_Write+0x21c>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 80039f0:	68fb      	ldr	r3, [r7, #12]
 80039f2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80039f4:	b29b      	uxth	r3, r3
 80039f6:	2bff      	cmp	r3, #255	; 0xff
 80039f8:	d90e      	bls.n	8003a18 <HAL_I2C_Mem_Write+0x1a8>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 80039fa:	68fb      	ldr	r3, [r7, #12]
 80039fc:	22ff      	movs	r2, #255	; 0xff
 80039fe:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 8003a00:	68fb      	ldr	r3, [r7, #12]
 8003a02:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003a04:	b2da      	uxtb	r2, r3
 8003a06:	8979      	ldrh	r1, [r7, #10]
 8003a08:	2300      	movs	r3, #0
 8003a0a:	9300      	str	r3, [sp, #0]
 8003a0c:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8003a10:	68f8      	ldr	r0, [r7, #12]
 8003a12:	f000 fbcf 	bl	80041b4 <I2C_TransferConfig>
 8003a16:	e00f      	b.n	8003a38 <HAL_I2C_Mem_Write+0x1c8>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 8003a18:	68fb      	ldr	r3, [r7, #12]
 8003a1a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003a1c:	b29a      	uxth	r2, r3
 8003a1e:	68fb      	ldr	r3, [r7, #12]
 8003a20:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8003a22:	68fb      	ldr	r3, [r7, #12]
 8003a24:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003a26:	b2da      	uxtb	r2, r3
 8003a28:	8979      	ldrh	r1, [r7, #10]
 8003a2a:	2300      	movs	r3, #0
 8003a2c:	9300      	str	r3, [sp, #0]
 8003a2e:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8003a32:	68f8      	ldr	r0, [r7, #12]
 8003a34:	f000 fbbe 	bl	80041b4 <I2C_TransferConfig>
                             I2C_NO_STARTSTOP);
        }
      }

    } while (hi2c->XferCount > 0U);
 8003a38:	68fb      	ldr	r3, [r7, #12]
 8003a3a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003a3c:	b29b      	uxth	r3, r3
 8003a3e:	2b00      	cmp	r3, #0
 8003a40:	d19e      	bne.n	8003980 <HAL_I2C_Mem_Write+0x110>

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is reset */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8003a42:	697a      	ldr	r2, [r7, #20]
 8003a44:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8003a46:	68f8      	ldr	r0, [r7, #12]
 8003a48:	f000 fa8c 	bl	8003f64 <I2C_WaitOnSTOPFlagUntilTimeout>
 8003a4c:	4603      	mov	r3, r0
 8003a4e:	2b00      	cmp	r3, #0
 8003a50:	d001      	beq.n	8003a56 <HAL_I2C_Mem_Write+0x1e6>
    {
      return HAL_ERROR;
 8003a52:	2301      	movs	r3, #1
 8003a54:	e01a      	b.n	8003a8c <HAL_I2C_Mem_Write+0x21c>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8003a56:	68fb      	ldr	r3, [r7, #12]
 8003a58:	681b      	ldr	r3, [r3, #0]
 8003a5a:	2220      	movs	r2, #32
 8003a5c:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8003a5e:	68fb      	ldr	r3, [r7, #12]
 8003a60:	681b      	ldr	r3, [r3, #0]
 8003a62:	6859      	ldr	r1, [r3, #4]
 8003a64:	68fb      	ldr	r3, [r7, #12]
 8003a66:	681a      	ldr	r2, [r3, #0]
 8003a68:	4b0a      	ldr	r3, [pc, #40]	; (8003a94 <HAL_I2C_Mem_Write+0x224>)
 8003a6a:	400b      	ands	r3, r1
 8003a6c:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 8003a6e:	68fb      	ldr	r3, [r7, #12]
 8003a70:	2220      	movs	r2, #32
 8003a72:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 8003a76:	68fb      	ldr	r3, [r7, #12]
 8003a78:	2200      	movs	r2, #0
 8003a7a:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003a7e:	68fb      	ldr	r3, [r7, #12]
 8003a80:	2200      	movs	r2, #0
 8003a82:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8003a86:	2300      	movs	r3, #0
 8003a88:	e000      	b.n	8003a8c <HAL_I2C_Mem_Write+0x21c>
  }
  else
  {
    return HAL_BUSY;
 8003a8a:	2302      	movs	r3, #2
  }
}
 8003a8c:	4618      	mov	r0, r3
 8003a8e:	3718      	adds	r7, #24
 8003a90:	46bd      	mov	sp, r7
 8003a92:	bd80      	pop	{r7, pc}
 8003a94:	fe00e800 	.word	0xfe00e800

08003a98 <HAL_I2C_Mem_Read>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Read(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress,
                                   uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8003a98:	b580      	push	{r7, lr}
 8003a9a:	b088      	sub	sp, #32
 8003a9c:	af02      	add	r7, sp, #8
 8003a9e:	60f8      	str	r0, [r7, #12]
 8003aa0:	4608      	mov	r0, r1
 8003aa2:	4611      	mov	r1, r2
 8003aa4:	461a      	mov	r2, r3
 8003aa6:	4603      	mov	r3, r0
 8003aa8:	817b      	strh	r3, [r7, #10]
 8003aaa:	460b      	mov	r3, r1
 8003aac:	813b      	strh	r3, [r7, #8]
 8003aae:	4613      	mov	r3, r2
 8003ab0:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8003ab2:	68fb      	ldr	r3, [r7, #12]
 8003ab4:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8003ab8:	b2db      	uxtb	r3, r3
 8003aba:	2b20      	cmp	r3, #32
 8003abc:	f040 80fd 	bne.w	8003cba <HAL_I2C_Mem_Read+0x222>
  {
    if ((pData == NULL) || (Size == 0U))
 8003ac0:	6a3b      	ldr	r3, [r7, #32]
 8003ac2:	2b00      	cmp	r3, #0
 8003ac4:	d002      	beq.n	8003acc <HAL_I2C_Mem_Read+0x34>
 8003ac6:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8003ac8:	2b00      	cmp	r3, #0
 8003aca:	d105      	bne.n	8003ad8 <HAL_I2C_Mem_Read+0x40>
    {
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
 8003acc:	68fb      	ldr	r3, [r7, #12]
 8003ace:	f44f 7200 	mov.w	r2, #512	; 0x200
 8003ad2:	645a      	str	r2, [r3, #68]	; 0x44
      return  HAL_ERROR;
 8003ad4:	2301      	movs	r3, #1
 8003ad6:	e0f1      	b.n	8003cbc <HAL_I2C_Mem_Read+0x224>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8003ad8:	68fb      	ldr	r3, [r7, #12]
 8003ada:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8003ade:	2b01      	cmp	r3, #1
 8003ae0:	d101      	bne.n	8003ae6 <HAL_I2C_Mem_Read+0x4e>
 8003ae2:	2302      	movs	r3, #2
 8003ae4:	e0ea      	b.n	8003cbc <HAL_I2C_Mem_Read+0x224>
 8003ae6:	68fb      	ldr	r3, [r7, #12]
 8003ae8:	2201      	movs	r2, #1
 8003aea:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 8003aee:	f7ff f8d9 	bl	8002ca4 <HAL_GetTick>
 8003af2:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 8003af4:	697b      	ldr	r3, [r7, #20]
 8003af6:	9300      	str	r3, [sp, #0]
 8003af8:	2319      	movs	r3, #25
 8003afa:	2201      	movs	r2, #1
 8003afc:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8003b00:	68f8      	ldr	r0, [r7, #12]
 8003b02:	f000 f9af 	bl	8003e64 <I2C_WaitOnFlagUntilTimeout>
 8003b06:	4603      	mov	r3, r0
 8003b08:	2b00      	cmp	r3, #0
 8003b0a:	d001      	beq.n	8003b10 <HAL_I2C_Mem_Read+0x78>
    {
      return HAL_ERROR;
 8003b0c:	2301      	movs	r3, #1
 8003b0e:	e0d5      	b.n	8003cbc <HAL_I2C_Mem_Read+0x224>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 8003b10:	68fb      	ldr	r3, [r7, #12]
 8003b12:	2222      	movs	r2, #34	; 0x22
 8003b14:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8003b18:	68fb      	ldr	r3, [r7, #12]
 8003b1a:	2240      	movs	r2, #64	; 0x40
 8003b1c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8003b20:	68fb      	ldr	r3, [r7, #12]
 8003b22:	2200      	movs	r2, #0
 8003b24:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 8003b26:	68fb      	ldr	r3, [r7, #12]
 8003b28:	6a3a      	ldr	r2, [r7, #32]
 8003b2a:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount = Size;
 8003b2c:	68fb      	ldr	r3, [r7, #12]
 8003b2e:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 8003b30:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 8003b32:	68fb      	ldr	r3, [r7, #12]
 8003b34:	2200      	movs	r2, #0
 8003b36:	635a      	str	r2, [r3, #52]	; 0x34

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8003b38:	88f8      	ldrh	r0, [r7, #6]
 8003b3a:	893a      	ldrh	r2, [r7, #8]
 8003b3c:	8979      	ldrh	r1, [r7, #10]
 8003b3e:	697b      	ldr	r3, [r7, #20]
 8003b40:	9301      	str	r3, [sp, #4]
 8003b42:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003b44:	9300      	str	r3, [sp, #0]
 8003b46:	4603      	mov	r3, r0
 8003b48:	68f8      	ldr	r0, [r7, #12]
 8003b4a:	f000 f913 	bl	8003d74 <I2C_RequestMemoryRead>
 8003b4e:	4603      	mov	r3, r0
 8003b50:	2b00      	cmp	r3, #0
 8003b52:	d005      	beq.n	8003b60 <HAL_I2C_Mem_Read+0xc8>
    {
      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8003b54:	68fb      	ldr	r3, [r7, #12]
 8003b56:	2200      	movs	r2, #0
 8003b58:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
      return HAL_ERROR;
 8003b5c:	2301      	movs	r3, #1
 8003b5e:	e0ad      	b.n	8003cbc <HAL_I2C_Mem_Read+0x224>
    }

    /* Send Slave Address */
    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8003b60:	68fb      	ldr	r3, [r7, #12]
 8003b62:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003b64:	b29b      	uxth	r3, r3
 8003b66:	2bff      	cmp	r3, #255	; 0xff
 8003b68:	d90e      	bls.n	8003b88 <HAL_I2C_Mem_Read+0xf0>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8003b6a:	68fb      	ldr	r3, [r7, #12]
 8003b6c:	22ff      	movs	r2, #255	; 0xff
 8003b6e:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 8003b70:	68fb      	ldr	r3, [r7, #12]
 8003b72:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003b74:	b2da      	uxtb	r2, r3
 8003b76:	8979      	ldrh	r1, [r7, #10]
 8003b78:	4b52      	ldr	r3, [pc, #328]	; (8003cc4 <HAL_I2C_Mem_Read+0x22c>)
 8003b7a:	9300      	str	r3, [sp, #0]
 8003b7c:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8003b80:	68f8      	ldr	r0, [r7, #12]
 8003b82:	f000 fb17 	bl	80041b4 <I2C_TransferConfig>
 8003b86:	e00f      	b.n	8003ba8 <HAL_I2C_Mem_Read+0x110>
                         I2C_GENERATE_START_READ);
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 8003b88:	68fb      	ldr	r3, [r7, #12]
 8003b8a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003b8c:	b29a      	uxth	r2, r3
 8003b8e:	68fb      	ldr	r3, [r7, #12]
 8003b90:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8003b92:	68fb      	ldr	r3, [r7, #12]
 8003b94:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003b96:	b2da      	uxtb	r2, r3
 8003b98:	8979      	ldrh	r1, [r7, #10]
 8003b9a:	4b4a      	ldr	r3, [pc, #296]	; (8003cc4 <HAL_I2C_Mem_Read+0x22c>)
 8003b9c:	9300      	str	r3, [sp, #0]
 8003b9e:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8003ba2:	68f8      	ldr	r0, [r7, #12]
 8003ba4:	f000 fb06 	bl	80041b4 <I2C_TransferConfig>
    }

    do
    {
      /* Wait until RXNE flag is set */
      if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_RXNE, RESET, Timeout, tickstart) != HAL_OK)
 8003ba8:	697b      	ldr	r3, [r7, #20]
 8003baa:	9300      	str	r3, [sp, #0]
 8003bac:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003bae:	2200      	movs	r2, #0
 8003bb0:	2104      	movs	r1, #4
 8003bb2:	68f8      	ldr	r0, [r7, #12]
 8003bb4:	f000 f956 	bl	8003e64 <I2C_WaitOnFlagUntilTimeout>
 8003bb8:	4603      	mov	r3, r0
 8003bba:	2b00      	cmp	r3, #0
 8003bbc:	d001      	beq.n	8003bc2 <HAL_I2C_Mem_Read+0x12a>
      {
        return HAL_ERROR;
 8003bbe:	2301      	movs	r3, #1
 8003bc0:	e07c      	b.n	8003cbc <HAL_I2C_Mem_Read+0x224>
      }

      /* Read data from RXDR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 8003bc2:	68fb      	ldr	r3, [r7, #12]
 8003bc4:	681b      	ldr	r3, [r3, #0]
 8003bc6:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8003bc8:	68fb      	ldr	r3, [r7, #12]
 8003bca:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003bcc:	b2d2      	uxtb	r2, r2
 8003bce:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8003bd0:	68fb      	ldr	r3, [r7, #12]
 8003bd2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003bd4:	1c5a      	adds	r2, r3, #1
 8003bd6:	68fb      	ldr	r3, [r7, #12]
 8003bd8:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferSize--;
 8003bda:	68fb      	ldr	r3, [r7, #12]
 8003bdc:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003bde:	3b01      	subs	r3, #1
 8003be0:	b29a      	uxth	r2, r3
 8003be2:	68fb      	ldr	r3, [r7, #12]
 8003be4:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 8003be6:	68fb      	ldr	r3, [r7, #12]
 8003be8:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003bea:	b29b      	uxth	r3, r3
 8003bec:	3b01      	subs	r3, #1
 8003bee:	b29a      	uxth	r2, r3
 8003bf0:	68fb      	ldr	r3, [r7, #12]
 8003bf2:	855a      	strh	r2, [r3, #42]	; 0x2a

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8003bf4:	68fb      	ldr	r3, [r7, #12]
 8003bf6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003bf8:	b29b      	uxth	r3, r3
 8003bfa:	2b00      	cmp	r3, #0
 8003bfc:	d034      	beq.n	8003c68 <HAL_I2C_Mem_Read+0x1d0>
 8003bfe:	68fb      	ldr	r3, [r7, #12]
 8003c00:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003c02:	2b00      	cmp	r3, #0
 8003c04:	d130      	bne.n	8003c68 <HAL_I2C_Mem_Read+0x1d0>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 8003c06:	697b      	ldr	r3, [r7, #20]
 8003c08:	9300      	str	r3, [sp, #0]
 8003c0a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003c0c:	2200      	movs	r2, #0
 8003c0e:	2180      	movs	r1, #128	; 0x80
 8003c10:	68f8      	ldr	r0, [r7, #12]
 8003c12:	f000 f927 	bl	8003e64 <I2C_WaitOnFlagUntilTimeout>
 8003c16:	4603      	mov	r3, r0
 8003c18:	2b00      	cmp	r3, #0
 8003c1a:	d001      	beq.n	8003c20 <HAL_I2C_Mem_Read+0x188>
        {
          return HAL_ERROR;
 8003c1c:	2301      	movs	r3, #1
 8003c1e:	e04d      	b.n	8003cbc <HAL_I2C_Mem_Read+0x224>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8003c20:	68fb      	ldr	r3, [r7, #12]
 8003c22:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003c24:	b29b      	uxth	r3, r3
 8003c26:	2bff      	cmp	r3, #255	; 0xff
 8003c28:	d90e      	bls.n	8003c48 <HAL_I2C_Mem_Read+0x1b0>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 8003c2a:	68fb      	ldr	r3, [r7, #12]
 8003c2c:	22ff      	movs	r2, #255	; 0xff
 8003c2e:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t) hi2c->XferSize, I2C_RELOAD_MODE,
 8003c30:	68fb      	ldr	r3, [r7, #12]
 8003c32:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003c34:	b2da      	uxtb	r2, r3
 8003c36:	8979      	ldrh	r1, [r7, #10]
 8003c38:	2300      	movs	r3, #0
 8003c3a:	9300      	str	r3, [sp, #0]
 8003c3c:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8003c40:	68f8      	ldr	r0, [r7, #12]
 8003c42:	f000 fab7 	bl	80041b4 <I2C_TransferConfig>
 8003c46:	e00f      	b.n	8003c68 <HAL_I2C_Mem_Read+0x1d0>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 8003c48:	68fb      	ldr	r3, [r7, #12]
 8003c4a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003c4c:	b29a      	uxth	r2, r3
 8003c4e:	68fb      	ldr	r3, [r7, #12]
 8003c50:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8003c52:	68fb      	ldr	r3, [r7, #12]
 8003c54:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003c56:	b2da      	uxtb	r2, r3
 8003c58:	8979      	ldrh	r1, [r7, #10]
 8003c5a:	2300      	movs	r3, #0
 8003c5c:	9300      	str	r3, [sp, #0]
 8003c5e:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8003c62:	68f8      	ldr	r0, [r7, #12]
 8003c64:	f000 faa6 	bl	80041b4 <I2C_TransferConfig>
                             I2C_NO_STARTSTOP);
        }
      }
    } while (hi2c->XferCount > 0U);
 8003c68:	68fb      	ldr	r3, [r7, #12]
 8003c6a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003c6c:	b29b      	uxth	r3, r3
 8003c6e:	2b00      	cmp	r3, #0
 8003c70:	d19a      	bne.n	8003ba8 <HAL_I2C_Mem_Read+0x110>

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is reset */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8003c72:	697a      	ldr	r2, [r7, #20]
 8003c74:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8003c76:	68f8      	ldr	r0, [r7, #12]
 8003c78:	f000 f974 	bl	8003f64 <I2C_WaitOnSTOPFlagUntilTimeout>
 8003c7c:	4603      	mov	r3, r0
 8003c7e:	2b00      	cmp	r3, #0
 8003c80:	d001      	beq.n	8003c86 <HAL_I2C_Mem_Read+0x1ee>
    {
      return HAL_ERROR;
 8003c82:	2301      	movs	r3, #1
 8003c84:	e01a      	b.n	8003cbc <HAL_I2C_Mem_Read+0x224>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8003c86:	68fb      	ldr	r3, [r7, #12]
 8003c88:	681b      	ldr	r3, [r3, #0]
 8003c8a:	2220      	movs	r2, #32
 8003c8c:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8003c8e:	68fb      	ldr	r3, [r7, #12]
 8003c90:	681b      	ldr	r3, [r3, #0]
 8003c92:	6859      	ldr	r1, [r3, #4]
 8003c94:	68fb      	ldr	r3, [r7, #12]
 8003c96:	681a      	ldr	r2, [r3, #0]
 8003c98:	4b0b      	ldr	r3, [pc, #44]	; (8003cc8 <HAL_I2C_Mem_Read+0x230>)
 8003c9a:	400b      	ands	r3, r1
 8003c9c:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 8003c9e:	68fb      	ldr	r3, [r7, #12]
 8003ca0:	2220      	movs	r2, #32
 8003ca2:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 8003ca6:	68fb      	ldr	r3, [r7, #12]
 8003ca8:	2200      	movs	r2, #0
 8003caa:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003cae:	68fb      	ldr	r3, [r7, #12]
 8003cb0:	2200      	movs	r2, #0
 8003cb2:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8003cb6:	2300      	movs	r3, #0
 8003cb8:	e000      	b.n	8003cbc <HAL_I2C_Mem_Read+0x224>
  }
  else
  {
    return HAL_BUSY;
 8003cba:	2302      	movs	r3, #2
  }
}
 8003cbc:	4618      	mov	r0, r3
 8003cbe:	3718      	adds	r7, #24
 8003cc0:	46bd      	mov	sp, r7
 8003cc2:	bd80      	pop	{r7, pc}
 8003cc4:	80002400 	.word	0x80002400
 8003cc8:	fe00e800 	.word	0xfe00e800

08003ccc <I2C_RequestMemoryWrite>:
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress,
                                                uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout,
                                                uint32_t Tickstart)
{
 8003ccc:	b580      	push	{r7, lr}
 8003cce:	b086      	sub	sp, #24
 8003cd0:	af02      	add	r7, sp, #8
 8003cd2:	60f8      	str	r0, [r7, #12]
 8003cd4:	4608      	mov	r0, r1
 8003cd6:	4611      	mov	r1, r2
 8003cd8:	461a      	mov	r2, r3
 8003cda:	4603      	mov	r3, r0
 8003cdc:	817b      	strh	r3, [r7, #10]
 8003cde:	460b      	mov	r3, r1
 8003ce0:	813b      	strh	r3, [r7, #8]
 8003ce2:	4613      	mov	r3, r2
 8003ce4:	80fb      	strh	r3, [r7, #6]
  I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_RELOAD_MODE, I2C_GENERATE_START_WRITE);
 8003ce6:	88fb      	ldrh	r3, [r7, #6]
 8003ce8:	b2da      	uxtb	r2, r3
 8003cea:	8979      	ldrh	r1, [r7, #10]
 8003cec:	4b20      	ldr	r3, [pc, #128]	; (8003d70 <I2C_RequestMemoryWrite+0xa4>)
 8003cee:	9300      	str	r3, [sp, #0]
 8003cf0:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8003cf4:	68f8      	ldr	r0, [r7, #12]
 8003cf6:	f000 fa5d 	bl	80041b4 <I2C_TransferConfig>

  /* Wait until TXIS flag is set */
  if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8003cfa:	69fa      	ldr	r2, [r7, #28]
 8003cfc:	69b9      	ldr	r1, [r7, #24]
 8003cfe:	68f8      	ldr	r0, [r7, #12]
 8003d00:	f000 f8f0 	bl	8003ee4 <I2C_WaitOnTXISFlagUntilTimeout>
 8003d04:	4603      	mov	r3, r0
 8003d06:	2b00      	cmp	r3, #0
 8003d08:	d001      	beq.n	8003d0e <I2C_RequestMemoryWrite+0x42>
  {
    return HAL_ERROR;
 8003d0a:	2301      	movs	r3, #1
 8003d0c:	e02c      	b.n	8003d68 <I2C_RequestMemoryWrite+0x9c>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8003d0e:	88fb      	ldrh	r3, [r7, #6]
 8003d10:	2b01      	cmp	r3, #1
 8003d12:	d105      	bne.n	8003d20 <I2C_RequestMemoryWrite+0x54>
  {
    /* Send Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8003d14:	893b      	ldrh	r3, [r7, #8]
 8003d16:	b2da      	uxtb	r2, r3
 8003d18:	68fb      	ldr	r3, [r7, #12]
 8003d1a:	681b      	ldr	r3, [r3, #0]
 8003d1c:	629a      	str	r2, [r3, #40]	; 0x28
 8003d1e:	e015      	b.n	8003d4c <I2C_RequestMemoryWrite+0x80>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_MSB(MemAddress);
 8003d20:	893b      	ldrh	r3, [r7, #8]
 8003d22:	0a1b      	lsrs	r3, r3, #8
 8003d24:	b29b      	uxth	r3, r3
 8003d26:	b2da      	uxtb	r2, r3
 8003d28:	68fb      	ldr	r3, [r7, #12]
 8003d2a:	681b      	ldr	r3, [r3, #0]
 8003d2c:	629a      	str	r2, [r3, #40]	; 0x28

    /* Wait until TXIS flag is set */
    if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8003d2e:	69fa      	ldr	r2, [r7, #28]
 8003d30:	69b9      	ldr	r1, [r7, #24]
 8003d32:	68f8      	ldr	r0, [r7, #12]
 8003d34:	f000 f8d6 	bl	8003ee4 <I2C_WaitOnTXISFlagUntilTimeout>
 8003d38:	4603      	mov	r3, r0
 8003d3a:	2b00      	cmp	r3, #0
 8003d3c:	d001      	beq.n	8003d42 <I2C_RequestMemoryWrite+0x76>
    {
      return HAL_ERROR;
 8003d3e:	2301      	movs	r3, #1
 8003d40:	e012      	b.n	8003d68 <I2C_RequestMemoryWrite+0x9c>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8003d42:	893b      	ldrh	r3, [r7, #8]
 8003d44:	b2da      	uxtb	r2, r3
 8003d46:	68fb      	ldr	r3, [r7, #12]
 8003d48:	681b      	ldr	r3, [r3, #0]
 8003d4a:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Wait until TCR flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, Tickstart) != HAL_OK)
 8003d4c:	69fb      	ldr	r3, [r7, #28]
 8003d4e:	9300      	str	r3, [sp, #0]
 8003d50:	69bb      	ldr	r3, [r7, #24]
 8003d52:	2200      	movs	r2, #0
 8003d54:	2180      	movs	r1, #128	; 0x80
 8003d56:	68f8      	ldr	r0, [r7, #12]
 8003d58:	f000 f884 	bl	8003e64 <I2C_WaitOnFlagUntilTimeout>
 8003d5c:	4603      	mov	r3, r0
 8003d5e:	2b00      	cmp	r3, #0
 8003d60:	d001      	beq.n	8003d66 <I2C_RequestMemoryWrite+0x9a>
  {
    return HAL_ERROR;
 8003d62:	2301      	movs	r3, #1
 8003d64:	e000      	b.n	8003d68 <I2C_RequestMemoryWrite+0x9c>
  }

  return HAL_OK;
 8003d66:	2300      	movs	r3, #0
}
 8003d68:	4618      	mov	r0, r3
 8003d6a:	3710      	adds	r7, #16
 8003d6c:	46bd      	mov	sp, r7
 8003d6e:	bd80      	pop	{r7, pc}
 8003d70:	80002000 	.word	0x80002000

08003d74 <I2C_RequestMemoryRead>:
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress,
                                               uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout,
                                               uint32_t Tickstart)
{
 8003d74:	b580      	push	{r7, lr}
 8003d76:	b086      	sub	sp, #24
 8003d78:	af02      	add	r7, sp, #8
 8003d7a:	60f8      	str	r0, [r7, #12]
 8003d7c:	4608      	mov	r0, r1
 8003d7e:	4611      	mov	r1, r2
 8003d80:	461a      	mov	r2, r3
 8003d82:	4603      	mov	r3, r0
 8003d84:	817b      	strh	r3, [r7, #10]
 8003d86:	460b      	mov	r3, r1
 8003d88:	813b      	strh	r3, [r7, #8]
 8003d8a:	4613      	mov	r3, r2
 8003d8c:	80fb      	strh	r3, [r7, #6]
  I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_SOFTEND_MODE, I2C_GENERATE_START_WRITE);
 8003d8e:	88fb      	ldrh	r3, [r7, #6]
 8003d90:	b2da      	uxtb	r2, r3
 8003d92:	8979      	ldrh	r1, [r7, #10]
 8003d94:	4b20      	ldr	r3, [pc, #128]	; (8003e18 <I2C_RequestMemoryRead+0xa4>)
 8003d96:	9300      	str	r3, [sp, #0]
 8003d98:	2300      	movs	r3, #0
 8003d9a:	68f8      	ldr	r0, [r7, #12]
 8003d9c:	f000 fa0a 	bl	80041b4 <I2C_TransferConfig>

  /* Wait until TXIS flag is set */
  if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8003da0:	69fa      	ldr	r2, [r7, #28]
 8003da2:	69b9      	ldr	r1, [r7, #24]
 8003da4:	68f8      	ldr	r0, [r7, #12]
 8003da6:	f000 f89d 	bl	8003ee4 <I2C_WaitOnTXISFlagUntilTimeout>
 8003daa:	4603      	mov	r3, r0
 8003dac:	2b00      	cmp	r3, #0
 8003dae:	d001      	beq.n	8003db4 <I2C_RequestMemoryRead+0x40>
  {
    return HAL_ERROR;
 8003db0:	2301      	movs	r3, #1
 8003db2:	e02c      	b.n	8003e0e <I2C_RequestMemoryRead+0x9a>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8003db4:	88fb      	ldrh	r3, [r7, #6]
 8003db6:	2b01      	cmp	r3, #1
 8003db8:	d105      	bne.n	8003dc6 <I2C_RequestMemoryRead+0x52>
  {
    /* Send Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8003dba:	893b      	ldrh	r3, [r7, #8]
 8003dbc:	b2da      	uxtb	r2, r3
 8003dbe:	68fb      	ldr	r3, [r7, #12]
 8003dc0:	681b      	ldr	r3, [r3, #0]
 8003dc2:	629a      	str	r2, [r3, #40]	; 0x28
 8003dc4:	e015      	b.n	8003df2 <I2C_RequestMemoryRead+0x7e>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_MSB(MemAddress);
 8003dc6:	893b      	ldrh	r3, [r7, #8]
 8003dc8:	0a1b      	lsrs	r3, r3, #8
 8003dca:	b29b      	uxth	r3, r3
 8003dcc:	b2da      	uxtb	r2, r3
 8003dce:	68fb      	ldr	r3, [r7, #12]
 8003dd0:	681b      	ldr	r3, [r3, #0]
 8003dd2:	629a      	str	r2, [r3, #40]	; 0x28

    /* Wait until TXIS flag is set */
    if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8003dd4:	69fa      	ldr	r2, [r7, #28]
 8003dd6:	69b9      	ldr	r1, [r7, #24]
 8003dd8:	68f8      	ldr	r0, [r7, #12]
 8003dda:	f000 f883 	bl	8003ee4 <I2C_WaitOnTXISFlagUntilTimeout>
 8003dde:	4603      	mov	r3, r0
 8003de0:	2b00      	cmp	r3, #0
 8003de2:	d001      	beq.n	8003de8 <I2C_RequestMemoryRead+0x74>
    {
      return HAL_ERROR;
 8003de4:	2301      	movs	r3, #1
 8003de6:	e012      	b.n	8003e0e <I2C_RequestMemoryRead+0x9a>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8003de8:	893b      	ldrh	r3, [r7, #8]
 8003dea:	b2da      	uxtb	r2, r3
 8003dec:	68fb      	ldr	r3, [r7, #12]
 8003dee:	681b      	ldr	r3, [r3, #0]
 8003df0:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Wait until TC flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TC, RESET, Timeout, Tickstart) != HAL_OK)
 8003df2:	69fb      	ldr	r3, [r7, #28]
 8003df4:	9300      	str	r3, [sp, #0]
 8003df6:	69bb      	ldr	r3, [r7, #24]
 8003df8:	2200      	movs	r2, #0
 8003dfa:	2140      	movs	r1, #64	; 0x40
 8003dfc:	68f8      	ldr	r0, [r7, #12]
 8003dfe:	f000 f831 	bl	8003e64 <I2C_WaitOnFlagUntilTimeout>
 8003e02:	4603      	mov	r3, r0
 8003e04:	2b00      	cmp	r3, #0
 8003e06:	d001      	beq.n	8003e0c <I2C_RequestMemoryRead+0x98>
  {
    return HAL_ERROR;
 8003e08:	2301      	movs	r3, #1
 8003e0a:	e000      	b.n	8003e0e <I2C_RequestMemoryRead+0x9a>
  }

  return HAL_OK;
 8003e0c:	2300      	movs	r3, #0
}
 8003e0e:	4618      	mov	r0, r3
 8003e10:	3710      	adds	r7, #16
 8003e12:	46bd      	mov	sp, r7
 8003e14:	bd80      	pop	{r7, pc}
 8003e16:	bf00      	nop
 8003e18:	80002000 	.word	0x80002000

08003e1c <I2C_Flush_TXDR>:
  * @brief  I2C Tx data register flush process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_Flush_TXDR(I2C_HandleTypeDef *hi2c)
{
 8003e1c:	b480      	push	{r7}
 8003e1e:	b083      	sub	sp, #12
 8003e20:	af00      	add	r7, sp, #0
 8003e22:	6078      	str	r0, [r7, #4]
  /* If a pending TXIS flag is set */
  /* Write a dummy data in TXDR to clear it */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) != RESET)
 8003e24:	687b      	ldr	r3, [r7, #4]
 8003e26:	681b      	ldr	r3, [r3, #0]
 8003e28:	699b      	ldr	r3, [r3, #24]
 8003e2a:	f003 0302 	and.w	r3, r3, #2
 8003e2e:	2b02      	cmp	r3, #2
 8003e30:	d103      	bne.n	8003e3a <I2C_Flush_TXDR+0x1e>
  {
    hi2c->Instance->TXDR = 0x00U;
 8003e32:	687b      	ldr	r3, [r7, #4]
 8003e34:	681b      	ldr	r3, [r3, #0]
 8003e36:	2200      	movs	r2, #0
 8003e38:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Flush TX register if not empty */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8003e3a:	687b      	ldr	r3, [r7, #4]
 8003e3c:	681b      	ldr	r3, [r3, #0]
 8003e3e:	699b      	ldr	r3, [r3, #24]
 8003e40:	f003 0301 	and.w	r3, r3, #1
 8003e44:	2b01      	cmp	r3, #1
 8003e46:	d007      	beq.n	8003e58 <I2C_Flush_TXDR+0x3c>
  {
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_TXE);
 8003e48:	687b      	ldr	r3, [r7, #4]
 8003e4a:	681b      	ldr	r3, [r3, #0]
 8003e4c:	699a      	ldr	r2, [r3, #24]
 8003e4e:	687b      	ldr	r3, [r7, #4]
 8003e50:	681b      	ldr	r3, [r3, #0]
 8003e52:	f042 0201 	orr.w	r2, r2, #1
 8003e56:	619a      	str	r2, [r3, #24]
  }
}
 8003e58:	bf00      	nop
 8003e5a:	370c      	adds	r7, #12
 8003e5c:	46bd      	mov	sp, r7
 8003e5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e62:	4770      	bx	lr

08003e64 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status,
                                                    uint32_t Timeout, uint32_t Tickstart)
{
 8003e64:	b580      	push	{r7, lr}
 8003e66:	b084      	sub	sp, #16
 8003e68:	af00      	add	r7, sp, #0
 8003e6a:	60f8      	str	r0, [r7, #12]
 8003e6c:	60b9      	str	r1, [r7, #8]
 8003e6e:	603b      	str	r3, [r7, #0]
 8003e70:	4613      	mov	r3, r2
 8003e72:	71fb      	strb	r3, [r7, #7]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8003e74:	e022      	b.n	8003ebc <I2C_WaitOnFlagUntilTimeout+0x58>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003e76:	683b      	ldr	r3, [r7, #0]
 8003e78:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003e7c:	d01e      	beq.n	8003ebc <I2C_WaitOnFlagUntilTimeout+0x58>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003e7e:	f7fe ff11 	bl	8002ca4 <HAL_GetTick>
 8003e82:	4602      	mov	r2, r0
 8003e84:	69bb      	ldr	r3, [r7, #24]
 8003e86:	1ad3      	subs	r3, r2, r3
 8003e88:	683a      	ldr	r2, [r7, #0]
 8003e8a:	429a      	cmp	r2, r3
 8003e8c:	d302      	bcc.n	8003e94 <I2C_WaitOnFlagUntilTimeout+0x30>
 8003e8e:	683b      	ldr	r3, [r7, #0]
 8003e90:	2b00      	cmp	r3, #0
 8003e92:	d113      	bne.n	8003ebc <I2C_WaitOnFlagUntilTimeout+0x58>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8003e94:	68fb      	ldr	r3, [r7, #12]
 8003e96:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003e98:	f043 0220 	orr.w	r2, r3, #32
 8003e9c:	68fb      	ldr	r3, [r7, #12]
 8003e9e:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 8003ea0:	68fb      	ldr	r3, [r7, #12]
 8003ea2:	2220      	movs	r2, #32
 8003ea4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8003ea8:	68fb      	ldr	r3, [r7, #12]
 8003eaa:	2200      	movs	r2, #0
 8003eac:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8003eb0:	68fb      	ldr	r3, [r7, #12]
 8003eb2:	2200      	movs	r2, #0
 8003eb4:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
        return HAL_ERROR;
 8003eb8:	2301      	movs	r3, #1
 8003eba:	e00f      	b.n	8003edc <I2C_WaitOnFlagUntilTimeout+0x78>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8003ebc:	68fb      	ldr	r3, [r7, #12]
 8003ebe:	681b      	ldr	r3, [r3, #0]
 8003ec0:	699a      	ldr	r2, [r3, #24]
 8003ec2:	68bb      	ldr	r3, [r7, #8]
 8003ec4:	4013      	ands	r3, r2
 8003ec6:	68ba      	ldr	r2, [r7, #8]
 8003ec8:	429a      	cmp	r2, r3
 8003eca:	bf0c      	ite	eq
 8003ecc:	2301      	moveq	r3, #1
 8003ece:	2300      	movne	r3, #0
 8003ed0:	b2db      	uxtb	r3, r3
 8003ed2:	461a      	mov	r2, r3
 8003ed4:	79fb      	ldrb	r3, [r7, #7]
 8003ed6:	429a      	cmp	r2, r3
 8003ed8:	d0cd      	beq.n	8003e76 <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8003eda:	2300      	movs	r3, #0
}
 8003edc:	4618      	mov	r0, r3
 8003ede:	3710      	adds	r7, #16
 8003ee0:	46bd      	mov	sp, r7
 8003ee2:	bd80      	pop	{r7, pc}

08003ee4 <I2C_WaitOnTXISFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXISFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 8003ee4:	b580      	push	{r7, lr}
 8003ee6:	b084      	sub	sp, #16
 8003ee8:	af00      	add	r7, sp, #0
 8003eea:	60f8      	str	r0, [r7, #12]
 8003eec:	60b9      	str	r1, [r7, #8]
 8003eee:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 8003ef0:	e02c      	b.n	8003f4c <I2C_WaitOnTXISFlagUntilTimeout+0x68>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 8003ef2:	687a      	ldr	r2, [r7, #4]
 8003ef4:	68b9      	ldr	r1, [r7, #8]
 8003ef6:	68f8      	ldr	r0, [r7, #12]
 8003ef8:	f000 f870 	bl	8003fdc <I2C_IsErrorOccurred>
 8003efc:	4603      	mov	r3, r0
 8003efe:	2b00      	cmp	r3, #0
 8003f00:	d001      	beq.n	8003f06 <I2C_WaitOnTXISFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 8003f02:	2301      	movs	r3, #1
 8003f04:	e02a      	b.n	8003f5c <I2C_WaitOnTXISFlagUntilTimeout+0x78>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003f06:	68bb      	ldr	r3, [r7, #8]
 8003f08:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003f0c:	d01e      	beq.n	8003f4c <I2C_WaitOnTXISFlagUntilTimeout+0x68>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003f0e:	f7fe fec9 	bl	8002ca4 <HAL_GetTick>
 8003f12:	4602      	mov	r2, r0
 8003f14:	687b      	ldr	r3, [r7, #4]
 8003f16:	1ad3      	subs	r3, r2, r3
 8003f18:	68ba      	ldr	r2, [r7, #8]
 8003f1a:	429a      	cmp	r2, r3
 8003f1c:	d302      	bcc.n	8003f24 <I2C_WaitOnTXISFlagUntilTimeout+0x40>
 8003f1e:	68bb      	ldr	r3, [r7, #8]
 8003f20:	2b00      	cmp	r3, #0
 8003f22:	d113      	bne.n	8003f4c <I2C_WaitOnTXISFlagUntilTimeout+0x68>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8003f24:	68fb      	ldr	r3, [r7, #12]
 8003f26:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003f28:	f043 0220 	orr.w	r2, r3, #32
 8003f2c:	68fb      	ldr	r3, [r7, #12]
 8003f2e:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 8003f30:	68fb      	ldr	r3, [r7, #12]
 8003f32:	2220      	movs	r2, #32
 8003f34:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8003f38:	68fb      	ldr	r3, [r7, #12]
 8003f3a:	2200      	movs	r2, #0
 8003f3c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8003f40:	68fb      	ldr	r3, [r7, #12]
 8003f42:	2200      	movs	r2, #0
 8003f44:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

        return HAL_ERROR;
 8003f48:	2301      	movs	r3, #1
 8003f4a:	e007      	b.n	8003f5c <I2C_WaitOnTXISFlagUntilTimeout+0x78>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 8003f4c:	68fb      	ldr	r3, [r7, #12]
 8003f4e:	681b      	ldr	r3, [r3, #0]
 8003f50:	699b      	ldr	r3, [r3, #24]
 8003f52:	f003 0302 	and.w	r3, r3, #2
 8003f56:	2b02      	cmp	r3, #2
 8003f58:	d1cb      	bne.n	8003ef2 <I2C_WaitOnTXISFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8003f5a:	2300      	movs	r3, #0
}
 8003f5c:	4618      	mov	r0, r3
 8003f5e:	3710      	adds	r7, #16
 8003f60:	46bd      	mov	sp, r7
 8003f62:	bd80      	pop	{r7, pc}

08003f64 <I2C_WaitOnSTOPFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnSTOPFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 8003f64:	b580      	push	{r7, lr}
 8003f66:	b084      	sub	sp, #16
 8003f68:	af00      	add	r7, sp, #0
 8003f6a:	60f8      	str	r0, [r7, #12]
 8003f6c:	60b9      	str	r1, [r7, #8]
 8003f6e:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8003f70:	e028      	b.n	8003fc4 <I2C_WaitOnSTOPFlagUntilTimeout+0x60>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 8003f72:	687a      	ldr	r2, [r7, #4]
 8003f74:	68b9      	ldr	r1, [r7, #8]
 8003f76:	68f8      	ldr	r0, [r7, #12]
 8003f78:	f000 f830 	bl	8003fdc <I2C_IsErrorOccurred>
 8003f7c:	4603      	mov	r3, r0
 8003f7e:	2b00      	cmp	r3, #0
 8003f80:	d001      	beq.n	8003f86 <I2C_WaitOnSTOPFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 8003f82:	2301      	movs	r3, #1
 8003f84:	e026      	b.n	8003fd4 <I2C_WaitOnSTOPFlagUntilTimeout+0x70>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003f86:	f7fe fe8d 	bl	8002ca4 <HAL_GetTick>
 8003f8a:	4602      	mov	r2, r0
 8003f8c:	687b      	ldr	r3, [r7, #4]
 8003f8e:	1ad3      	subs	r3, r2, r3
 8003f90:	68ba      	ldr	r2, [r7, #8]
 8003f92:	429a      	cmp	r2, r3
 8003f94:	d302      	bcc.n	8003f9c <I2C_WaitOnSTOPFlagUntilTimeout+0x38>
 8003f96:	68bb      	ldr	r3, [r7, #8]
 8003f98:	2b00      	cmp	r3, #0
 8003f9a:	d113      	bne.n	8003fc4 <I2C_WaitOnSTOPFlagUntilTimeout+0x60>
    {
      hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8003f9c:	68fb      	ldr	r3, [r7, #12]
 8003f9e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003fa0:	f043 0220 	orr.w	r2, r3, #32
 8003fa4:	68fb      	ldr	r3, [r7, #12]
 8003fa6:	645a      	str	r2, [r3, #68]	; 0x44
      hi2c->State = HAL_I2C_STATE_READY;
 8003fa8:	68fb      	ldr	r3, [r7, #12]
 8003faa:	2220      	movs	r2, #32
 8003fac:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8003fb0:	68fb      	ldr	r3, [r7, #12]
 8003fb2:	2200      	movs	r2, #0
 8003fb4:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8003fb8:	68fb      	ldr	r3, [r7, #12]
 8003fba:	2200      	movs	r2, #0
 8003fbc:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

      return HAL_ERROR;
 8003fc0:	2301      	movs	r3, #1
 8003fc2:	e007      	b.n	8003fd4 <I2C_WaitOnSTOPFlagUntilTimeout+0x70>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8003fc4:	68fb      	ldr	r3, [r7, #12]
 8003fc6:	681b      	ldr	r3, [r3, #0]
 8003fc8:	699b      	ldr	r3, [r3, #24]
 8003fca:	f003 0320 	and.w	r3, r3, #32
 8003fce:	2b20      	cmp	r3, #32
 8003fd0:	d1cf      	bne.n	8003f72 <I2C_WaitOnSTOPFlagUntilTimeout+0xe>
    }
  }
  return HAL_OK;
 8003fd2:	2300      	movs	r3, #0
}
 8003fd4:	4618      	mov	r0, r3
 8003fd6:	3710      	adds	r7, #16
 8003fd8:	46bd      	mov	sp, r7
 8003fda:	bd80      	pop	{r7, pc}

08003fdc <I2C_IsErrorOccurred>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsErrorOccurred(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8003fdc:	b580      	push	{r7, lr}
 8003fde:	b08a      	sub	sp, #40	; 0x28
 8003fe0:	af00      	add	r7, sp, #0
 8003fe2:	60f8      	str	r0, [r7, #12]
 8003fe4:	60b9      	str	r1, [r7, #8]
 8003fe6:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8003fe8:	2300      	movs	r3, #0
 8003fea:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  uint32_t itflag   = hi2c->Instance->ISR;
 8003fee:	68fb      	ldr	r3, [r7, #12]
 8003ff0:	681b      	ldr	r3, [r3, #0]
 8003ff2:	699b      	ldr	r3, [r3, #24]
 8003ff4:	61bb      	str	r3, [r7, #24]
  uint32_t error_code = 0;
 8003ff6:	2300      	movs	r3, #0
 8003ff8:	623b      	str	r3, [r7, #32]
  uint32_t tickstart = Tickstart;
 8003ffa:	687b      	ldr	r3, [r7, #4]
 8003ffc:	61fb      	str	r3, [r7, #28]
  uint32_t tmp1;
  HAL_I2C_ModeTypeDef tmp2;

  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_AF))
 8003ffe:	69bb      	ldr	r3, [r7, #24]
 8004000:	f003 0310 	and.w	r3, r3, #16
 8004004:	2b00      	cmp	r3, #0
 8004006:	d075      	beq.n	80040f4 <I2C_IsErrorOccurred+0x118>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8004008:	68fb      	ldr	r3, [r7, #12]
 800400a:	681b      	ldr	r3, [r3, #0]
 800400c:	2210      	movs	r2, #16
 800400e:	61da      	str	r2, [r3, #28]

    /* Wait until STOP Flag is set or timeout occurred */
    /* AutoEnd should be initiate after AF */
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 8004010:	e056      	b.n	80040c0 <I2C_IsErrorOccurred+0xe4>
    {
      /* Check for the Timeout */
      if (Timeout != HAL_MAX_DELAY)
 8004012:	68bb      	ldr	r3, [r7, #8]
 8004014:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004018:	d052      	beq.n	80040c0 <I2C_IsErrorOccurred+0xe4>
      {
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 800401a:	f7fe fe43 	bl	8002ca4 <HAL_GetTick>
 800401e:	4602      	mov	r2, r0
 8004020:	69fb      	ldr	r3, [r7, #28]
 8004022:	1ad3      	subs	r3, r2, r3
 8004024:	68ba      	ldr	r2, [r7, #8]
 8004026:	429a      	cmp	r2, r3
 8004028:	d302      	bcc.n	8004030 <I2C_IsErrorOccurred+0x54>
 800402a:	68bb      	ldr	r3, [r7, #8]
 800402c:	2b00      	cmp	r3, #0
 800402e:	d147      	bne.n	80040c0 <I2C_IsErrorOccurred+0xe4>
        {
          tmp1 = (uint32_t)(hi2c->Instance->CR2 & I2C_CR2_STOP);
 8004030:	68fb      	ldr	r3, [r7, #12]
 8004032:	681b      	ldr	r3, [r3, #0]
 8004034:	685b      	ldr	r3, [r3, #4]
 8004036:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800403a:	617b      	str	r3, [r7, #20]
          tmp2 = hi2c->Mode;
 800403c:	68fb      	ldr	r3, [r7, #12]
 800403e:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8004042:	74fb      	strb	r3, [r7, #19]

          /* In case of I2C still busy, try to regenerate a STOP manually */
          if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) != RESET) && \
 8004044:	68fb      	ldr	r3, [r7, #12]
 8004046:	681b      	ldr	r3, [r3, #0]
 8004048:	699b      	ldr	r3, [r3, #24]
 800404a:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800404e:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8004052:	d12e      	bne.n	80040b2 <I2C_IsErrorOccurred+0xd6>
 8004054:	697b      	ldr	r3, [r7, #20]
 8004056:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800405a:	d02a      	beq.n	80040b2 <I2C_IsErrorOccurred+0xd6>
              (tmp1 != I2C_CR2_STOP) && \
 800405c:	7cfb      	ldrb	r3, [r7, #19]
 800405e:	2b20      	cmp	r3, #32
 8004060:	d027      	beq.n	80040b2 <I2C_IsErrorOccurred+0xd6>
              (tmp2 != HAL_I2C_MODE_SLAVE))
          {
            /* Generate Stop */
            hi2c->Instance->CR2 |= I2C_CR2_STOP;
 8004062:	68fb      	ldr	r3, [r7, #12]
 8004064:	681b      	ldr	r3, [r3, #0]
 8004066:	685a      	ldr	r2, [r3, #4]
 8004068:	68fb      	ldr	r3, [r7, #12]
 800406a:	681b      	ldr	r3, [r3, #0]
 800406c:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8004070:	605a      	str	r2, [r3, #4]

            /* Update Tick with new reference */
            tickstart = HAL_GetTick();
 8004072:	f7fe fe17 	bl	8002ca4 <HAL_GetTick>
 8004076:	61f8      	str	r0, [r7, #28]
          }

          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8004078:	e01b      	b.n	80040b2 <I2C_IsErrorOccurred+0xd6>
          {
            /* Check for the Timeout */
            if ((HAL_GetTick() - tickstart) > I2C_TIMEOUT_STOPF)
 800407a:	f7fe fe13 	bl	8002ca4 <HAL_GetTick>
 800407e:	4602      	mov	r2, r0
 8004080:	69fb      	ldr	r3, [r7, #28]
 8004082:	1ad3      	subs	r3, r2, r3
 8004084:	2b19      	cmp	r3, #25
 8004086:	d914      	bls.n	80040b2 <I2C_IsErrorOccurred+0xd6>
            {
              hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8004088:	68fb      	ldr	r3, [r7, #12]
 800408a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800408c:	f043 0220 	orr.w	r2, r3, #32
 8004090:	68fb      	ldr	r3, [r7, #12]
 8004092:	645a      	str	r2, [r3, #68]	; 0x44
              hi2c->State = HAL_I2C_STATE_READY;
 8004094:	68fb      	ldr	r3, [r7, #12]
 8004096:	2220      	movs	r2, #32
 8004098:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
              hi2c->Mode = HAL_I2C_MODE_NONE;
 800409c:	68fb      	ldr	r3, [r7, #12]
 800409e:	2200      	movs	r2, #0
 80040a0:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

              /* Process Unlocked */
              __HAL_UNLOCK(hi2c);
 80040a4:	68fb      	ldr	r3, [r7, #12]
 80040a6:	2200      	movs	r2, #0
 80040a8:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

              status = HAL_ERROR;
 80040ac:	2301      	movs	r3, #1
 80040ae:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 80040b2:	68fb      	ldr	r3, [r7, #12]
 80040b4:	681b      	ldr	r3, [r3, #0]
 80040b6:	699b      	ldr	r3, [r3, #24]
 80040b8:	f003 0320 	and.w	r3, r3, #32
 80040bc:	2b20      	cmp	r3, #32
 80040be:	d1dc      	bne.n	800407a <I2C_IsErrorOccurred+0x9e>
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 80040c0:	68fb      	ldr	r3, [r7, #12]
 80040c2:	681b      	ldr	r3, [r3, #0]
 80040c4:	699b      	ldr	r3, [r3, #24]
 80040c6:	f003 0320 	and.w	r3, r3, #32
 80040ca:	2b20      	cmp	r3, #32
 80040cc:	d003      	beq.n	80040d6 <I2C_IsErrorOccurred+0xfa>
 80040ce:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80040d2:	2b00      	cmp	r3, #0
 80040d4:	d09d      	beq.n	8004012 <I2C_IsErrorOccurred+0x36>
        }
      }
    }

    /* In case STOP Flag is detected, clear it */
    if (status == HAL_OK)
 80040d6:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80040da:	2b00      	cmp	r3, #0
 80040dc:	d103      	bne.n	80040e6 <I2C_IsErrorOccurred+0x10a>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 80040de:	68fb      	ldr	r3, [r7, #12]
 80040e0:	681b      	ldr	r3, [r3, #0]
 80040e2:	2220      	movs	r2, #32
 80040e4:	61da      	str	r2, [r3, #28]
    }

    error_code |= HAL_I2C_ERROR_AF;
 80040e6:	6a3b      	ldr	r3, [r7, #32]
 80040e8:	f043 0304 	orr.w	r3, r3, #4
 80040ec:	623b      	str	r3, [r7, #32]

    status = HAL_ERROR;
 80040ee:	2301      	movs	r3, #1
 80040f0:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  /* Refresh Content of Status register */
  itflag = hi2c->Instance->ISR;
 80040f4:	68fb      	ldr	r3, [r7, #12]
 80040f6:	681b      	ldr	r3, [r3, #0]
 80040f8:	699b      	ldr	r3, [r3, #24]
 80040fa:	61bb      	str	r3, [r7, #24]

  /* Then verify if an additional errors occurs */
  /* Check if a Bus error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_BERR))
 80040fc:	69bb      	ldr	r3, [r7, #24]
 80040fe:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004102:	2b00      	cmp	r3, #0
 8004104:	d00b      	beq.n	800411e <I2C_IsErrorOccurred+0x142>
  {
    error_code |= HAL_I2C_ERROR_BERR;
 8004106:	6a3b      	ldr	r3, [r7, #32]
 8004108:	f043 0301 	orr.w	r3, r3, #1
 800410c:	623b      	str	r3, [r7, #32]

    /* Clear BERR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_BERR);
 800410e:	68fb      	ldr	r3, [r7, #12]
 8004110:	681b      	ldr	r3, [r3, #0]
 8004112:	f44f 7280 	mov.w	r2, #256	; 0x100
 8004116:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 8004118:	2301      	movs	r3, #1
 800411a:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  /* Check if an Over-Run/Under-Run error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_OVR))
 800411e:	69bb      	ldr	r3, [r7, #24]
 8004120:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004124:	2b00      	cmp	r3, #0
 8004126:	d00b      	beq.n	8004140 <I2C_IsErrorOccurred+0x164>
  {
    error_code |= HAL_I2C_ERROR_OVR;
 8004128:	6a3b      	ldr	r3, [r7, #32]
 800412a:	f043 0308 	orr.w	r3, r3, #8
 800412e:	623b      	str	r3, [r7, #32]

    /* Clear OVR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_OVR);
 8004130:	68fb      	ldr	r3, [r7, #12]
 8004132:	681b      	ldr	r3, [r3, #0]
 8004134:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8004138:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 800413a:	2301      	movs	r3, #1
 800413c:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  /* Check if an Arbitration Loss error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_ARLO))
 8004140:	69bb      	ldr	r3, [r7, #24]
 8004142:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8004146:	2b00      	cmp	r3, #0
 8004148:	d00b      	beq.n	8004162 <I2C_IsErrorOccurred+0x186>
  {
    error_code |= HAL_I2C_ERROR_ARLO;
 800414a:	6a3b      	ldr	r3, [r7, #32]
 800414c:	f043 0302 	orr.w	r3, r3, #2
 8004150:	623b      	str	r3, [r7, #32]

    /* Clear ARLO flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ARLO);
 8004152:	68fb      	ldr	r3, [r7, #12]
 8004154:	681b      	ldr	r3, [r3, #0]
 8004156:	f44f 7200 	mov.w	r2, #512	; 0x200
 800415a:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 800415c:	2301      	movs	r3, #1
 800415e:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  if (status != HAL_OK)
 8004162:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8004166:	2b00      	cmp	r3, #0
 8004168:	d01c      	beq.n	80041a4 <I2C_IsErrorOccurred+0x1c8>
  {
    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 800416a:	68f8      	ldr	r0, [r7, #12]
 800416c:	f7ff fe56 	bl	8003e1c <I2C_Flush_TXDR>

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8004170:	68fb      	ldr	r3, [r7, #12]
 8004172:	681b      	ldr	r3, [r3, #0]
 8004174:	6859      	ldr	r1, [r3, #4]
 8004176:	68fb      	ldr	r3, [r7, #12]
 8004178:	681a      	ldr	r2, [r3, #0]
 800417a:	4b0d      	ldr	r3, [pc, #52]	; (80041b0 <I2C_IsErrorOccurred+0x1d4>)
 800417c:	400b      	ands	r3, r1
 800417e:	6053      	str	r3, [r2, #4]

    hi2c->ErrorCode |= error_code;
 8004180:	68fb      	ldr	r3, [r7, #12]
 8004182:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8004184:	6a3b      	ldr	r3, [r7, #32]
 8004186:	431a      	orrs	r2, r3
 8004188:	68fb      	ldr	r3, [r7, #12]
 800418a:	645a      	str	r2, [r3, #68]	; 0x44
    hi2c->State = HAL_I2C_STATE_READY;
 800418c:	68fb      	ldr	r3, [r7, #12]
 800418e:	2220      	movs	r2, #32
 8004190:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8004194:	68fb      	ldr	r3, [r7, #12]
 8004196:	2200      	movs	r2, #0
 8004198:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800419c:	68fb      	ldr	r3, [r7, #12]
 800419e:	2200      	movs	r2, #0
 80041a0:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
  }

  return status;
 80041a4:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
}
 80041a8:	4618      	mov	r0, r3
 80041aa:	3728      	adds	r7, #40	; 0x28
 80041ac:	46bd      	mov	sp, r7
 80041ae:	bd80      	pop	{r7, pc}
 80041b0:	fe00e800 	.word	0xfe00e800

080041b4 <I2C_TransferConfig>:
  *     @arg @ref I2C_GENERATE_START_WRITE Generate Restart for write request.
  * @retval None
  */
static void I2C_TransferConfig(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t Size, uint32_t Mode,
                               uint32_t Request)
{
 80041b4:	b480      	push	{r7}
 80041b6:	b087      	sub	sp, #28
 80041b8:	af00      	add	r7, sp, #0
 80041ba:	60f8      	str	r0, [r7, #12]
 80041bc:	607b      	str	r3, [r7, #4]
 80041be:	460b      	mov	r3, r1
 80041c0:	817b      	strh	r3, [r7, #10]
 80041c2:	4613      	mov	r3, r2
 80041c4:	727b      	strb	r3, [r7, #9]
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_TRANSFER_MODE(Mode));
  assert_param(IS_TRANSFER_REQUEST(Request));

  /* Declaration of tmp to prevent undefined behavior of volatile usage */
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 80041c6:	897b      	ldrh	r3, [r7, #10]
 80041c8:	f3c3 0209 	ubfx	r2, r3, #0, #10
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 80041cc:	7a7b      	ldrb	r3, [r7, #9]
 80041ce:	041b      	lsls	r3, r3, #16
 80041d0:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 80041d4:	431a      	orrs	r2, r3
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 80041d6:	687b      	ldr	r3, [r7, #4]
 80041d8:	431a      	orrs	r2, r3
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 80041da:	6a3b      	ldr	r3, [r7, #32]
 80041dc:	4313      	orrs	r3, r2
 80041de:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 80041e2:	617b      	str	r3, [r7, #20]
                             (uint32_t)Mode | (uint32_t)Request) & (~0x80000000U));

  /* update CR2 register */
  MODIFY_REG(hi2c->Instance->CR2, \
 80041e4:	68fb      	ldr	r3, [r7, #12]
 80041e6:	681b      	ldr	r3, [r3, #0]
 80041e8:	685a      	ldr	r2, [r3, #4]
 80041ea:	6a3b      	ldr	r3, [r7, #32]
 80041ec:	0d5b      	lsrs	r3, r3, #21
 80041ee:	f403 6180 	and.w	r1, r3, #1024	; 0x400
 80041f2:	4b08      	ldr	r3, [pc, #32]	; (8004214 <I2C_TransferConfig+0x60>)
 80041f4:	430b      	orrs	r3, r1
 80041f6:	43db      	mvns	r3, r3
 80041f8:	ea02 0103 	and.w	r1, r2, r3
 80041fc:	68fb      	ldr	r3, [r7, #12]
 80041fe:	681b      	ldr	r3, [r3, #0]
 8004200:	697a      	ldr	r2, [r7, #20]
 8004202:	430a      	orrs	r2, r1
 8004204:	605a      	str	r2, [r3, #4]
             ((I2C_CR2_SADD | I2C_CR2_NBYTES | I2C_CR2_RELOAD | I2C_CR2_AUTOEND | \
               (I2C_CR2_RD_WRN & (uint32_t)(Request >> (31U - I2C_CR2_RD_WRN_Pos))) | \
               I2C_CR2_START | I2C_CR2_STOP)), tmp);
}
 8004206:	bf00      	nop
 8004208:	371c      	adds	r7, #28
 800420a:	46bd      	mov	sp, r7
 800420c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004210:	4770      	bx	lr
 8004212:	bf00      	nop
 8004214:	03ff63ff 	.word	0x03ff63ff

08004218 <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 8004218:	b480      	push	{r7}
 800421a:	b083      	sub	sp, #12
 800421c:	af00      	add	r7, sp, #0
 800421e:	6078      	str	r0, [r7, #4]
 8004220:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8004222:	687b      	ldr	r3, [r7, #4]
 8004224:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8004228:	b2db      	uxtb	r3, r3
 800422a:	2b20      	cmp	r3, #32
 800422c:	d138      	bne.n	80042a0 <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 800422e:	687b      	ldr	r3, [r7, #4]
 8004230:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8004234:	2b01      	cmp	r3, #1
 8004236:	d101      	bne.n	800423c <HAL_I2CEx_ConfigAnalogFilter+0x24>
 8004238:	2302      	movs	r3, #2
 800423a:	e032      	b.n	80042a2 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 800423c:	687b      	ldr	r3, [r7, #4]
 800423e:	2201      	movs	r2, #1
 8004240:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8004244:	687b      	ldr	r3, [r7, #4]
 8004246:	2224      	movs	r2, #36	; 0x24
 8004248:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 800424c:	687b      	ldr	r3, [r7, #4]
 800424e:	681b      	ldr	r3, [r3, #0]
 8004250:	681a      	ldr	r2, [r3, #0]
 8004252:	687b      	ldr	r3, [r7, #4]
 8004254:	681b      	ldr	r3, [r3, #0]
 8004256:	f022 0201 	bic.w	r2, r2, #1
 800425a:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 800425c:	687b      	ldr	r3, [r7, #4]
 800425e:	681b      	ldr	r3, [r3, #0]
 8004260:	681a      	ldr	r2, [r3, #0]
 8004262:	687b      	ldr	r3, [r7, #4]
 8004264:	681b      	ldr	r3, [r3, #0]
 8004266:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 800426a:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 800426c:	687b      	ldr	r3, [r7, #4]
 800426e:	681b      	ldr	r3, [r3, #0]
 8004270:	6819      	ldr	r1, [r3, #0]
 8004272:	687b      	ldr	r3, [r7, #4]
 8004274:	681b      	ldr	r3, [r3, #0]
 8004276:	683a      	ldr	r2, [r7, #0]
 8004278:	430a      	orrs	r2, r1
 800427a:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 800427c:	687b      	ldr	r3, [r7, #4]
 800427e:	681b      	ldr	r3, [r3, #0]
 8004280:	681a      	ldr	r2, [r3, #0]
 8004282:	687b      	ldr	r3, [r7, #4]
 8004284:	681b      	ldr	r3, [r3, #0]
 8004286:	f042 0201 	orr.w	r2, r2, #1
 800428a:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 800428c:	687b      	ldr	r3, [r7, #4]
 800428e:	2220      	movs	r2, #32
 8004290:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8004294:	687b      	ldr	r3, [r7, #4]
 8004296:	2200      	movs	r2, #0
 8004298:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 800429c:	2300      	movs	r3, #0
 800429e:	e000      	b.n	80042a2 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 80042a0:	2302      	movs	r3, #2
  }
}
 80042a2:	4618      	mov	r0, r3
 80042a4:	370c      	adds	r7, #12
 80042a6:	46bd      	mov	sp, r7
 80042a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80042ac:	4770      	bx	lr

080042ae <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 80042ae:	b480      	push	{r7}
 80042b0:	b085      	sub	sp, #20
 80042b2:	af00      	add	r7, sp, #0
 80042b4:	6078      	str	r0, [r7, #4]
 80042b6:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80042b8:	687b      	ldr	r3, [r7, #4]
 80042ba:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80042be:	b2db      	uxtb	r3, r3
 80042c0:	2b20      	cmp	r3, #32
 80042c2:	d139      	bne.n	8004338 <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 80042c4:	687b      	ldr	r3, [r7, #4]
 80042c6:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 80042ca:	2b01      	cmp	r3, #1
 80042cc:	d101      	bne.n	80042d2 <HAL_I2CEx_ConfigDigitalFilter+0x24>
 80042ce:	2302      	movs	r3, #2
 80042d0:	e033      	b.n	800433a <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 80042d2:	687b      	ldr	r3, [r7, #4]
 80042d4:	2201      	movs	r2, #1
 80042d6:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 80042da:	687b      	ldr	r3, [r7, #4]
 80042dc:	2224      	movs	r2, #36	; 0x24
 80042de:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 80042e2:	687b      	ldr	r3, [r7, #4]
 80042e4:	681b      	ldr	r3, [r3, #0]
 80042e6:	681a      	ldr	r2, [r3, #0]
 80042e8:	687b      	ldr	r3, [r7, #4]
 80042ea:	681b      	ldr	r3, [r3, #0]
 80042ec:	f022 0201 	bic.w	r2, r2, #1
 80042f0:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 80042f2:	687b      	ldr	r3, [r7, #4]
 80042f4:	681b      	ldr	r3, [r3, #0]
 80042f6:	681b      	ldr	r3, [r3, #0]
 80042f8:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 80042fa:	68fb      	ldr	r3, [r7, #12]
 80042fc:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 8004300:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 8004302:	683b      	ldr	r3, [r7, #0]
 8004304:	021b      	lsls	r3, r3, #8
 8004306:	68fa      	ldr	r2, [r7, #12]
 8004308:	4313      	orrs	r3, r2
 800430a:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 800430c:	687b      	ldr	r3, [r7, #4]
 800430e:	681b      	ldr	r3, [r3, #0]
 8004310:	68fa      	ldr	r2, [r7, #12]
 8004312:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8004314:	687b      	ldr	r3, [r7, #4]
 8004316:	681b      	ldr	r3, [r3, #0]
 8004318:	681a      	ldr	r2, [r3, #0]
 800431a:	687b      	ldr	r3, [r7, #4]
 800431c:	681b      	ldr	r3, [r3, #0]
 800431e:	f042 0201 	orr.w	r2, r2, #1
 8004322:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8004324:	687b      	ldr	r3, [r7, #4]
 8004326:	2220      	movs	r2, #32
 8004328:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800432c:	687b      	ldr	r3, [r7, #4]
 800432e:	2200      	movs	r2, #0
 8004330:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8004334:	2300      	movs	r3, #0
 8004336:	e000      	b.n	800433a <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 8004338:	2302      	movs	r3, #2
  }
}
 800433a:	4618      	mov	r0, r3
 800433c:	3714      	adds	r7, #20
 800433e:	46bd      	mov	sp, r7
 8004340:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004344:	4770      	bx	lr

08004346 <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 8004346:	b5f0      	push	{r4, r5, r6, r7, lr}
 8004348:	b08f      	sub	sp, #60	; 0x3c
 800434a:	af0a      	add	r7, sp, #40	; 0x28
 800434c:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx;
#endif /* defined (USB_OTG_FS) */
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 800434e:	687b      	ldr	r3, [r7, #4]
 8004350:	2b00      	cmp	r3, #0
 8004352:	d101      	bne.n	8004358 <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 8004354:	2301      	movs	r3, #1
 8004356:	e116      	b.n	8004586 <HAL_PCD_Init+0x240>

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

#if defined (USB_OTG_FS)
  USBx = hpcd->Instance;
 8004358:	687b      	ldr	r3, [r7, #4]
 800435a:	681b      	ldr	r3, [r3, #0]
 800435c:	60bb      	str	r3, [r7, #8]
#endif /* defined (USB_OTG_FS) */

  if (hpcd->State == HAL_PCD_STATE_RESET)
 800435e:	687b      	ldr	r3, [r7, #4]
 8004360:	f893 34bd 	ldrb.w	r3, [r3, #1213]	; 0x4bd
 8004364:	b2db      	uxtb	r3, r3
 8004366:	2b00      	cmp	r3, #0
 8004368:	d106      	bne.n	8004378 <HAL_PCD_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 800436a:	687b      	ldr	r3, [r7, #4]
 800436c:	2200      	movs	r2, #0
 800436e:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 8004372:	6878      	ldr	r0, [r7, #4]
 8004374:	f7fd febe 	bl	80020f4 <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 8004378:	687b      	ldr	r3, [r7, #4]
 800437a:	2203      	movs	r2, #3
 800437c:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd

#if defined (USB_OTG_FS)
  /* Disable DMA mode for FS instance */
  if ((USBx->CID & (0x1U << 8)) == 0U)
 8004380:	68bb      	ldr	r3, [r7, #8]
 8004382:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004384:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004388:	2b00      	cmp	r3, #0
 800438a:	d102      	bne.n	8004392 <HAL_PCD_Init+0x4c>
  {
    hpcd->Init.dma_enable = 0U;
 800438c:	687b      	ldr	r3, [r7, #4]
 800438e:	2200      	movs	r2, #0
 8004390:	611a      	str	r2, [r3, #16]
  }
#endif /* defined (USB_OTG_FS) */

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 8004392:	687b      	ldr	r3, [r7, #4]
 8004394:	681b      	ldr	r3, [r3, #0]
 8004396:	4618      	mov	r0, r3
 8004398:	f002 fb43 	bl	8006a22 <USB_DisableGlobalInt>

  /*Init the Core (common init.) */
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 800439c:	687b      	ldr	r3, [r7, #4]
 800439e:	681b      	ldr	r3, [r3, #0]
 80043a0:	603b      	str	r3, [r7, #0]
 80043a2:	687e      	ldr	r6, [r7, #4]
 80043a4:	466d      	mov	r5, sp
 80043a6:	f106 0410 	add.w	r4, r6, #16
 80043aa:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80043ac:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80043ae:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80043b0:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80043b2:	e894 0003 	ldmia.w	r4, {r0, r1}
 80043b6:	e885 0003 	stmia.w	r5, {r0, r1}
 80043ba:	1d33      	adds	r3, r6, #4
 80043bc:	cb0e      	ldmia	r3, {r1, r2, r3}
 80043be:	6838      	ldr	r0, [r7, #0]
 80043c0:	f002 fb03 	bl	80069ca <USB_CoreInit>
 80043c4:	4603      	mov	r3, r0
 80043c6:	2b00      	cmp	r3, #0
 80043c8:	d005      	beq.n	80043d6 <HAL_PCD_Init+0x90>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 80043ca:	687b      	ldr	r3, [r7, #4]
 80043cc:	2202      	movs	r2, #2
 80043ce:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd
    return HAL_ERROR;
 80043d2:	2301      	movs	r3, #1
 80043d4:	e0d7      	b.n	8004586 <HAL_PCD_Init+0x240>
  }

  /* Force Device Mode*/
  (void)USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE);
 80043d6:	687b      	ldr	r3, [r7, #4]
 80043d8:	681b      	ldr	r3, [r3, #0]
 80043da:	2100      	movs	r1, #0
 80043dc:	4618      	mov	r0, r3
 80043de:	f002 fb31 	bl	8006a44 <USB_SetCurrentMode>

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80043e2:	2300      	movs	r3, #0
 80043e4:	73fb      	strb	r3, [r7, #15]
 80043e6:	e04a      	b.n	800447e <HAL_PCD_Init+0x138>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 80043e8:	7bfa      	ldrb	r2, [r7, #15]
 80043ea:	6879      	ldr	r1, [r7, #4]
 80043ec:	4613      	mov	r3, r2
 80043ee:	00db      	lsls	r3, r3, #3
 80043f0:	4413      	add	r3, r2
 80043f2:	009b      	lsls	r3, r3, #2
 80043f4:	440b      	add	r3, r1
 80043f6:	333d      	adds	r3, #61	; 0x3d
 80043f8:	2201      	movs	r2, #1
 80043fa:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 80043fc:	7bfa      	ldrb	r2, [r7, #15]
 80043fe:	6879      	ldr	r1, [r7, #4]
 8004400:	4613      	mov	r3, r2
 8004402:	00db      	lsls	r3, r3, #3
 8004404:	4413      	add	r3, r2
 8004406:	009b      	lsls	r3, r3, #2
 8004408:	440b      	add	r3, r1
 800440a:	333c      	adds	r3, #60	; 0x3c
 800440c:	7bfa      	ldrb	r2, [r7, #15]
 800440e:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].tx_fifo_num = i;
 8004410:	7bfa      	ldrb	r2, [r7, #15]
 8004412:	7bfb      	ldrb	r3, [r7, #15]
 8004414:	b298      	uxth	r0, r3
 8004416:	6879      	ldr	r1, [r7, #4]
 8004418:	4613      	mov	r3, r2
 800441a:	00db      	lsls	r3, r3, #3
 800441c:	4413      	add	r3, r2
 800441e:	009b      	lsls	r3, r3, #2
 8004420:	440b      	add	r3, r1
 8004422:	3344      	adds	r3, #68	; 0x44
 8004424:	4602      	mov	r2, r0
 8004426:	801a      	strh	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 8004428:	7bfa      	ldrb	r2, [r7, #15]
 800442a:	6879      	ldr	r1, [r7, #4]
 800442c:	4613      	mov	r3, r2
 800442e:	00db      	lsls	r3, r3, #3
 8004430:	4413      	add	r3, r2
 8004432:	009b      	lsls	r3, r3, #2
 8004434:	440b      	add	r3, r1
 8004436:	3340      	adds	r3, #64	; 0x40
 8004438:	2200      	movs	r2, #0
 800443a:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 800443c:	7bfa      	ldrb	r2, [r7, #15]
 800443e:	6879      	ldr	r1, [r7, #4]
 8004440:	4613      	mov	r3, r2
 8004442:	00db      	lsls	r3, r3, #3
 8004444:	4413      	add	r3, r2
 8004446:	009b      	lsls	r3, r3, #2
 8004448:	440b      	add	r3, r1
 800444a:	3348      	adds	r3, #72	; 0x48
 800444c:	2200      	movs	r2, #0
 800444e:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 8004450:	7bfa      	ldrb	r2, [r7, #15]
 8004452:	6879      	ldr	r1, [r7, #4]
 8004454:	4613      	mov	r3, r2
 8004456:	00db      	lsls	r3, r3, #3
 8004458:	4413      	add	r3, r2
 800445a:	009b      	lsls	r3, r3, #2
 800445c:	440b      	add	r3, r1
 800445e:	334c      	adds	r3, #76	; 0x4c
 8004460:	2200      	movs	r2, #0
 8004462:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 8004464:	7bfa      	ldrb	r2, [r7, #15]
 8004466:	6879      	ldr	r1, [r7, #4]
 8004468:	4613      	mov	r3, r2
 800446a:	00db      	lsls	r3, r3, #3
 800446c:	4413      	add	r3, r2
 800446e:	009b      	lsls	r3, r3, #2
 8004470:	440b      	add	r3, r1
 8004472:	3354      	adds	r3, #84	; 0x54
 8004474:	2200      	movs	r2, #0
 8004476:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8004478:	7bfb      	ldrb	r3, [r7, #15]
 800447a:	3301      	adds	r3, #1
 800447c:	73fb      	strb	r3, [r7, #15]
 800447e:	7bfa      	ldrb	r2, [r7, #15]
 8004480:	687b      	ldr	r3, [r7, #4]
 8004482:	685b      	ldr	r3, [r3, #4]
 8004484:	429a      	cmp	r2, r3
 8004486:	d3af      	bcc.n	80043e8 <HAL_PCD_Init+0xa2>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8004488:	2300      	movs	r3, #0
 800448a:	73fb      	strb	r3, [r7, #15]
 800448c:	e044      	b.n	8004518 <HAL_PCD_Init+0x1d2>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 800448e:	7bfa      	ldrb	r2, [r7, #15]
 8004490:	6879      	ldr	r1, [r7, #4]
 8004492:	4613      	mov	r3, r2
 8004494:	00db      	lsls	r3, r3, #3
 8004496:	4413      	add	r3, r2
 8004498:	009b      	lsls	r3, r3, #2
 800449a:	440b      	add	r3, r1
 800449c:	f203 237d 	addw	r3, r3, #637	; 0x27d
 80044a0:	2200      	movs	r2, #0
 80044a2:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 80044a4:	7bfa      	ldrb	r2, [r7, #15]
 80044a6:	6879      	ldr	r1, [r7, #4]
 80044a8:	4613      	mov	r3, r2
 80044aa:	00db      	lsls	r3, r3, #3
 80044ac:	4413      	add	r3, r2
 80044ae:	009b      	lsls	r3, r3, #2
 80044b0:	440b      	add	r3, r1
 80044b2:	f503 731f 	add.w	r3, r3, #636	; 0x27c
 80044b6:	7bfa      	ldrb	r2, [r7, #15]
 80044b8:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 80044ba:	7bfa      	ldrb	r2, [r7, #15]
 80044bc:	6879      	ldr	r1, [r7, #4]
 80044be:	4613      	mov	r3, r2
 80044c0:	00db      	lsls	r3, r3, #3
 80044c2:	4413      	add	r3, r2
 80044c4:	009b      	lsls	r3, r3, #2
 80044c6:	440b      	add	r3, r1
 80044c8:	f503 7320 	add.w	r3, r3, #640	; 0x280
 80044cc:	2200      	movs	r2, #0
 80044ce:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 80044d0:	7bfa      	ldrb	r2, [r7, #15]
 80044d2:	6879      	ldr	r1, [r7, #4]
 80044d4:	4613      	mov	r3, r2
 80044d6:	00db      	lsls	r3, r3, #3
 80044d8:	4413      	add	r3, r2
 80044da:	009b      	lsls	r3, r3, #2
 80044dc:	440b      	add	r3, r1
 80044de:	f503 7322 	add.w	r3, r3, #648	; 0x288
 80044e2:	2200      	movs	r2, #0
 80044e4:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 80044e6:	7bfa      	ldrb	r2, [r7, #15]
 80044e8:	6879      	ldr	r1, [r7, #4]
 80044ea:	4613      	mov	r3, r2
 80044ec:	00db      	lsls	r3, r3, #3
 80044ee:	4413      	add	r3, r2
 80044f0:	009b      	lsls	r3, r3, #2
 80044f2:	440b      	add	r3, r1
 80044f4:	f503 7323 	add.w	r3, r3, #652	; 0x28c
 80044f8:	2200      	movs	r2, #0
 80044fa:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 80044fc:	7bfa      	ldrb	r2, [r7, #15]
 80044fe:	6879      	ldr	r1, [r7, #4]
 8004500:	4613      	mov	r3, r2
 8004502:	00db      	lsls	r3, r3, #3
 8004504:	4413      	add	r3, r2
 8004506:	009b      	lsls	r3, r3, #2
 8004508:	440b      	add	r3, r1
 800450a:	f503 7325 	add.w	r3, r3, #660	; 0x294
 800450e:	2200      	movs	r2, #0
 8004510:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8004512:	7bfb      	ldrb	r3, [r7, #15]
 8004514:	3301      	adds	r3, #1
 8004516:	73fb      	strb	r3, [r7, #15]
 8004518:	7bfa      	ldrb	r2, [r7, #15]
 800451a:	687b      	ldr	r3, [r7, #4]
 800451c:	685b      	ldr	r3, [r3, #4]
 800451e:	429a      	cmp	r2, r3
 8004520:	d3b5      	bcc.n	800448e <HAL_PCD_Init+0x148>
  }

  /* Init Device */
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8004522:	687b      	ldr	r3, [r7, #4]
 8004524:	681b      	ldr	r3, [r3, #0]
 8004526:	603b      	str	r3, [r7, #0]
 8004528:	687e      	ldr	r6, [r7, #4]
 800452a:	466d      	mov	r5, sp
 800452c:	f106 0410 	add.w	r4, r6, #16
 8004530:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8004532:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8004534:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8004536:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8004538:	e894 0003 	ldmia.w	r4, {r0, r1}
 800453c:	e885 0003 	stmia.w	r5, {r0, r1}
 8004540:	1d33      	adds	r3, r6, #4
 8004542:	cb0e      	ldmia	r3, {r1, r2, r3}
 8004544:	6838      	ldr	r0, [r7, #0]
 8004546:	f002 fac9 	bl	8006adc <USB_DevInit>
 800454a:	4603      	mov	r3, r0
 800454c:	2b00      	cmp	r3, #0
 800454e:	d005      	beq.n	800455c <HAL_PCD_Init+0x216>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8004550:	687b      	ldr	r3, [r7, #4]
 8004552:	2202      	movs	r2, #2
 8004554:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd
    return HAL_ERROR;
 8004558:	2301      	movs	r3, #1
 800455a:	e014      	b.n	8004586 <HAL_PCD_Init+0x240>
  }

  hpcd->USB_Address = 0U;
 800455c:	687b      	ldr	r3, [r7, #4]
 800455e:	2200      	movs	r2, #0
 8004560:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  hpcd->State = HAL_PCD_STATE_READY;
 8004564:	687b      	ldr	r3, [r7, #4]
 8004566:	2201      	movs	r2, #1
 8004568:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd

  /* Activate LPM */
  if (hpcd->Init.lpm_enable == 1U)
 800456c:	687b      	ldr	r3, [r7, #4]
 800456e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004570:	2b01      	cmp	r3, #1
 8004572:	d102      	bne.n	800457a <HAL_PCD_Init+0x234>
  {
    (void)HAL_PCDEx_ActivateLPM(hpcd);
 8004574:	6878      	ldr	r0, [r7, #4]
 8004576:	f000 f80a 	bl	800458e <HAL_PCDEx_ActivateLPM>
  }

  (void)USB_DevDisconnect(hpcd->Instance);
 800457a:	687b      	ldr	r3, [r7, #4]
 800457c:	681b      	ldr	r3, [r3, #0]
 800457e:	4618      	mov	r0, r3
 8004580:	f002 fc75 	bl	8006e6e <USB_DevDisconnect>

  return HAL_OK;
 8004584:	2300      	movs	r3, #0
}
 8004586:	4618      	mov	r0, r3
 8004588:	3714      	adds	r7, #20
 800458a:	46bd      	mov	sp, r7
 800458c:	bdf0      	pop	{r4, r5, r6, r7, pc}

0800458e <HAL_PCDEx_ActivateLPM>:
  * @brief  Activate LPM feature.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_ActivateLPM(PCD_HandleTypeDef *hpcd)
{
 800458e:	b480      	push	{r7}
 8004590:	b085      	sub	sp, #20
 8004592:	af00      	add	r7, sp, #0
 8004594:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8004596:	687b      	ldr	r3, [r7, #4]
 8004598:	681b      	ldr	r3, [r3, #0]
 800459a:	60fb      	str	r3, [r7, #12]

  hpcd->lpm_active = 1U;
 800459c:	687b      	ldr	r3, [r7, #4]
 800459e:	2201      	movs	r2, #1
 80045a0:	f8c3 2500 	str.w	r2, [r3, #1280]	; 0x500
  hpcd->LPM_State = LPM_L0;
 80045a4:	687b      	ldr	r3, [r7, #4]
 80045a6:	2200      	movs	r2, #0
 80045a8:	f883 24f4 	strb.w	r2, [r3, #1268]	; 0x4f4
  USBx->GINTMSK |= USB_OTG_GINTMSK_LPMINTM;
 80045ac:	68fb      	ldr	r3, [r7, #12]
 80045ae:	699b      	ldr	r3, [r3, #24]
 80045b0:	f043 6200 	orr.w	r2, r3, #134217728	; 0x8000000
 80045b4:	68fb      	ldr	r3, [r7, #12]
 80045b6:	619a      	str	r2, [r3, #24]
  USBx->GLPMCFG |= (USB_OTG_GLPMCFG_LPMEN | USB_OTG_GLPMCFG_LPMACK | USB_OTG_GLPMCFG_ENBESL);
 80045b8:	68fb      	ldr	r3, [r7, #12]
 80045ba:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80045bc:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80045c0:	f043 0303 	orr.w	r3, r3, #3
 80045c4:	68fa      	ldr	r2, [r7, #12]
 80045c6:	6553      	str	r3, [r2, #84]	; 0x54

  return HAL_OK;
 80045c8:	2300      	movs	r3, #0
}
 80045ca:	4618      	mov	r0, r3
 80045cc:	3714      	adds	r7, #20
 80045ce:	46bd      	mov	sp, r7
 80045d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80045d4:	4770      	bx	lr
	...

080045d8 <HAL_PWR_EnableBkUpAccess>:
  * @note  LSEON bit that switches on and off the LSE crystal belongs as well to the
  *        back-up domain.
  * @retval None
  */
void HAL_PWR_EnableBkUpAccess(void)
{
 80045d8:	b480      	push	{r7}
 80045da:	af00      	add	r7, sp, #0
  SET_BIT(PWR->CR1, PWR_CR1_DBP);
 80045dc:	4b05      	ldr	r3, [pc, #20]	; (80045f4 <HAL_PWR_EnableBkUpAccess+0x1c>)
 80045de:	681b      	ldr	r3, [r3, #0]
 80045e0:	4a04      	ldr	r2, [pc, #16]	; (80045f4 <HAL_PWR_EnableBkUpAccess+0x1c>)
 80045e2:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80045e6:	6013      	str	r3, [r2, #0]
}
 80045e8:	bf00      	nop
 80045ea:	46bd      	mov	sp, r7
 80045ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80045f0:	4770      	bx	lr
 80045f2:	bf00      	nop
 80045f4:	40007000 	.word	0x40007000

080045f8 <HAL_PWREx_GetVoltageRange>:
  * @brief Return Voltage Scaling Range.
  * @retval VOS bit field (PWR_REGULATOR_VOLTAGE_SCALE1 or PWR_REGULATOR_VOLTAGE_SCALE2
  *         or PWR_REGULATOR_VOLTAGE_SCALE1_BOOST when applicable)
  */
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 80045f8:	b480      	push	{r7}
 80045fa:	af00      	add	r7, sp, #0
    else
    {
      return PWR_REGULATOR_VOLTAGE_SCALE1_BOOST;
    }
#else
  return  (PWR->CR1 & PWR_CR1_VOS);
 80045fc:	4b04      	ldr	r3, [pc, #16]	; (8004610 <HAL_PWREx_GetVoltageRange+0x18>)
 80045fe:	681b      	ldr	r3, [r3, #0]
 8004600:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
#endif
}
 8004604:	4618      	mov	r0, r3
 8004606:	46bd      	mov	sp, r7
 8004608:	f85d 7b04 	ldr.w	r7, [sp], #4
 800460c:	4770      	bx	lr
 800460e:	bf00      	nop
 8004610:	40007000 	.word	0x40007000

08004614 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 8004614:	b480      	push	{r7}
 8004616:	b085      	sub	sp, #20
 8004618:	af00      	add	r7, sp, #0
 800461a:	6078      	str	r0, [r7, #4]
  }

#else

  /* If Set Range 1 */
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 800461c:	687b      	ldr	r3, [r7, #4]
 800461e:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8004622:	d130      	bne.n	8004686 <HAL_PWREx_ControlVoltageScaling+0x72>
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE1)
 8004624:	4b23      	ldr	r3, [pc, #140]	; (80046b4 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8004626:	681b      	ldr	r3, [r3, #0]
 8004628:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 800462c:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8004630:	d038      	beq.n	80046a4 <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8004632:	4b20      	ldr	r3, [pc, #128]	; (80046b4 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8004634:	681b      	ldr	r3, [r3, #0]
 8004636:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 800463a:	4a1e      	ldr	r2, [pc, #120]	; (80046b4 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 800463c:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8004640:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 8004642:	4b1d      	ldr	r3, [pc, #116]	; (80046b8 <HAL_PWREx_ControlVoltageScaling+0xa4>)
 8004644:	681b      	ldr	r3, [r3, #0]
 8004646:	2232      	movs	r2, #50	; 0x32
 8004648:	fb02 f303 	mul.w	r3, r2, r3
 800464c:	4a1b      	ldr	r2, [pc, #108]	; (80046bc <HAL_PWREx_ControlVoltageScaling+0xa8>)
 800464e:	fba2 2303 	umull	r2, r3, r2, r3
 8004652:	0c9b      	lsrs	r3, r3, #18
 8004654:	3301      	adds	r3, #1
 8004656:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8004658:	e002      	b.n	8004660 <HAL_PWREx_ControlVoltageScaling+0x4c>
      {
        wait_loop_index--;
 800465a:	68fb      	ldr	r3, [r7, #12]
 800465c:	3b01      	subs	r3, #1
 800465e:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8004660:	4b14      	ldr	r3, [pc, #80]	; (80046b4 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8004662:	695b      	ldr	r3, [r3, #20]
 8004664:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004668:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800466c:	d102      	bne.n	8004674 <HAL_PWREx_ControlVoltageScaling+0x60>
 800466e:	68fb      	ldr	r3, [r7, #12]
 8004670:	2b00      	cmp	r3, #0
 8004672:	d1f2      	bne.n	800465a <HAL_PWREx_ControlVoltageScaling+0x46>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8004674:	4b0f      	ldr	r3, [pc, #60]	; (80046b4 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8004676:	695b      	ldr	r3, [r3, #20]
 8004678:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800467c:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004680:	d110      	bne.n	80046a4 <HAL_PWREx_ControlVoltageScaling+0x90>
      {
        return HAL_TIMEOUT;
 8004682:	2303      	movs	r3, #3
 8004684:	e00f      	b.n	80046a6 <HAL_PWREx_ControlVoltageScaling+0x92>
      }
    }
  }
  else
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE2)
 8004686:	4b0b      	ldr	r3, [pc, #44]	; (80046b4 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8004688:	681b      	ldr	r3, [r3, #0]
 800468a:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 800468e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004692:	d007      	beq.n	80046a4 <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 2 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 8004694:	4b07      	ldr	r3, [pc, #28]	; (80046b4 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8004696:	681b      	ldr	r3, [r3, #0]
 8004698:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 800469c:	4a05      	ldr	r2, [pc, #20]	; (80046b4 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 800469e:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80046a2:	6013      	str	r3, [r2, #0]
      /* No need to wait for VOSF to be cleared for this transition */
    }
  }
#endif

  return HAL_OK;
 80046a4:	2300      	movs	r3, #0
}
 80046a6:	4618      	mov	r0, r3
 80046a8:	3714      	adds	r7, #20
 80046aa:	46bd      	mov	sp, r7
 80046ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80046b0:	4770      	bx	lr
 80046b2:	bf00      	nop
 80046b4:	40007000 	.word	0x40007000
 80046b8:	2000012c 	.word	0x2000012c
 80046bc:	431bde83 	.word	0x431bde83

080046c0 <HAL_PWREx_EnableVddUSB>:
  * @brief Enable VDDUSB supply.
  * @note  Remove VDDUSB electrical and logical isolation, once VDDUSB supply is present.
  * @retval None
  */
void HAL_PWREx_EnableVddUSB(void)
{
 80046c0:	b480      	push	{r7}
 80046c2:	af00      	add	r7, sp, #0
  SET_BIT(PWR->CR2, PWR_CR2_USV);
 80046c4:	4b05      	ldr	r3, [pc, #20]	; (80046dc <HAL_PWREx_EnableVddUSB+0x1c>)
 80046c6:	685b      	ldr	r3, [r3, #4]
 80046c8:	4a04      	ldr	r2, [pc, #16]	; (80046dc <HAL_PWREx_EnableVddUSB+0x1c>)
 80046ca:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80046ce:	6053      	str	r3, [r2, #4]
}
 80046d0:	bf00      	nop
 80046d2:	46bd      	mov	sp, r7
 80046d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80046d8:	4770      	bx	lr
 80046da:	bf00      	nop
 80046dc:	40007000 	.word	0x40007000

080046e0 <HAL_QSPI_Init>:
  *        in the QSPI_InitTypeDef and initialize the associated handle.
  * @param hqspi QSPI handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_QSPI_Init(QSPI_HandleTypeDef *hqspi)
{
 80046e0:	b580      	push	{r7, lr}
 80046e2:	b086      	sub	sp, #24
 80046e4:	af02      	add	r7, sp, #8
 80046e6:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status;
  uint32_t tickstart = HAL_GetTick();
 80046e8:	f7fe fadc 	bl	8002ca4 <HAL_GetTick>
 80046ec:	60f8      	str	r0, [r7, #12]

  /* Check the QSPI handle allocation */
  if(hqspi == NULL)
 80046ee:	687b      	ldr	r3, [r7, #4]
 80046f0:	2b00      	cmp	r3, #0
 80046f2:	d101      	bne.n	80046f8 <HAL_QSPI_Init+0x18>
  {
    return HAL_ERROR;
 80046f4:	2301      	movs	r3, #1
 80046f6:	e063      	b.n	80047c0 <HAL_QSPI_Init+0xe0>
  {
    assert_param(IS_QSPI_FLASH_ID(hqspi->Init.FlashID));
  }
#endif

  if(hqspi->State == HAL_QSPI_STATE_RESET)
 80046f8:	687b      	ldr	r3, [r7, #4]
 80046fa:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 80046fe:	b2db      	uxtb	r3, r3
 8004700:	2b00      	cmp	r3, #0
 8004702:	d10b      	bne.n	800471c <HAL_QSPI_Init+0x3c>
  {
    /* Allocate lock resource and initialize it */
    hqspi->Lock = HAL_UNLOCKED;
 8004704:	687b      	ldr	r3, [r7, #4]
 8004706:	2200      	movs	r2, #0
 8004708:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    /* Init the low level hardware */
    hqspi->MspInitCallback(hqspi);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_QSPI_MspInit(hqspi);
 800470c:	6878      	ldr	r0, [r7, #4]
 800470e:	f7fd fbc5 	bl	8001e9c <HAL_QSPI_MspInit>
#endif

    /* Configure the default timeout for the QSPI memory access */
    HAL_QSPI_SetTimeout(hqspi, HAL_QSPI_TIMEOUT_DEFAULT_VALUE);
 8004712:	f241 3188 	movw	r1, #5000	; 0x1388
 8004716:	6878      	ldr	r0, [r7, #4]
 8004718:	f000 f858 	bl	80047cc <HAL_QSPI_SetTimeout>
  }

  /* Configure QSPI FIFO Threshold */
  MODIFY_REG(hqspi->Instance->CR, QUADSPI_CR_FTHRES,
 800471c:	687b      	ldr	r3, [r7, #4]
 800471e:	681b      	ldr	r3, [r3, #0]
 8004720:	681b      	ldr	r3, [r3, #0]
 8004722:	f423 6170 	bic.w	r1, r3, #3840	; 0xf00
 8004726:	687b      	ldr	r3, [r7, #4]
 8004728:	689b      	ldr	r3, [r3, #8]
 800472a:	3b01      	subs	r3, #1
 800472c:	021a      	lsls	r2, r3, #8
 800472e:	687b      	ldr	r3, [r7, #4]
 8004730:	681b      	ldr	r3, [r3, #0]
 8004732:	430a      	orrs	r2, r1
 8004734:	601a      	str	r2, [r3, #0]
             ((hqspi->Init.FifoThreshold - 1U) << QUADSPI_CR_FTHRES_Pos));

  /* Wait till BUSY flag reset */
  status = QSPI_WaitFlagStateUntilTimeout(hqspi, QSPI_FLAG_BUSY, RESET, tickstart, hqspi->Timeout);
 8004736:	687b      	ldr	r3, [r7, #4]
 8004738:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800473a:	9300      	str	r3, [sp, #0]
 800473c:	68fb      	ldr	r3, [r7, #12]
 800473e:	2200      	movs	r2, #0
 8004740:	2120      	movs	r1, #32
 8004742:	6878      	ldr	r0, [r7, #4]
 8004744:	f000 f850 	bl	80047e8 <QSPI_WaitFlagStateUntilTimeout>
 8004748:	4603      	mov	r3, r0
 800474a:	72fb      	strb	r3, [r7, #11]

  if(status == HAL_OK)
 800474c:	7afb      	ldrb	r3, [r7, #11]
 800474e:	2b00      	cmp	r3, #0
 8004750:	d131      	bne.n	80047b6 <HAL_QSPI_Init+0xd6>
#if defined(QUADSPI_CR_DFM)
    MODIFY_REG(hqspi->Instance->CR, (QUADSPI_CR_PRESCALER | QUADSPI_CR_SSHIFT | QUADSPI_CR_FSEL | QUADSPI_CR_DFM),
               ((hqspi->Init.ClockPrescaler << QUADSPI_CR_PRESCALER_Pos) |
                hqspi->Init.SampleShifting  | hqspi->Init.FlashID | hqspi->Init.DualFlash));
#else
    MODIFY_REG(hqspi->Instance->CR, (QUADSPI_CR_PRESCALER | QUADSPI_CR_SSHIFT),
 8004752:	687b      	ldr	r3, [r7, #4]
 8004754:	681b      	ldr	r3, [r3, #0]
 8004756:	681b      	ldr	r3, [r3, #0]
 8004758:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
 800475c:	f023 0310 	bic.w	r3, r3, #16
 8004760:	687a      	ldr	r2, [r7, #4]
 8004762:	6852      	ldr	r2, [r2, #4]
 8004764:	0611      	lsls	r1, r2, #24
 8004766:	687a      	ldr	r2, [r7, #4]
 8004768:	68d2      	ldr	r2, [r2, #12]
 800476a:	4311      	orrs	r1, r2
 800476c:	687a      	ldr	r2, [r7, #4]
 800476e:	6812      	ldr	r2, [r2, #0]
 8004770:	430b      	orrs	r3, r1
 8004772:	6013      	str	r3, [r2, #0]
               ((hqspi->Init.ClockPrescaler << QUADSPI_CR_PRESCALER_Pos) |
                hqspi->Init.SampleShifting));
#endif

    /* Configure QSPI Flash Size, CS High Time and Clock Mode */
    MODIFY_REG(hqspi->Instance->DCR, (QUADSPI_DCR_FSIZE | QUADSPI_DCR_CSHT | QUADSPI_DCR_CKMODE),
 8004774:	687b      	ldr	r3, [r7, #4]
 8004776:	681b      	ldr	r3, [r3, #0]
 8004778:	685a      	ldr	r2, [r3, #4]
 800477a:	4b13      	ldr	r3, [pc, #76]	; (80047c8 <HAL_QSPI_Init+0xe8>)
 800477c:	4013      	ands	r3, r2
 800477e:	687a      	ldr	r2, [r7, #4]
 8004780:	6912      	ldr	r2, [r2, #16]
 8004782:	0411      	lsls	r1, r2, #16
 8004784:	687a      	ldr	r2, [r7, #4]
 8004786:	6952      	ldr	r2, [r2, #20]
 8004788:	4311      	orrs	r1, r2
 800478a:	687a      	ldr	r2, [r7, #4]
 800478c:	6992      	ldr	r2, [r2, #24]
 800478e:	4311      	orrs	r1, r2
 8004790:	687a      	ldr	r2, [r7, #4]
 8004792:	6812      	ldr	r2, [r2, #0]
 8004794:	430b      	orrs	r3, r1
 8004796:	6053      	str	r3, [r2, #4]
               ((hqspi->Init.FlashSize << QUADSPI_DCR_FSIZE_Pos) |
                hqspi->Init.ChipSelectHighTime | hqspi->Init.ClockMode));

    /* Enable the QSPI peripheral */
    __HAL_QSPI_ENABLE(hqspi);
 8004798:	687b      	ldr	r3, [r7, #4]
 800479a:	681b      	ldr	r3, [r3, #0]
 800479c:	681a      	ldr	r2, [r3, #0]
 800479e:	687b      	ldr	r3, [r7, #4]
 80047a0:	681b      	ldr	r3, [r3, #0]
 80047a2:	f042 0201 	orr.w	r2, r2, #1
 80047a6:	601a      	str	r2, [r3, #0]

    /* Set QSPI error code to none */
    hqspi->ErrorCode = HAL_QSPI_ERROR_NONE;
 80047a8:	687b      	ldr	r3, [r7, #4]
 80047aa:	2200      	movs	r2, #0
 80047ac:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Initialize the QSPI state */
    hqspi->State = HAL_QSPI_STATE_READY;
 80047ae:	687b      	ldr	r3, [r7, #4]
 80047b0:	2201      	movs	r2, #1
 80047b2:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
  }

  /* Release Lock */
  __HAL_UNLOCK(hqspi);
 80047b6:	687b      	ldr	r3, [r7, #4]
 80047b8:	2200      	movs	r2, #0
 80047ba:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

  /* Return function status */
  return status;
 80047be:	7afb      	ldrb	r3, [r7, #11]
}
 80047c0:	4618      	mov	r0, r3
 80047c2:	3710      	adds	r7, #16
 80047c4:	46bd      	mov	sp, r7
 80047c6:	bd80      	pop	{r7, pc}
 80047c8:	ffe0f8fe 	.word	0xffe0f8fe

080047cc <HAL_QSPI_SetTimeout>:
  * @param  hqspi QSPI handle.
  * @param  Timeout Timeout for the QSPI memory access.
  * @retval None
  */
void HAL_QSPI_SetTimeout(QSPI_HandleTypeDef *hqspi, uint32_t Timeout)
{
 80047cc:	b480      	push	{r7}
 80047ce:	b083      	sub	sp, #12
 80047d0:	af00      	add	r7, sp, #0
 80047d2:	6078      	str	r0, [r7, #4]
 80047d4:	6039      	str	r1, [r7, #0]
  hqspi->Timeout = Timeout;
 80047d6:	687b      	ldr	r3, [r7, #4]
 80047d8:	683a      	ldr	r2, [r7, #0]
 80047da:	641a      	str	r2, [r3, #64]	; 0x40
}
 80047dc:	bf00      	nop
 80047de:	370c      	adds	r7, #12
 80047e0:	46bd      	mov	sp, r7
 80047e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80047e6:	4770      	bx	lr

080047e8 <QSPI_WaitFlagStateUntilTimeout>:
  * @param  Timeout Duration of the timeout
  * @retval HAL status
  */
static HAL_StatusTypeDef QSPI_WaitFlagStateUntilTimeout(QSPI_HandleTypeDef *hqspi, uint32_t Flag,
                                                        FlagStatus State, uint32_t Tickstart, uint32_t Timeout)
{
 80047e8:	b580      	push	{r7, lr}
 80047ea:	b084      	sub	sp, #16
 80047ec:	af00      	add	r7, sp, #0
 80047ee:	60f8      	str	r0, [r7, #12]
 80047f0:	60b9      	str	r1, [r7, #8]
 80047f2:	603b      	str	r3, [r7, #0]
 80047f4:	4613      	mov	r3, r2
 80047f6:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is in expected state */
  while((__HAL_QSPI_GET_FLAG(hqspi, Flag)) != State)
 80047f8:	e01a      	b.n	8004830 <QSPI_WaitFlagStateUntilTimeout+0x48>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80047fa:	69bb      	ldr	r3, [r7, #24]
 80047fc:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004800:	d016      	beq.n	8004830 <QSPI_WaitFlagStateUntilTimeout+0x48>
    {
      if(((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004802:	f7fe fa4f 	bl	8002ca4 <HAL_GetTick>
 8004806:	4602      	mov	r2, r0
 8004808:	683b      	ldr	r3, [r7, #0]
 800480a:	1ad3      	subs	r3, r2, r3
 800480c:	69ba      	ldr	r2, [r7, #24]
 800480e:	429a      	cmp	r2, r3
 8004810:	d302      	bcc.n	8004818 <QSPI_WaitFlagStateUntilTimeout+0x30>
 8004812:	69bb      	ldr	r3, [r7, #24]
 8004814:	2b00      	cmp	r3, #0
 8004816:	d10b      	bne.n	8004830 <QSPI_WaitFlagStateUntilTimeout+0x48>
      {
        hqspi->State     = HAL_QSPI_STATE_ERROR;
 8004818:	68fb      	ldr	r3, [r7, #12]
 800481a:	2204      	movs	r2, #4
 800481c:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
        hqspi->ErrorCode |= HAL_QSPI_ERROR_TIMEOUT;
 8004820:	68fb      	ldr	r3, [r7, #12]
 8004822:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004824:	f043 0201 	orr.w	r2, r3, #1
 8004828:	68fb      	ldr	r3, [r7, #12]
 800482a:	63da      	str	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 800482c:	2301      	movs	r3, #1
 800482e:	e00e      	b.n	800484e <QSPI_WaitFlagStateUntilTimeout+0x66>
  while((__HAL_QSPI_GET_FLAG(hqspi, Flag)) != State)
 8004830:	68fb      	ldr	r3, [r7, #12]
 8004832:	681b      	ldr	r3, [r3, #0]
 8004834:	689a      	ldr	r2, [r3, #8]
 8004836:	68bb      	ldr	r3, [r7, #8]
 8004838:	4013      	ands	r3, r2
 800483a:	2b00      	cmp	r3, #0
 800483c:	bf14      	ite	ne
 800483e:	2301      	movne	r3, #1
 8004840:	2300      	moveq	r3, #0
 8004842:	b2db      	uxtb	r3, r3
 8004844:	461a      	mov	r2, r3
 8004846:	79fb      	ldrb	r3, [r7, #7]
 8004848:	429a      	cmp	r2, r3
 800484a:	d1d6      	bne.n	80047fa <QSPI_WaitFlagStateUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 800484c:	2300      	movs	r3, #0
}
 800484e:	4618      	mov	r0, r3
 8004850:	3710      	adds	r7, #16
 8004852:	46bd      	mov	sp, r7
 8004854:	bd80      	pop	{r7, pc}
	...

08004858 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8004858:	b580      	push	{r7, lr}
 800485a:	b088      	sub	sp, #32
 800485c:	af00      	add	r7, sp, #0
 800485e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8004860:	687b      	ldr	r3, [r7, #4]
 8004862:	2b00      	cmp	r3, #0
 8004864:	d101      	bne.n	800486a <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8004866:	2301      	movs	r3, #1
 8004868:	e3ca      	b.n	8005000 <HAL_RCC_OscConfig+0x7a8>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 800486a:	4b97      	ldr	r3, [pc, #604]	; (8004ac8 <HAL_RCC_OscConfig+0x270>)
 800486c:	689b      	ldr	r3, [r3, #8]
 800486e:	f003 030c 	and.w	r3, r3, #12
 8004872:	61bb      	str	r3, [r7, #24]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 8004874:	4b94      	ldr	r3, [pc, #592]	; (8004ac8 <HAL_RCC_OscConfig+0x270>)
 8004876:	68db      	ldr	r3, [r3, #12]
 8004878:	f003 0303 	and.w	r3, r3, #3
 800487c:	617b      	str	r3, [r7, #20]

  /*----------------------------- MSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 800487e:	687b      	ldr	r3, [r7, #4]
 8004880:	681b      	ldr	r3, [r3, #0]
 8004882:	f003 0310 	and.w	r3, r3, #16
 8004886:	2b00      	cmp	r3, #0
 8004888:	f000 80e4 	beq.w	8004a54 <HAL_RCC_OscConfig+0x1fc>
    assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));
    assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

    /* Check if MSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 800488c:	69bb      	ldr	r3, [r7, #24]
 800488e:	2b00      	cmp	r3, #0
 8004890:	d007      	beq.n	80048a2 <HAL_RCC_OscConfig+0x4a>
 8004892:	69bb      	ldr	r3, [r7, #24]
 8004894:	2b0c      	cmp	r3, #12
 8004896:	f040 808b 	bne.w	80049b0 <HAL_RCC_OscConfig+0x158>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_MSI)))
 800489a:	697b      	ldr	r3, [r7, #20]
 800489c:	2b01      	cmp	r3, #1
 800489e:	f040 8087 	bne.w	80049b0 <HAL_RCC_OscConfig+0x158>
    {
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 80048a2:	4b89      	ldr	r3, [pc, #548]	; (8004ac8 <HAL_RCC_OscConfig+0x270>)
 80048a4:	681b      	ldr	r3, [r3, #0]
 80048a6:	f003 0302 	and.w	r3, r3, #2
 80048aa:	2b00      	cmp	r3, #0
 80048ac:	d005      	beq.n	80048ba <HAL_RCC_OscConfig+0x62>
 80048ae:	687b      	ldr	r3, [r7, #4]
 80048b0:	699b      	ldr	r3, [r3, #24]
 80048b2:	2b00      	cmp	r3, #0
 80048b4:	d101      	bne.n	80048ba <HAL_RCC_OscConfig+0x62>
      {
        return HAL_ERROR;
 80048b6:	2301      	movs	r3, #1
 80048b8:	e3a2      	b.n	8005000 <HAL_RCC_OscConfig+0x7a8>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the CPU clock
           (HCLK) and the supply voltage of the device. */
        if(RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 80048ba:	687b      	ldr	r3, [r7, #4]
 80048bc:	6a1a      	ldr	r2, [r3, #32]
 80048be:	4b82      	ldr	r3, [pc, #520]	; (8004ac8 <HAL_RCC_OscConfig+0x270>)
 80048c0:	681b      	ldr	r3, [r3, #0]
 80048c2:	f003 0308 	and.w	r3, r3, #8
 80048c6:	2b00      	cmp	r3, #0
 80048c8:	d004      	beq.n	80048d4 <HAL_RCC_OscConfig+0x7c>
 80048ca:	4b7f      	ldr	r3, [pc, #508]	; (8004ac8 <HAL_RCC_OscConfig+0x270>)
 80048cc:	681b      	ldr	r3, [r3, #0]
 80048ce:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80048d2:	e005      	b.n	80048e0 <HAL_RCC_OscConfig+0x88>
 80048d4:	4b7c      	ldr	r3, [pc, #496]	; (8004ac8 <HAL_RCC_OscConfig+0x270>)
 80048d6:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80048da:	091b      	lsrs	r3, r3, #4
 80048dc:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80048e0:	4293      	cmp	r3, r2
 80048e2:	d223      	bcs.n	800492c <HAL_RCC_OscConfig+0xd4>
        {
          /* First increase number of wait states update if necessary */
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 80048e4:	687b      	ldr	r3, [r7, #4]
 80048e6:	6a1b      	ldr	r3, [r3, #32]
 80048e8:	4618      	mov	r0, r3
 80048ea:	f000 fd55 	bl	8005398 <RCC_SetFlashLatencyFromMSIRange>
 80048ee:	4603      	mov	r3, r0
 80048f0:	2b00      	cmp	r3, #0
 80048f2:	d001      	beq.n	80048f8 <HAL_RCC_OscConfig+0xa0>
          {
            return HAL_ERROR;
 80048f4:	2301      	movs	r3, #1
 80048f6:	e383      	b.n	8005000 <HAL_RCC_OscConfig+0x7a8>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 80048f8:	4b73      	ldr	r3, [pc, #460]	; (8004ac8 <HAL_RCC_OscConfig+0x270>)
 80048fa:	681b      	ldr	r3, [r3, #0]
 80048fc:	4a72      	ldr	r2, [pc, #456]	; (8004ac8 <HAL_RCC_OscConfig+0x270>)
 80048fe:	f043 0308 	orr.w	r3, r3, #8
 8004902:	6013      	str	r3, [r2, #0]
 8004904:	4b70      	ldr	r3, [pc, #448]	; (8004ac8 <HAL_RCC_OscConfig+0x270>)
 8004906:	681b      	ldr	r3, [r3, #0]
 8004908:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 800490c:	687b      	ldr	r3, [r7, #4]
 800490e:	6a1b      	ldr	r3, [r3, #32]
 8004910:	496d      	ldr	r1, [pc, #436]	; (8004ac8 <HAL_RCC_OscConfig+0x270>)
 8004912:	4313      	orrs	r3, r2
 8004914:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8004916:	4b6c      	ldr	r3, [pc, #432]	; (8004ac8 <HAL_RCC_OscConfig+0x270>)
 8004918:	685b      	ldr	r3, [r3, #4]
 800491a:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 800491e:	687b      	ldr	r3, [r7, #4]
 8004920:	69db      	ldr	r3, [r3, #28]
 8004922:	021b      	lsls	r3, r3, #8
 8004924:	4968      	ldr	r1, [pc, #416]	; (8004ac8 <HAL_RCC_OscConfig+0x270>)
 8004926:	4313      	orrs	r3, r2
 8004928:	604b      	str	r3, [r1, #4]
 800492a:	e025      	b.n	8004978 <HAL_RCC_OscConfig+0x120>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 800492c:	4b66      	ldr	r3, [pc, #408]	; (8004ac8 <HAL_RCC_OscConfig+0x270>)
 800492e:	681b      	ldr	r3, [r3, #0]
 8004930:	4a65      	ldr	r2, [pc, #404]	; (8004ac8 <HAL_RCC_OscConfig+0x270>)
 8004932:	f043 0308 	orr.w	r3, r3, #8
 8004936:	6013      	str	r3, [r2, #0]
 8004938:	4b63      	ldr	r3, [pc, #396]	; (8004ac8 <HAL_RCC_OscConfig+0x270>)
 800493a:	681b      	ldr	r3, [r3, #0]
 800493c:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8004940:	687b      	ldr	r3, [r7, #4]
 8004942:	6a1b      	ldr	r3, [r3, #32]
 8004944:	4960      	ldr	r1, [pc, #384]	; (8004ac8 <HAL_RCC_OscConfig+0x270>)
 8004946:	4313      	orrs	r3, r2
 8004948:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 800494a:	4b5f      	ldr	r3, [pc, #380]	; (8004ac8 <HAL_RCC_OscConfig+0x270>)
 800494c:	685b      	ldr	r3, [r3, #4]
 800494e:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8004952:	687b      	ldr	r3, [r7, #4]
 8004954:	69db      	ldr	r3, [r3, #28]
 8004956:	021b      	lsls	r3, r3, #8
 8004958:	495b      	ldr	r1, [pc, #364]	; (8004ac8 <HAL_RCC_OscConfig+0x270>)
 800495a:	4313      	orrs	r3, r2
 800495c:	604b      	str	r3, [r1, #4]

          /* Decrease number of wait states update if necessary */
          /* Only possible when MSI is the System clock source  */
          if(sysclk_source == RCC_CFGR_SWS_MSI)
 800495e:	69bb      	ldr	r3, [r7, #24]
 8004960:	2b00      	cmp	r3, #0
 8004962:	d109      	bne.n	8004978 <HAL_RCC_OscConfig+0x120>
          {
            if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8004964:	687b      	ldr	r3, [r7, #4]
 8004966:	6a1b      	ldr	r3, [r3, #32]
 8004968:	4618      	mov	r0, r3
 800496a:	f000 fd15 	bl	8005398 <RCC_SetFlashLatencyFromMSIRange>
 800496e:	4603      	mov	r3, r0
 8004970:	2b00      	cmp	r3, #0
 8004972:	d001      	beq.n	8004978 <HAL_RCC_OscConfig+0x120>
            {
              return HAL_ERROR;
 8004974:	2301      	movs	r3, #1
 8004976:	e343      	b.n	8005000 <HAL_RCC_OscConfig+0x7a8>
            }
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8004978:	f000 fc4a 	bl	8005210 <HAL_RCC_GetSysClockFreq>
 800497c:	4602      	mov	r2, r0
 800497e:	4b52      	ldr	r3, [pc, #328]	; (8004ac8 <HAL_RCC_OscConfig+0x270>)
 8004980:	689b      	ldr	r3, [r3, #8]
 8004982:	091b      	lsrs	r3, r3, #4
 8004984:	f003 030f 	and.w	r3, r3, #15
 8004988:	4950      	ldr	r1, [pc, #320]	; (8004acc <HAL_RCC_OscConfig+0x274>)
 800498a:	5ccb      	ldrb	r3, [r1, r3]
 800498c:	f003 031f 	and.w	r3, r3, #31
 8004990:	fa22 f303 	lsr.w	r3, r2, r3
 8004994:	4a4e      	ldr	r2, [pc, #312]	; (8004ad0 <HAL_RCC_OscConfig+0x278>)
 8004996:	6013      	str	r3, [r2, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick(uwTickPrio);
 8004998:	4b4e      	ldr	r3, [pc, #312]	; (8004ad4 <HAL_RCC_OscConfig+0x27c>)
 800499a:	681b      	ldr	r3, [r3, #0]
 800499c:	4618      	mov	r0, r3
 800499e:	f7fe f931 	bl	8002c04 <HAL_InitTick>
 80049a2:	4603      	mov	r3, r0
 80049a4:	73fb      	strb	r3, [r7, #15]
        if(status != HAL_OK)
 80049a6:	7bfb      	ldrb	r3, [r7, #15]
 80049a8:	2b00      	cmp	r3, #0
 80049aa:	d052      	beq.n	8004a52 <HAL_RCC_OscConfig+0x1fa>
        {
          return status;
 80049ac:	7bfb      	ldrb	r3, [r7, #15]
 80049ae:	e327      	b.n	8005000 <HAL_RCC_OscConfig+0x7a8>
      }
    }
    else
    {
      /* Check the MSI State */
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 80049b0:	687b      	ldr	r3, [r7, #4]
 80049b2:	699b      	ldr	r3, [r3, #24]
 80049b4:	2b00      	cmp	r3, #0
 80049b6:	d032      	beq.n	8004a1e <HAL_RCC_OscConfig+0x1c6>
      {
        /* Enable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 80049b8:	4b43      	ldr	r3, [pc, #268]	; (8004ac8 <HAL_RCC_OscConfig+0x270>)
 80049ba:	681b      	ldr	r3, [r3, #0]
 80049bc:	4a42      	ldr	r2, [pc, #264]	; (8004ac8 <HAL_RCC_OscConfig+0x270>)
 80049be:	f043 0301 	orr.w	r3, r3, #1
 80049c2:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 80049c4:	f7fe f96e 	bl	8002ca4 <HAL_GetTick>
 80049c8:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 80049ca:	e008      	b.n	80049de <HAL_RCC_OscConfig+0x186>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 80049cc:	f7fe f96a 	bl	8002ca4 <HAL_GetTick>
 80049d0:	4602      	mov	r2, r0
 80049d2:	693b      	ldr	r3, [r7, #16]
 80049d4:	1ad3      	subs	r3, r2, r3
 80049d6:	2b02      	cmp	r3, #2
 80049d8:	d901      	bls.n	80049de <HAL_RCC_OscConfig+0x186>
          {
            return HAL_TIMEOUT;
 80049da:	2303      	movs	r3, #3
 80049dc:	e310      	b.n	8005000 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 80049de:	4b3a      	ldr	r3, [pc, #232]	; (8004ac8 <HAL_RCC_OscConfig+0x270>)
 80049e0:	681b      	ldr	r3, [r3, #0]
 80049e2:	f003 0302 	and.w	r3, r3, #2
 80049e6:	2b00      	cmp	r3, #0
 80049e8:	d0f0      	beq.n	80049cc <HAL_RCC_OscConfig+0x174>
          }
        }
         /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 80049ea:	4b37      	ldr	r3, [pc, #220]	; (8004ac8 <HAL_RCC_OscConfig+0x270>)
 80049ec:	681b      	ldr	r3, [r3, #0]
 80049ee:	4a36      	ldr	r2, [pc, #216]	; (8004ac8 <HAL_RCC_OscConfig+0x270>)
 80049f0:	f043 0308 	orr.w	r3, r3, #8
 80049f4:	6013      	str	r3, [r2, #0]
 80049f6:	4b34      	ldr	r3, [pc, #208]	; (8004ac8 <HAL_RCC_OscConfig+0x270>)
 80049f8:	681b      	ldr	r3, [r3, #0]
 80049fa:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80049fe:	687b      	ldr	r3, [r7, #4]
 8004a00:	6a1b      	ldr	r3, [r3, #32]
 8004a02:	4931      	ldr	r1, [pc, #196]	; (8004ac8 <HAL_RCC_OscConfig+0x270>)
 8004a04:	4313      	orrs	r3, r2
 8004a06:	600b      	str	r3, [r1, #0]
         /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8004a08:	4b2f      	ldr	r3, [pc, #188]	; (8004ac8 <HAL_RCC_OscConfig+0x270>)
 8004a0a:	685b      	ldr	r3, [r3, #4]
 8004a0c:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8004a10:	687b      	ldr	r3, [r7, #4]
 8004a12:	69db      	ldr	r3, [r3, #28]
 8004a14:	021b      	lsls	r3, r3, #8
 8004a16:	492c      	ldr	r1, [pc, #176]	; (8004ac8 <HAL_RCC_OscConfig+0x270>)
 8004a18:	4313      	orrs	r3, r2
 8004a1a:	604b      	str	r3, [r1, #4]
 8004a1c:	e01a      	b.n	8004a54 <HAL_RCC_OscConfig+0x1fc>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 8004a1e:	4b2a      	ldr	r3, [pc, #168]	; (8004ac8 <HAL_RCC_OscConfig+0x270>)
 8004a20:	681b      	ldr	r3, [r3, #0]
 8004a22:	4a29      	ldr	r2, [pc, #164]	; (8004ac8 <HAL_RCC_OscConfig+0x270>)
 8004a24:	f023 0301 	bic.w	r3, r3, #1
 8004a28:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 8004a2a:	f7fe f93b 	bl	8002ca4 <HAL_GetTick>
 8004a2e:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8004a30:	e008      	b.n	8004a44 <HAL_RCC_OscConfig+0x1ec>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8004a32:	f7fe f937 	bl	8002ca4 <HAL_GetTick>
 8004a36:	4602      	mov	r2, r0
 8004a38:	693b      	ldr	r3, [r7, #16]
 8004a3a:	1ad3      	subs	r3, r2, r3
 8004a3c:	2b02      	cmp	r3, #2
 8004a3e:	d901      	bls.n	8004a44 <HAL_RCC_OscConfig+0x1ec>
          {
            return HAL_TIMEOUT;
 8004a40:	2303      	movs	r3, #3
 8004a42:	e2dd      	b.n	8005000 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8004a44:	4b20      	ldr	r3, [pc, #128]	; (8004ac8 <HAL_RCC_OscConfig+0x270>)
 8004a46:	681b      	ldr	r3, [r3, #0]
 8004a48:	f003 0302 	and.w	r3, r3, #2
 8004a4c:	2b00      	cmp	r3, #0
 8004a4e:	d1f0      	bne.n	8004a32 <HAL_RCC_OscConfig+0x1da>
 8004a50:	e000      	b.n	8004a54 <HAL_RCC_OscConfig+0x1fc>
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8004a52:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8004a54:	687b      	ldr	r3, [r7, #4]
 8004a56:	681b      	ldr	r3, [r3, #0]
 8004a58:	f003 0301 	and.w	r3, r3, #1
 8004a5c:	2b00      	cmp	r3, #0
 8004a5e:	d074      	beq.n	8004b4a <HAL_RCC_OscConfig+0x2f2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((sysclk_source == RCC_CFGR_SWS_HSE) ||
 8004a60:	69bb      	ldr	r3, [r7, #24]
 8004a62:	2b08      	cmp	r3, #8
 8004a64:	d005      	beq.n	8004a72 <HAL_RCC_OscConfig+0x21a>
 8004a66:	69bb      	ldr	r3, [r7, #24]
 8004a68:	2b0c      	cmp	r3, #12
 8004a6a:	d10e      	bne.n	8004a8a <HAL_RCC_OscConfig+0x232>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSE)))
 8004a6c:	697b      	ldr	r3, [r7, #20]
 8004a6e:	2b03      	cmp	r3, #3
 8004a70:	d10b      	bne.n	8004a8a <HAL_RCC_OscConfig+0x232>
    {
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004a72:	4b15      	ldr	r3, [pc, #84]	; (8004ac8 <HAL_RCC_OscConfig+0x270>)
 8004a74:	681b      	ldr	r3, [r3, #0]
 8004a76:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004a7a:	2b00      	cmp	r3, #0
 8004a7c:	d064      	beq.n	8004b48 <HAL_RCC_OscConfig+0x2f0>
 8004a7e:	687b      	ldr	r3, [r7, #4]
 8004a80:	685b      	ldr	r3, [r3, #4]
 8004a82:	2b00      	cmp	r3, #0
 8004a84:	d160      	bne.n	8004b48 <HAL_RCC_OscConfig+0x2f0>
      {
        return HAL_ERROR;
 8004a86:	2301      	movs	r3, #1
 8004a88:	e2ba      	b.n	8005000 <HAL_RCC_OscConfig+0x7a8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8004a8a:	687b      	ldr	r3, [r7, #4]
 8004a8c:	685b      	ldr	r3, [r3, #4]
 8004a8e:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004a92:	d106      	bne.n	8004aa2 <HAL_RCC_OscConfig+0x24a>
 8004a94:	4b0c      	ldr	r3, [pc, #48]	; (8004ac8 <HAL_RCC_OscConfig+0x270>)
 8004a96:	681b      	ldr	r3, [r3, #0]
 8004a98:	4a0b      	ldr	r2, [pc, #44]	; (8004ac8 <HAL_RCC_OscConfig+0x270>)
 8004a9a:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004a9e:	6013      	str	r3, [r2, #0]
 8004aa0:	e026      	b.n	8004af0 <HAL_RCC_OscConfig+0x298>
 8004aa2:	687b      	ldr	r3, [r7, #4]
 8004aa4:	685b      	ldr	r3, [r3, #4]
 8004aa6:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8004aaa:	d115      	bne.n	8004ad8 <HAL_RCC_OscConfig+0x280>
 8004aac:	4b06      	ldr	r3, [pc, #24]	; (8004ac8 <HAL_RCC_OscConfig+0x270>)
 8004aae:	681b      	ldr	r3, [r3, #0]
 8004ab0:	4a05      	ldr	r2, [pc, #20]	; (8004ac8 <HAL_RCC_OscConfig+0x270>)
 8004ab2:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8004ab6:	6013      	str	r3, [r2, #0]
 8004ab8:	4b03      	ldr	r3, [pc, #12]	; (8004ac8 <HAL_RCC_OscConfig+0x270>)
 8004aba:	681b      	ldr	r3, [r3, #0]
 8004abc:	4a02      	ldr	r2, [pc, #8]	; (8004ac8 <HAL_RCC_OscConfig+0x270>)
 8004abe:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004ac2:	6013      	str	r3, [r2, #0]
 8004ac4:	e014      	b.n	8004af0 <HAL_RCC_OscConfig+0x298>
 8004ac6:	bf00      	nop
 8004ac8:	40021000 	.word	0x40021000
 8004acc:	08008824 	.word	0x08008824
 8004ad0:	2000012c 	.word	0x2000012c
 8004ad4:	20000174 	.word	0x20000174
 8004ad8:	4ba0      	ldr	r3, [pc, #640]	; (8004d5c <HAL_RCC_OscConfig+0x504>)
 8004ada:	681b      	ldr	r3, [r3, #0]
 8004adc:	4a9f      	ldr	r2, [pc, #636]	; (8004d5c <HAL_RCC_OscConfig+0x504>)
 8004ade:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8004ae2:	6013      	str	r3, [r2, #0]
 8004ae4:	4b9d      	ldr	r3, [pc, #628]	; (8004d5c <HAL_RCC_OscConfig+0x504>)
 8004ae6:	681b      	ldr	r3, [r3, #0]
 8004ae8:	4a9c      	ldr	r2, [pc, #624]	; (8004d5c <HAL_RCC_OscConfig+0x504>)
 8004aea:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8004aee:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8004af0:	687b      	ldr	r3, [r7, #4]
 8004af2:	685b      	ldr	r3, [r3, #4]
 8004af4:	2b00      	cmp	r3, #0
 8004af6:	d013      	beq.n	8004b20 <HAL_RCC_OscConfig+0x2c8>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004af8:	f7fe f8d4 	bl	8002ca4 <HAL_GetTick>
 8004afc:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8004afe:	e008      	b.n	8004b12 <HAL_RCC_OscConfig+0x2ba>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8004b00:	f7fe f8d0 	bl	8002ca4 <HAL_GetTick>
 8004b04:	4602      	mov	r2, r0
 8004b06:	693b      	ldr	r3, [r7, #16]
 8004b08:	1ad3      	subs	r3, r2, r3
 8004b0a:	2b64      	cmp	r3, #100	; 0x64
 8004b0c:	d901      	bls.n	8004b12 <HAL_RCC_OscConfig+0x2ba>
          {
            return HAL_TIMEOUT;
 8004b0e:	2303      	movs	r3, #3
 8004b10:	e276      	b.n	8005000 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8004b12:	4b92      	ldr	r3, [pc, #584]	; (8004d5c <HAL_RCC_OscConfig+0x504>)
 8004b14:	681b      	ldr	r3, [r3, #0]
 8004b16:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004b1a:	2b00      	cmp	r3, #0
 8004b1c:	d0f0      	beq.n	8004b00 <HAL_RCC_OscConfig+0x2a8>
 8004b1e:	e014      	b.n	8004b4a <HAL_RCC_OscConfig+0x2f2>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004b20:	f7fe f8c0 	bl	8002ca4 <HAL_GetTick>
 8004b24:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8004b26:	e008      	b.n	8004b3a <HAL_RCC_OscConfig+0x2e2>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8004b28:	f7fe f8bc 	bl	8002ca4 <HAL_GetTick>
 8004b2c:	4602      	mov	r2, r0
 8004b2e:	693b      	ldr	r3, [r7, #16]
 8004b30:	1ad3      	subs	r3, r2, r3
 8004b32:	2b64      	cmp	r3, #100	; 0x64
 8004b34:	d901      	bls.n	8004b3a <HAL_RCC_OscConfig+0x2e2>
          {
            return HAL_TIMEOUT;
 8004b36:	2303      	movs	r3, #3
 8004b38:	e262      	b.n	8005000 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8004b3a:	4b88      	ldr	r3, [pc, #544]	; (8004d5c <HAL_RCC_OscConfig+0x504>)
 8004b3c:	681b      	ldr	r3, [r3, #0]
 8004b3e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004b42:	2b00      	cmp	r3, #0
 8004b44:	d1f0      	bne.n	8004b28 <HAL_RCC_OscConfig+0x2d0>
 8004b46:	e000      	b.n	8004b4a <HAL_RCC_OscConfig+0x2f2>
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004b48:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8004b4a:	687b      	ldr	r3, [r7, #4]
 8004b4c:	681b      	ldr	r3, [r3, #0]
 8004b4e:	f003 0302 	and.w	r3, r3, #2
 8004b52:	2b00      	cmp	r3, #0
 8004b54:	d060      	beq.n	8004c18 <HAL_RCC_OscConfig+0x3c0>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_HSI) ||
 8004b56:	69bb      	ldr	r3, [r7, #24]
 8004b58:	2b04      	cmp	r3, #4
 8004b5a:	d005      	beq.n	8004b68 <HAL_RCC_OscConfig+0x310>
 8004b5c:	69bb      	ldr	r3, [r7, #24]
 8004b5e:	2b0c      	cmp	r3, #12
 8004b60:	d119      	bne.n	8004b96 <HAL_RCC_OscConfig+0x33e>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSI)))
 8004b62:	697b      	ldr	r3, [r7, #20]
 8004b64:	2b02      	cmp	r3, #2
 8004b66:	d116      	bne.n	8004b96 <HAL_RCC_OscConfig+0x33e>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8004b68:	4b7c      	ldr	r3, [pc, #496]	; (8004d5c <HAL_RCC_OscConfig+0x504>)
 8004b6a:	681b      	ldr	r3, [r3, #0]
 8004b6c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004b70:	2b00      	cmp	r3, #0
 8004b72:	d005      	beq.n	8004b80 <HAL_RCC_OscConfig+0x328>
 8004b74:	687b      	ldr	r3, [r7, #4]
 8004b76:	68db      	ldr	r3, [r3, #12]
 8004b78:	2b00      	cmp	r3, #0
 8004b7a:	d101      	bne.n	8004b80 <HAL_RCC_OscConfig+0x328>
      {
        return HAL_ERROR;
 8004b7c:	2301      	movs	r3, #1
 8004b7e:	e23f      	b.n	8005000 <HAL_RCC_OscConfig+0x7a8>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004b80:	4b76      	ldr	r3, [pc, #472]	; (8004d5c <HAL_RCC_OscConfig+0x504>)
 8004b82:	685b      	ldr	r3, [r3, #4]
 8004b84:	f023 52f8 	bic.w	r2, r3, #520093696	; 0x1f000000
 8004b88:	687b      	ldr	r3, [r7, #4]
 8004b8a:	691b      	ldr	r3, [r3, #16]
 8004b8c:	061b      	lsls	r3, r3, #24
 8004b8e:	4973      	ldr	r1, [pc, #460]	; (8004d5c <HAL_RCC_OscConfig+0x504>)
 8004b90:	4313      	orrs	r3, r2
 8004b92:	604b      	str	r3, [r1, #4]
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8004b94:	e040      	b.n	8004c18 <HAL_RCC_OscConfig+0x3c0>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8004b96:	687b      	ldr	r3, [r7, #4]
 8004b98:	68db      	ldr	r3, [r3, #12]
 8004b9a:	2b00      	cmp	r3, #0
 8004b9c:	d023      	beq.n	8004be6 <HAL_RCC_OscConfig+0x38e>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8004b9e:	4b6f      	ldr	r3, [pc, #444]	; (8004d5c <HAL_RCC_OscConfig+0x504>)
 8004ba0:	681b      	ldr	r3, [r3, #0]
 8004ba2:	4a6e      	ldr	r2, [pc, #440]	; (8004d5c <HAL_RCC_OscConfig+0x504>)
 8004ba4:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004ba8:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004baa:	f7fe f87b 	bl	8002ca4 <HAL_GetTick>
 8004bae:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8004bb0:	e008      	b.n	8004bc4 <HAL_RCC_OscConfig+0x36c>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8004bb2:	f7fe f877 	bl	8002ca4 <HAL_GetTick>
 8004bb6:	4602      	mov	r2, r0
 8004bb8:	693b      	ldr	r3, [r7, #16]
 8004bba:	1ad3      	subs	r3, r2, r3
 8004bbc:	2b02      	cmp	r3, #2
 8004bbe:	d901      	bls.n	8004bc4 <HAL_RCC_OscConfig+0x36c>
          {
            return HAL_TIMEOUT;
 8004bc0:	2303      	movs	r3, #3
 8004bc2:	e21d      	b.n	8005000 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8004bc4:	4b65      	ldr	r3, [pc, #404]	; (8004d5c <HAL_RCC_OscConfig+0x504>)
 8004bc6:	681b      	ldr	r3, [r3, #0]
 8004bc8:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004bcc:	2b00      	cmp	r3, #0
 8004bce:	d0f0      	beq.n	8004bb2 <HAL_RCC_OscConfig+0x35a>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004bd0:	4b62      	ldr	r3, [pc, #392]	; (8004d5c <HAL_RCC_OscConfig+0x504>)
 8004bd2:	685b      	ldr	r3, [r3, #4]
 8004bd4:	f023 52f8 	bic.w	r2, r3, #520093696	; 0x1f000000
 8004bd8:	687b      	ldr	r3, [r7, #4]
 8004bda:	691b      	ldr	r3, [r3, #16]
 8004bdc:	061b      	lsls	r3, r3, #24
 8004bde:	495f      	ldr	r1, [pc, #380]	; (8004d5c <HAL_RCC_OscConfig+0x504>)
 8004be0:	4313      	orrs	r3, r2
 8004be2:	604b      	str	r3, [r1, #4]
 8004be4:	e018      	b.n	8004c18 <HAL_RCC_OscConfig+0x3c0>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8004be6:	4b5d      	ldr	r3, [pc, #372]	; (8004d5c <HAL_RCC_OscConfig+0x504>)
 8004be8:	681b      	ldr	r3, [r3, #0]
 8004bea:	4a5c      	ldr	r2, [pc, #368]	; (8004d5c <HAL_RCC_OscConfig+0x504>)
 8004bec:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8004bf0:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004bf2:	f7fe f857 	bl	8002ca4 <HAL_GetTick>
 8004bf6:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8004bf8:	e008      	b.n	8004c0c <HAL_RCC_OscConfig+0x3b4>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8004bfa:	f7fe f853 	bl	8002ca4 <HAL_GetTick>
 8004bfe:	4602      	mov	r2, r0
 8004c00:	693b      	ldr	r3, [r7, #16]
 8004c02:	1ad3      	subs	r3, r2, r3
 8004c04:	2b02      	cmp	r3, #2
 8004c06:	d901      	bls.n	8004c0c <HAL_RCC_OscConfig+0x3b4>
          {
            return HAL_TIMEOUT;
 8004c08:	2303      	movs	r3, #3
 8004c0a:	e1f9      	b.n	8005000 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8004c0c:	4b53      	ldr	r3, [pc, #332]	; (8004d5c <HAL_RCC_OscConfig+0x504>)
 8004c0e:	681b      	ldr	r3, [r3, #0]
 8004c10:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004c14:	2b00      	cmp	r3, #0
 8004c16:	d1f0      	bne.n	8004bfa <HAL_RCC_OscConfig+0x3a2>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8004c18:	687b      	ldr	r3, [r7, #4]
 8004c1a:	681b      	ldr	r3, [r3, #0]
 8004c1c:	f003 0308 	and.w	r3, r3, #8
 8004c20:	2b00      	cmp	r3, #0
 8004c22:	d03c      	beq.n	8004c9e <HAL_RCC_OscConfig+0x446>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8004c24:	687b      	ldr	r3, [r7, #4]
 8004c26:	695b      	ldr	r3, [r3, #20]
 8004c28:	2b00      	cmp	r3, #0
 8004c2a:	d01c      	beq.n	8004c66 <HAL_RCC_OscConfig+0x40e>
        MODIFY_REG(RCC->CSR, RCC_CSR_LSIPREDIV, RCC_OscInitStruct->LSIDiv);
      }
#endif /* RCC_CSR_LSIPREDIV */

      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8004c2c:	4b4b      	ldr	r3, [pc, #300]	; (8004d5c <HAL_RCC_OscConfig+0x504>)
 8004c2e:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8004c32:	4a4a      	ldr	r2, [pc, #296]	; (8004d5c <HAL_RCC_OscConfig+0x504>)
 8004c34:	f043 0301 	orr.w	r3, r3, #1
 8004c38:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004c3c:	f7fe f832 	bl	8002ca4 <HAL_GetTick>
 8004c40:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8004c42:	e008      	b.n	8004c56 <HAL_RCC_OscConfig+0x3fe>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8004c44:	f7fe f82e 	bl	8002ca4 <HAL_GetTick>
 8004c48:	4602      	mov	r2, r0
 8004c4a:	693b      	ldr	r3, [r7, #16]
 8004c4c:	1ad3      	subs	r3, r2, r3
 8004c4e:	2b02      	cmp	r3, #2
 8004c50:	d901      	bls.n	8004c56 <HAL_RCC_OscConfig+0x3fe>
        {
          return HAL_TIMEOUT;
 8004c52:	2303      	movs	r3, #3
 8004c54:	e1d4      	b.n	8005000 <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8004c56:	4b41      	ldr	r3, [pc, #260]	; (8004d5c <HAL_RCC_OscConfig+0x504>)
 8004c58:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8004c5c:	f003 0302 	and.w	r3, r3, #2
 8004c60:	2b00      	cmp	r3, #0
 8004c62:	d0ef      	beq.n	8004c44 <HAL_RCC_OscConfig+0x3ec>
 8004c64:	e01b      	b.n	8004c9e <HAL_RCC_OscConfig+0x446>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8004c66:	4b3d      	ldr	r3, [pc, #244]	; (8004d5c <HAL_RCC_OscConfig+0x504>)
 8004c68:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8004c6c:	4a3b      	ldr	r2, [pc, #236]	; (8004d5c <HAL_RCC_OscConfig+0x504>)
 8004c6e:	f023 0301 	bic.w	r3, r3, #1
 8004c72:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004c76:	f7fe f815 	bl	8002ca4 <HAL_GetTick>
 8004c7a:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8004c7c:	e008      	b.n	8004c90 <HAL_RCC_OscConfig+0x438>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8004c7e:	f7fe f811 	bl	8002ca4 <HAL_GetTick>
 8004c82:	4602      	mov	r2, r0
 8004c84:	693b      	ldr	r3, [r7, #16]
 8004c86:	1ad3      	subs	r3, r2, r3
 8004c88:	2b02      	cmp	r3, #2
 8004c8a:	d901      	bls.n	8004c90 <HAL_RCC_OscConfig+0x438>
        {
          return HAL_TIMEOUT;
 8004c8c:	2303      	movs	r3, #3
 8004c8e:	e1b7      	b.n	8005000 <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8004c90:	4b32      	ldr	r3, [pc, #200]	; (8004d5c <HAL_RCC_OscConfig+0x504>)
 8004c92:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8004c96:	f003 0302 	and.w	r3, r3, #2
 8004c9a:	2b00      	cmp	r3, #0
 8004c9c:	d1ef      	bne.n	8004c7e <HAL_RCC_OscConfig+0x426>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8004c9e:	687b      	ldr	r3, [r7, #4]
 8004ca0:	681b      	ldr	r3, [r3, #0]
 8004ca2:	f003 0304 	and.w	r3, r3, #4
 8004ca6:	2b00      	cmp	r3, #0
 8004ca8:	f000 80a6 	beq.w	8004df8 <HAL_RCC_OscConfig+0x5a0>
  {
    FlagStatus       pwrclkchanged = RESET;
 8004cac:	2300      	movs	r3, #0
 8004cae:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(HAL_IS_BIT_CLR(RCC->APB1ENR1, RCC_APB1ENR1_PWREN))
 8004cb0:	4b2a      	ldr	r3, [pc, #168]	; (8004d5c <HAL_RCC_OscConfig+0x504>)
 8004cb2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004cb4:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004cb8:	2b00      	cmp	r3, #0
 8004cba:	d10d      	bne.n	8004cd8 <HAL_RCC_OscConfig+0x480>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8004cbc:	4b27      	ldr	r3, [pc, #156]	; (8004d5c <HAL_RCC_OscConfig+0x504>)
 8004cbe:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004cc0:	4a26      	ldr	r2, [pc, #152]	; (8004d5c <HAL_RCC_OscConfig+0x504>)
 8004cc2:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004cc6:	6593      	str	r3, [r2, #88]	; 0x58
 8004cc8:	4b24      	ldr	r3, [pc, #144]	; (8004d5c <HAL_RCC_OscConfig+0x504>)
 8004cca:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004ccc:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004cd0:	60bb      	str	r3, [r7, #8]
 8004cd2:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8004cd4:	2301      	movs	r3, #1
 8004cd6:	77fb      	strb	r3, [r7, #31]
    }

    if(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8004cd8:	4b21      	ldr	r3, [pc, #132]	; (8004d60 <HAL_RCC_OscConfig+0x508>)
 8004cda:	681b      	ldr	r3, [r3, #0]
 8004cdc:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004ce0:	2b00      	cmp	r3, #0
 8004ce2:	d118      	bne.n	8004d16 <HAL_RCC_OscConfig+0x4be>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8004ce4:	4b1e      	ldr	r3, [pc, #120]	; (8004d60 <HAL_RCC_OscConfig+0x508>)
 8004ce6:	681b      	ldr	r3, [r3, #0]
 8004ce8:	4a1d      	ldr	r2, [pc, #116]	; (8004d60 <HAL_RCC_OscConfig+0x508>)
 8004cea:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004cee:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8004cf0:	f7fd ffd8 	bl	8002ca4 <HAL_GetTick>
 8004cf4:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8004cf6:	e008      	b.n	8004d0a <HAL_RCC_OscConfig+0x4b2>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8004cf8:	f7fd ffd4 	bl	8002ca4 <HAL_GetTick>
 8004cfc:	4602      	mov	r2, r0
 8004cfe:	693b      	ldr	r3, [r7, #16]
 8004d00:	1ad3      	subs	r3, r2, r3
 8004d02:	2b02      	cmp	r3, #2
 8004d04:	d901      	bls.n	8004d0a <HAL_RCC_OscConfig+0x4b2>
        {
          return HAL_TIMEOUT;
 8004d06:	2303      	movs	r3, #3
 8004d08:	e17a      	b.n	8005000 <HAL_RCC_OscConfig+0x7a8>
      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8004d0a:	4b15      	ldr	r3, [pc, #84]	; (8004d60 <HAL_RCC_OscConfig+0x508>)
 8004d0c:	681b      	ldr	r3, [r3, #0]
 8004d0e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004d12:	2b00      	cmp	r3, #0
 8004d14:	d0f0      	beq.n	8004cf8 <HAL_RCC_OscConfig+0x4a0>
    {
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
    }
#else
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8004d16:	687b      	ldr	r3, [r7, #4]
 8004d18:	689b      	ldr	r3, [r3, #8]
 8004d1a:	2b01      	cmp	r3, #1
 8004d1c:	d108      	bne.n	8004d30 <HAL_RCC_OscConfig+0x4d8>
 8004d1e:	4b0f      	ldr	r3, [pc, #60]	; (8004d5c <HAL_RCC_OscConfig+0x504>)
 8004d20:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004d24:	4a0d      	ldr	r2, [pc, #52]	; (8004d5c <HAL_RCC_OscConfig+0x504>)
 8004d26:	f043 0301 	orr.w	r3, r3, #1
 8004d2a:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8004d2e:	e029      	b.n	8004d84 <HAL_RCC_OscConfig+0x52c>
 8004d30:	687b      	ldr	r3, [r7, #4]
 8004d32:	689b      	ldr	r3, [r3, #8]
 8004d34:	2b05      	cmp	r3, #5
 8004d36:	d115      	bne.n	8004d64 <HAL_RCC_OscConfig+0x50c>
 8004d38:	4b08      	ldr	r3, [pc, #32]	; (8004d5c <HAL_RCC_OscConfig+0x504>)
 8004d3a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004d3e:	4a07      	ldr	r2, [pc, #28]	; (8004d5c <HAL_RCC_OscConfig+0x504>)
 8004d40:	f043 0304 	orr.w	r3, r3, #4
 8004d44:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8004d48:	4b04      	ldr	r3, [pc, #16]	; (8004d5c <HAL_RCC_OscConfig+0x504>)
 8004d4a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004d4e:	4a03      	ldr	r2, [pc, #12]	; (8004d5c <HAL_RCC_OscConfig+0x504>)
 8004d50:	f043 0301 	orr.w	r3, r3, #1
 8004d54:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8004d58:	e014      	b.n	8004d84 <HAL_RCC_OscConfig+0x52c>
 8004d5a:	bf00      	nop
 8004d5c:	40021000 	.word	0x40021000
 8004d60:	40007000 	.word	0x40007000
 8004d64:	4b9c      	ldr	r3, [pc, #624]	; (8004fd8 <HAL_RCC_OscConfig+0x780>)
 8004d66:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004d6a:	4a9b      	ldr	r2, [pc, #620]	; (8004fd8 <HAL_RCC_OscConfig+0x780>)
 8004d6c:	f023 0301 	bic.w	r3, r3, #1
 8004d70:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8004d74:	4b98      	ldr	r3, [pc, #608]	; (8004fd8 <HAL_RCC_OscConfig+0x780>)
 8004d76:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004d7a:	4a97      	ldr	r2, [pc, #604]	; (8004fd8 <HAL_RCC_OscConfig+0x780>)
 8004d7c:	f023 0304 	bic.w	r3, r3, #4
 8004d80:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
#endif /* RCC_BDCR_LSESYSDIS */

    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8004d84:	687b      	ldr	r3, [r7, #4]
 8004d86:	689b      	ldr	r3, [r3, #8]
 8004d88:	2b00      	cmp	r3, #0
 8004d8a:	d016      	beq.n	8004dba <HAL_RCC_OscConfig+0x562>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004d8c:	f7fd ff8a 	bl	8002ca4 <HAL_GetTick>
 8004d90:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8004d92:	e00a      	b.n	8004daa <HAL_RCC_OscConfig+0x552>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004d94:	f7fd ff86 	bl	8002ca4 <HAL_GetTick>
 8004d98:	4602      	mov	r2, r0
 8004d9a:	693b      	ldr	r3, [r7, #16]
 8004d9c:	1ad3      	subs	r3, r2, r3
 8004d9e:	f241 3288 	movw	r2, #5000	; 0x1388
 8004da2:	4293      	cmp	r3, r2
 8004da4:	d901      	bls.n	8004daa <HAL_RCC_OscConfig+0x552>
        {
          return HAL_TIMEOUT;
 8004da6:	2303      	movs	r3, #3
 8004da8:	e12a      	b.n	8005000 <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8004daa:	4b8b      	ldr	r3, [pc, #556]	; (8004fd8 <HAL_RCC_OscConfig+0x780>)
 8004dac:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004db0:	f003 0302 	and.w	r3, r3, #2
 8004db4:	2b00      	cmp	r3, #0
 8004db6:	d0ed      	beq.n	8004d94 <HAL_RCC_OscConfig+0x53c>
 8004db8:	e015      	b.n	8004de6 <HAL_RCC_OscConfig+0x58e>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004dba:	f7fd ff73 	bl	8002ca4 <HAL_GetTick>
 8004dbe:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8004dc0:	e00a      	b.n	8004dd8 <HAL_RCC_OscConfig+0x580>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004dc2:	f7fd ff6f 	bl	8002ca4 <HAL_GetTick>
 8004dc6:	4602      	mov	r2, r0
 8004dc8:	693b      	ldr	r3, [r7, #16]
 8004dca:	1ad3      	subs	r3, r2, r3
 8004dcc:	f241 3288 	movw	r2, #5000	; 0x1388
 8004dd0:	4293      	cmp	r3, r2
 8004dd2:	d901      	bls.n	8004dd8 <HAL_RCC_OscConfig+0x580>
        {
          return HAL_TIMEOUT;
 8004dd4:	2303      	movs	r3, #3
 8004dd6:	e113      	b.n	8005000 <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8004dd8:	4b7f      	ldr	r3, [pc, #508]	; (8004fd8 <HAL_RCC_OscConfig+0x780>)
 8004dda:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004dde:	f003 0302 	and.w	r3, r3, #2
 8004de2:	2b00      	cmp	r3, #0
 8004de4:	d1ed      	bne.n	8004dc2 <HAL_RCC_OscConfig+0x56a>
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSDIS);
#endif /* RCC_BDCR_LSESYSDIS */
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8004de6:	7ffb      	ldrb	r3, [r7, #31]
 8004de8:	2b01      	cmp	r3, #1
 8004dea:	d105      	bne.n	8004df8 <HAL_RCC_OscConfig+0x5a0>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8004dec:	4b7a      	ldr	r3, [pc, #488]	; (8004fd8 <HAL_RCC_OscConfig+0x780>)
 8004dee:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004df0:	4a79      	ldr	r2, [pc, #484]	; (8004fd8 <HAL_RCC_OscConfig+0x780>)
 8004df2:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8004df6:	6593      	str	r3, [r2, #88]	; 0x58
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if(RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 8004df8:	687b      	ldr	r3, [r7, #4]
 8004dfa:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004dfc:	2b00      	cmp	r3, #0
 8004dfe:	f000 80fe 	beq.w	8004ffe <HAL_RCC_OscConfig+0x7a6>
  {
    /* PLL On ? */
    if(RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 8004e02:	687b      	ldr	r3, [r7, #4]
 8004e04:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004e06:	2b02      	cmp	r3, #2
 8004e08:	f040 80d0 	bne.w	8004fac <HAL_RCC_OscConfig+0x754>
#endif /* RCC_PLLP_SUPPORT */
      assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
      assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

      /* Do nothing if PLL configuration is the unchanged */
      pll_config = RCC->PLLCFGR;
 8004e0c:	4b72      	ldr	r3, [pc, #456]	; (8004fd8 <HAL_RCC_OscConfig+0x780>)
 8004e0e:	68db      	ldr	r3, [r3, #12]
 8004e10:	617b      	str	r3, [r7, #20]
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8004e12:	697b      	ldr	r3, [r7, #20]
 8004e14:	f003 0203 	and.w	r2, r3, #3
 8004e18:	687b      	ldr	r3, [r7, #4]
 8004e1a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004e1c:	429a      	cmp	r2, r3
 8004e1e:	d130      	bne.n	8004e82 <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8004e20:	697b      	ldr	r3, [r7, #20]
 8004e22:	f003 0270 	and.w	r2, r3, #112	; 0x70
 8004e26:	687b      	ldr	r3, [r7, #4]
 8004e28:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004e2a:	3b01      	subs	r3, #1
 8004e2c:	011b      	lsls	r3, r3, #4
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8004e2e:	429a      	cmp	r2, r3
 8004e30:	d127      	bne.n	8004e82 <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8004e32:	697b      	ldr	r3, [r7, #20]
 8004e34:	f403 42fe 	and.w	r2, r3, #32512	; 0x7f00
 8004e38:	687b      	ldr	r3, [r7, #4]
 8004e3a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004e3c:	021b      	lsls	r3, r3, #8
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8004e3e:	429a      	cmp	r2, r3
 8004e40:	d11f      	bne.n	8004e82 <HAL_RCC_OscConfig+0x62a>
#if defined(RCC_PLLP_SUPPORT)
#if defined(RCC_PLLP_DIV_2_31_SUPPORT)
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
#else
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
 8004e42:	697b      	ldr	r3, [r7, #20]
 8004e44:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004e48:	687a      	ldr	r2, [r7, #4]
 8004e4a:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8004e4c:	2a07      	cmp	r2, #7
 8004e4e:	bf14      	ite	ne
 8004e50:	2201      	movne	r2, #1
 8004e52:	2200      	moveq	r2, #0
 8004e54:	b2d2      	uxtb	r2, r2
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8004e56:	4293      	cmp	r3, r2
 8004e58:	d113      	bne.n	8004e82 <HAL_RCC_OscConfig+0x62a>
#endif
#endif
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8004e5a:	697b      	ldr	r3, [r7, #20]
 8004e5c:	f403 02c0 	and.w	r2, r3, #6291456	; 0x600000
 8004e60:	687b      	ldr	r3, [r7, #4]
 8004e62:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004e64:	085b      	lsrs	r3, r3, #1
 8004e66:	3b01      	subs	r3, #1
 8004e68:	055b      	lsls	r3, r3, #21
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
 8004e6a:	429a      	cmp	r2, r3
 8004e6c:	d109      	bne.n	8004e82 <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLR)    != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 8004e6e:	697b      	ldr	r3, [r7, #20]
 8004e70:	f003 62c0 	and.w	r2, r3, #100663296	; 0x6000000
 8004e74:	687b      	ldr	r3, [r7, #4]
 8004e76:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004e78:	085b      	lsrs	r3, r3, #1
 8004e7a:	3b01      	subs	r3, #1
 8004e7c:	065b      	lsls	r3, r3, #25
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8004e7e:	429a      	cmp	r2, r3
 8004e80:	d06e      	beq.n	8004f60 <HAL_RCC_OscConfig+0x708>
      {
        /* Check if the PLL is used as system clock or not */
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 8004e82:	69bb      	ldr	r3, [r7, #24]
 8004e84:	2b0c      	cmp	r3, #12
 8004e86:	d069      	beq.n	8004f5c <HAL_RCC_OscConfig+0x704>
        {
#if defined(RCC_PLLSAI1_SUPPORT) || defined(RCC_PLLSAI2_SUPPORT)
          /* Check if main PLL can be updated */
          /* Not possible if the source is shared by other enabled PLLSAIx */
          if((READ_BIT(RCC->CR, RCC_CR_PLLSAI1ON) != 0U)
 8004e88:	4b53      	ldr	r3, [pc, #332]	; (8004fd8 <HAL_RCC_OscConfig+0x780>)
 8004e8a:	681b      	ldr	r3, [r3, #0]
 8004e8c:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8004e90:	2b00      	cmp	r3, #0
 8004e92:	d105      	bne.n	8004ea0 <HAL_RCC_OscConfig+0x648>
#if defined(RCC_PLLSAI2_SUPPORT)
             || (READ_BIT(RCC->CR, RCC_CR_PLLSAI2ON) != 0U)
 8004e94:	4b50      	ldr	r3, [pc, #320]	; (8004fd8 <HAL_RCC_OscConfig+0x780>)
 8004e96:	681b      	ldr	r3, [r3, #0]
 8004e98:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004e9c:	2b00      	cmp	r3, #0
 8004e9e:	d001      	beq.n	8004ea4 <HAL_RCC_OscConfig+0x64c>
#endif
            )
          {
            return HAL_ERROR;
 8004ea0:	2301      	movs	r3, #1
 8004ea2:	e0ad      	b.n	8005000 <HAL_RCC_OscConfig+0x7a8>
          }
          else
#endif /* RCC_PLLSAI1_SUPPORT || RCC_PLLSAI2_SUPPORT */
          {
            /* Disable the main PLL. */
            __HAL_RCC_PLL_DISABLE();
 8004ea4:	4b4c      	ldr	r3, [pc, #304]	; (8004fd8 <HAL_RCC_OscConfig+0x780>)
 8004ea6:	681b      	ldr	r3, [r3, #0]
 8004ea8:	4a4b      	ldr	r2, [pc, #300]	; (8004fd8 <HAL_RCC_OscConfig+0x780>)
 8004eaa:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8004eae:	6013      	str	r3, [r2, #0]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8004eb0:	f7fd fef8 	bl	8002ca4 <HAL_GetTick>
 8004eb4:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8004eb6:	e008      	b.n	8004eca <HAL_RCC_OscConfig+0x672>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004eb8:	f7fd fef4 	bl	8002ca4 <HAL_GetTick>
 8004ebc:	4602      	mov	r2, r0
 8004ebe:	693b      	ldr	r3, [r7, #16]
 8004ec0:	1ad3      	subs	r3, r2, r3
 8004ec2:	2b02      	cmp	r3, #2
 8004ec4:	d901      	bls.n	8004eca <HAL_RCC_OscConfig+0x672>
              {
                return HAL_TIMEOUT;
 8004ec6:	2303      	movs	r3, #3
 8004ec8:	e09a      	b.n	8005000 <HAL_RCC_OscConfig+0x7a8>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8004eca:	4b43      	ldr	r3, [pc, #268]	; (8004fd8 <HAL_RCC_OscConfig+0x780>)
 8004ecc:	681b      	ldr	r3, [r3, #0]
 8004ece:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004ed2:	2b00      	cmp	r3, #0
 8004ed4:	d1f0      	bne.n	8004eb8 <HAL_RCC_OscConfig+0x660>
              }
            }

            /* Configure the main PLL clock source, multiplication and division factors. */
#if defined(RCC_PLLP_SUPPORT)
            __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8004ed6:	4b40      	ldr	r3, [pc, #256]	; (8004fd8 <HAL_RCC_OscConfig+0x780>)
 8004ed8:	68da      	ldr	r2, [r3, #12]
 8004eda:	4b40      	ldr	r3, [pc, #256]	; (8004fdc <HAL_RCC_OscConfig+0x784>)
 8004edc:	4013      	ands	r3, r2
 8004ede:	687a      	ldr	r2, [r7, #4]
 8004ee0:	6ad1      	ldr	r1, [r2, #44]	; 0x2c
 8004ee2:	687a      	ldr	r2, [r7, #4]
 8004ee4:	6b12      	ldr	r2, [r2, #48]	; 0x30
 8004ee6:	3a01      	subs	r2, #1
 8004ee8:	0112      	lsls	r2, r2, #4
 8004eea:	4311      	orrs	r1, r2
 8004eec:	687a      	ldr	r2, [r7, #4]
 8004eee:	6b52      	ldr	r2, [r2, #52]	; 0x34
 8004ef0:	0212      	lsls	r2, r2, #8
 8004ef2:	4311      	orrs	r1, r2
 8004ef4:	687a      	ldr	r2, [r7, #4]
 8004ef6:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 8004ef8:	0852      	lsrs	r2, r2, #1
 8004efa:	3a01      	subs	r2, #1
 8004efc:	0552      	lsls	r2, r2, #21
 8004efe:	4311      	orrs	r1, r2
 8004f00:	687a      	ldr	r2, [r7, #4]
 8004f02:	6c12      	ldr	r2, [r2, #64]	; 0x40
 8004f04:	0852      	lsrs	r2, r2, #1
 8004f06:	3a01      	subs	r2, #1
 8004f08:	0652      	lsls	r2, r2, #25
 8004f0a:	4311      	orrs	r1, r2
 8004f0c:	687a      	ldr	r2, [r7, #4]
 8004f0e:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8004f10:	0912      	lsrs	r2, r2, #4
 8004f12:	0452      	lsls	r2, r2, #17
 8004f14:	430a      	orrs	r2, r1
 8004f16:	4930      	ldr	r1, [pc, #192]	; (8004fd8 <HAL_RCC_OscConfig+0x780>)
 8004f18:	4313      	orrs	r3, r2
 8004f1a:	60cb      	str	r3, [r1, #12]
                                 RCC_OscInitStruct->PLL.PLLQ,
                                 RCC_OscInitStruct->PLL.PLLR);
#endif

            /* Enable the main PLL. */
            __HAL_RCC_PLL_ENABLE();
 8004f1c:	4b2e      	ldr	r3, [pc, #184]	; (8004fd8 <HAL_RCC_OscConfig+0x780>)
 8004f1e:	681b      	ldr	r3, [r3, #0]
 8004f20:	4a2d      	ldr	r2, [pc, #180]	; (8004fd8 <HAL_RCC_OscConfig+0x780>)
 8004f22:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8004f26:	6013      	str	r3, [r2, #0]

            /* Enable PLL System Clock output. */
            __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8004f28:	4b2b      	ldr	r3, [pc, #172]	; (8004fd8 <HAL_RCC_OscConfig+0x780>)
 8004f2a:	68db      	ldr	r3, [r3, #12]
 8004f2c:	4a2a      	ldr	r2, [pc, #168]	; (8004fd8 <HAL_RCC_OscConfig+0x780>)
 8004f2e:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8004f32:	60d3      	str	r3, [r2, #12]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8004f34:	f7fd feb6 	bl	8002ca4 <HAL_GetTick>
 8004f38:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8004f3a:	e008      	b.n	8004f4e <HAL_RCC_OscConfig+0x6f6>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004f3c:	f7fd feb2 	bl	8002ca4 <HAL_GetTick>
 8004f40:	4602      	mov	r2, r0
 8004f42:	693b      	ldr	r3, [r7, #16]
 8004f44:	1ad3      	subs	r3, r2, r3
 8004f46:	2b02      	cmp	r3, #2
 8004f48:	d901      	bls.n	8004f4e <HAL_RCC_OscConfig+0x6f6>
              {
                return HAL_TIMEOUT;
 8004f4a:	2303      	movs	r3, #3
 8004f4c:	e058      	b.n	8005000 <HAL_RCC_OscConfig+0x7a8>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8004f4e:	4b22      	ldr	r3, [pc, #136]	; (8004fd8 <HAL_RCC_OscConfig+0x780>)
 8004f50:	681b      	ldr	r3, [r3, #0]
 8004f52:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004f56:	2b00      	cmp	r3, #0
 8004f58:	d0f0      	beq.n	8004f3c <HAL_RCC_OscConfig+0x6e4>
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 8004f5a:	e050      	b.n	8004ffe <HAL_RCC_OscConfig+0x7a6>
          }
        }
        else
        {
          /* PLL is already used as System core clock */
          return HAL_ERROR;
 8004f5c:	2301      	movs	r3, #1
 8004f5e:	e04f      	b.n	8005000 <HAL_RCC_OscConfig+0x7a8>
      }
      else
      {
        /* PLL configuration is unchanged */
        /* Re-enable PLL if it was disabled (ie. low power mode) */
        if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8004f60:	4b1d      	ldr	r3, [pc, #116]	; (8004fd8 <HAL_RCC_OscConfig+0x780>)
 8004f62:	681b      	ldr	r3, [r3, #0]
 8004f64:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004f68:	2b00      	cmp	r3, #0
 8004f6a:	d148      	bne.n	8004ffe <HAL_RCC_OscConfig+0x7a6>
        {
          /* Enable the main PLL. */
          __HAL_RCC_PLL_ENABLE();
 8004f6c:	4b1a      	ldr	r3, [pc, #104]	; (8004fd8 <HAL_RCC_OscConfig+0x780>)
 8004f6e:	681b      	ldr	r3, [r3, #0]
 8004f70:	4a19      	ldr	r2, [pc, #100]	; (8004fd8 <HAL_RCC_OscConfig+0x780>)
 8004f72:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8004f76:	6013      	str	r3, [r2, #0]

          /* Enable PLL System Clock output. */
          __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8004f78:	4b17      	ldr	r3, [pc, #92]	; (8004fd8 <HAL_RCC_OscConfig+0x780>)
 8004f7a:	68db      	ldr	r3, [r3, #12]
 8004f7c:	4a16      	ldr	r2, [pc, #88]	; (8004fd8 <HAL_RCC_OscConfig+0x780>)
 8004f7e:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8004f82:	60d3      	str	r3, [r2, #12]

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 8004f84:	f7fd fe8e 	bl	8002ca4 <HAL_GetTick>
 8004f88:	6138      	str	r0, [r7, #16]

          /* Wait till PLL is ready */
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8004f8a:	e008      	b.n	8004f9e <HAL_RCC_OscConfig+0x746>
          {
            if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004f8c:	f7fd fe8a 	bl	8002ca4 <HAL_GetTick>
 8004f90:	4602      	mov	r2, r0
 8004f92:	693b      	ldr	r3, [r7, #16]
 8004f94:	1ad3      	subs	r3, r2, r3
 8004f96:	2b02      	cmp	r3, #2
 8004f98:	d901      	bls.n	8004f9e <HAL_RCC_OscConfig+0x746>
            {
              return HAL_TIMEOUT;
 8004f9a:	2303      	movs	r3, #3
 8004f9c:	e030      	b.n	8005000 <HAL_RCC_OscConfig+0x7a8>
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8004f9e:	4b0e      	ldr	r3, [pc, #56]	; (8004fd8 <HAL_RCC_OscConfig+0x780>)
 8004fa0:	681b      	ldr	r3, [r3, #0]
 8004fa2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004fa6:	2b00      	cmp	r3, #0
 8004fa8:	d0f0      	beq.n	8004f8c <HAL_RCC_OscConfig+0x734>
 8004faa:	e028      	b.n	8004ffe <HAL_RCC_OscConfig+0x7a6>
      }
    }
    else
    {
      /* Check that PLL is not used as system clock or not */
      if(sysclk_source != RCC_CFGR_SWS_PLL)
 8004fac:	69bb      	ldr	r3, [r7, #24]
 8004fae:	2b0c      	cmp	r3, #12
 8004fb0:	d023      	beq.n	8004ffa <HAL_RCC_OscConfig+0x7a2>
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004fb2:	4b09      	ldr	r3, [pc, #36]	; (8004fd8 <HAL_RCC_OscConfig+0x780>)
 8004fb4:	681b      	ldr	r3, [r3, #0]
 8004fb6:	4a08      	ldr	r2, [pc, #32]	; (8004fd8 <HAL_RCC_OscConfig+0x780>)
 8004fb8:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8004fbc:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004fbe:	f7fd fe71 	bl	8002ca4 <HAL_GetTick>
 8004fc2:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8004fc4:	e00c      	b.n	8004fe0 <HAL_RCC_OscConfig+0x788>
        {
          if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004fc6:	f7fd fe6d 	bl	8002ca4 <HAL_GetTick>
 8004fca:	4602      	mov	r2, r0
 8004fcc:	693b      	ldr	r3, [r7, #16]
 8004fce:	1ad3      	subs	r3, r2, r3
 8004fd0:	2b02      	cmp	r3, #2
 8004fd2:	d905      	bls.n	8004fe0 <HAL_RCC_OscConfig+0x788>
          {
            return HAL_TIMEOUT;
 8004fd4:	2303      	movs	r3, #3
 8004fd6:	e013      	b.n	8005000 <HAL_RCC_OscConfig+0x7a8>
 8004fd8:	40021000 	.word	0x40021000
 8004fdc:	f99d808c 	.word	0xf99d808c
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8004fe0:	4b09      	ldr	r3, [pc, #36]	; (8005008 <HAL_RCC_OscConfig+0x7b0>)
 8004fe2:	681b      	ldr	r3, [r3, #0]
 8004fe4:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004fe8:	2b00      	cmp	r3, #0
 8004fea:	d1ec      	bne.n	8004fc6 <HAL_RCC_OscConfig+0x76e>
          }
        }
        /* Unselect main PLL clock source and disable main PLL outputs to save power */
#if defined(RCC_PLLSAI2_SUPPORT)
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI3CLK);
 8004fec:	4b06      	ldr	r3, [pc, #24]	; (8005008 <HAL_RCC_OscConfig+0x7b0>)
 8004fee:	68da      	ldr	r2, [r3, #12]
 8004ff0:	4905      	ldr	r1, [pc, #20]	; (8005008 <HAL_RCC_OscConfig+0x7b0>)
 8004ff2:	4b06      	ldr	r3, [pc, #24]	; (800500c <HAL_RCC_OscConfig+0x7b4>)
 8004ff4:	4013      	ands	r3, r2
 8004ff6:	60cb      	str	r3, [r1, #12]
 8004ff8:	e001      	b.n	8004ffe <HAL_RCC_OscConfig+0x7a6>
#endif /* RCC_PLLSAI2_SUPPORT */
      }
      else
      {
        /* PLL is already used as System core clock */
        return HAL_ERROR;
 8004ffa:	2301      	movs	r3, #1
 8004ffc:	e000      	b.n	8005000 <HAL_RCC_OscConfig+0x7a8>
      }
    }
  }
  return HAL_OK;
 8004ffe:	2300      	movs	r3, #0
}
 8005000:	4618      	mov	r0, r3
 8005002:	3720      	adds	r7, #32
 8005004:	46bd      	mov	sp, r7
 8005006:	bd80      	pop	{r7, pc}
 8005008:	40021000 	.word	0x40021000
 800500c:	feeefffc 	.word	0xfeeefffc

08005010 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8005010:	b580      	push	{r7, lr}
 8005012:	b084      	sub	sp, #16
 8005014:	af00      	add	r7, sp, #0
 8005016:	6078      	str	r0, [r7, #4]
 8005018:	6039      	str	r1, [r7, #0]
  uint32_t hpre = RCC_SYSCLK_DIV1;
#endif
  HAL_StatusTypeDef status;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 800501a:	687b      	ldr	r3, [r7, #4]
 800501c:	2b00      	cmp	r3, #0
 800501e:	d101      	bne.n	8005024 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8005020:	2301      	movs	r3, #1
 8005022:	e0e7      	b.n	80051f4 <HAL_RCC_ClockConfig+0x1e4>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8005024:	4b75      	ldr	r3, [pc, #468]	; (80051fc <HAL_RCC_ClockConfig+0x1ec>)
 8005026:	681b      	ldr	r3, [r3, #0]
 8005028:	f003 0307 	and.w	r3, r3, #7
 800502c:	683a      	ldr	r2, [r7, #0]
 800502e:	429a      	cmp	r2, r3
 8005030:	d910      	bls.n	8005054 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8005032:	4b72      	ldr	r3, [pc, #456]	; (80051fc <HAL_RCC_ClockConfig+0x1ec>)
 8005034:	681b      	ldr	r3, [r3, #0]
 8005036:	f023 0207 	bic.w	r2, r3, #7
 800503a:	4970      	ldr	r1, [pc, #448]	; (80051fc <HAL_RCC_ClockConfig+0x1ec>)
 800503c:	683b      	ldr	r3, [r7, #0]
 800503e:	4313      	orrs	r3, r2
 8005040:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8005042:	4b6e      	ldr	r3, [pc, #440]	; (80051fc <HAL_RCC_ClockConfig+0x1ec>)
 8005044:	681b      	ldr	r3, [r3, #0]
 8005046:	f003 0307 	and.w	r3, r3, #7
 800504a:	683a      	ldr	r2, [r7, #0]
 800504c:	429a      	cmp	r2, r3
 800504e:	d001      	beq.n	8005054 <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 8005050:	2301      	movs	r3, #1
 8005052:	e0cf      	b.n	80051f4 <HAL_RCC_ClockConfig+0x1e4>
    }
  }

  /*----------------- HCLK Configuration prior to SYSCLK----------------------*/
  /* Apply higher HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is increased */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8005054:	687b      	ldr	r3, [r7, #4]
 8005056:	681b      	ldr	r3, [r3, #0]
 8005058:	f003 0302 	and.w	r3, r3, #2
 800505c:	2b00      	cmp	r3, #0
 800505e:	d010      	beq.n	8005082 <HAL_RCC_ClockConfig+0x72>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));

    if(RCC_ClkInitStruct->AHBCLKDivider > READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 8005060:	687b      	ldr	r3, [r7, #4]
 8005062:	689a      	ldr	r2, [r3, #8]
 8005064:	4b66      	ldr	r3, [pc, #408]	; (8005200 <HAL_RCC_ClockConfig+0x1f0>)
 8005066:	689b      	ldr	r3, [r3, #8]
 8005068:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800506c:	429a      	cmp	r2, r3
 800506e:	d908      	bls.n	8005082 <HAL_RCC_ClockConfig+0x72>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8005070:	4b63      	ldr	r3, [pc, #396]	; (8005200 <HAL_RCC_ClockConfig+0x1f0>)
 8005072:	689b      	ldr	r3, [r3, #8]
 8005074:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8005078:	687b      	ldr	r3, [r7, #4]
 800507a:	689b      	ldr	r3, [r3, #8]
 800507c:	4960      	ldr	r1, [pc, #384]	; (8005200 <HAL_RCC_ClockConfig+0x1f0>)
 800507e:	4313      	orrs	r3, r2
 8005080:	608b      	str	r3, [r1, #8]
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8005082:	687b      	ldr	r3, [r7, #4]
 8005084:	681b      	ldr	r3, [r3, #0]
 8005086:	f003 0301 	and.w	r3, r3, #1
 800508a:	2b00      	cmp	r3, #0
 800508c:	d04c      	beq.n	8005128 <HAL_RCC_ClockConfig+0x118>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800508e:	687b      	ldr	r3, [r7, #4]
 8005090:	685b      	ldr	r3, [r3, #4]
 8005092:	2b03      	cmp	r3, #3
 8005094:	d107      	bne.n	80050a6 <HAL_RCC_ClockConfig+0x96>
    {
      /* Check the PLL ready flag */
      if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8005096:	4b5a      	ldr	r3, [pc, #360]	; (8005200 <HAL_RCC_ClockConfig+0x1f0>)
 8005098:	681b      	ldr	r3, [r3, #0]
 800509a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800509e:	2b00      	cmp	r3, #0
 80050a0:	d121      	bne.n	80050e6 <HAL_RCC_ClockConfig+0xd6>
      {
        return HAL_ERROR;
 80050a2:	2301      	movs	r3, #1
 80050a4:	e0a6      	b.n	80051f4 <HAL_RCC_ClockConfig+0x1e4>
#endif
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80050a6:	687b      	ldr	r3, [r7, #4]
 80050a8:	685b      	ldr	r3, [r3, #4]
 80050aa:	2b02      	cmp	r3, #2
 80050ac:	d107      	bne.n	80050be <HAL_RCC_ClockConfig+0xae>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80050ae:	4b54      	ldr	r3, [pc, #336]	; (8005200 <HAL_RCC_ClockConfig+0x1f0>)
 80050b0:	681b      	ldr	r3, [r3, #0]
 80050b2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80050b6:	2b00      	cmp	r3, #0
 80050b8:	d115      	bne.n	80050e6 <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 80050ba:	2301      	movs	r3, #1
 80050bc:	e09a      	b.n	80051f4 <HAL_RCC_ClockConfig+0x1e4>
        }
      }
      /* MSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 80050be:	687b      	ldr	r3, [r7, #4]
 80050c0:	685b      	ldr	r3, [r3, #4]
 80050c2:	2b00      	cmp	r3, #0
 80050c4:	d107      	bne.n	80050d6 <HAL_RCC_ClockConfig+0xc6>
      {
        /* Check the MSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 80050c6:	4b4e      	ldr	r3, [pc, #312]	; (8005200 <HAL_RCC_ClockConfig+0x1f0>)
 80050c8:	681b      	ldr	r3, [r3, #0]
 80050ca:	f003 0302 	and.w	r3, r3, #2
 80050ce:	2b00      	cmp	r3, #0
 80050d0:	d109      	bne.n	80050e6 <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 80050d2:	2301      	movs	r3, #1
 80050d4:	e08e      	b.n	80051f4 <HAL_RCC_ClockConfig+0x1e4>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80050d6:	4b4a      	ldr	r3, [pc, #296]	; (8005200 <HAL_RCC_ClockConfig+0x1f0>)
 80050d8:	681b      	ldr	r3, [r3, #0]
 80050da:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80050de:	2b00      	cmp	r3, #0
 80050e0:	d101      	bne.n	80050e6 <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 80050e2:	2301      	movs	r3, #1
 80050e4:	e086      	b.n	80051f4 <HAL_RCC_ClockConfig+0x1e4>
      }
#endif

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 80050e6:	4b46      	ldr	r3, [pc, #280]	; (8005200 <HAL_RCC_ClockConfig+0x1f0>)
 80050e8:	689b      	ldr	r3, [r3, #8]
 80050ea:	f023 0203 	bic.w	r2, r3, #3
 80050ee:	687b      	ldr	r3, [r7, #4]
 80050f0:	685b      	ldr	r3, [r3, #4]
 80050f2:	4943      	ldr	r1, [pc, #268]	; (8005200 <HAL_RCC_ClockConfig+0x1f0>)
 80050f4:	4313      	orrs	r3, r2
 80050f6:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80050f8:	f7fd fdd4 	bl	8002ca4 <HAL_GetTick>
 80050fc:	60f8      	str	r0, [r7, #12]

    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80050fe:	e00a      	b.n	8005116 <HAL_RCC_ClockConfig+0x106>
    {
      if((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8005100:	f7fd fdd0 	bl	8002ca4 <HAL_GetTick>
 8005104:	4602      	mov	r2, r0
 8005106:	68fb      	ldr	r3, [r7, #12]
 8005108:	1ad3      	subs	r3, r2, r3
 800510a:	f241 3288 	movw	r2, #5000	; 0x1388
 800510e:	4293      	cmp	r3, r2
 8005110:	d901      	bls.n	8005116 <HAL_RCC_ClockConfig+0x106>
      {
        return HAL_TIMEOUT;
 8005112:	2303      	movs	r3, #3
 8005114:	e06e      	b.n	80051f4 <HAL_RCC_ClockConfig+0x1e4>
    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8005116:	4b3a      	ldr	r3, [pc, #232]	; (8005200 <HAL_RCC_ClockConfig+0x1f0>)
 8005118:	689b      	ldr	r3, [r3, #8]
 800511a:	f003 020c 	and.w	r2, r3, #12
 800511e:	687b      	ldr	r3, [r7, #4]
 8005120:	685b      	ldr	r3, [r3, #4]
 8005122:	009b      	lsls	r3, r3, #2
 8005124:	429a      	cmp	r2, r3
 8005126:	d1eb      	bne.n	8005100 <HAL_RCC_ClockConfig+0xf0>
  }
#endif

  /*----------------- HCLK Configuration after SYSCLK-------------------------*/
  /* Apply lower HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is set */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8005128:	687b      	ldr	r3, [r7, #4]
 800512a:	681b      	ldr	r3, [r3, #0]
 800512c:	f003 0302 	and.w	r3, r3, #2
 8005130:	2b00      	cmp	r3, #0
 8005132:	d010      	beq.n	8005156 <HAL_RCC_ClockConfig+0x146>
  {
    if(RCC_ClkInitStruct->AHBCLKDivider < READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 8005134:	687b      	ldr	r3, [r7, #4]
 8005136:	689a      	ldr	r2, [r3, #8]
 8005138:	4b31      	ldr	r3, [pc, #196]	; (8005200 <HAL_RCC_ClockConfig+0x1f0>)
 800513a:	689b      	ldr	r3, [r3, #8]
 800513c:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8005140:	429a      	cmp	r2, r3
 8005142:	d208      	bcs.n	8005156 <HAL_RCC_ClockConfig+0x146>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8005144:	4b2e      	ldr	r3, [pc, #184]	; (8005200 <HAL_RCC_ClockConfig+0x1f0>)
 8005146:	689b      	ldr	r3, [r3, #8]
 8005148:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 800514c:	687b      	ldr	r3, [r7, #4]
 800514e:	689b      	ldr	r3, [r3, #8]
 8005150:	492b      	ldr	r1, [pc, #172]	; (8005200 <HAL_RCC_ClockConfig+0x1f0>)
 8005152:	4313      	orrs	r3, r2
 8005154:	608b      	str	r3, [r1, #8]
    }
  }

  /* Allow decreasing of the number of wait states (because of lower CPU frequency expected) */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8005156:	4b29      	ldr	r3, [pc, #164]	; (80051fc <HAL_RCC_ClockConfig+0x1ec>)
 8005158:	681b      	ldr	r3, [r3, #0]
 800515a:	f003 0307 	and.w	r3, r3, #7
 800515e:	683a      	ldr	r2, [r7, #0]
 8005160:	429a      	cmp	r2, r3
 8005162:	d210      	bcs.n	8005186 <HAL_RCC_ClockConfig+0x176>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8005164:	4b25      	ldr	r3, [pc, #148]	; (80051fc <HAL_RCC_ClockConfig+0x1ec>)
 8005166:	681b      	ldr	r3, [r3, #0]
 8005168:	f023 0207 	bic.w	r2, r3, #7
 800516c:	4923      	ldr	r1, [pc, #140]	; (80051fc <HAL_RCC_ClockConfig+0x1ec>)
 800516e:	683b      	ldr	r3, [r7, #0]
 8005170:	4313      	orrs	r3, r2
 8005172:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8005174:	4b21      	ldr	r3, [pc, #132]	; (80051fc <HAL_RCC_ClockConfig+0x1ec>)
 8005176:	681b      	ldr	r3, [r3, #0]
 8005178:	f003 0307 	and.w	r3, r3, #7
 800517c:	683a      	ldr	r2, [r7, #0]
 800517e:	429a      	cmp	r2, r3
 8005180:	d001      	beq.n	8005186 <HAL_RCC_ClockConfig+0x176>
    {
      return HAL_ERROR;
 8005182:	2301      	movs	r3, #1
 8005184:	e036      	b.n	80051f4 <HAL_RCC_ClockConfig+0x1e4>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8005186:	687b      	ldr	r3, [r7, #4]
 8005188:	681b      	ldr	r3, [r3, #0]
 800518a:	f003 0304 	and.w	r3, r3, #4
 800518e:	2b00      	cmp	r3, #0
 8005190:	d008      	beq.n	80051a4 <HAL_RCC_ClockConfig+0x194>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8005192:	4b1b      	ldr	r3, [pc, #108]	; (8005200 <HAL_RCC_ClockConfig+0x1f0>)
 8005194:	689b      	ldr	r3, [r3, #8]
 8005196:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 800519a:	687b      	ldr	r3, [r7, #4]
 800519c:	68db      	ldr	r3, [r3, #12]
 800519e:	4918      	ldr	r1, [pc, #96]	; (8005200 <HAL_RCC_ClockConfig+0x1f0>)
 80051a0:	4313      	orrs	r3, r2
 80051a2:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80051a4:	687b      	ldr	r3, [r7, #4]
 80051a6:	681b      	ldr	r3, [r3, #0]
 80051a8:	f003 0308 	and.w	r3, r3, #8
 80051ac:	2b00      	cmp	r3, #0
 80051ae:	d009      	beq.n	80051c4 <HAL_RCC_ClockConfig+0x1b4>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 80051b0:	4b13      	ldr	r3, [pc, #76]	; (8005200 <HAL_RCC_ClockConfig+0x1f0>)
 80051b2:	689b      	ldr	r3, [r3, #8]
 80051b4:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 80051b8:	687b      	ldr	r3, [r7, #4]
 80051ba:	691b      	ldr	r3, [r3, #16]
 80051bc:	00db      	lsls	r3, r3, #3
 80051be:	4910      	ldr	r1, [pc, #64]	; (8005200 <HAL_RCC_ClockConfig+0x1f0>)
 80051c0:	4313      	orrs	r3, r2
 80051c2:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 80051c4:	f000 f824 	bl	8005210 <HAL_RCC_GetSysClockFreq>
 80051c8:	4602      	mov	r2, r0
 80051ca:	4b0d      	ldr	r3, [pc, #52]	; (8005200 <HAL_RCC_ClockConfig+0x1f0>)
 80051cc:	689b      	ldr	r3, [r3, #8]
 80051ce:	091b      	lsrs	r3, r3, #4
 80051d0:	f003 030f 	and.w	r3, r3, #15
 80051d4:	490b      	ldr	r1, [pc, #44]	; (8005204 <HAL_RCC_ClockConfig+0x1f4>)
 80051d6:	5ccb      	ldrb	r3, [r1, r3]
 80051d8:	f003 031f 	and.w	r3, r3, #31
 80051dc:	fa22 f303 	lsr.w	r3, r2, r3
 80051e0:	4a09      	ldr	r2, [pc, #36]	; (8005208 <HAL_RCC_ClockConfig+0x1f8>)
 80051e2:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 80051e4:	4b09      	ldr	r3, [pc, #36]	; (800520c <HAL_RCC_ClockConfig+0x1fc>)
 80051e6:	681b      	ldr	r3, [r3, #0]
 80051e8:	4618      	mov	r0, r3
 80051ea:	f7fd fd0b 	bl	8002c04 <HAL_InitTick>
 80051ee:	4603      	mov	r3, r0
 80051f0:	72fb      	strb	r3, [r7, #11]

  return status;
 80051f2:	7afb      	ldrb	r3, [r7, #11]
}
 80051f4:	4618      	mov	r0, r3
 80051f6:	3710      	adds	r7, #16
 80051f8:	46bd      	mov	sp, r7
 80051fa:	bd80      	pop	{r7, pc}
 80051fc:	40022000 	.word	0x40022000
 8005200:	40021000 	.word	0x40021000
 8005204:	08008824 	.word	0x08008824
 8005208:	2000012c 	.word	0x2000012c
 800520c:	20000174 	.word	0x20000174

08005210 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8005210:	b480      	push	{r7}
 8005212:	b089      	sub	sp, #36	; 0x24
 8005214:	af00      	add	r7, sp, #0
  uint32_t msirange = 0U, sysclockfreq = 0U;
 8005216:	2300      	movs	r3, #0
 8005218:	61fb      	str	r3, [r7, #28]
 800521a:	2300      	movs	r3, #0
 800521c:	61bb      	str	r3, [r7, #24]
  uint32_t pllvco, pllsource, pllr, pllm;    /* no init needed */
  uint32_t sysclk_source, pll_oscsource;

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 800521e:	4b3e      	ldr	r3, [pc, #248]	; (8005318 <HAL_RCC_GetSysClockFreq+0x108>)
 8005220:	689b      	ldr	r3, [r3, #8]
 8005222:	f003 030c 	and.w	r3, r3, #12
 8005226:	613b      	str	r3, [r7, #16]
  pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 8005228:	4b3b      	ldr	r3, [pc, #236]	; (8005318 <HAL_RCC_GetSysClockFreq+0x108>)
 800522a:	68db      	ldr	r3, [r3, #12]
 800522c:	f003 0303 	and.w	r3, r3, #3
 8005230:	60fb      	str	r3, [r7, #12]

  if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 8005232:	693b      	ldr	r3, [r7, #16]
 8005234:	2b00      	cmp	r3, #0
 8005236:	d005      	beq.n	8005244 <HAL_RCC_GetSysClockFreq+0x34>
 8005238:	693b      	ldr	r3, [r7, #16]
 800523a:	2b0c      	cmp	r3, #12
 800523c:	d121      	bne.n	8005282 <HAL_RCC_GetSysClockFreq+0x72>
     ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_oscsource == RCC_PLLSOURCE_MSI)))
 800523e:	68fb      	ldr	r3, [r7, #12]
 8005240:	2b01      	cmp	r3, #1
 8005242:	d11e      	bne.n	8005282 <HAL_RCC_GetSysClockFreq+0x72>
  {
    /* MSI or PLL with MSI source used as system clock source */

    /* Get SYSCLK source */
    if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 8005244:	4b34      	ldr	r3, [pc, #208]	; (8005318 <HAL_RCC_GetSysClockFreq+0x108>)
 8005246:	681b      	ldr	r3, [r3, #0]
 8005248:	f003 0308 	and.w	r3, r3, #8
 800524c:	2b00      	cmp	r3, #0
 800524e:	d107      	bne.n	8005260 <HAL_RCC_GetSysClockFreq+0x50>
    { /* MSISRANGE from RCC_CSR applies */
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 8005250:	4b31      	ldr	r3, [pc, #196]	; (8005318 <HAL_RCC_GetSysClockFreq+0x108>)
 8005252:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8005256:	0a1b      	lsrs	r3, r3, #8
 8005258:	f003 030f 	and.w	r3, r3, #15
 800525c:	61fb      	str	r3, [r7, #28]
 800525e:	e005      	b.n	800526c <HAL_RCC_GetSysClockFreq+0x5c>
    }
    else
    { /* MSIRANGE from RCC_CR applies */
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 8005260:	4b2d      	ldr	r3, [pc, #180]	; (8005318 <HAL_RCC_GetSysClockFreq+0x108>)
 8005262:	681b      	ldr	r3, [r3, #0]
 8005264:	091b      	lsrs	r3, r3, #4
 8005266:	f003 030f 	and.w	r3, r3, #15
 800526a:	61fb      	str	r3, [r7, #28]
    }
    /*MSI frequency range in HZ*/
    msirange = MSIRangeTable[msirange];
 800526c:	4a2b      	ldr	r2, [pc, #172]	; (800531c <HAL_RCC_GetSysClockFreq+0x10c>)
 800526e:	69fb      	ldr	r3, [r7, #28]
 8005270:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8005274:	61fb      	str	r3, [r7, #28]

    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8005276:	693b      	ldr	r3, [r7, #16]
 8005278:	2b00      	cmp	r3, #0
 800527a:	d10d      	bne.n	8005298 <HAL_RCC_GetSysClockFreq+0x88>
    {
      /* MSI used as system clock source */
      sysclockfreq = msirange;
 800527c:	69fb      	ldr	r3, [r7, #28]
 800527e:	61bb      	str	r3, [r7, #24]
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8005280:	e00a      	b.n	8005298 <HAL_RCC_GetSysClockFreq+0x88>
    }
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSI)
 8005282:	693b      	ldr	r3, [r7, #16]
 8005284:	2b04      	cmp	r3, #4
 8005286:	d102      	bne.n	800528e <HAL_RCC_GetSysClockFreq+0x7e>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 8005288:	4b25      	ldr	r3, [pc, #148]	; (8005320 <HAL_RCC_GetSysClockFreq+0x110>)
 800528a:	61bb      	str	r3, [r7, #24]
 800528c:	e004      	b.n	8005298 <HAL_RCC_GetSysClockFreq+0x88>
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSE)
 800528e:	693b      	ldr	r3, [r7, #16]
 8005290:	2b08      	cmp	r3, #8
 8005292:	d101      	bne.n	8005298 <HAL_RCC_GetSysClockFreq+0x88>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 8005294:	4b23      	ldr	r3, [pc, #140]	; (8005324 <HAL_RCC_GetSysClockFreq+0x114>)
 8005296:	61bb      	str	r3, [r7, #24]
  else
  {
    /* unexpected case: sysclockfreq at 0 */
  }

  if(sysclk_source == RCC_CFGR_SWS_PLL)
 8005298:	693b      	ldr	r3, [r7, #16]
 800529a:	2b0c      	cmp	r3, #12
 800529c:	d134      	bne.n	8005308 <HAL_RCC_GetSysClockFreq+0xf8>
    /* PLL used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE) * PLLN / PLLM
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 800529e:	4b1e      	ldr	r3, [pc, #120]	; (8005318 <HAL_RCC_GetSysClockFreq+0x108>)
 80052a0:	68db      	ldr	r3, [r3, #12]
 80052a2:	f003 0303 	and.w	r3, r3, #3
 80052a6:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 80052a8:	68bb      	ldr	r3, [r7, #8]
 80052aa:	2b02      	cmp	r3, #2
 80052ac:	d003      	beq.n	80052b6 <HAL_RCC_GetSysClockFreq+0xa6>
 80052ae:	68bb      	ldr	r3, [r7, #8]
 80052b0:	2b03      	cmp	r3, #3
 80052b2:	d003      	beq.n	80052bc <HAL_RCC_GetSysClockFreq+0xac>
 80052b4:	e005      	b.n	80052c2 <HAL_RCC_GetSysClockFreq+0xb2>
    {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
      pllvco = HSI_VALUE;
 80052b6:	4b1a      	ldr	r3, [pc, #104]	; (8005320 <HAL_RCC_GetSysClockFreq+0x110>)
 80052b8:	617b      	str	r3, [r7, #20]
      break;
 80052ba:	e005      	b.n	80052c8 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = HSE_VALUE;
 80052bc:	4b19      	ldr	r3, [pc, #100]	; (8005324 <HAL_RCC_GetSysClockFreq+0x114>)
 80052be:	617b      	str	r3, [r7, #20]
      break;
 80052c0:	e002      	b.n	80052c8 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
    default:
      pllvco = msirange;
 80052c2:	69fb      	ldr	r3, [r7, #28]
 80052c4:	617b      	str	r3, [r7, #20]
      break;
 80052c6:	bf00      	nop
    }
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 80052c8:	4b13      	ldr	r3, [pc, #76]	; (8005318 <HAL_RCC_GetSysClockFreq+0x108>)
 80052ca:	68db      	ldr	r3, [r3, #12]
 80052cc:	091b      	lsrs	r3, r3, #4
 80052ce:	f003 0307 	and.w	r3, r3, #7
 80052d2:	3301      	adds	r3, #1
 80052d4:	607b      	str	r3, [r7, #4]
    pllvco = (pllvco * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)) / pllm;
 80052d6:	4b10      	ldr	r3, [pc, #64]	; (8005318 <HAL_RCC_GetSysClockFreq+0x108>)
 80052d8:	68db      	ldr	r3, [r3, #12]
 80052da:	0a1b      	lsrs	r3, r3, #8
 80052dc:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80052e0:	697a      	ldr	r2, [r7, #20]
 80052e2:	fb03 f202 	mul.w	r2, r3, r2
 80052e6:	687b      	ldr	r3, [r7, #4]
 80052e8:	fbb2 f3f3 	udiv	r3, r2, r3
 80052ec:	617b      	str	r3, [r7, #20]
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 80052ee:	4b0a      	ldr	r3, [pc, #40]	; (8005318 <HAL_RCC_GetSysClockFreq+0x108>)
 80052f0:	68db      	ldr	r3, [r3, #12]
 80052f2:	0e5b      	lsrs	r3, r3, #25
 80052f4:	f003 0303 	and.w	r3, r3, #3
 80052f8:	3301      	adds	r3, #1
 80052fa:	005b      	lsls	r3, r3, #1
 80052fc:	603b      	str	r3, [r7, #0]
    sysclockfreq = pllvco / pllr;
 80052fe:	697a      	ldr	r2, [r7, #20]
 8005300:	683b      	ldr	r3, [r7, #0]
 8005302:	fbb2 f3f3 	udiv	r3, r2, r3
 8005306:	61bb      	str	r3, [r7, #24]
  }

  return sysclockfreq;
 8005308:	69bb      	ldr	r3, [r7, #24]
}
 800530a:	4618      	mov	r0, r3
 800530c:	3724      	adds	r7, #36	; 0x24
 800530e:	46bd      	mov	sp, r7
 8005310:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005314:	4770      	bx	lr
 8005316:	bf00      	nop
 8005318:	40021000 	.word	0x40021000
 800531c:	0800883c 	.word	0x0800883c
 8005320:	00f42400 	.word	0x00f42400
 8005324:	007a1200 	.word	0x007a1200

08005328 <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8005328:	b480      	push	{r7}
 800532a:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 800532c:	4b03      	ldr	r3, [pc, #12]	; (800533c <HAL_RCC_GetHCLKFreq+0x14>)
 800532e:	681b      	ldr	r3, [r3, #0]
}
 8005330:	4618      	mov	r0, r3
 8005332:	46bd      	mov	sp, r7
 8005334:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005338:	4770      	bx	lr
 800533a:	bf00      	nop
 800533c:	2000012c 	.word	0x2000012c

08005340 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8005340:	b580      	push	{r7, lr}
 8005342:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos] & 0x1FU));
 8005344:	f7ff fff0 	bl	8005328 <HAL_RCC_GetHCLKFreq>
 8005348:	4602      	mov	r2, r0
 800534a:	4b06      	ldr	r3, [pc, #24]	; (8005364 <HAL_RCC_GetPCLK1Freq+0x24>)
 800534c:	689b      	ldr	r3, [r3, #8]
 800534e:	0a1b      	lsrs	r3, r3, #8
 8005350:	f003 0307 	and.w	r3, r3, #7
 8005354:	4904      	ldr	r1, [pc, #16]	; (8005368 <HAL_RCC_GetPCLK1Freq+0x28>)
 8005356:	5ccb      	ldrb	r3, [r1, r3]
 8005358:	f003 031f 	and.w	r3, r3, #31
 800535c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8005360:	4618      	mov	r0, r3
 8005362:	bd80      	pop	{r7, pc}
 8005364:	40021000 	.word	0x40021000
 8005368:	08008834 	.word	0x08008834

0800536c <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 800536c:	b580      	push	{r7, lr}
 800536e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos] & 0x1FU));
 8005370:	f7ff ffda 	bl	8005328 <HAL_RCC_GetHCLKFreq>
 8005374:	4602      	mov	r2, r0
 8005376:	4b06      	ldr	r3, [pc, #24]	; (8005390 <HAL_RCC_GetPCLK2Freq+0x24>)
 8005378:	689b      	ldr	r3, [r3, #8]
 800537a:	0adb      	lsrs	r3, r3, #11
 800537c:	f003 0307 	and.w	r3, r3, #7
 8005380:	4904      	ldr	r1, [pc, #16]	; (8005394 <HAL_RCC_GetPCLK2Freq+0x28>)
 8005382:	5ccb      	ldrb	r3, [r1, r3]
 8005384:	f003 031f 	and.w	r3, r3, #31
 8005388:	fa22 f303 	lsr.w	r3, r2, r3
}
 800538c:	4618      	mov	r0, r3
 800538e:	bd80      	pop	{r7, pc}
 8005390:	40021000 	.word	0x40021000
 8005394:	08008834 	.word	0x08008834

08005398 <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  msirange  MSI range value from RCC_MSIRANGE_0 to RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t msirange)
{
 8005398:	b580      	push	{r7, lr}
 800539a:	b086      	sub	sp, #24
 800539c:	af00      	add	r7, sp, #0
 800539e:	6078      	str	r0, [r7, #4]
  uint32_t vos;
  uint32_t latency = FLASH_LATENCY_0;  /* default value 0WS */
 80053a0:	2300      	movs	r3, #0
 80053a2:	613b      	str	r3, [r7, #16]

  if(__HAL_RCC_PWR_IS_CLK_ENABLED())
 80053a4:	4b2a      	ldr	r3, [pc, #168]	; (8005450 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 80053a6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80053a8:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80053ac:	2b00      	cmp	r3, #0
 80053ae:	d003      	beq.n	80053b8 <RCC_SetFlashLatencyFromMSIRange+0x20>
  {
    vos = HAL_PWREx_GetVoltageRange();
 80053b0:	f7ff f922 	bl	80045f8 <HAL_PWREx_GetVoltageRange>
 80053b4:	6178      	str	r0, [r7, #20]
 80053b6:	e014      	b.n	80053e2 <RCC_SetFlashLatencyFromMSIRange+0x4a>
  }
  else
  {
    __HAL_RCC_PWR_CLK_ENABLE();
 80053b8:	4b25      	ldr	r3, [pc, #148]	; (8005450 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 80053ba:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80053bc:	4a24      	ldr	r2, [pc, #144]	; (8005450 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 80053be:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80053c2:	6593      	str	r3, [r2, #88]	; 0x58
 80053c4:	4b22      	ldr	r3, [pc, #136]	; (8005450 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 80053c6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80053c8:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80053cc:	60fb      	str	r3, [r7, #12]
 80053ce:	68fb      	ldr	r3, [r7, #12]
    vos = HAL_PWREx_GetVoltageRange();
 80053d0:	f7ff f912 	bl	80045f8 <HAL_PWREx_GetVoltageRange>
 80053d4:	6178      	str	r0, [r7, #20]
    __HAL_RCC_PWR_CLK_DISABLE();
 80053d6:	4b1e      	ldr	r3, [pc, #120]	; (8005450 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 80053d8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80053da:	4a1d      	ldr	r2, [pc, #116]	; (8005450 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 80053dc:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80053e0:	6593      	str	r3, [r2, #88]	; 0x58
  }

  if(vos == PWR_REGULATOR_VOLTAGE_SCALE1)
 80053e2:	697b      	ldr	r3, [r7, #20]
 80053e4:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80053e8:	d10b      	bne.n	8005402 <RCC_SetFlashLatencyFromMSIRange+0x6a>
  {
    if(msirange > RCC_MSIRANGE_8)
 80053ea:	687b      	ldr	r3, [r7, #4]
 80053ec:	2b80      	cmp	r3, #128	; 0x80
 80053ee:	d919      	bls.n	8005424 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    {
      /* MSI > 16Mhz */
      if(msirange > RCC_MSIRANGE_10)
 80053f0:	687b      	ldr	r3, [r7, #4]
 80053f2:	2ba0      	cmp	r3, #160	; 0xa0
 80053f4:	d902      	bls.n	80053fc <RCC_SetFlashLatencyFromMSIRange+0x64>
      {
        /* MSI 48Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 80053f6:	2302      	movs	r3, #2
 80053f8:	613b      	str	r3, [r7, #16]
 80053fa:	e013      	b.n	8005424 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else
      {
        /* MSI 24Mhz or 32Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 80053fc:	2301      	movs	r3, #1
 80053fe:	613b      	str	r3, [r7, #16]
 8005400:	e010      	b.n	8005424 <RCC_SetFlashLatencyFromMSIRange+0x8c>
        latency = FLASH_LATENCY_1; /* 1WS */
      }
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#else
    if(msirange > RCC_MSIRANGE_8)
 8005402:	687b      	ldr	r3, [r7, #4]
 8005404:	2b80      	cmp	r3, #128	; 0x80
 8005406:	d902      	bls.n	800540e <RCC_SetFlashLatencyFromMSIRange+0x76>
    {
      /* MSI > 16Mhz */
      latency = FLASH_LATENCY_3; /* 3WS */
 8005408:	2303      	movs	r3, #3
 800540a:	613b      	str	r3, [r7, #16]
 800540c:	e00a      	b.n	8005424 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    }
    else
    {
      if(msirange == RCC_MSIRANGE_8)
 800540e:	687b      	ldr	r3, [r7, #4]
 8005410:	2b80      	cmp	r3, #128	; 0x80
 8005412:	d102      	bne.n	800541a <RCC_SetFlashLatencyFromMSIRange+0x82>
      {
        /* MSI 16Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 8005414:	2302      	movs	r3, #2
 8005416:	613b      	str	r3, [r7, #16]
 8005418:	e004      	b.n	8005424 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else if(msirange == RCC_MSIRANGE_7)
 800541a:	687b      	ldr	r3, [r7, #4]
 800541c:	2b70      	cmp	r3, #112	; 0x70
 800541e:	d101      	bne.n	8005424 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      {
        /* MSI 8Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8005420:	2301      	movs	r3, #1
 8005422:	613b      	str	r3, [r7, #16]
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#endif
  }

  __HAL_FLASH_SET_LATENCY(latency);
 8005424:	4b0b      	ldr	r3, [pc, #44]	; (8005454 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8005426:	681b      	ldr	r3, [r3, #0]
 8005428:	f023 0207 	bic.w	r2, r3, #7
 800542c:	4909      	ldr	r1, [pc, #36]	; (8005454 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 800542e:	693b      	ldr	r3, [r7, #16]
 8005430:	4313      	orrs	r3, r2
 8005432:	600b      	str	r3, [r1, #0]

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  if(__HAL_FLASH_GET_LATENCY() != latency)
 8005434:	4b07      	ldr	r3, [pc, #28]	; (8005454 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8005436:	681b      	ldr	r3, [r3, #0]
 8005438:	f003 0307 	and.w	r3, r3, #7
 800543c:	693a      	ldr	r2, [r7, #16]
 800543e:	429a      	cmp	r2, r3
 8005440:	d001      	beq.n	8005446 <RCC_SetFlashLatencyFromMSIRange+0xae>
  {
    return HAL_ERROR;
 8005442:	2301      	movs	r3, #1
 8005444:	e000      	b.n	8005448 <RCC_SetFlashLatencyFromMSIRange+0xb0>
  }

  return HAL_OK;
 8005446:	2300      	movs	r3, #0
}
 8005448:	4618      	mov	r0, r3
 800544a:	3718      	adds	r7, #24
 800544c:	46bd      	mov	sp, r7
 800544e:	bd80      	pop	{r7, pc}
 8005450:	40021000 	.word	0x40021000
 8005454:	40022000 	.word	0x40022000

08005458 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8005458:	b580      	push	{r7, lr}
 800545a:	b086      	sub	sp, #24
 800545c:	af00      	add	r7, sp, #0
 800545e:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister, tickstart;     /* no init needed */
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8005460:	2300      	movs	r3, #0
 8005462:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8005464:	2300      	movs	r3, #0
 8005466:	74bb      	strb	r3, [r7, #18]
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

#if defined(SAI1)

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1))
 8005468:	687b      	ldr	r3, [r7, #4]
 800546a:	681b      	ldr	r3, [r3, #0]
 800546c:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8005470:	2b00      	cmp	r3, #0
 8005472:	d041      	beq.n	80054f8 <HAL_RCCEx_PeriphCLKConfig+0xa0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLK(PeriphClkInit->Sai1ClockSelection));

    switch(PeriphClkInit->Sai1ClockSelection)
 8005474:	687b      	ldr	r3, [r7, #4]
 8005476:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8005478:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 800547c:	d02a      	beq.n	80054d4 <HAL_RCCEx_PeriphCLKConfig+0x7c>
 800547e:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 8005482:	d824      	bhi.n	80054ce <HAL_RCCEx_PeriphCLKConfig+0x76>
 8005484:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8005488:	d008      	beq.n	800549c <HAL_RCCEx_PeriphCLKConfig+0x44>
 800548a:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 800548e:	d81e      	bhi.n	80054ce <HAL_RCCEx_PeriphCLKConfig+0x76>
 8005490:	2b00      	cmp	r3, #0
 8005492:	d00a      	beq.n	80054aa <HAL_RCCEx_PeriphCLKConfig+0x52>
 8005494:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8005498:	d010      	beq.n	80054bc <HAL_RCCEx_PeriphCLKConfig+0x64>
 800549a:	e018      	b.n	80054ce <HAL_RCCEx_PeriphCLKConfig+0x76>
    {
    case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
      /* Enable SAI Clock output generated from System PLL . */
#if defined(RCC_PLLSAI2_SUPPORT)
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 800549c:	4b86      	ldr	r3, [pc, #536]	; (80056b8 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800549e:	68db      	ldr	r3, [r3, #12]
 80054a0:	4a85      	ldr	r2, [pc, #532]	; (80056b8 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80054a2:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80054a6:	60d3      	str	r3, [r2, #12]
#else
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI2CLK);
#endif /* RCC_PLLSAI2_SUPPORT */
      /* SAI1 clock source config set later after clock selection check */
      break;
 80054a8:	e015      	b.n	80054d6 <HAL_RCCEx_PeriphCLKConfig+0x7e>

    case RCC_SAI1CLKSOURCE_PLLSAI1:  /* PLLSAI1 is used as clock source for SAI1*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 80054aa:	687b      	ldr	r3, [r7, #4]
 80054ac:	3304      	adds	r3, #4
 80054ae:	2100      	movs	r1, #0
 80054b0:	4618      	mov	r0, r3
 80054b2:	f000 facb 	bl	8005a4c <RCCEx_PLLSAI1_Config>
 80054b6:	4603      	mov	r3, r0
 80054b8:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 80054ba:	e00c      	b.n	80054d6 <HAL_RCCEx_PeriphCLKConfig+0x7e>

#if defined(RCC_PLLSAI2_SUPPORT)

    case RCC_SAI1CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI1*/
      /* PLLSAI2 input clock, parameters M, N & P configuration clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 80054bc:	687b      	ldr	r3, [r7, #4]
 80054be:	3320      	adds	r3, #32
 80054c0:	2100      	movs	r1, #0
 80054c2:	4618      	mov	r0, r3
 80054c4:	f000 fbb6 	bl	8005c34 <RCCEx_PLLSAI2_Config>
 80054c8:	4603      	mov	r3, r0
 80054ca:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 80054cc:	e003      	b.n	80054d6 <HAL_RCCEx_PeriphCLKConfig+0x7e>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI1 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 80054ce:	2301      	movs	r3, #1
 80054d0:	74fb      	strb	r3, [r7, #19]
      break;
 80054d2:	e000      	b.n	80054d6 <HAL_RCCEx_PeriphCLKConfig+0x7e>
      break;
 80054d4:	bf00      	nop
    }

    if(ret == HAL_OK)
 80054d6:	7cfb      	ldrb	r3, [r7, #19]
 80054d8:	2b00      	cmp	r3, #0
 80054da:	d10b      	bne.n	80054f4 <HAL_RCCEx_PeriphCLKConfig+0x9c>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 80054dc:	4b76      	ldr	r3, [pc, #472]	; (80056b8 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80054de:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80054e2:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 80054e6:	687b      	ldr	r3, [r7, #4]
 80054e8:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80054ea:	4973      	ldr	r1, [pc, #460]	; (80056b8 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80054ec:	4313      	orrs	r3, r2
 80054ee:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
 80054f2:	e001      	b.n	80054f8 <HAL_RCCEx_PeriphCLKConfig+0xa0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80054f4:	7cfb      	ldrb	r3, [r7, #19]
 80054f6:	74bb      	strb	r3, [r7, #18]
#endif /* SAI1 */

#if defined(SAI2)

  /*-------------------------- SAI2 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2))
 80054f8:	687b      	ldr	r3, [r7, #4]
 80054fa:	681b      	ldr	r3, [r3, #0]
 80054fc:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8005500:	2b00      	cmp	r3, #0
 8005502:	d041      	beq.n	8005588 <HAL_RCCEx_PeriphCLKConfig+0x130>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLK(PeriphClkInit->Sai2ClockSelection));

    switch(PeriphClkInit->Sai2ClockSelection)
 8005504:	687b      	ldr	r3, [r7, #4]
 8005506:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8005508:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 800550c:	d02a      	beq.n	8005564 <HAL_RCCEx_PeriphCLKConfig+0x10c>
 800550e:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 8005512:	d824      	bhi.n	800555e <HAL_RCCEx_PeriphCLKConfig+0x106>
 8005514:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8005518:	d008      	beq.n	800552c <HAL_RCCEx_PeriphCLKConfig+0xd4>
 800551a:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800551e:	d81e      	bhi.n	800555e <HAL_RCCEx_PeriphCLKConfig+0x106>
 8005520:	2b00      	cmp	r3, #0
 8005522:	d00a      	beq.n	800553a <HAL_RCCEx_PeriphCLKConfig+0xe2>
 8005524:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8005528:	d010      	beq.n	800554c <HAL_RCCEx_PeriphCLKConfig+0xf4>
 800552a:	e018      	b.n	800555e <HAL_RCCEx_PeriphCLKConfig+0x106>
    {
    case RCC_SAI2CLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
      /* Enable SAI Clock output generated from System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 800552c:	4b62      	ldr	r3, [pc, #392]	; (80056b8 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800552e:	68db      	ldr	r3, [r3, #12]
 8005530:	4a61      	ldr	r2, [pc, #388]	; (80056b8 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8005532:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8005536:	60d3      	str	r3, [r2, #12]
      /* SAI2 clock source config set later after clock selection check */
      break;
 8005538:	e015      	b.n	8005566 <HAL_RCCEx_PeriphCLKConfig+0x10e>

    case RCC_SAI2CLKSOURCE_PLLSAI1: /* PLLSAI1 is used as clock source for SAI2*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 800553a:	687b      	ldr	r3, [r7, #4]
 800553c:	3304      	adds	r3, #4
 800553e:	2100      	movs	r1, #0
 8005540:	4618      	mov	r0, r3
 8005542:	f000 fa83 	bl	8005a4c <RCCEx_PLLSAI1_Config>
 8005546:	4603      	mov	r3, r0
 8005548:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 800554a:	e00c      	b.n	8005566 <HAL_RCCEx_PeriphCLKConfig+0x10e>

    case RCC_SAI2CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI2*/
      /* PLLSAI2 input clock, parameters M, N & P configuration and clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 800554c:	687b      	ldr	r3, [r7, #4]
 800554e:	3320      	adds	r3, #32
 8005550:	2100      	movs	r1, #0
 8005552:	4618      	mov	r0, r3
 8005554:	f000 fb6e 	bl	8005c34 <RCCEx_PLLSAI2_Config>
 8005558:	4603      	mov	r3, r0
 800555a:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 800555c:	e003      	b.n	8005566 <HAL_RCCEx_PeriphCLKConfig+0x10e>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI2 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 800555e:	2301      	movs	r3, #1
 8005560:	74fb      	strb	r3, [r7, #19]
      break;
 8005562:	e000      	b.n	8005566 <HAL_RCCEx_PeriphCLKConfig+0x10e>
      break;
 8005564:	bf00      	nop
    }

    if(ret == HAL_OK)
 8005566:	7cfb      	ldrb	r3, [r7, #19]
 8005568:	2b00      	cmp	r3, #0
 800556a:	d10b      	bne.n	8005584 <HAL_RCCEx_PeriphCLKConfig+0x12c>
    {
      /* Set the source of SAI2 clock*/
      __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 800556c:	4b52      	ldr	r3, [pc, #328]	; (80056b8 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800556e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005572:	f023 7240 	bic.w	r2, r3, #50331648	; 0x3000000
 8005576:	687b      	ldr	r3, [r7, #4]
 8005578:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800557a:	494f      	ldr	r1, [pc, #316]	; (80056b8 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800557c:	4313      	orrs	r3, r2
 800557e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
 8005582:	e001      	b.n	8005588 <HAL_RCCEx_PeriphCLKConfig+0x130>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005584:	7cfb      	ldrb	r3, [r7, #19]
 8005586:	74bb      	strb	r3, [r7, #18]
    }
  }
#endif /* SAI2 */

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8005588:	687b      	ldr	r3, [r7, #4]
 800558a:	681b      	ldr	r3, [r3, #0]
 800558c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005590:	2b00      	cmp	r3, #0
 8005592:	f000 80a0 	beq.w	80056d6 <HAL_RCCEx_PeriphCLKConfig+0x27e>
  {
    FlagStatus       pwrclkchanged = RESET;
 8005596:	2300      	movs	r3, #0
 8005598:	747b      	strb	r3, [r7, #17]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 800559a:	4b47      	ldr	r3, [pc, #284]	; (80056b8 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800559c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800559e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80055a2:	2b00      	cmp	r3, #0
 80055a4:	d101      	bne.n	80055aa <HAL_RCCEx_PeriphCLKConfig+0x152>
 80055a6:	2301      	movs	r3, #1
 80055a8:	e000      	b.n	80055ac <HAL_RCCEx_PeriphCLKConfig+0x154>
 80055aa:	2300      	movs	r3, #0
 80055ac:	2b00      	cmp	r3, #0
 80055ae:	d00d      	beq.n	80055cc <HAL_RCCEx_PeriphCLKConfig+0x174>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80055b0:	4b41      	ldr	r3, [pc, #260]	; (80056b8 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80055b2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80055b4:	4a40      	ldr	r2, [pc, #256]	; (80056b8 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80055b6:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80055ba:	6593      	str	r3, [r2, #88]	; 0x58
 80055bc:	4b3e      	ldr	r3, [pc, #248]	; (80056b8 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80055be:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80055c0:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80055c4:	60bb      	str	r3, [r7, #8]
 80055c6:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80055c8:	2301      	movs	r3, #1
 80055ca:	747b      	strb	r3, [r7, #17]
    }

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 80055cc:	4b3b      	ldr	r3, [pc, #236]	; (80056bc <HAL_RCCEx_PeriphCLKConfig+0x264>)
 80055ce:	681b      	ldr	r3, [r3, #0]
 80055d0:	4a3a      	ldr	r2, [pc, #232]	; (80056bc <HAL_RCCEx_PeriphCLKConfig+0x264>)
 80055d2:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80055d6:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 80055d8:	f7fd fb64 	bl	8002ca4 <HAL_GetTick>
 80055dc:	60f8      	str	r0, [r7, #12]

    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 80055de:	e009      	b.n	80055f4 <HAL_RCCEx_PeriphCLKConfig+0x19c>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80055e0:	f7fd fb60 	bl	8002ca4 <HAL_GetTick>
 80055e4:	4602      	mov	r2, r0
 80055e6:	68fb      	ldr	r3, [r7, #12]
 80055e8:	1ad3      	subs	r3, r2, r3
 80055ea:	2b02      	cmp	r3, #2
 80055ec:	d902      	bls.n	80055f4 <HAL_RCCEx_PeriphCLKConfig+0x19c>
      {
        ret = HAL_TIMEOUT;
 80055ee:	2303      	movs	r3, #3
 80055f0:	74fb      	strb	r3, [r7, #19]
        break;
 80055f2:	e005      	b.n	8005600 <HAL_RCCEx_PeriphCLKConfig+0x1a8>
    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 80055f4:	4b31      	ldr	r3, [pc, #196]	; (80056bc <HAL_RCCEx_PeriphCLKConfig+0x264>)
 80055f6:	681b      	ldr	r3, [r3, #0]
 80055f8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80055fc:	2b00      	cmp	r3, #0
 80055fe:	d0ef      	beq.n	80055e0 <HAL_RCCEx_PeriphCLKConfig+0x188>
      }
    }

    if(ret == HAL_OK)
 8005600:	7cfb      	ldrb	r3, [r7, #19]
 8005602:	2b00      	cmp	r3, #0
 8005604:	d15c      	bne.n	80056c0 <HAL_RCCEx_PeriphCLKConfig+0x268>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 8005606:	4b2c      	ldr	r3, [pc, #176]	; (80056b8 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8005608:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800560c:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8005610:	617b      	str	r3, [r7, #20]

      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 8005612:	697b      	ldr	r3, [r7, #20]
 8005614:	2b00      	cmp	r3, #0
 8005616:	d01f      	beq.n	8005658 <HAL_RCCEx_PeriphCLKConfig+0x200>
 8005618:	687b      	ldr	r3, [r7, #4]
 800561a:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800561e:	697a      	ldr	r2, [r7, #20]
 8005620:	429a      	cmp	r2, r3
 8005622:	d019      	beq.n	8005658 <HAL_RCCEx_PeriphCLKConfig+0x200>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 8005624:	4b24      	ldr	r3, [pc, #144]	; (80056b8 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8005626:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800562a:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800562e:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8005630:	4b21      	ldr	r3, [pc, #132]	; (80056b8 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8005632:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005636:	4a20      	ldr	r2, [pc, #128]	; (80056b8 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8005638:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800563c:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 8005640:	4b1d      	ldr	r3, [pc, #116]	; (80056b8 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8005642:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005646:	4a1c      	ldr	r2, [pc, #112]	; (80056b8 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8005648:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800564c:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 8005650:	4a19      	ldr	r2, [pc, #100]	; (80056b8 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8005652:	697b      	ldr	r3, [r7, #20]
 8005654:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 8005658:	697b      	ldr	r3, [r7, #20]
 800565a:	f003 0301 	and.w	r3, r3, #1
 800565e:	2b00      	cmp	r3, #0
 8005660:	d016      	beq.n	8005690 <HAL_RCCEx_PeriphCLKConfig+0x238>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005662:	f7fd fb1f 	bl	8002ca4 <HAL_GetTick>
 8005666:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8005668:	e00b      	b.n	8005682 <HAL_RCCEx_PeriphCLKConfig+0x22a>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800566a:	f7fd fb1b 	bl	8002ca4 <HAL_GetTick>
 800566e:	4602      	mov	r2, r0
 8005670:	68fb      	ldr	r3, [r7, #12]
 8005672:	1ad3      	subs	r3, r2, r3
 8005674:	f241 3288 	movw	r2, #5000	; 0x1388
 8005678:	4293      	cmp	r3, r2
 800567a:	d902      	bls.n	8005682 <HAL_RCCEx_PeriphCLKConfig+0x22a>
          {
            ret = HAL_TIMEOUT;
 800567c:	2303      	movs	r3, #3
 800567e:	74fb      	strb	r3, [r7, #19]
            break;
 8005680:	e006      	b.n	8005690 <HAL_RCCEx_PeriphCLKConfig+0x238>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8005682:	4b0d      	ldr	r3, [pc, #52]	; (80056b8 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8005684:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005688:	f003 0302 	and.w	r3, r3, #2
 800568c:	2b00      	cmp	r3, #0
 800568e:	d0ec      	beq.n	800566a <HAL_RCCEx_PeriphCLKConfig+0x212>
          }
        }
      }

      if(ret == HAL_OK)
 8005690:	7cfb      	ldrb	r3, [r7, #19]
 8005692:	2b00      	cmp	r3, #0
 8005694:	d10c      	bne.n	80056b0 <HAL_RCCEx_PeriphCLKConfig+0x258>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8005696:	4b08      	ldr	r3, [pc, #32]	; (80056b8 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8005698:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800569c:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 80056a0:	687b      	ldr	r3, [r7, #4]
 80056a2:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80056a6:	4904      	ldr	r1, [pc, #16]	; (80056b8 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80056a8:	4313      	orrs	r3, r2
 80056aa:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
 80056ae:	e009      	b.n	80056c4 <HAL_RCCEx_PeriphCLKConfig+0x26c>
      }
      else
      {
        /* set overall return value */
        status = ret;
 80056b0:	7cfb      	ldrb	r3, [r7, #19]
 80056b2:	74bb      	strb	r3, [r7, #18]
 80056b4:	e006      	b.n	80056c4 <HAL_RCCEx_PeriphCLKConfig+0x26c>
 80056b6:	bf00      	nop
 80056b8:	40021000 	.word	0x40021000
 80056bc:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 80056c0:	7cfb      	ldrb	r3, [r7, #19]
 80056c2:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 80056c4:	7c7b      	ldrb	r3, [r7, #17]
 80056c6:	2b01      	cmp	r3, #1
 80056c8:	d105      	bne.n	80056d6 <HAL_RCCEx_PeriphCLKConfig+0x27e>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80056ca:	4b9e      	ldr	r3, [pc, #632]	; (8005944 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80056cc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80056ce:	4a9d      	ldr	r2, [pc, #628]	; (8005944 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80056d0:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80056d4:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 80056d6:	687b      	ldr	r3, [r7, #4]
 80056d8:	681b      	ldr	r3, [r3, #0]
 80056da:	f003 0301 	and.w	r3, r3, #1
 80056de:	2b00      	cmp	r3, #0
 80056e0:	d00a      	beq.n	80056f8 <HAL_RCCEx_PeriphCLKConfig+0x2a0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 80056e2:	4b98      	ldr	r3, [pc, #608]	; (8005944 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80056e4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80056e8:	f023 0203 	bic.w	r2, r3, #3
 80056ec:	687b      	ldr	r3, [r7, #4]
 80056ee:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80056f0:	4994      	ldr	r1, [pc, #592]	; (8005944 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80056f2:	4313      	orrs	r3, r2
 80056f4:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 80056f8:	687b      	ldr	r3, [r7, #4]
 80056fa:	681b      	ldr	r3, [r3, #0]
 80056fc:	f003 0302 	and.w	r3, r3, #2
 8005700:	2b00      	cmp	r3, #0
 8005702:	d00a      	beq.n	800571a <HAL_RCCEx_PeriphCLKConfig+0x2c2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8005704:	4b8f      	ldr	r3, [pc, #572]	; (8005944 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8005706:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800570a:	f023 020c 	bic.w	r2, r3, #12
 800570e:	687b      	ldr	r3, [r7, #4]
 8005710:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005712:	498c      	ldr	r1, [pc, #560]	; (8005944 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8005714:	4313      	orrs	r3, r2
 8005716:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(USART3)

  /*-------------------------- USART3 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 800571a:	687b      	ldr	r3, [r7, #4]
 800571c:	681b      	ldr	r3, [r3, #0]
 800571e:	f003 0304 	and.w	r3, r3, #4
 8005722:	2b00      	cmp	r3, #0
 8005724:	d00a      	beq.n	800573c <HAL_RCCEx_PeriphCLKConfig+0x2e4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 8005726:	4b87      	ldr	r3, [pc, #540]	; (8005944 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8005728:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800572c:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 8005730:	687b      	ldr	r3, [r7, #4]
 8005732:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005734:	4983      	ldr	r1, [pc, #524]	; (8005944 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8005736:	4313      	orrs	r3, r2
 8005738:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* USART3 */

#if defined(UART4)

  /*-------------------------- UART4 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 800573c:	687b      	ldr	r3, [r7, #4]
 800573e:	681b      	ldr	r3, [r3, #0]
 8005740:	f003 0308 	and.w	r3, r3, #8
 8005744:	2b00      	cmp	r3, #0
 8005746:	d00a      	beq.n	800575e <HAL_RCCEx_PeriphCLKConfig+0x306>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 8005748:	4b7e      	ldr	r3, [pc, #504]	; (8005944 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800574a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800574e:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 8005752:	687b      	ldr	r3, [r7, #4]
 8005754:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005756:	497b      	ldr	r1, [pc, #492]	; (8005944 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8005758:	4313      	orrs	r3, r2
 800575a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* UART4 */

#if defined(UART5)

  /*-------------------------- UART5 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 800575e:	687b      	ldr	r3, [r7, #4]
 8005760:	681b      	ldr	r3, [r3, #0]
 8005762:	f003 0310 	and.w	r3, r3, #16
 8005766:	2b00      	cmp	r3, #0
 8005768:	d00a      	beq.n	8005780 <HAL_RCCEx_PeriphCLKConfig+0x328>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 800576a:	4b76      	ldr	r3, [pc, #472]	; (8005944 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800576c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005770:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8005774:	687b      	ldr	r3, [r7, #4]
 8005776:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8005778:	4972      	ldr	r1, [pc, #456]	; (8005944 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800577a:	4313      	orrs	r3, r2
 800577c:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8005780:	687b      	ldr	r3, [r7, #4]
 8005782:	681b      	ldr	r3, [r3, #0]
 8005784:	f003 0320 	and.w	r3, r3, #32
 8005788:	2b00      	cmp	r3, #0
 800578a:	d00a      	beq.n	80057a2 <HAL_RCCEx_PeriphCLKConfig+0x34a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUART1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 800578c:	4b6d      	ldr	r3, [pc, #436]	; (8005944 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800578e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005792:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 8005796:	687b      	ldr	r3, [r7, #4]
 8005798:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800579a:	496a      	ldr	r1, [pc, #424]	; (8005944 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800579c:	4313      	orrs	r3, r2
 800579e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 80057a2:	687b      	ldr	r3, [r7, #4]
 80057a4:	681b      	ldr	r3, [r3, #0]
 80057a6:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80057aa:	2b00      	cmp	r3, #0
 80057ac:	d00a      	beq.n	80057c4 <HAL_RCCEx_PeriphCLKConfig+0x36c>
  {
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 80057ae:	4b65      	ldr	r3, [pc, #404]	; (8005944 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80057b0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80057b4:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 80057b8:	687b      	ldr	r3, [r7, #4]
 80057ba:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80057bc:	4961      	ldr	r1, [pc, #388]	; (8005944 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80057be:	4313      	orrs	r3, r2
 80057c0:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 80057c4:	687b      	ldr	r3, [r7, #4]
 80057c6:	681b      	ldr	r3, [r3, #0]
 80057c8:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80057cc:	2b00      	cmp	r3, #0
 80057ce:	d00a      	beq.n	80057e6 <HAL_RCCEx_PeriphCLKConfig+0x38e>
  {
    assert_param(IS_RCC_LPTIM2CLK(PeriphClkInit->Lptim2ClockSelection));
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 80057d0:	4b5c      	ldr	r3, [pc, #368]	; (8005944 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80057d2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80057d6:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 80057da:	687b      	ldr	r3, [r7, #4]
 80057dc:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80057de:	4959      	ldr	r1, [pc, #356]	; (8005944 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80057e0:	4313      	orrs	r3, r2
 80057e2:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 80057e6:	687b      	ldr	r3, [r7, #4]
 80057e8:	681b      	ldr	r3, [r3, #0]
 80057ea:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80057ee:	2b00      	cmp	r3, #0
 80057f0:	d00a      	beq.n	8005808 <HAL_RCCEx_PeriphCLKConfig+0x3b0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 80057f2:	4b54      	ldr	r3, [pc, #336]	; (8005944 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80057f4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80057f8:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 80057fc:	687b      	ldr	r3, [r7, #4]
 80057fe:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005800:	4950      	ldr	r1, [pc, #320]	; (8005944 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8005802:	4313      	orrs	r3, r2
 8005804:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(I2C2)

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8005808:	687b      	ldr	r3, [r7, #4]
 800580a:	681b      	ldr	r3, [r3, #0]
 800580c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005810:	2b00      	cmp	r3, #0
 8005812:	d00a      	beq.n	800582a <HAL_RCCEx_PeriphCLKConfig+0x3d2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8005814:	4b4b      	ldr	r3, [pc, #300]	; (8005944 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8005816:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800581a:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 800581e:	687b      	ldr	r3, [r7, #4]
 8005820:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005822:	4948      	ldr	r1, [pc, #288]	; (8005944 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8005824:	4313      	orrs	r3, r2
 8005826:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* I2C2 */

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 800582a:	687b      	ldr	r3, [r7, #4]
 800582c:	681b      	ldr	r3, [r3, #0]
 800582e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005832:	2b00      	cmp	r3, #0
 8005834:	d00a      	beq.n	800584c <HAL_RCCEx_PeriphCLKConfig+0x3f4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8005836:	4b43      	ldr	r3, [pc, #268]	; (8005944 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8005838:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800583c:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8005840:	687b      	ldr	r3, [r7, #4]
 8005842:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005844:	493f      	ldr	r1, [pc, #252]	; (8005944 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8005846:	4313      	orrs	r3, r2
 8005848:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* I2C4 */

#if defined(USB_OTG_FS) || defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 800584c:	687b      	ldr	r3, [r7, #4]
 800584e:	681b      	ldr	r3, [r3, #0]
 8005850:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8005854:	2b00      	cmp	r3, #0
 8005856:	d028      	beq.n	80058aa <HAL_RCCEx_PeriphCLKConfig+0x452>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8005858:	4b3a      	ldr	r3, [pc, #232]	; (8005944 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800585a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800585e:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8005862:	687b      	ldr	r3, [r7, #4]
 8005864:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8005866:	4937      	ldr	r1, [pc, #220]	; (8005944 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8005868:	4313      	orrs	r3, r2
 800586a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 800586e:	687b      	ldr	r3, [r7, #4]
 8005870:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8005872:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8005876:	d106      	bne.n	8005886 <HAL_RCCEx_PeriphCLKConfig+0x42e>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8005878:	4b32      	ldr	r3, [pc, #200]	; (8005944 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800587a:	68db      	ldr	r3, [r3, #12]
 800587c:	4a31      	ldr	r2, [pc, #196]	; (8005944 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800587e:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8005882:	60d3      	str	r3, [r2, #12]
 8005884:	e011      	b.n	80058aa <HAL_RCCEx_PeriphCLKConfig+0x452>
    }
    else
    {
#if defined(RCC_PLLSAI1_SUPPORT)
      if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLLSAI1)
 8005886:	687b      	ldr	r3, [r7, #4]
 8005888:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800588a:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 800588e:	d10c      	bne.n	80058aa <HAL_RCCEx_PeriphCLKConfig+0x452>
      {
        /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
        ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8005890:	687b      	ldr	r3, [r7, #4]
 8005892:	3304      	adds	r3, #4
 8005894:	2101      	movs	r1, #1
 8005896:	4618      	mov	r0, r3
 8005898:	f000 f8d8 	bl	8005a4c <RCCEx_PLLSAI1_Config>
 800589c:	4603      	mov	r3, r0
 800589e:	74fb      	strb	r3, [r7, #19]

        if(ret != HAL_OK)
 80058a0:	7cfb      	ldrb	r3, [r7, #19]
 80058a2:	2b00      	cmp	r3, #0
 80058a4:	d001      	beq.n	80058aa <HAL_RCCEx_PeriphCLKConfig+0x452>
        {
          /* set overall return value */
          status = ret;
 80058a6:	7cfb      	ldrb	r3, [r7, #19]
 80058a8:	74bb      	strb	r3, [r7, #18]
#endif /* USB_OTG_FS || USB */

#if defined(SDMMC1)

  /*-------------------------- SDMMC1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == (RCC_PERIPHCLK_SDMMC1))
 80058aa:	687b      	ldr	r3, [r7, #4]
 80058ac:	681b      	ldr	r3, [r3, #0]
 80058ae:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80058b2:	2b00      	cmp	r3, #0
 80058b4:	d028      	beq.n	8005908 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
  {
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 80058b6:	4b23      	ldr	r3, [pc, #140]	; (8005944 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80058b8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80058bc:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 80058c0:	687b      	ldr	r3, [r7, #4]
 80058c2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80058c4:	491f      	ldr	r1, [pc, #124]	; (8005944 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80058c6:	4313      	orrs	r3, r2
 80058c8:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLL)   /* PLL "Q" ? */
 80058cc:	687b      	ldr	r3, [r7, #4]
 80058ce:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80058d0:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 80058d4:	d106      	bne.n	80058e4 <HAL_RCCEx_PeriphCLKConfig+0x48c>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80058d6:	4b1b      	ldr	r3, [pc, #108]	; (8005944 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80058d8:	68db      	ldr	r3, [r3, #12]
 80058da:	4a1a      	ldr	r2, [pc, #104]	; (8005944 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80058dc:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80058e0:	60d3      	str	r3, [r2, #12]
 80058e2:	e011      	b.n	8005908 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
    {
      /* Enable PLLSAI3CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
    }
#endif
    else if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLLSAI1)
 80058e4:	687b      	ldr	r3, [r7, #4]
 80058e6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80058e8:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 80058ec:	d10c      	bne.n	8005908 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 80058ee:	687b      	ldr	r3, [r7, #4]
 80058f0:	3304      	adds	r3, #4
 80058f2:	2101      	movs	r1, #1
 80058f4:	4618      	mov	r0, r3
 80058f6:	f000 f8a9 	bl	8005a4c <RCCEx_PLLSAI1_Config>
 80058fa:	4603      	mov	r3, r0
 80058fc:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 80058fe:	7cfb      	ldrb	r3, [r7, #19]
 8005900:	2b00      	cmp	r3, #0
 8005902:	d001      	beq.n	8005908 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
      {
        /* set overall return value */
        status = ret;
 8005904:	7cfb      	ldrb	r3, [r7, #19]
 8005906:	74bb      	strb	r3, [r7, #18]
  }

#endif /* SDMMC1 */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 8005908:	687b      	ldr	r3, [r7, #4]
 800590a:	681b      	ldr	r3, [r3, #0]
 800590c:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8005910:	2b00      	cmp	r3, #0
 8005912:	d02b      	beq.n	800596c <HAL_RCCEx_PeriphCLKConfig+0x514>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8005914:	4b0b      	ldr	r3, [pc, #44]	; (8005944 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8005916:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800591a:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 800591e:	687b      	ldr	r3, [r7, #4]
 8005920:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8005922:	4908      	ldr	r1, [pc, #32]	; (8005944 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8005924:	4313      	orrs	r3, r2
 8005926:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 800592a:	687b      	ldr	r3, [r7, #4]
 800592c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800592e:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8005932:	d109      	bne.n	8005948 <HAL_RCCEx_PeriphCLKConfig+0x4f0>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8005934:	4b03      	ldr	r3, [pc, #12]	; (8005944 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8005936:	68db      	ldr	r3, [r3, #12]
 8005938:	4a02      	ldr	r2, [pc, #8]	; (8005944 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800593a:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800593e:	60d3      	str	r3, [r2, #12]
 8005940:	e014      	b.n	800596c <HAL_RCCEx_PeriphCLKConfig+0x514>
 8005942:	bf00      	nop
 8005944:	40021000 	.word	0x40021000
    }
#if defined(RCC_PLLSAI1_SUPPORT)
    else if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLLSAI1)
 8005948:	687b      	ldr	r3, [r7, #4]
 800594a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800594c:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8005950:	d10c      	bne.n	800596c <HAL_RCCEx_PeriphCLKConfig+0x514>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8005952:	687b      	ldr	r3, [r7, #4]
 8005954:	3304      	adds	r3, #4
 8005956:	2101      	movs	r1, #1
 8005958:	4618      	mov	r0, r3
 800595a:	f000 f877 	bl	8005a4c <RCCEx_PLLSAI1_Config>
 800595e:	4603      	mov	r3, r0
 8005960:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8005962:	7cfb      	ldrb	r3, [r7, #19]
 8005964:	2b00      	cmp	r3, #0
 8005966:	d001      	beq.n	800596c <HAL_RCCEx_PeriphCLKConfig+0x514>
      {
        /* set overall return value */
        status = ret;
 8005968:	7cfb      	ldrb	r3, [r7, #19]
 800596a:	74bb      	strb	r3, [r7, #18]
    }
  }

  /*-------------------------- ADC clock source configuration ----------------------*/
#if !defined(STM32L412xx) && !defined(STM32L422xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 800596c:	687b      	ldr	r3, [r7, #4]
 800596e:	681b      	ldr	r3, [r3, #0]
 8005970:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8005974:	2b00      	cmp	r3, #0
 8005976:	d02f      	beq.n	80059d8 <HAL_RCCEx_PeriphCLKConfig+0x580>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8005978:	4b2b      	ldr	r3, [pc, #172]	; (8005a28 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 800597a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800597e:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 8005982:	687b      	ldr	r3, [r7, #4]
 8005984:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8005986:	4928      	ldr	r1, [pc, #160]	; (8005a28 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8005988:	4313      	orrs	r3, r2
 800598a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

#if defined(RCC_PLLSAI1_SUPPORT)
    if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI1)
 800598e:	687b      	ldr	r3, [r7, #4]
 8005990:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8005992:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8005996:	d10d      	bne.n	80059b4 <HAL_RCCEx_PeriphCLKConfig+0x55c>
    {
      /* PLLSAI1 input clock, parameters M, N & R configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_R_UPDATE);
 8005998:	687b      	ldr	r3, [r7, #4]
 800599a:	3304      	adds	r3, #4
 800599c:	2102      	movs	r1, #2
 800599e:	4618      	mov	r0, r3
 80059a0:	f000 f854 	bl	8005a4c <RCCEx_PLLSAI1_Config>
 80059a4:	4603      	mov	r3, r0
 80059a6:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 80059a8:	7cfb      	ldrb	r3, [r7, #19]
 80059aa:	2b00      	cmp	r3, #0
 80059ac:	d014      	beq.n	80059d8 <HAL_RCCEx_PeriphCLKConfig+0x580>
      {
        /* set overall return value */
        status = ret;
 80059ae:	7cfb      	ldrb	r3, [r7, #19]
 80059b0:	74bb      	strb	r3, [r7, #18]
 80059b2:	e011      	b.n	80059d8 <HAL_RCCEx_PeriphCLKConfig+0x580>
    }
#endif /* RCC_PLLSAI1_SUPPORT */

#if defined(STM32L471xx) || defined(STM32L475xx) || defined(STM32L476xx) || defined(STM32L485xx) || defined(STM32L486xx) || defined(STM32L496xx) || defined(STM32L4A6xx)

    else if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI2)
 80059b4:	687b      	ldr	r3, [r7, #4]
 80059b6:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80059b8:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80059bc:	d10c      	bne.n	80059d8 <HAL_RCCEx_PeriphCLKConfig+0x580>
    {
      /* PLLSAI2 input clock, parameters M, N & R configuration and clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_R_UPDATE);
 80059be:	687b      	ldr	r3, [r7, #4]
 80059c0:	3320      	adds	r3, #32
 80059c2:	2102      	movs	r1, #2
 80059c4:	4618      	mov	r0, r3
 80059c6:	f000 f935 	bl	8005c34 <RCCEx_PLLSAI2_Config>
 80059ca:	4603      	mov	r3, r0
 80059cc:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 80059ce:	7cfb      	ldrb	r3, [r7, #19]
 80059d0:	2b00      	cmp	r3, #0
 80059d2:	d001      	beq.n	80059d8 <HAL_RCCEx_PeriphCLKConfig+0x580>
      {
        /* set overall return value */
        status = ret;
 80059d4:	7cfb      	ldrb	r3, [r7, #19]
 80059d6:	74bb      	strb	r3, [r7, #18]
#endif /* !STM32L412xx && !STM32L422xx */

#if defined(SWPMI1)

  /*-------------------------- SWPMI1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 80059d8:	687b      	ldr	r3, [r7, #4]
 80059da:	681b      	ldr	r3, [r3, #0]
 80059dc:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80059e0:	2b00      	cmp	r3, #0
 80059e2:	d00a      	beq.n	80059fa <HAL_RCCEx_PeriphCLKConfig+0x5a2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 80059e4:	4b10      	ldr	r3, [pc, #64]	; (8005a28 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 80059e6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80059ea:	f023 4280 	bic.w	r2, r3, #1073741824	; 0x40000000
 80059ee:	687b      	ldr	r3, [r7, #4]
 80059f0:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80059f2:	490d      	ldr	r1, [pc, #52]	; (8005a28 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 80059f4:	4313      	orrs	r3, r2
 80059f6:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* SWPMI1 */

#if defined(DFSDM1_Filter0)

  /*-------------------------- DFSDM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 80059fa:	687b      	ldr	r3, [r7, #4]
 80059fc:	681b      	ldr	r3, [r3, #0]
 80059fe:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8005a02:	2b00      	cmp	r3, #0
 8005a04:	d00b      	beq.n	8005a1e <HAL_RCCEx_PeriphCLKConfig+0x5c6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 8005a06:	4b08      	ldr	r3, [pc, #32]	; (8005a28 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8005a08:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005a0c:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 8005a10:	687b      	ldr	r3, [r7, #4]
 8005a12:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8005a16:	4904      	ldr	r1, [pc, #16]	; (8005a28 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8005a18:	4313      	orrs	r3, r2
 8005a1a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    }
  }

#endif /* OCTOSPI1 || OCTOSPI2 */

  return status;
 8005a1e:	7cbb      	ldrb	r3, [r7, #18]
}
 8005a20:	4618      	mov	r0, r3
 8005a22:	3718      	adds	r7, #24
 8005a24:	46bd      	mov	sp, r7
 8005a26:	bd80      	pop	{r7, pc}
 8005a28:	40021000 	.word	0x40021000

08005a2c <HAL_RCCEx_EnableMSIPLLMode>:
  * @note   Prior to enable the PLL-mode of the MSI for automatic hardware
  *         calibration LSE oscillator is to be enabled with HAL_RCC_OscConfig().
  * @retval None
  */
void HAL_RCCEx_EnableMSIPLLMode(void)
{
 8005a2c:	b480      	push	{r7}
 8005a2e:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_MSIPLLEN) ;
 8005a30:	4b05      	ldr	r3, [pc, #20]	; (8005a48 <HAL_RCCEx_EnableMSIPLLMode+0x1c>)
 8005a32:	681b      	ldr	r3, [r3, #0]
 8005a34:	4a04      	ldr	r2, [pc, #16]	; (8005a48 <HAL_RCCEx_EnableMSIPLLMode+0x1c>)
 8005a36:	f043 0304 	orr.w	r3, r3, #4
 8005a3a:	6013      	str	r3, [r2, #0]
}
 8005a3c:	bf00      	nop
 8005a3e:	46bd      	mov	sp, r7
 8005a40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a44:	4770      	bx	lr
 8005a46:	bf00      	nop
 8005a48:	40021000 	.word	0x40021000

08005a4c <RCCEx_PLLSAI1_Config>:
  * @note   PLLSAI1 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI1_Config(RCC_PLLSAI1InitTypeDef *PllSai1, uint32_t Divider)
{
 8005a4c:	b580      	push	{r7, lr}
 8005a4e:	b084      	sub	sp, #16
 8005a50:	af00      	add	r7, sp, #0
 8005a52:	6078      	str	r0, [r7, #4]
 8005a54:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8005a56:	2300      	movs	r3, #0
 8005a58:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI1M_VALUE(PllSai1->PLLSAI1M));
  assert_param(IS_RCC_PLLSAI1N_VALUE(PllSai1->PLLSAI1N));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(PllSai1->PLLSAI1ClockOut));

  /* Check that PLLSAI1 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 8005a5a:	4b75      	ldr	r3, [pc, #468]	; (8005c30 <RCCEx_PLLSAI1_Config+0x1e4>)
 8005a5c:	68db      	ldr	r3, [r3, #12]
 8005a5e:	f003 0303 	and.w	r3, r3, #3
 8005a62:	2b00      	cmp	r3, #0
 8005a64:	d018      	beq.n	8005a98 <RCCEx_PLLSAI1_Config+0x4c>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai1->PLLSAI1Source)
 8005a66:	4b72      	ldr	r3, [pc, #456]	; (8005c30 <RCCEx_PLLSAI1_Config+0x1e4>)
 8005a68:	68db      	ldr	r3, [r3, #12]
 8005a6a:	f003 0203 	and.w	r2, r3, #3
 8005a6e:	687b      	ldr	r3, [r7, #4]
 8005a70:	681b      	ldr	r3, [r3, #0]
 8005a72:	429a      	cmp	r2, r3
 8005a74:	d10d      	bne.n	8005a92 <RCCEx_PLLSAI1_Config+0x46>
       ||
       (PllSai1->PLLSAI1Source == RCC_PLLSOURCE_NONE)
 8005a76:	687b      	ldr	r3, [r7, #4]
 8005a78:	681b      	ldr	r3, [r3, #0]
       ||
 8005a7a:	2b00      	cmp	r3, #0
 8005a7c:	d009      	beq.n	8005a92 <RCCEx_PLLSAI1_Config+0x46>
#if !defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai1->PLLSAI1M)
 8005a7e:	4b6c      	ldr	r3, [pc, #432]	; (8005c30 <RCCEx_PLLSAI1_Config+0x1e4>)
 8005a80:	68db      	ldr	r3, [r3, #12]
 8005a82:	091b      	lsrs	r3, r3, #4
 8005a84:	f003 0307 	and.w	r3, r3, #7
 8005a88:	1c5a      	adds	r2, r3, #1
 8005a8a:	687b      	ldr	r3, [r7, #4]
 8005a8c:	685b      	ldr	r3, [r3, #4]
       ||
 8005a8e:	429a      	cmp	r2, r3
 8005a90:	d047      	beq.n	8005b22 <RCCEx_PLLSAI1_Config+0xd6>
#endif
      )
    {
      status = HAL_ERROR;
 8005a92:	2301      	movs	r3, #1
 8005a94:	73fb      	strb	r3, [r7, #15]
 8005a96:	e044      	b.n	8005b22 <RCCEx_PLLSAI1_Config+0xd6>
    }
  }
  else
  {
    /* Check PLLSAI1 clock source availability */
    switch(PllSai1->PLLSAI1Source)
 8005a98:	687b      	ldr	r3, [r7, #4]
 8005a9a:	681b      	ldr	r3, [r3, #0]
 8005a9c:	2b03      	cmp	r3, #3
 8005a9e:	d018      	beq.n	8005ad2 <RCCEx_PLLSAI1_Config+0x86>
 8005aa0:	2b03      	cmp	r3, #3
 8005aa2:	d825      	bhi.n	8005af0 <RCCEx_PLLSAI1_Config+0xa4>
 8005aa4:	2b01      	cmp	r3, #1
 8005aa6:	d002      	beq.n	8005aae <RCCEx_PLLSAI1_Config+0x62>
 8005aa8:	2b02      	cmp	r3, #2
 8005aaa:	d009      	beq.n	8005ac0 <RCCEx_PLLSAI1_Config+0x74>
 8005aac:	e020      	b.n	8005af0 <RCCEx_PLLSAI1_Config+0xa4>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 8005aae:	4b60      	ldr	r3, [pc, #384]	; (8005c30 <RCCEx_PLLSAI1_Config+0x1e4>)
 8005ab0:	681b      	ldr	r3, [r3, #0]
 8005ab2:	f003 0302 	and.w	r3, r3, #2
 8005ab6:	2b00      	cmp	r3, #0
 8005ab8:	d11d      	bne.n	8005af6 <RCCEx_PLLSAI1_Config+0xaa>
      {
        status = HAL_ERROR;
 8005aba:	2301      	movs	r3, #1
 8005abc:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8005abe:	e01a      	b.n	8005af6 <RCCEx_PLLSAI1_Config+0xaa>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 8005ac0:	4b5b      	ldr	r3, [pc, #364]	; (8005c30 <RCCEx_PLLSAI1_Config+0x1e4>)
 8005ac2:	681b      	ldr	r3, [r3, #0]
 8005ac4:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8005ac8:	2b00      	cmp	r3, #0
 8005aca:	d116      	bne.n	8005afa <RCCEx_PLLSAI1_Config+0xae>
      {
        status = HAL_ERROR;
 8005acc:	2301      	movs	r3, #1
 8005ace:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8005ad0:	e013      	b.n	8005afa <RCCEx_PLLSAI1_Config+0xae>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 8005ad2:	4b57      	ldr	r3, [pc, #348]	; (8005c30 <RCCEx_PLLSAI1_Config+0x1e4>)
 8005ad4:	681b      	ldr	r3, [r3, #0]
 8005ad6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005ada:	2b00      	cmp	r3, #0
 8005adc:	d10f      	bne.n	8005afe <RCCEx_PLLSAI1_Config+0xb2>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 8005ade:	4b54      	ldr	r3, [pc, #336]	; (8005c30 <RCCEx_PLLSAI1_Config+0x1e4>)
 8005ae0:	681b      	ldr	r3, [r3, #0]
 8005ae2:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8005ae6:	2b00      	cmp	r3, #0
 8005ae8:	d109      	bne.n	8005afe <RCCEx_PLLSAI1_Config+0xb2>
        {
          status = HAL_ERROR;
 8005aea:	2301      	movs	r3, #1
 8005aec:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 8005aee:	e006      	b.n	8005afe <RCCEx_PLLSAI1_Config+0xb2>
    default:
      status = HAL_ERROR;
 8005af0:	2301      	movs	r3, #1
 8005af2:	73fb      	strb	r3, [r7, #15]
      break;
 8005af4:	e004      	b.n	8005b00 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 8005af6:	bf00      	nop
 8005af8:	e002      	b.n	8005b00 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 8005afa:	bf00      	nop
 8005afc:	e000      	b.n	8005b00 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 8005afe:	bf00      	nop
    }

    if(status == HAL_OK)
 8005b00:	7bfb      	ldrb	r3, [r7, #15]
 8005b02:	2b00      	cmp	r3, #0
 8005b04:	d10d      	bne.n	8005b22 <RCCEx_PLLSAI1_Config+0xd6>
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
      /* Set PLLSAI1 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai1->PLLSAI1Source);
#else
      /* Set PLLSAI1 clock source and divider M */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai1->PLLSAI1Source | (PllSai1->PLLSAI1M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 8005b06:	4b4a      	ldr	r3, [pc, #296]	; (8005c30 <RCCEx_PLLSAI1_Config+0x1e4>)
 8005b08:	68db      	ldr	r3, [r3, #12]
 8005b0a:	f023 0273 	bic.w	r2, r3, #115	; 0x73
 8005b0e:	687b      	ldr	r3, [r7, #4]
 8005b10:	6819      	ldr	r1, [r3, #0]
 8005b12:	687b      	ldr	r3, [r7, #4]
 8005b14:	685b      	ldr	r3, [r3, #4]
 8005b16:	3b01      	subs	r3, #1
 8005b18:	011b      	lsls	r3, r3, #4
 8005b1a:	430b      	orrs	r3, r1
 8005b1c:	4944      	ldr	r1, [pc, #272]	; (8005c30 <RCCEx_PLLSAI1_Config+0x1e4>)
 8005b1e:	4313      	orrs	r3, r2
 8005b20:	60cb      	str	r3, [r1, #12]
#endif
    }
  }

  if(status == HAL_OK)
 8005b22:	7bfb      	ldrb	r3, [r7, #15]
 8005b24:	2b00      	cmp	r3, #0
 8005b26:	d17d      	bne.n	8005c24 <RCCEx_PLLSAI1_Config+0x1d8>
  {
    /* Disable the PLLSAI1 */
    __HAL_RCC_PLLSAI1_DISABLE();
 8005b28:	4b41      	ldr	r3, [pc, #260]	; (8005c30 <RCCEx_PLLSAI1_Config+0x1e4>)
 8005b2a:	681b      	ldr	r3, [r3, #0]
 8005b2c:	4a40      	ldr	r2, [pc, #256]	; (8005c30 <RCCEx_PLLSAI1_Config+0x1e4>)
 8005b2e:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 8005b32:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8005b34:	f7fd f8b6 	bl	8002ca4 <HAL_GetTick>
 8005b38:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI1 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 8005b3a:	e009      	b.n	8005b50 <RCCEx_PLLSAI1_Config+0x104>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8005b3c:	f7fd f8b2 	bl	8002ca4 <HAL_GetTick>
 8005b40:	4602      	mov	r2, r0
 8005b42:	68bb      	ldr	r3, [r7, #8]
 8005b44:	1ad3      	subs	r3, r2, r3
 8005b46:	2b02      	cmp	r3, #2
 8005b48:	d902      	bls.n	8005b50 <RCCEx_PLLSAI1_Config+0x104>
      {
        status = HAL_TIMEOUT;
 8005b4a:	2303      	movs	r3, #3
 8005b4c:	73fb      	strb	r3, [r7, #15]
        break;
 8005b4e:	e005      	b.n	8005b5c <RCCEx_PLLSAI1_Config+0x110>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 8005b50:	4b37      	ldr	r3, [pc, #220]	; (8005c30 <RCCEx_PLLSAI1_Config+0x1e4>)
 8005b52:	681b      	ldr	r3, [r3, #0]
 8005b54:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8005b58:	2b00      	cmp	r3, #0
 8005b5a:	d1ef      	bne.n	8005b3c <RCCEx_PLLSAI1_Config+0xf0>
      }
    }

    if(status == HAL_OK)
 8005b5c:	7bfb      	ldrb	r3, [r7, #15]
 8005b5e:	2b00      	cmp	r3, #0
 8005b60:	d160      	bne.n	8005c24 <RCCEx_PLLSAI1_Config+0x1d8>
    {
      if(Divider == DIVIDER_P_UPDATE)
 8005b62:	683b      	ldr	r3, [r7, #0]
 8005b64:	2b00      	cmp	r3, #0
 8005b66:	d111      	bne.n	8005b8c <RCCEx_PLLSAI1_Config+0x140>
        MODIFY_REG(RCC->PLLSAI1CFGR,
                   RCC_PLLSAI1CFGR_PLLSAI1N | RCC_PLLSAI1CFGR_PLLSAI1PDIV,
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (PllSai1->PLLSAI1P << RCC_PLLSAI1CFGR_PLLSAI1PDIV_Pos));
#else
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8005b68:	4b31      	ldr	r3, [pc, #196]	; (8005c30 <RCCEx_PLLSAI1_Config+0x1e4>)
 8005b6a:	691b      	ldr	r3, [r3, #16]
 8005b6c:	f423 331f 	bic.w	r3, r3, #162816	; 0x27c00
 8005b70:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8005b74:	687a      	ldr	r2, [r7, #4]
 8005b76:	6892      	ldr	r2, [r2, #8]
 8005b78:	0211      	lsls	r1, r2, #8
 8005b7a:	687a      	ldr	r2, [r7, #4]
 8005b7c:	68d2      	ldr	r2, [r2, #12]
 8005b7e:	0912      	lsrs	r2, r2, #4
 8005b80:	0452      	lsls	r2, r2, #17
 8005b82:	430a      	orrs	r2, r1
 8005b84:	492a      	ldr	r1, [pc, #168]	; (8005c30 <RCCEx_PLLSAI1_Config+0x1e4>)
 8005b86:	4313      	orrs	r3, r2
 8005b88:	610b      	str	r3, [r1, #16]
 8005b8a:	e027      	b.n	8005bdc <RCCEx_PLLSAI1_Config+0x190>
                   ((PllSai1->PLLSAI1P >> 4U) << RCC_PLLSAI1CFGR_PLLSAI1P_Pos));
#endif /* RCC_PLLSAI1P_DIV_2_31_SUPPORT */

#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }
      else if(Divider == DIVIDER_Q_UPDATE)
 8005b8c:	683b      	ldr	r3, [r7, #0]
 8005b8e:	2b01      	cmp	r3, #1
 8005b90:	d112      	bne.n	8005bb8 <RCCEx_PLLSAI1_Config+0x16c>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1Q >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1Q_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor Q and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8005b92:	4b27      	ldr	r3, [pc, #156]	; (8005c30 <RCCEx_PLLSAI1_Config+0x1e4>)
 8005b94:	691b      	ldr	r3, [r3, #16]
 8005b96:	f423 03c0 	bic.w	r3, r3, #6291456	; 0x600000
 8005b9a:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 8005b9e:	687a      	ldr	r2, [r7, #4]
 8005ba0:	6892      	ldr	r2, [r2, #8]
 8005ba2:	0211      	lsls	r1, r2, #8
 8005ba4:	687a      	ldr	r2, [r7, #4]
 8005ba6:	6912      	ldr	r2, [r2, #16]
 8005ba8:	0852      	lsrs	r2, r2, #1
 8005baa:	3a01      	subs	r2, #1
 8005bac:	0552      	lsls	r2, r2, #21
 8005bae:	430a      	orrs	r2, r1
 8005bb0:	491f      	ldr	r1, [pc, #124]	; (8005c30 <RCCEx_PLLSAI1_Config+0x1e4>)
 8005bb2:	4313      	orrs	r3, r2
 8005bb4:	610b      	str	r3, [r1, #16]
 8005bb6:	e011      	b.n	8005bdc <RCCEx_PLLSAI1_Config+0x190>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8005bb8:	4b1d      	ldr	r3, [pc, #116]	; (8005c30 <RCCEx_PLLSAI1_Config+0x1e4>)
 8005bba:	691b      	ldr	r3, [r3, #16]
 8005bbc:	f023 63c0 	bic.w	r3, r3, #100663296	; 0x6000000
 8005bc0:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 8005bc4:	687a      	ldr	r2, [r7, #4]
 8005bc6:	6892      	ldr	r2, [r2, #8]
 8005bc8:	0211      	lsls	r1, r2, #8
 8005bca:	687a      	ldr	r2, [r7, #4]
 8005bcc:	6952      	ldr	r2, [r2, #20]
 8005bce:	0852      	lsrs	r2, r2, #1
 8005bd0:	3a01      	subs	r2, #1
 8005bd2:	0652      	lsls	r2, r2, #25
 8005bd4:	430a      	orrs	r2, r1
 8005bd6:	4916      	ldr	r1, [pc, #88]	; (8005c30 <RCCEx_PLLSAI1_Config+0x1e4>)
 8005bd8:	4313      	orrs	r3, r2
 8005bda:	610b      	str	r3, [r1, #16]
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos));
#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI1 again by setting PLLSAI1ON to 1*/
      __HAL_RCC_PLLSAI1_ENABLE();
 8005bdc:	4b14      	ldr	r3, [pc, #80]	; (8005c30 <RCCEx_PLLSAI1_Config+0x1e4>)
 8005bde:	681b      	ldr	r3, [r3, #0]
 8005be0:	4a13      	ldr	r2, [pc, #76]	; (8005c30 <RCCEx_PLLSAI1_Config+0x1e4>)
 8005be2:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8005be6:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005be8:	f7fd f85c 	bl	8002ca4 <HAL_GetTick>
 8005bec:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI1 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 8005bee:	e009      	b.n	8005c04 <RCCEx_PLLSAI1_Config+0x1b8>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8005bf0:	f7fd f858 	bl	8002ca4 <HAL_GetTick>
 8005bf4:	4602      	mov	r2, r0
 8005bf6:	68bb      	ldr	r3, [r7, #8]
 8005bf8:	1ad3      	subs	r3, r2, r3
 8005bfa:	2b02      	cmp	r3, #2
 8005bfc:	d902      	bls.n	8005c04 <RCCEx_PLLSAI1_Config+0x1b8>
        {
          status = HAL_TIMEOUT;
 8005bfe:	2303      	movs	r3, #3
 8005c00:	73fb      	strb	r3, [r7, #15]
          break;
 8005c02:	e005      	b.n	8005c10 <RCCEx_PLLSAI1_Config+0x1c4>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 8005c04:	4b0a      	ldr	r3, [pc, #40]	; (8005c30 <RCCEx_PLLSAI1_Config+0x1e4>)
 8005c06:	681b      	ldr	r3, [r3, #0]
 8005c08:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8005c0c:	2b00      	cmp	r3, #0
 8005c0e:	d0ef      	beq.n	8005bf0 <RCCEx_PLLSAI1_Config+0x1a4>
        }
      }

      if(status == HAL_OK)
 8005c10:	7bfb      	ldrb	r3, [r7, #15]
 8005c12:	2b00      	cmp	r3, #0
 8005c14:	d106      	bne.n	8005c24 <RCCEx_PLLSAI1_Config+0x1d8>
      {
        /* Configure the PLLSAI1 Clock output(s) */
        __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PllSai1->PLLSAI1ClockOut);
 8005c16:	4b06      	ldr	r3, [pc, #24]	; (8005c30 <RCCEx_PLLSAI1_Config+0x1e4>)
 8005c18:	691a      	ldr	r2, [r3, #16]
 8005c1a:	687b      	ldr	r3, [r7, #4]
 8005c1c:	699b      	ldr	r3, [r3, #24]
 8005c1e:	4904      	ldr	r1, [pc, #16]	; (8005c30 <RCCEx_PLLSAI1_Config+0x1e4>)
 8005c20:	4313      	orrs	r3, r2
 8005c22:	610b      	str	r3, [r1, #16]
      }
    }
  }

  return status;
 8005c24:	7bfb      	ldrb	r3, [r7, #15]
}
 8005c26:	4618      	mov	r0, r3
 8005c28:	3710      	adds	r7, #16
 8005c2a:	46bd      	mov	sp, r7
 8005c2c:	bd80      	pop	{r7, pc}
 8005c2e:	bf00      	nop
 8005c30:	40021000 	.word	0x40021000

08005c34 <RCCEx_PLLSAI2_Config>:
  * @note   PLLSAI2 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI2_Config(RCC_PLLSAI2InitTypeDef *PllSai2, uint32_t Divider)
{
 8005c34:	b580      	push	{r7, lr}
 8005c36:	b084      	sub	sp, #16
 8005c38:	af00      	add	r7, sp, #0
 8005c3a:	6078      	str	r0, [r7, #4]
 8005c3c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8005c3e:	2300      	movs	r3, #0
 8005c40:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI2M_VALUE(PllSai2->PLLSAI2M));
  assert_param(IS_RCC_PLLSAI2N_VALUE(PllSai2->PLLSAI2N));
  assert_param(IS_RCC_PLLSAI2CLOCKOUT_VALUE(PllSai2->PLLSAI2ClockOut));

  /* Check that PLLSAI2 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 8005c42:	4b6a      	ldr	r3, [pc, #424]	; (8005dec <RCCEx_PLLSAI2_Config+0x1b8>)
 8005c44:	68db      	ldr	r3, [r3, #12]
 8005c46:	f003 0303 	and.w	r3, r3, #3
 8005c4a:	2b00      	cmp	r3, #0
 8005c4c:	d018      	beq.n	8005c80 <RCCEx_PLLSAI2_Config+0x4c>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai2->PLLSAI2Source)
 8005c4e:	4b67      	ldr	r3, [pc, #412]	; (8005dec <RCCEx_PLLSAI2_Config+0x1b8>)
 8005c50:	68db      	ldr	r3, [r3, #12]
 8005c52:	f003 0203 	and.w	r2, r3, #3
 8005c56:	687b      	ldr	r3, [r7, #4]
 8005c58:	681b      	ldr	r3, [r3, #0]
 8005c5a:	429a      	cmp	r2, r3
 8005c5c:	d10d      	bne.n	8005c7a <RCCEx_PLLSAI2_Config+0x46>
       ||
       (PllSai2->PLLSAI2Source == RCC_PLLSOURCE_NONE)
 8005c5e:	687b      	ldr	r3, [r7, #4]
 8005c60:	681b      	ldr	r3, [r3, #0]
       ||
 8005c62:	2b00      	cmp	r3, #0
 8005c64:	d009      	beq.n	8005c7a <RCCEx_PLLSAI2_Config+0x46>
#if !defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai2->PLLSAI2M)
 8005c66:	4b61      	ldr	r3, [pc, #388]	; (8005dec <RCCEx_PLLSAI2_Config+0x1b8>)
 8005c68:	68db      	ldr	r3, [r3, #12]
 8005c6a:	091b      	lsrs	r3, r3, #4
 8005c6c:	f003 0307 	and.w	r3, r3, #7
 8005c70:	1c5a      	adds	r2, r3, #1
 8005c72:	687b      	ldr	r3, [r7, #4]
 8005c74:	685b      	ldr	r3, [r3, #4]
       ||
 8005c76:	429a      	cmp	r2, r3
 8005c78:	d047      	beq.n	8005d0a <RCCEx_PLLSAI2_Config+0xd6>
#endif
      )
    {
      status = HAL_ERROR;
 8005c7a:	2301      	movs	r3, #1
 8005c7c:	73fb      	strb	r3, [r7, #15]
 8005c7e:	e044      	b.n	8005d0a <RCCEx_PLLSAI2_Config+0xd6>
    }
  }
  else
  {
    /* Check PLLSAI2 clock source availability */
    switch(PllSai2->PLLSAI2Source)
 8005c80:	687b      	ldr	r3, [r7, #4]
 8005c82:	681b      	ldr	r3, [r3, #0]
 8005c84:	2b03      	cmp	r3, #3
 8005c86:	d018      	beq.n	8005cba <RCCEx_PLLSAI2_Config+0x86>
 8005c88:	2b03      	cmp	r3, #3
 8005c8a:	d825      	bhi.n	8005cd8 <RCCEx_PLLSAI2_Config+0xa4>
 8005c8c:	2b01      	cmp	r3, #1
 8005c8e:	d002      	beq.n	8005c96 <RCCEx_PLLSAI2_Config+0x62>
 8005c90:	2b02      	cmp	r3, #2
 8005c92:	d009      	beq.n	8005ca8 <RCCEx_PLLSAI2_Config+0x74>
 8005c94:	e020      	b.n	8005cd8 <RCCEx_PLLSAI2_Config+0xa4>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 8005c96:	4b55      	ldr	r3, [pc, #340]	; (8005dec <RCCEx_PLLSAI2_Config+0x1b8>)
 8005c98:	681b      	ldr	r3, [r3, #0]
 8005c9a:	f003 0302 	and.w	r3, r3, #2
 8005c9e:	2b00      	cmp	r3, #0
 8005ca0:	d11d      	bne.n	8005cde <RCCEx_PLLSAI2_Config+0xaa>
      {
        status = HAL_ERROR;
 8005ca2:	2301      	movs	r3, #1
 8005ca4:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8005ca6:	e01a      	b.n	8005cde <RCCEx_PLLSAI2_Config+0xaa>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 8005ca8:	4b50      	ldr	r3, [pc, #320]	; (8005dec <RCCEx_PLLSAI2_Config+0x1b8>)
 8005caa:	681b      	ldr	r3, [r3, #0]
 8005cac:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8005cb0:	2b00      	cmp	r3, #0
 8005cb2:	d116      	bne.n	8005ce2 <RCCEx_PLLSAI2_Config+0xae>
      {
        status = HAL_ERROR;
 8005cb4:	2301      	movs	r3, #1
 8005cb6:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8005cb8:	e013      	b.n	8005ce2 <RCCEx_PLLSAI2_Config+0xae>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 8005cba:	4b4c      	ldr	r3, [pc, #304]	; (8005dec <RCCEx_PLLSAI2_Config+0x1b8>)
 8005cbc:	681b      	ldr	r3, [r3, #0]
 8005cbe:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005cc2:	2b00      	cmp	r3, #0
 8005cc4:	d10f      	bne.n	8005ce6 <RCCEx_PLLSAI2_Config+0xb2>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 8005cc6:	4b49      	ldr	r3, [pc, #292]	; (8005dec <RCCEx_PLLSAI2_Config+0x1b8>)
 8005cc8:	681b      	ldr	r3, [r3, #0]
 8005cca:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8005cce:	2b00      	cmp	r3, #0
 8005cd0:	d109      	bne.n	8005ce6 <RCCEx_PLLSAI2_Config+0xb2>
        {
          status = HAL_ERROR;
 8005cd2:	2301      	movs	r3, #1
 8005cd4:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 8005cd6:	e006      	b.n	8005ce6 <RCCEx_PLLSAI2_Config+0xb2>
    default:
      status = HAL_ERROR;
 8005cd8:	2301      	movs	r3, #1
 8005cda:	73fb      	strb	r3, [r7, #15]
      break;
 8005cdc:	e004      	b.n	8005ce8 <RCCEx_PLLSAI2_Config+0xb4>
      break;
 8005cde:	bf00      	nop
 8005ce0:	e002      	b.n	8005ce8 <RCCEx_PLLSAI2_Config+0xb4>
      break;
 8005ce2:	bf00      	nop
 8005ce4:	e000      	b.n	8005ce8 <RCCEx_PLLSAI2_Config+0xb4>
      break;
 8005ce6:	bf00      	nop
    }

    if(status == HAL_OK)
 8005ce8:	7bfb      	ldrb	r3, [r7, #15]
 8005cea:	2b00      	cmp	r3, #0
 8005cec:	d10d      	bne.n	8005d0a <RCCEx_PLLSAI2_Config+0xd6>
#if defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
      /* Set PLLSAI2 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai2->PLLSAI2Source);
#else
      /* Set PLLSAI2 clock source and divider M */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai2->PLLSAI2Source | (PllSai2->PLLSAI2M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 8005cee:	4b3f      	ldr	r3, [pc, #252]	; (8005dec <RCCEx_PLLSAI2_Config+0x1b8>)
 8005cf0:	68db      	ldr	r3, [r3, #12]
 8005cf2:	f023 0273 	bic.w	r2, r3, #115	; 0x73
 8005cf6:	687b      	ldr	r3, [r7, #4]
 8005cf8:	6819      	ldr	r1, [r3, #0]
 8005cfa:	687b      	ldr	r3, [r7, #4]
 8005cfc:	685b      	ldr	r3, [r3, #4]
 8005cfe:	3b01      	subs	r3, #1
 8005d00:	011b      	lsls	r3, r3, #4
 8005d02:	430b      	orrs	r3, r1
 8005d04:	4939      	ldr	r1, [pc, #228]	; (8005dec <RCCEx_PLLSAI2_Config+0x1b8>)
 8005d06:	4313      	orrs	r3, r2
 8005d08:	60cb      	str	r3, [r1, #12]
#endif
    }
  }

  if(status == HAL_OK)
 8005d0a:	7bfb      	ldrb	r3, [r7, #15]
 8005d0c:	2b00      	cmp	r3, #0
 8005d0e:	d167      	bne.n	8005de0 <RCCEx_PLLSAI2_Config+0x1ac>
  {
    /* Disable the PLLSAI2 */
    __HAL_RCC_PLLSAI2_DISABLE();
 8005d10:	4b36      	ldr	r3, [pc, #216]	; (8005dec <RCCEx_PLLSAI2_Config+0x1b8>)
 8005d12:	681b      	ldr	r3, [r3, #0]
 8005d14:	4a35      	ldr	r2, [pc, #212]	; (8005dec <RCCEx_PLLSAI2_Config+0x1b8>)
 8005d16:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8005d1a:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8005d1c:	f7fc ffc2 	bl	8002ca4 <HAL_GetTick>
 8005d20:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI2 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 8005d22:	e009      	b.n	8005d38 <RCCEx_PLLSAI2_Config+0x104>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 8005d24:	f7fc ffbe 	bl	8002ca4 <HAL_GetTick>
 8005d28:	4602      	mov	r2, r0
 8005d2a:	68bb      	ldr	r3, [r7, #8]
 8005d2c:	1ad3      	subs	r3, r2, r3
 8005d2e:	2b02      	cmp	r3, #2
 8005d30:	d902      	bls.n	8005d38 <RCCEx_PLLSAI2_Config+0x104>
      {
        status = HAL_TIMEOUT;
 8005d32:	2303      	movs	r3, #3
 8005d34:	73fb      	strb	r3, [r7, #15]
        break;
 8005d36:	e005      	b.n	8005d44 <RCCEx_PLLSAI2_Config+0x110>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 8005d38:	4b2c      	ldr	r3, [pc, #176]	; (8005dec <RCCEx_PLLSAI2_Config+0x1b8>)
 8005d3a:	681b      	ldr	r3, [r3, #0]
 8005d3c:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8005d40:	2b00      	cmp	r3, #0
 8005d42:	d1ef      	bne.n	8005d24 <RCCEx_PLLSAI2_Config+0xf0>
      }
    }

    if(status == HAL_OK)
 8005d44:	7bfb      	ldrb	r3, [r7, #15]
 8005d46:	2b00      	cmp	r3, #0
 8005d48:	d14a      	bne.n	8005de0 <RCCEx_PLLSAI2_Config+0x1ac>
    {
      if(Divider == DIVIDER_P_UPDATE)
 8005d4a:	683b      	ldr	r3, [r7, #0]
 8005d4c:	2b00      	cmp	r3, #0
 8005d4e:	d111      	bne.n	8005d74 <RCCEx_PLLSAI2_Config+0x140>
        MODIFY_REG(RCC->PLLSAI2CFGR,
                   RCC_PLLSAI2CFGR_PLLSAI2N | RCC_PLLSAI2CFGR_PLLSAI2PDIV,
                   (PllSai2->PLLSAI2N << RCC_PLLSAI2CFGR_PLLSAI2N_Pos) |
                   (PllSai2->PLLSAI2P << RCC_PLLSAI2CFGR_PLLSAI2PDIV_Pos));
#else
        MODIFY_REG(RCC->PLLSAI2CFGR,
 8005d50:	4b26      	ldr	r3, [pc, #152]	; (8005dec <RCCEx_PLLSAI2_Config+0x1b8>)
 8005d52:	695b      	ldr	r3, [r3, #20]
 8005d54:	f423 331f 	bic.w	r3, r3, #162816	; 0x27c00
 8005d58:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8005d5c:	687a      	ldr	r2, [r7, #4]
 8005d5e:	6892      	ldr	r2, [r2, #8]
 8005d60:	0211      	lsls	r1, r2, #8
 8005d62:	687a      	ldr	r2, [r7, #4]
 8005d64:	68d2      	ldr	r2, [r2, #12]
 8005d66:	0912      	lsrs	r2, r2, #4
 8005d68:	0452      	lsls	r2, r2, #17
 8005d6a:	430a      	orrs	r2, r1
 8005d6c:	491f      	ldr	r1, [pc, #124]	; (8005dec <RCCEx_PLLSAI2_Config+0x1b8>)
 8005d6e:	4313      	orrs	r3, r2
 8005d70:	614b      	str	r3, [r1, #20]
 8005d72:	e011      	b.n	8005d98 <RCCEx_PLLSAI2_Config+0x164>
                   (PllSai2->PLLSAI2N << RCC_PLLSAI2CFGR_PLLSAI2N_Pos) |
                   (((PllSai2->PLLSAI2R >> 1U) - 1U) << RCC_PLLSAI2CFGR_PLLSAI2R_Pos) |
                   ((PllSai2->PLLSAI2M - 1U) << RCC_PLLSAI2CFGR_PLLSAI2M_Pos));
#else
        /* Configure the PLLSAI2 Division factor R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI2CFGR,
 8005d74:	4b1d      	ldr	r3, [pc, #116]	; (8005dec <RCCEx_PLLSAI2_Config+0x1b8>)
 8005d76:	695b      	ldr	r3, [r3, #20]
 8005d78:	f023 63c0 	bic.w	r3, r3, #100663296	; 0x6000000
 8005d7c:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 8005d80:	687a      	ldr	r2, [r7, #4]
 8005d82:	6892      	ldr	r2, [r2, #8]
 8005d84:	0211      	lsls	r1, r2, #8
 8005d86:	687a      	ldr	r2, [r7, #4]
 8005d88:	6912      	ldr	r2, [r2, #16]
 8005d8a:	0852      	lsrs	r2, r2, #1
 8005d8c:	3a01      	subs	r2, #1
 8005d8e:	0652      	lsls	r2, r2, #25
 8005d90:	430a      	orrs	r2, r1
 8005d92:	4916      	ldr	r1, [pc, #88]	; (8005dec <RCCEx_PLLSAI2_Config+0x1b8>)
 8005d94:	4313      	orrs	r3, r2
 8005d96:	614b      	str	r3, [r1, #20]
                   (((PllSai2->PLLSAI2R >> 1U) - 1U) << RCC_PLLSAI2CFGR_PLLSAI2R_Pos));
#endif /* RCC_PLLSAI2M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI2 again by setting PLLSAI2ON to 1*/
      __HAL_RCC_PLLSAI2_ENABLE();
 8005d98:	4b14      	ldr	r3, [pc, #80]	; (8005dec <RCCEx_PLLSAI2_Config+0x1b8>)
 8005d9a:	681b      	ldr	r3, [r3, #0]
 8005d9c:	4a13      	ldr	r2, [pc, #76]	; (8005dec <RCCEx_PLLSAI2_Config+0x1b8>)
 8005d9e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8005da2:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005da4:	f7fc ff7e 	bl	8002ca4 <HAL_GetTick>
 8005da8:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI2 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 8005daa:	e009      	b.n	8005dc0 <RCCEx_PLLSAI2_Config+0x18c>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 8005dac:	f7fc ff7a 	bl	8002ca4 <HAL_GetTick>
 8005db0:	4602      	mov	r2, r0
 8005db2:	68bb      	ldr	r3, [r7, #8]
 8005db4:	1ad3      	subs	r3, r2, r3
 8005db6:	2b02      	cmp	r3, #2
 8005db8:	d902      	bls.n	8005dc0 <RCCEx_PLLSAI2_Config+0x18c>
        {
          status = HAL_TIMEOUT;
 8005dba:	2303      	movs	r3, #3
 8005dbc:	73fb      	strb	r3, [r7, #15]
          break;
 8005dbe:	e005      	b.n	8005dcc <RCCEx_PLLSAI2_Config+0x198>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 8005dc0:	4b0a      	ldr	r3, [pc, #40]	; (8005dec <RCCEx_PLLSAI2_Config+0x1b8>)
 8005dc2:	681b      	ldr	r3, [r3, #0]
 8005dc4:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8005dc8:	2b00      	cmp	r3, #0
 8005dca:	d0ef      	beq.n	8005dac <RCCEx_PLLSAI2_Config+0x178>
        }
      }

      if(status == HAL_OK)
 8005dcc:	7bfb      	ldrb	r3, [r7, #15]
 8005dce:	2b00      	cmp	r3, #0
 8005dd0:	d106      	bne.n	8005de0 <RCCEx_PLLSAI2_Config+0x1ac>
      {
        /* Configure the PLLSAI2 Clock output(s) */
        __HAL_RCC_PLLSAI2CLKOUT_ENABLE(PllSai2->PLLSAI2ClockOut);
 8005dd2:	4b06      	ldr	r3, [pc, #24]	; (8005dec <RCCEx_PLLSAI2_Config+0x1b8>)
 8005dd4:	695a      	ldr	r2, [r3, #20]
 8005dd6:	687b      	ldr	r3, [r7, #4]
 8005dd8:	695b      	ldr	r3, [r3, #20]
 8005dda:	4904      	ldr	r1, [pc, #16]	; (8005dec <RCCEx_PLLSAI2_Config+0x1b8>)
 8005ddc:	4313      	orrs	r3, r2
 8005dde:	614b      	str	r3, [r1, #20]
      }
    }
  }

  return status;
 8005de0:	7bfb      	ldrb	r3, [r7, #15]
}
 8005de2:	4618      	mov	r0, r3
 8005de4:	3710      	adds	r7, #16
 8005de6:	46bd      	mov	sp, r7
 8005de8:	bd80      	pop	{r7, pc}
 8005dea:	bf00      	nop
 8005dec:	40021000 	.word	0x40021000

08005df0 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8005df0:	b580      	push	{r7, lr}
 8005df2:	b084      	sub	sp, #16
 8005df4:	af00      	add	r7, sp, #0
 8005df6:	6078      	str	r0, [r7, #4]
  uint32_t frxth;

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8005df8:	687b      	ldr	r3, [r7, #4]
 8005dfa:	2b00      	cmp	r3, #0
 8005dfc:	d101      	bne.n	8005e02 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8005dfe:	2301      	movs	r3, #1
 8005e00:	e095      	b.n	8005f2e <HAL_SPI_Init+0x13e>
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_NSSP(hspi->Init.NSSPMode));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 8005e02:	687b      	ldr	r3, [r7, #4]
 8005e04:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005e06:	2b00      	cmp	r3, #0
 8005e08:	d108      	bne.n	8005e1c <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 8005e0a:	687b      	ldr	r3, [r7, #4]
 8005e0c:	685b      	ldr	r3, [r3, #4]
 8005e0e:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8005e12:	d009      	beq.n	8005e28 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8005e14:	687b      	ldr	r3, [r7, #4]
 8005e16:	2200      	movs	r2, #0
 8005e18:	61da      	str	r2, [r3, #28]
 8005e1a:	e005      	b.n	8005e28 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8005e1c:	687b      	ldr	r3, [r7, #4]
 8005e1e:	2200      	movs	r2, #0
 8005e20:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 8005e22:	687b      	ldr	r3, [r7, #4]
 8005e24:	2200      	movs	r2, #0
 8005e26:	615a      	str	r2, [r3, #20]
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
    assert_param(IS_SPI_CRC_LENGTH(hspi->Init.CRCLength));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8005e28:	687b      	ldr	r3, [r7, #4]
 8005e2a:	2200      	movs	r2, #0
 8005e2c:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8005e2e:	687b      	ldr	r3, [r7, #4]
 8005e30:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 8005e34:	b2db      	uxtb	r3, r3
 8005e36:	2b00      	cmp	r3, #0
 8005e38:	d106      	bne.n	8005e48 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8005e3a:	687b      	ldr	r3, [r7, #4]
 8005e3c:	2200      	movs	r2, #0
 8005e3e:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8005e42:	6878      	ldr	r0, [r7, #4]
 8005e44:	f7fc f86e 	bl	8001f24 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8005e48:	687b      	ldr	r3, [r7, #4]
 8005e4a:	2202      	movs	r2, #2
 8005e4c:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8005e50:	687b      	ldr	r3, [r7, #4]
 8005e52:	681b      	ldr	r3, [r3, #0]
 8005e54:	681a      	ldr	r2, [r3, #0]
 8005e56:	687b      	ldr	r3, [r7, #4]
 8005e58:	681b      	ldr	r3, [r3, #0]
 8005e5a:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8005e5e:	601a      	str	r2, [r3, #0]

  /* Align by default the rs fifo threshold on the data size */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8005e60:	687b      	ldr	r3, [r7, #4]
 8005e62:	68db      	ldr	r3, [r3, #12]
 8005e64:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8005e68:	d902      	bls.n	8005e70 <HAL_SPI_Init+0x80>
  {
    frxth = SPI_RXFIFO_THRESHOLD_HF;
 8005e6a:	2300      	movs	r3, #0
 8005e6c:	60fb      	str	r3, [r7, #12]
 8005e6e:	e002      	b.n	8005e76 <HAL_SPI_Init+0x86>
  }
  else
  {
    frxth = SPI_RXFIFO_THRESHOLD_QF;
 8005e70:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8005e74:	60fb      	str	r3, [r7, #12]
  }

  /* CRC calculation is valid only for 16Bit and 8 Bit */
  if ((hspi->Init.DataSize != SPI_DATASIZE_16BIT) && (hspi->Init.DataSize != SPI_DATASIZE_8BIT))
 8005e76:	687b      	ldr	r3, [r7, #4]
 8005e78:	68db      	ldr	r3, [r3, #12]
 8005e7a:	f5b3 6f70 	cmp.w	r3, #3840	; 0xf00
 8005e7e:	d007      	beq.n	8005e90 <HAL_SPI_Init+0xa0>
 8005e80:	687b      	ldr	r3, [r7, #4]
 8005e82:	68db      	ldr	r3, [r3, #12]
 8005e84:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8005e88:	d002      	beq.n	8005e90 <HAL_SPI_Init+0xa0>
  {
    /* CRC must be disabled */
    hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8005e8a:	687b      	ldr	r3, [r7, #4]
 8005e8c:	2200      	movs	r2, #0
 8005e8e:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8005e90:	687b      	ldr	r3, [r7, #4]
 8005e92:	685b      	ldr	r3, [r3, #4]
 8005e94:	f403 7282 	and.w	r2, r3, #260	; 0x104
 8005e98:	687b      	ldr	r3, [r7, #4]
 8005e9a:	689b      	ldr	r3, [r3, #8]
 8005e9c:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 8005ea0:	431a      	orrs	r2, r3
 8005ea2:	687b      	ldr	r3, [r7, #4]
 8005ea4:	691b      	ldr	r3, [r3, #16]
 8005ea6:	f003 0302 	and.w	r3, r3, #2
 8005eaa:	431a      	orrs	r2, r3
 8005eac:	687b      	ldr	r3, [r7, #4]
 8005eae:	695b      	ldr	r3, [r3, #20]
 8005eb0:	f003 0301 	and.w	r3, r3, #1
 8005eb4:	431a      	orrs	r2, r3
 8005eb6:	687b      	ldr	r3, [r7, #4]
 8005eb8:	699b      	ldr	r3, [r3, #24]
 8005eba:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8005ebe:	431a      	orrs	r2, r3
 8005ec0:	687b      	ldr	r3, [r7, #4]
 8005ec2:	69db      	ldr	r3, [r3, #28]
 8005ec4:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8005ec8:	431a      	orrs	r2, r3
 8005eca:	687b      	ldr	r3, [r7, #4]
 8005ecc:	6a1b      	ldr	r3, [r3, #32]
 8005ece:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005ed2:	ea42 0103 	orr.w	r1, r2, r3
 8005ed6:	687b      	ldr	r3, [r7, #4]
 8005ed8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005eda:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 8005ede:	687b      	ldr	r3, [r7, #4]
 8005ee0:	681b      	ldr	r3, [r3, #0]
 8005ee2:	430a      	orrs	r2, r1
 8005ee4:	601a      	str	r2, [r3, #0]
    }
  }
#endif /* USE_SPI_CRC */

  /* Configure : NSS management, TI Mode, NSS Pulse, Data size and Rx Fifo threshold */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) |
 8005ee6:	687b      	ldr	r3, [r7, #4]
 8005ee8:	699b      	ldr	r3, [r3, #24]
 8005eea:	0c1b      	lsrs	r3, r3, #16
 8005eec:	f003 0204 	and.w	r2, r3, #4
 8005ef0:	687b      	ldr	r3, [r7, #4]
 8005ef2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005ef4:	f003 0310 	and.w	r3, r3, #16
 8005ef8:	431a      	orrs	r2, r3
 8005efa:	687b      	ldr	r3, [r7, #4]
 8005efc:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005efe:	f003 0308 	and.w	r3, r3, #8
 8005f02:	431a      	orrs	r2, r3
 8005f04:	687b      	ldr	r3, [r7, #4]
 8005f06:	68db      	ldr	r3, [r3, #12]
 8005f08:	f403 6370 	and.w	r3, r3, #3840	; 0xf00
 8005f0c:	ea42 0103 	orr.w	r1, r2, r3
 8005f10:	68fb      	ldr	r3, [r7, #12]
 8005f12:	f403 5280 	and.w	r2, r3, #4096	; 0x1000
 8005f16:	687b      	ldr	r3, [r7, #4]
 8005f18:	681b      	ldr	r3, [r3, #0]
 8005f1a:	430a      	orrs	r2, r1
 8005f1c:	605a      	str	r2, [r3, #4]
#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8005f1e:	687b      	ldr	r3, [r7, #4]
 8005f20:	2200      	movs	r2, #0
 8005f22:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->State     = HAL_SPI_STATE_READY;
 8005f24:	687b      	ldr	r3, [r7, #4]
 8005f26:	2201      	movs	r2, #1
 8005f28:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

  return HAL_OK;
 8005f2c:	2300      	movs	r3, #0
}
 8005f2e:	4618      	mov	r0, r3
 8005f30:	3710      	adds	r7, #16
 8005f32:	46bd      	mov	sp, r7
 8005f34:	bd80      	pop	{r7, pc}

08005f36 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8005f36:	b580      	push	{r7, lr}
 8005f38:	b082      	sub	sp, #8
 8005f3a:	af00      	add	r7, sp, #0
 8005f3c:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8005f3e:	687b      	ldr	r3, [r7, #4]
 8005f40:	2b00      	cmp	r3, #0
 8005f42:	d101      	bne.n	8005f48 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8005f44:	2301      	movs	r3, #1
 8005f46:	e040      	b.n	8005fca <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8005f48:	687b      	ldr	r3, [r7, #4]
 8005f4a:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8005f4c:	2b00      	cmp	r3, #0
 8005f4e:	d106      	bne.n	8005f5e <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8005f50:	687b      	ldr	r3, [r7, #4]
 8005f52:	2200      	movs	r2, #0
 8005f54:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8005f58:	6878      	ldr	r0, [r7, #4]
 8005f5a:	f7fc f827 	bl	8001fac <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8005f5e:	687b      	ldr	r3, [r7, #4]
 8005f60:	2224      	movs	r2, #36	; 0x24
 8005f62:	679a      	str	r2, [r3, #120]	; 0x78

  __HAL_UART_DISABLE(huart);
 8005f64:	687b      	ldr	r3, [r7, #4]
 8005f66:	681b      	ldr	r3, [r3, #0]
 8005f68:	681a      	ldr	r2, [r3, #0]
 8005f6a:	687b      	ldr	r3, [r7, #4]
 8005f6c:	681b      	ldr	r3, [r3, #0]
 8005f6e:	f022 0201 	bic.w	r2, r2, #1
 8005f72:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8005f74:	6878      	ldr	r0, [r7, #4]
 8005f76:	f000 f8c1 	bl	80060fc <UART_SetConfig>
 8005f7a:	4603      	mov	r3, r0
 8005f7c:	2b01      	cmp	r3, #1
 8005f7e:	d101      	bne.n	8005f84 <HAL_UART_Init+0x4e>
  {
    return HAL_ERROR;
 8005f80:	2301      	movs	r3, #1
 8005f82:	e022      	b.n	8005fca <HAL_UART_Init+0x94>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8005f84:	687b      	ldr	r3, [r7, #4]
 8005f86:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005f88:	2b00      	cmp	r3, #0
 8005f8a:	d002      	beq.n	8005f92 <HAL_UART_Init+0x5c>
  {
    UART_AdvFeatureConfig(huart);
 8005f8c:	6878      	ldr	r0, [r7, #4]
 8005f8e:	f000 fb6d 	bl	800666c <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8005f92:	687b      	ldr	r3, [r7, #4]
 8005f94:	681b      	ldr	r3, [r3, #0]
 8005f96:	685a      	ldr	r2, [r3, #4]
 8005f98:	687b      	ldr	r3, [r7, #4]
 8005f9a:	681b      	ldr	r3, [r3, #0]
 8005f9c:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8005fa0:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8005fa2:	687b      	ldr	r3, [r7, #4]
 8005fa4:	681b      	ldr	r3, [r3, #0]
 8005fa6:	689a      	ldr	r2, [r3, #8]
 8005fa8:	687b      	ldr	r3, [r7, #4]
 8005faa:	681b      	ldr	r3, [r3, #0]
 8005fac:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8005fb0:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8005fb2:	687b      	ldr	r3, [r7, #4]
 8005fb4:	681b      	ldr	r3, [r3, #0]
 8005fb6:	681a      	ldr	r2, [r3, #0]
 8005fb8:	687b      	ldr	r3, [r7, #4]
 8005fba:	681b      	ldr	r3, [r3, #0]
 8005fbc:	f042 0201 	orr.w	r2, r2, #1
 8005fc0:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8005fc2:	6878      	ldr	r0, [r7, #4]
 8005fc4:	f000 fbf4 	bl	80067b0 <UART_CheckIdleState>
 8005fc8:	4603      	mov	r3, r0
}
 8005fca:	4618      	mov	r0, r3
 8005fcc:	3708      	adds	r7, #8
 8005fce:	46bd      	mov	sp, r7
 8005fd0:	bd80      	pop	{r7, pc}

08005fd2 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8005fd2:	b580      	push	{r7, lr}
 8005fd4:	b08a      	sub	sp, #40	; 0x28
 8005fd6:	af02      	add	r7, sp, #8
 8005fd8:	60f8      	str	r0, [r7, #12]
 8005fda:	60b9      	str	r1, [r7, #8]
 8005fdc:	603b      	str	r3, [r7, #0]
 8005fde:	4613      	mov	r3, r2
 8005fe0:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8005fe2:	68fb      	ldr	r3, [r7, #12]
 8005fe4:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8005fe6:	2b20      	cmp	r3, #32
 8005fe8:	f040 8082 	bne.w	80060f0 <HAL_UART_Transmit+0x11e>
  {
    if ((pData == NULL) || (Size == 0U))
 8005fec:	68bb      	ldr	r3, [r7, #8]
 8005fee:	2b00      	cmp	r3, #0
 8005ff0:	d002      	beq.n	8005ff8 <HAL_UART_Transmit+0x26>
 8005ff2:	88fb      	ldrh	r3, [r7, #6]
 8005ff4:	2b00      	cmp	r3, #0
 8005ff6:	d101      	bne.n	8005ffc <HAL_UART_Transmit+0x2a>
    {
      return  HAL_ERROR;
 8005ff8:	2301      	movs	r3, #1
 8005ffa:	e07a      	b.n	80060f2 <HAL_UART_Transmit+0x120>
    }

    __HAL_LOCK(huart);
 8005ffc:	68fb      	ldr	r3, [r7, #12]
 8005ffe:	f893 3074 	ldrb.w	r3, [r3, #116]	; 0x74
 8006002:	2b01      	cmp	r3, #1
 8006004:	d101      	bne.n	800600a <HAL_UART_Transmit+0x38>
 8006006:	2302      	movs	r3, #2
 8006008:	e073      	b.n	80060f2 <HAL_UART_Transmit+0x120>
 800600a:	68fb      	ldr	r3, [r7, #12]
 800600c:	2201      	movs	r2, #1
 800600e:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8006012:	68fb      	ldr	r3, [r7, #12]
 8006014:	2200      	movs	r2, #0
 8006016:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    huart->gState = HAL_UART_STATE_BUSY_TX;
 800601a:	68fb      	ldr	r3, [r7, #12]
 800601c:	2221      	movs	r2, #33	; 0x21
 800601e:	679a      	str	r2, [r3, #120]	; 0x78

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8006020:	f7fc fe40 	bl	8002ca4 <HAL_GetTick>
 8006024:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 8006026:	68fb      	ldr	r3, [r7, #12]
 8006028:	88fa      	ldrh	r2, [r7, #6]
 800602a:	f8a3 2050 	strh.w	r2, [r3, #80]	; 0x50
    huart->TxXferCount = Size;
 800602e:	68fb      	ldr	r3, [r7, #12]
 8006030:	88fa      	ldrh	r2, [r7, #6]
 8006032:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8006036:	68fb      	ldr	r3, [r7, #12]
 8006038:	689b      	ldr	r3, [r3, #8]
 800603a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800603e:	d108      	bne.n	8006052 <HAL_UART_Transmit+0x80>
 8006040:	68fb      	ldr	r3, [r7, #12]
 8006042:	691b      	ldr	r3, [r3, #16]
 8006044:	2b00      	cmp	r3, #0
 8006046:	d104      	bne.n	8006052 <HAL_UART_Transmit+0x80>
    {
      pdata8bits  = NULL;
 8006048:	2300      	movs	r3, #0
 800604a:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 800604c:	68bb      	ldr	r3, [r7, #8]
 800604e:	61bb      	str	r3, [r7, #24]
 8006050:	e003      	b.n	800605a <HAL_UART_Transmit+0x88>
    }
    else
    {
      pdata8bits  = pData;
 8006052:	68bb      	ldr	r3, [r7, #8]
 8006054:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8006056:	2300      	movs	r3, #0
 8006058:	61bb      	str	r3, [r7, #24]
    }

    __HAL_UNLOCK(huart);
 800605a:	68fb      	ldr	r3, [r7, #12]
 800605c:	2200      	movs	r2, #0
 800605e:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    while (huart->TxXferCount > 0U)
 8006062:	e02d      	b.n	80060c0 <HAL_UART_Transmit+0xee>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8006064:	683b      	ldr	r3, [r7, #0]
 8006066:	9300      	str	r3, [sp, #0]
 8006068:	697b      	ldr	r3, [r7, #20]
 800606a:	2200      	movs	r2, #0
 800606c:	2180      	movs	r1, #128	; 0x80
 800606e:	68f8      	ldr	r0, [r7, #12]
 8006070:	f000 fbe7 	bl	8006842 <UART_WaitOnFlagUntilTimeout>
 8006074:	4603      	mov	r3, r0
 8006076:	2b00      	cmp	r3, #0
 8006078:	d001      	beq.n	800607e <HAL_UART_Transmit+0xac>
      {
        return HAL_TIMEOUT;
 800607a:	2303      	movs	r3, #3
 800607c:	e039      	b.n	80060f2 <HAL_UART_Transmit+0x120>
      }
      if (pdata8bits == NULL)
 800607e:	69fb      	ldr	r3, [r7, #28]
 8006080:	2b00      	cmp	r3, #0
 8006082:	d10b      	bne.n	800609c <HAL_UART_Transmit+0xca>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 8006084:	69bb      	ldr	r3, [r7, #24]
 8006086:	881a      	ldrh	r2, [r3, #0]
 8006088:	68fb      	ldr	r3, [r7, #12]
 800608a:	681b      	ldr	r3, [r3, #0]
 800608c:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8006090:	b292      	uxth	r2, r2
 8006092:	851a      	strh	r2, [r3, #40]	; 0x28
        pdata16bits++;
 8006094:	69bb      	ldr	r3, [r7, #24]
 8006096:	3302      	adds	r3, #2
 8006098:	61bb      	str	r3, [r7, #24]
 800609a:	e008      	b.n	80060ae <HAL_UART_Transmit+0xdc>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 800609c:	69fb      	ldr	r3, [r7, #28]
 800609e:	781a      	ldrb	r2, [r3, #0]
 80060a0:	68fb      	ldr	r3, [r7, #12]
 80060a2:	681b      	ldr	r3, [r3, #0]
 80060a4:	b292      	uxth	r2, r2
 80060a6:	851a      	strh	r2, [r3, #40]	; 0x28
        pdata8bits++;
 80060a8:	69fb      	ldr	r3, [r7, #28]
 80060aa:	3301      	adds	r3, #1
 80060ac:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 80060ae:	68fb      	ldr	r3, [r7, #12]
 80060b0:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 80060b4:	b29b      	uxth	r3, r3
 80060b6:	3b01      	subs	r3, #1
 80060b8:	b29a      	uxth	r2, r3
 80060ba:	68fb      	ldr	r3, [r7, #12]
 80060bc:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
    while (huart->TxXferCount > 0U)
 80060c0:	68fb      	ldr	r3, [r7, #12]
 80060c2:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 80060c6:	b29b      	uxth	r3, r3
 80060c8:	2b00      	cmp	r3, #0
 80060ca:	d1cb      	bne.n	8006064 <HAL_UART_Transmit+0x92>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 80060cc:	683b      	ldr	r3, [r7, #0]
 80060ce:	9300      	str	r3, [sp, #0]
 80060d0:	697b      	ldr	r3, [r7, #20]
 80060d2:	2200      	movs	r2, #0
 80060d4:	2140      	movs	r1, #64	; 0x40
 80060d6:	68f8      	ldr	r0, [r7, #12]
 80060d8:	f000 fbb3 	bl	8006842 <UART_WaitOnFlagUntilTimeout>
 80060dc:	4603      	mov	r3, r0
 80060de:	2b00      	cmp	r3, #0
 80060e0:	d001      	beq.n	80060e6 <HAL_UART_Transmit+0x114>
    {
      return HAL_TIMEOUT;
 80060e2:	2303      	movs	r3, #3
 80060e4:	e005      	b.n	80060f2 <HAL_UART_Transmit+0x120>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 80060e6:	68fb      	ldr	r3, [r7, #12]
 80060e8:	2220      	movs	r2, #32
 80060ea:	679a      	str	r2, [r3, #120]	; 0x78

    return HAL_OK;
 80060ec:	2300      	movs	r3, #0
 80060ee:	e000      	b.n	80060f2 <HAL_UART_Transmit+0x120>
  }
  else
  {
    return HAL_BUSY;
 80060f0:	2302      	movs	r3, #2
  }
}
 80060f2:	4618      	mov	r0, r3
 80060f4:	3720      	adds	r7, #32
 80060f6:	46bd      	mov	sp, r7
 80060f8:	bd80      	pop	{r7, pc}
	...

080060fc <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 80060fc:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8006100:	b08a      	sub	sp, #40	; 0x28
 8006102:	af00      	add	r7, sp, #0
 8006104:	60f8      	str	r0, [r7, #12]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8006106:	2300      	movs	r3, #0
 8006108:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 800610c:	68fb      	ldr	r3, [r7, #12]
 800610e:	689a      	ldr	r2, [r3, #8]
 8006110:	68fb      	ldr	r3, [r7, #12]
 8006112:	691b      	ldr	r3, [r3, #16]
 8006114:	431a      	orrs	r2, r3
 8006116:	68fb      	ldr	r3, [r7, #12]
 8006118:	695b      	ldr	r3, [r3, #20]
 800611a:	431a      	orrs	r2, r3
 800611c:	68fb      	ldr	r3, [r7, #12]
 800611e:	69db      	ldr	r3, [r3, #28]
 8006120:	4313      	orrs	r3, r2
 8006122:	627b      	str	r3, [r7, #36]	; 0x24
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8006124:	68fb      	ldr	r3, [r7, #12]
 8006126:	681b      	ldr	r3, [r3, #0]
 8006128:	681a      	ldr	r2, [r3, #0]
 800612a:	4ba4      	ldr	r3, [pc, #656]	; (80063bc <UART_SetConfig+0x2c0>)
 800612c:	4013      	ands	r3, r2
 800612e:	68fa      	ldr	r2, [r7, #12]
 8006130:	6812      	ldr	r2, [r2, #0]
 8006132:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8006134:	430b      	orrs	r3, r1
 8006136:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8006138:	68fb      	ldr	r3, [r7, #12]
 800613a:	681b      	ldr	r3, [r3, #0]
 800613c:	685b      	ldr	r3, [r3, #4]
 800613e:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8006142:	68fb      	ldr	r3, [r7, #12]
 8006144:	68da      	ldr	r2, [r3, #12]
 8006146:	68fb      	ldr	r3, [r7, #12]
 8006148:	681b      	ldr	r3, [r3, #0]
 800614a:	430a      	orrs	r2, r1
 800614c:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 800614e:	68fb      	ldr	r3, [r7, #12]
 8006150:	699b      	ldr	r3, [r3, #24]
 8006152:	627b      	str	r3, [r7, #36]	; 0x24

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8006154:	68fb      	ldr	r3, [r7, #12]
 8006156:	681b      	ldr	r3, [r3, #0]
 8006158:	4a99      	ldr	r2, [pc, #612]	; (80063c0 <UART_SetConfig+0x2c4>)
 800615a:	4293      	cmp	r3, r2
 800615c:	d004      	beq.n	8006168 <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 800615e:	68fb      	ldr	r3, [r7, #12]
 8006160:	6a1b      	ldr	r3, [r3, #32]
 8006162:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8006164:	4313      	orrs	r3, r2
 8006166:	627b      	str	r3, [r7, #36]	; 0x24
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8006168:	68fb      	ldr	r3, [r7, #12]
 800616a:	681b      	ldr	r3, [r3, #0]
 800616c:	689b      	ldr	r3, [r3, #8]
 800616e:	f423 6130 	bic.w	r1, r3, #2816	; 0xb00
 8006172:	68fb      	ldr	r3, [r7, #12]
 8006174:	681b      	ldr	r3, [r3, #0]
 8006176:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8006178:	430a      	orrs	r2, r1
 800617a:	609a      	str	r2, [r3, #8]
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
#endif /* USART_PRESC_PRESCALER */

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 800617c:	68fb      	ldr	r3, [r7, #12]
 800617e:	681b      	ldr	r3, [r3, #0]
 8006180:	4a90      	ldr	r2, [pc, #576]	; (80063c4 <UART_SetConfig+0x2c8>)
 8006182:	4293      	cmp	r3, r2
 8006184:	d126      	bne.n	80061d4 <UART_SetConfig+0xd8>
 8006186:	4b90      	ldr	r3, [pc, #576]	; (80063c8 <UART_SetConfig+0x2cc>)
 8006188:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800618c:	f003 0303 	and.w	r3, r3, #3
 8006190:	2b03      	cmp	r3, #3
 8006192:	d81b      	bhi.n	80061cc <UART_SetConfig+0xd0>
 8006194:	a201      	add	r2, pc, #4	; (adr r2, 800619c <UART_SetConfig+0xa0>)
 8006196:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800619a:	bf00      	nop
 800619c:	080061ad 	.word	0x080061ad
 80061a0:	080061bd 	.word	0x080061bd
 80061a4:	080061b5 	.word	0x080061b5
 80061a8:	080061c5 	.word	0x080061c5
 80061ac:	2301      	movs	r3, #1
 80061ae:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80061b2:	e116      	b.n	80063e2 <UART_SetConfig+0x2e6>
 80061b4:	2302      	movs	r3, #2
 80061b6:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80061ba:	e112      	b.n	80063e2 <UART_SetConfig+0x2e6>
 80061bc:	2304      	movs	r3, #4
 80061be:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80061c2:	e10e      	b.n	80063e2 <UART_SetConfig+0x2e6>
 80061c4:	2308      	movs	r3, #8
 80061c6:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80061ca:	e10a      	b.n	80063e2 <UART_SetConfig+0x2e6>
 80061cc:	2310      	movs	r3, #16
 80061ce:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80061d2:	e106      	b.n	80063e2 <UART_SetConfig+0x2e6>
 80061d4:	68fb      	ldr	r3, [r7, #12]
 80061d6:	681b      	ldr	r3, [r3, #0]
 80061d8:	4a7c      	ldr	r2, [pc, #496]	; (80063cc <UART_SetConfig+0x2d0>)
 80061da:	4293      	cmp	r3, r2
 80061dc:	d138      	bne.n	8006250 <UART_SetConfig+0x154>
 80061de:	4b7a      	ldr	r3, [pc, #488]	; (80063c8 <UART_SetConfig+0x2cc>)
 80061e0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80061e4:	f003 030c 	and.w	r3, r3, #12
 80061e8:	2b0c      	cmp	r3, #12
 80061ea:	d82d      	bhi.n	8006248 <UART_SetConfig+0x14c>
 80061ec:	a201      	add	r2, pc, #4	; (adr r2, 80061f4 <UART_SetConfig+0xf8>)
 80061ee:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80061f2:	bf00      	nop
 80061f4:	08006229 	.word	0x08006229
 80061f8:	08006249 	.word	0x08006249
 80061fc:	08006249 	.word	0x08006249
 8006200:	08006249 	.word	0x08006249
 8006204:	08006239 	.word	0x08006239
 8006208:	08006249 	.word	0x08006249
 800620c:	08006249 	.word	0x08006249
 8006210:	08006249 	.word	0x08006249
 8006214:	08006231 	.word	0x08006231
 8006218:	08006249 	.word	0x08006249
 800621c:	08006249 	.word	0x08006249
 8006220:	08006249 	.word	0x08006249
 8006224:	08006241 	.word	0x08006241
 8006228:	2300      	movs	r3, #0
 800622a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800622e:	e0d8      	b.n	80063e2 <UART_SetConfig+0x2e6>
 8006230:	2302      	movs	r3, #2
 8006232:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8006236:	e0d4      	b.n	80063e2 <UART_SetConfig+0x2e6>
 8006238:	2304      	movs	r3, #4
 800623a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800623e:	e0d0      	b.n	80063e2 <UART_SetConfig+0x2e6>
 8006240:	2308      	movs	r3, #8
 8006242:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8006246:	e0cc      	b.n	80063e2 <UART_SetConfig+0x2e6>
 8006248:	2310      	movs	r3, #16
 800624a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800624e:	e0c8      	b.n	80063e2 <UART_SetConfig+0x2e6>
 8006250:	68fb      	ldr	r3, [r7, #12]
 8006252:	681b      	ldr	r3, [r3, #0]
 8006254:	4a5e      	ldr	r2, [pc, #376]	; (80063d0 <UART_SetConfig+0x2d4>)
 8006256:	4293      	cmp	r3, r2
 8006258:	d125      	bne.n	80062a6 <UART_SetConfig+0x1aa>
 800625a:	4b5b      	ldr	r3, [pc, #364]	; (80063c8 <UART_SetConfig+0x2cc>)
 800625c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006260:	f003 0330 	and.w	r3, r3, #48	; 0x30
 8006264:	2b30      	cmp	r3, #48	; 0x30
 8006266:	d016      	beq.n	8006296 <UART_SetConfig+0x19a>
 8006268:	2b30      	cmp	r3, #48	; 0x30
 800626a:	d818      	bhi.n	800629e <UART_SetConfig+0x1a2>
 800626c:	2b20      	cmp	r3, #32
 800626e:	d00a      	beq.n	8006286 <UART_SetConfig+0x18a>
 8006270:	2b20      	cmp	r3, #32
 8006272:	d814      	bhi.n	800629e <UART_SetConfig+0x1a2>
 8006274:	2b00      	cmp	r3, #0
 8006276:	d002      	beq.n	800627e <UART_SetConfig+0x182>
 8006278:	2b10      	cmp	r3, #16
 800627a:	d008      	beq.n	800628e <UART_SetConfig+0x192>
 800627c:	e00f      	b.n	800629e <UART_SetConfig+0x1a2>
 800627e:	2300      	movs	r3, #0
 8006280:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8006284:	e0ad      	b.n	80063e2 <UART_SetConfig+0x2e6>
 8006286:	2302      	movs	r3, #2
 8006288:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800628c:	e0a9      	b.n	80063e2 <UART_SetConfig+0x2e6>
 800628e:	2304      	movs	r3, #4
 8006290:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8006294:	e0a5      	b.n	80063e2 <UART_SetConfig+0x2e6>
 8006296:	2308      	movs	r3, #8
 8006298:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800629c:	e0a1      	b.n	80063e2 <UART_SetConfig+0x2e6>
 800629e:	2310      	movs	r3, #16
 80062a0:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80062a4:	e09d      	b.n	80063e2 <UART_SetConfig+0x2e6>
 80062a6:	68fb      	ldr	r3, [r7, #12]
 80062a8:	681b      	ldr	r3, [r3, #0]
 80062aa:	4a4a      	ldr	r2, [pc, #296]	; (80063d4 <UART_SetConfig+0x2d8>)
 80062ac:	4293      	cmp	r3, r2
 80062ae:	d125      	bne.n	80062fc <UART_SetConfig+0x200>
 80062b0:	4b45      	ldr	r3, [pc, #276]	; (80063c8 <UART_SetConfig+0x2cc>)
 80062b2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80062b6:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 80062ba:	2bc0      	cmp	r3, #192	; 0xc0
 80062bc:	d016      	beq.n	80062ec <UART_SetConfig+0x1f0>
 80062be:	2bc0      	cmp	r3, #192	; 0xc0
 80062c0:	d818      	bhi.n	80062f4 <UART_SetConfig+0x1f8>
 80062c2:	2b80      	cmp	r3, #128	; 0x80
 80062c4:	d00a      	beq.n	80062dc <UART_SetConfig+0x1e0>
 80062c6:	2b80      	cmp	r3, #128	; 0x80
 80062c8:	d814      	bhi.n	80062f4 <UART_SetConfig+0x1f8>
 80062ca:	2b00      	cmp	r3, #0
 80062cc:	d002      	beq.n	80062d4 <UART_SetConfig+0x1d8>
 80062ce:	2b40      	cmp	r3, #64	; 0x40
 80062d0:	d008      	beq.n	80062e4 <UART_SetConfig+0x1e8>
 80062d2:	e00f      	b.n	80062f4 <UART_SetConfig+0x1f8>
 80062d4:	2300      	movs	r3, #0
 80062d6:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80062da:	e082      	b.n	80063e2 <UART_SetConfig+0x2e6>
 80062dc:	2302      	movs	r3, #2
 80062de:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80062e2:	e07e      	b.n	80063e2 <UART_SetConfig+0x2e6>
 80062e4:	2304      	movs	r3, #4
 80062e6:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80062ea:	e07a      	b.n	80063e2 <UART_SetConfig+0x2e6>
 80062ec:	2308      	movs	r3, #8
 80062ee:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80062f2:	e076      	b.n	80063e2 <UART_SetConfig+0x2e6>
 80062f4:	2310      	movs	r3, #16
 80062f6:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80062fa:	e072      	b.n	80063e2 <UART_SetConfig+0x2e6>
 80062fc:	68fb      	ldr	r3, [r7, #12]
 80062fe:	681b      	ldr	r3, [r3, #0]
 8006300:	4a35      	ldr	r2, [pc, #212]	; (80063d8 <UART_SetConfig+0x2dc>)
 8006302:	4293      	cmp	r3, r2
 8006304:	d12a      	bne.n	800635c <UART_SetConfig+0x260>
 8006306:	4b30      	ldr	r3, [pc, #192]	; (80063c8 <UART_SetConfig+0x2cc>)
 8006308:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800630c:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8006310:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8006314:	d01a      	beq.n	800634c <UART_SetConfig+0x250>
 8006316:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800631a:	d81b      	bhi.n	8006354 <UART_SetConfig+0x258>
 800631c:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8006320:	d00c      	beq.n	800633c <UART_SetConfig+0x240>
 8006322:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8006326:	d815      	bhi.n	8006354 <UART_SetConfig+0x258>
 8006328:	2b00      	cmp	r3, #0
 800632a:	d003      	beq.n	8006334 <UART_SetConfig+0x238>
 800632c:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8006330:	d008      	beq.n	8006344 <UART_SetConfig+0x248>
 8006332:	e00f      	b.n	8006354 <UART_SetConfig+0x258>
 8006334:	2300      	movs	r3, #0
 8006336:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800633a:	e052      	b.n	80063e2 <UART_SetConfig+0x2e6>
 800633c:	2302      	movs	r3, #2
 800633e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8006342:	e04e      	b.n	80063e2 <UART_SetConfig+0x2e6>
 8006344:	2304      	movs	r3, #4
 8006346:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800634a:	e04a      	b.n	80063e2 <UART_SetConfig+0x2e6>
 800634c:	2308      	movs	r3, #8
 800634e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8006352:	e046      	b.n	80063e2 <UART_SetConfig+0x2e6>
 8006354:	2310      	movs	r3, #16
 8006356:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800635a:	e042      	b.n	80063e2 <UART_SetConfig+0x2e6>
 800635c:	68fb      	ldr	r3, [r7, #12]
 800635e:	681b      	ldr	r3, [r3, #0]
 8006360:	4a17      	ldr	r2, [pc, #92]	; (80063c0 <UART_SetConfig+0x2c4>)
 8006362:	4293      	cmp	r3, r2
 8006364:	d13a      	bne.n	80063dc <UART_SetConfig+0x2e0>
 8006366:	4b18      	ldr	r3, [pc, #96]	; (80063c8 <UART_SetConfig+0x2cc>)
 8006368:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800636c:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 8006370:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8006374:	d01a      	beq.n	80063ac <UART_SetConfig+0x2b0>
 8006376:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 800637a:	d81b      	bhi.n	80063b4 <UART_SetConfig+0x2b8>
 800637c:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8006380:	d00c      	beq.n	800639c <UART_SetConfig+0x2a0>
 8006382:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8006386:	d815      	bhi.n	80063b4 <UART_SetConfig+0x2b8>
 8006388:	2b00      	cmp	r3, #0
 800638a:	d003      	beq.n	8006394 <UART_SetConfig+0x298>
 800638c:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8006390:	d008      	beq.n	80063a4 <UART_SetConfig+0x2a8>
 8006392:	e00f      	b.n	80063b4 <UART_SetConfig+0x2b8>
 8006394:	2300      	movs	r3, #0
 8006396:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800639a:	e022      	b.n	80063e2 <UART_SetConfig+0x2e6>
 800639c:	2302      	movs	r3, #2
 800639e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80063a2:	e01e      	b.n	80063e2 <UART_SetConfig+0x2e6>
 80063a4:	2304      	movs	r3, #4
 80063a6:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80063aa:	e01a      	b.n	80063e2 <UART_SetConfig+0x2e6>
 80063ac:	2308      	movs	r3, #8
 80063ae:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80063b2:	e016      	b.n	80063e2 <UART_SetConfig+0x2e6>
 80063b4:	2310      	movs	r3, #16
 80063b6:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80063ba:	e012      	b.n	80063e2 <UART_SetConfig+0x2e6>
 80063bc:	efff69f3 	.word	0xefff69f3
 80063c0:	40008000 	.word	0x40008000
 80063c4:	40013800 	.word	0x40013800
 80063c8:	40021000 	.word	0x40021000
 80063cc:	40004400 	.word	0x40004400
 80063d0:	40004800 	.word	0x40004800
 80063d4:	40004c00 	.word	0x40004c00
 80063d8:	40005000 	.word	0x40005000
 80063dc:	2310      	movs	r3, #16
 80063de:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 80063e2:	68fb      	ldr	r3, [r7, #12]
 80063e4:	681b      	ldr	r3, [r3, #0]
 80063e6:	4a9f      	ldr	r2, [pc, #636]	; (8006664 <UART_SetConfig+0x568>)
 80063e8:	4293      	cmp	r3, r2
 80063ea:	d17a      	bne.n	80064e2 <UART_SetConfig+0x3e6>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 80063ec:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 80063f0:	2b08      	cmp	r3, #8
 80063f2:	d824      	bhi.n	800643e <UART_SetConfig+0x342>
 80063f4:	a201      	add	r2, pc, #4	; (adr r2, 80063fc <UART_SetConfig+0x300>)
 80063f6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80063fa:	bf00      	nop
 80063fc:	08006421 	.word	0x08006421
 8006400:	0800643f 	.word	0x0800643f
 8006404:	08006429 	.word	0x08006429
 8006408:	0800643f 	.word	0x0800643f
 800640c:	0800642f 	.word	0x0800642f
 8006410:	0800643f 	.word	0x0800643f
 8006414:	0800643f 	.word	0x0800643f
 8006418:	0800643f 	.word	0x0800643f
 800641c:	08006437 	.word	0x08006437
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8006420:	f7fe ff8e 	bl	8005340 <HAL_RCC_GetPCLK1Freq>
 8006424:	61f8      	str	r0, [r7, #28]
        break;
 8006426:	e010      	b.n	800644a <UART_SetConfig+0x34e>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8006428:	4b8f      	ldr	r3, [pc, #572]	; (8006668 <UART_SetConfig+0x56c>)
 800642a:	61fb      	str	r3, [r7, #28]
        break;
 800642c:	e00d      	b.n	800644a <UART_SetConfig+0x34e>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800642e:	f7fe feef 	bl	8005210 <HAL_RCC_GetSysClockFreq>
 8006432:	61f8      	str	r0, [r7, #28]
        break;
 8006434:	e009      	b.n	800644a <UART_SetConfig+0x34e>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8006436:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800643a:	61fb      	str	r3, [r7, #28]
        break;
 800643c:	e005      	b.n	800644a <UART_SetConfig+0x34e>
      default:
        pclk = 0U;
 800643e:	2300      	movs	r3, #0
 8006440:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 8006442:	2301      	movs	r3, #1
 8006444:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
        break;
 8006448:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 800644a:	69fb      	ldr	r3, [r7, #28]
 800644c:	2b00      	cmp	r3, #0
 800644e:	f000 80fb 	beq.w	8006648 <UART_SetConfig+0x54c>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
#else
      /* No Prescaler applicable */
      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 8006452:	68fb      	ldr	r3, [r7, #12]
 8006454:	685a      	ldr	r2, [r3, #4]
 8006456:	4613      	mov	r3, r2
 8006458:	005b      	lsls	r3, r3, #1
 800645a:	4413      	add	r3, r2
 800645c:	69fa      	ldr	r2, [r7, #28]
 800645e:	429a      	cmp	r2, r3
 8006460:	d305      	bcc.n	800646e <UART_SetConfig+0x372>
          (pclk > (4096U * huart->Init.BaudRate)))
 8006462:	68fb      	ldr	r3, [r7, #12]
 8006464:	685b      	ldr	r3, [r3, #4]
 8006466:	031b      	lsls	r3, r3, #12
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 8006468:	69fa      	ldr	r2, [r7, #28]
 800646a:	429a      	cmp	r2, r3
 800646c:	d903      	bls.n	8006476 <UART_SetConfig+0x37a>
      {
        ret = HAL_ERROR;
 800646e:	2301      	movs	r3, #1
 8006470:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
 8006474:	e0e8      	b.n	8006648 <UART_SetConfig+0x54c>
      }
      else
      {
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate));
 8006476:	69fb      	ldr	r3, [r7, #28]
 8006478:	2200      	movs	r2, #0
 800647a:	461c      	mov	r4, r3
 800647c:	4615      	mov	r5, r2
 800647e:	f04f 0200 	mov.w	r2, #0
 8006482:	f04f 0300 	mov.w	r3, #0
 8006486:	022b      	lsls	r3, r5, #8
 8006488:	ea43 6314 	orr.w	r3, r3, r4, lsr #24
 800648c:	0222      	lsls	r2, r4, #8
 800648e:	68f9      	ldr	r1, [r7, #12]
 8006490:	6849      	ldr	r1, [r1, #4]
 8006492:	0849      	lsrs	r1, r1, #1
 8006494:	2000      	movs	r0, #0
 8006496:	4688      	mov	r8, r1
 8006498:	4681      	mov	r9, r0
 800649a:	eb12 0a08 	adds.w	sl, r2, r8
 800649e:	eb43 0b09 	adc.w	fp, r3, r9
 80064a2:	68fb      	ldr	r3, [r7, #12]
 80064a4:	685b      	ldr	r3, [r3, #4]
 80064a6:	2200      	movs	r2, #0
 80064a8:	603b      	str	r3, [r7, #0]
 80064aa:	607a      	str	r2, [r7, #4]
 80064ac:	e9d7 2300 	ldrd	r2, r3, [r7]
 80064b0:	4650      	mov	r0, sl
 80064b2:	4659      	mov	r1, fp
 80064b4:	f7fa fb70 	bl	8000b98 <__aeabi_uldivmod>
 80064b8:	4602      	mov	r2, r0
 80064ba:	460b      	mov	r3, r1
 80064bc:	4613      	mov	r3, r2
 80064be:	61bb      	str	r3, [r7, #24]
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 80064c0:	69bb      	ldr	r3, [r7, #24]
 80064c2:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80064c6:	d308      	bcc.n	80064da <UART_SetConfig+0x3de>
 80064c8:	69bb      	ldr	r3, [r7, #24]
 80064ca:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80064ce:	d204      	bcs.n	80064da <UART_SetConfig+0x3de>
        {
          huart->Instance->BRR = usartdiv;
 80064d0:	68fb      	ldr	r3, [r7, #12]
 80064d2:	681b      	ldr	r3, [r3, #0]
 80064d4:	69ba      	ldr	r2, [r7, #24]
 80064d6:	60da      	str	r2, [r3, #12]
 80064d8:	e0b6      	b.n	8006648 <UART_SetConfig+0x54c>
        }
        else
        {
          ret = HAL_ERROR;
 80064da:	2301      	movs	r3, #1
 80064dc:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
 80064e0:	e0b2      	b.n	8006648 <UART_SetConfig+0x54c>
      } /* if ( (pclk < (3 * huart->Init.BaudRate) ) || (pclk > (4096 * huart->Init.BaudRate) )) */
#endif /* USART_PRESC_PRESCALER */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80064e2:	68fb      	ldr	r3, [r7, #12]
 80064e4:	69db      	ldr	r3, [r3, #28]
 80064e6:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80064ea:	d15e      	bne.n	80065aa <UART_SetConfig+0x4ae>
  {
    switch (clocksource)
 80064ec:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 80064f0:	2b08      	cmp	r3, #8
 80064f2:	d828      	bhi.n	8006546 <UART_SetConfig+0x44a>
 80064f4:	a201      	add	r2, pc, #4	; (adr r2, 80064fc <UART_SetConfig+0x400>)
 80064f6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80064fa:	bf00      	nop
 80064fc:	08006521 	.word	0x08006521
 8006500:	08006529 	.word	0x08006529
 8006504:	08006531 	.word	0x08006531
 8006508:	08006547 	.word	0x08006547
 800650c:	08006537 	.word	0x08006537
 8006510:	08006547 	.word	0x08006547
 8006514:	08006547 	.word	0x08006547
 8006518:	08006547 	.word	0x08006547
 800651c:	0800653f 	.word	0x0800653f
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8006520:	f7fe ff0e 	bl	8005340 <HAL_RCC_GetPCLK1Freq>
 8006524:	61f8      	str	r0, [r7, #28]
        break;
 8006526:	e014      	b.n	8006552 <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8006528:	f7fe ff20 	bl	800536c <HAL_RCC_GetPCLK2Freq>
 800652c:	61f8      	str	r0, [r7, #28]
        break;
 800652e:	e010      	b.n	8006552 <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8006530:	4b4d      	ldr	r3, [pc, #308]	; (8006668 <UART_SetConfig+0x56c>)
 8006532:	61fb      	str	r3, [r7, #28]
        break;
 8006534:	e00d      	b.n	8006552 <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8006536:	f7fe fe6b 	bl	8005210 <HAL_RCC_GetSysClockFreq>
 800653a:	61f8      	str	r0, [r7, #28]
        break;
 800653c:	e009      	b.n	8006552 <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800653e:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8006542:	61fb      	str	r3, [r7, #28]
        break;
 8006544:	e005      	b.n	8006552 <UART_SetConfig+0x456>
      default:
        pclk = 0U;
 8006546:	2300      	movs	r3, #0
 8006548:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 800654a:	2301      	movs	r3, #1
 800654c:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
        break;
 8006550:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8006552:	69fb      	ldr	r3, [r7, #28]
 8006554:	2b00      	cmp	r3, #0
 8006556:	d077      	beq.n	8006648 <UART_SetConfig+0x54c>
    {
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 8006558:	69fb      	ldr	r3, [r7, #28]
 800655a:	005a      	lsls	r2, r3, #1
 800655c:	68fb      	ldr	r3, [r7, #12]
 800655e:	685b      	ldr	r3, [r3, #4]
 8006560:	085b      	lsrs	r3, r3, #1
 8006562:	441a      	add	r2, r3
 8006564:	68fb      	ldr	r3, [r7, #12]
 8006566:	685b      	ldr	r3, [r3, #4]
 8006568:	fbb2 f3f3 	udiv	r3, r2, r3
 800656c:	61bb      	str	r3, [r7, #24]
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800656e:	69bb      	ldr	r3, [r7, #24]
 8006570:	2b0f      	cmp	r3, #15
 8006572:	d916      	bls.n	80065a2 <UART_SetConfig+0x4a6>
 8006574:	69bb      	ldr	r3, [r7, #24]
 8006576:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800657a:	d212      	bcs.n	80065a2 <UART_SetConfig+0x4a6>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 800657c:	69bb      	ldr	r3, [r7, #24]
 800657e:	b29b      	uxth	r3, r3
 8006580:	f023 030f 	bic.w	r3, r3, #15
 8006584:	82fb      	strh	r3, [r7, #22]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8006586:	69bb      	ldr	r3, [r7, #24]
 8006588:	085b      	lsrs	r3, r3, #1
 800658a:	b29b      	uxth	r3, r3
 800658c:	f003 0307 	and.w	r3, r3, #7
 8006590:	b29a      	uxth	r2, r3
 8006592:	8afb      	ldrh	r3, [r7, #22]
 8006594:	4313      	orrs	r3, r2
 8006596:	82fb      	strh	r3, [r7, #22]
        huart->Instance->BRR = brrtemp;
 8006598:	68fb      	ldr	r3, [r7, #12]
 800659a:	681b      	ldr	r3, [r3, #0]
 800659c:	8afa      	ldrh	r2, [r7, #22]
 800659e:	60da      	str	r2, [r3, #12]
 80065a0:	e052      	b.n	8006648 <UART_SetConfig+0x54c>
      }
      else
      {
        ret = HAL_ERROR;
 80065a2:	2301      	movs	r3, #1
 80065a4:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
 80065a8:	e04e      	b.n	8006648 <UART_SetConfig+0x54c>
      }
    }
  }
  else
  {
    switch (clocksource)
 80065aa:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 80065ae:	2b08      	cmp	r3, #8
 80065b0:	d827      	bhi.n	8006602 <UART_SetConfig+0x506>
 80065b2:	a201      	add	r2, pc, #4	; (adr r2, 80065b8 <UART_SetConfig+0x4bc>)
 80065b4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80065b8:	080065dd 	.word	0x080065dd
 80065bc:	080065e5 	.word	0x080065e5
 80065c0:	080065ed 	.word	0x080065ed
 80065c4:	08006603 	.word	0x08006603
 80065c8:	080065f3 	.word	0x080065f3
 80065cc:	08006603 	.word	0x08006603
 80065d0:	08006603 	.word	0x08006603
 80065d4:	08006603 	.word	0x08006603
 80065d8:	080065fb 	.word	0x080065fb
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80065dc:	f7fe feb0 	bl	8005340 <HAL_RCC_GetPCLK1Freq>
 80065e0:	61f8      	str	r0, [r7, #28]
        break;
 80065e2:	e014      	b.n	800660e <UART_SetConfig+0x512>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 80065e4:	f7fe fec2 	bl	800536c <HAL_RCC_GetPCLK2Freq>
 80065e8:	61f8      	str	r0, [r7, #28]
        break;
 80065ea:	e010      	b.n	800660e <UART_SetConfig+0x512>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 80065ec:	4b1e      	ldr	r3, [pc, #120]	; (8006668 <UART_SetConfig+0x56c>)
 80065ee:	61fb      	str	r3, [r7, #28]
        break;
 80065f0:	e00d      	b.n	800660e <UART_SetConfig+0x512>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80065f2:	f7fe fe0d 	bl	8005210 <HAL_RCC_GetSysClockFreq>
 80065f6:	61f8      	str	r0, [r7, #28]
        break;
 80065f8:	e009      	b.n	800660e <UART_SetConfig+0x512>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80065fa:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80065fe:	61fb      	str	r3, [r7, #28]
        break;
 8006600:	e005      	b.n	800660e <UART_SetConfig+0x512>
      default:
        pclk = 0U;
 8006602:	2300      	movs	r3, #0
 8006604:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 8006606:	2301      	movs	r3, #1
 8006608:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
        break;
 800660c:	bf00      	nop
    }

    if (pclk != 0U)
 800660e:	69fb      	ldr	r3, [r7, #28]
 8006610:	2b00      	cmp	r3, #0
 8006612:	d019      	beq.n	8006648 <UART_SetConfig+0x54c>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 8006614:	68fb      	ldr	r3, [r7, #12]
 8006616:	685b      	ldr	r3, [r3, #4]
 8006618:	085a      	lsrs	r2, r3, #1
 800661a:	69fb      	ldr	r3, [r7, #28]
 800661c:	441a      	add	r2, r3
 800661e:	68fb      	ldr	r3, [r7, #12]
 8006620:	685b      	ldr	r3, [r3, #4]
 8006622:	fbb2 f3f3 	udiv	r3, r2, r3
 8006626:	61bb      	str	r3, [r7, #24]
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8006628:	69bb      	ldr	r3, [r7, #24]
 800662a:	2b0f      	cmp	r3, #15
 800662c:	d909      	bls.n	8006642 <UART_SetConfig+0x546>
 800662e:	69bb      	ldr	r3, [r7, #24]
 8006630:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8006634:	d205      	bcs.n	8006642 <UART_SetConfig+0x546>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 8006636:	69bb      	ldr	r3, [r7, #24]
 8006638:	b29a      	uxth	r2, r3
 800663a:	68fb      	ldr	r3, [r7, #12]
 800663c:	681b      	ldr	r3, [r3, #0]
 800663e:	60da      	str	r2, [r3, #12]
 8006640:	e002      	b.n	8006648 <UART_SetConfig+0x54c>
      }
      else
      {
        ret = HAL_ERROR;
 8006642:	2301      	movs	r3, #1
 8006644:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
  huart->NbTxDataToProcess = 1;
  huart->NbRxDataToProcess = 1;
#endif /* USART_CR1_FIFOEN */

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8006648:	68fb      	ldr	r3, [r7, #12]
 800664a:	2200      	movs	r2, #0
 800664c:	665a      	str	r2, [r3, #100]	; 0x64
  huart->TxISR = NULL;
 800664e:	68fb      	ldr	r3, [r7, #12]
 8006650:	2200      	movs	r2, #0
 8006652:	669a      	str	r2, [r3, #104]	; 0x68

  return ret;
 8006654:	f897 3022 	ldrb.w	r3, [r7, #34]	; 0x22
}
 8006658:	4618      	mov	r0, r3
 800665a:	3728      	adds	r7, #40	; 0x28
 800665c:	46bd      	mov	sp, r7
 800665e:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8006662:	bf00      	nop
 8006664:	40008000 	.word	0x40008000
 8006668:	00f42400 	.word	0x00f42400

0800666c <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 800666c:	b480      	push	{r7}
 800666e:	b083      	sub	sp, #12
 8006670:	af00      	add	r7, sp, #0
 8006672:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8006674:	687b      	ldr	r3, [r7, #4]
 8006676:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006678:	f003 0301 	and.w	r3, r3, #1
 800667c:	2b00      	cmp	r3, #0
 800667e:	d00a      	beq.n	8006696 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8006680:	687b      	ldr	r3, [r7, #4]
 8006682:	681b      	ldr	r3, [r3, #0]
 8006684:	685b      	ldr	r3, [r3, #4]
 8006686:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 800668a:	687b      	ldr	r3, [r7, #4]
 800668c:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800668e:	687b      	ldr	r3, [r7, #4]
 8006690:	681b      	ldr	r3, [r3, #0]
 8006692:	430a      	orrs	r2, r1
 8006694:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8006696:	687b      	ldr	r3, [r7, #4]
 8006698:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800669a:	f003 0302 	and.w	r3, r3, #2
 800669e:	2b00      	cmp	r3, #0
 80066a0:	d00a      	beq.n	80066b8 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 80066a2:	687b      	ldr	r3, [r7, #4]
 80066a4:	681b      	ldr	r3, [r3, #0]
 80066a6:	685b      	ldr	r3, [r3, #4]
 80066a8:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 80066ac:	687b      	ldr	r3, [r7, #4]
 80066ae:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80066b0:	687b      	ldr	r3, [r7, #4]
 80066b2:	681b      	ldr	r3, [r3, #0]
 80066b4:	430a      	orrs	r2, r1
 80066b6:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 80066b8:	687b      	ldr	r3, [r7, #4]
 80066ba:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80066bc:	f003 0304 	and.w	r3, r3, #4
 80066c0:	2b00      	cmp	r3, #0
 80066c2:	d00a      	beq.n	80066da <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 80066c4:	687b      	ldr	r3, [r7, #4]
 80066c6:	681b      	ldr	r3, [r3, #0]
 80066c8:	685b      	ldr	r3, [r3, #4]
 80066ca:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 80066ce:	687b      	ldr	r3, [r7, #4]
 80066d0:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80066d2:	687b      	ldr	r3, [r7, #4]
 80066d4:	681b      	ldr	r3, [r3, #0]
 80066d6:	430a      	orrs	r2, r1
 80066d8:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 80066da:	687b      	ldr	r3, [r7, #4]
 80066dc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80066de:	f003 0308 	and.w	r3, r3, #8
 80066e2:	2b00      	cmp	r3, #0
 80066e4:	d00a      	beq.n	80066fc <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 80066e6:	687b      	ldr	r3, [r7, #4]
 80066e8:	681b      	ldr	r3, [r3, #0]
 80066ea:	685b      	ldr	r3, [r3, #4]
 80066ec:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 80066f0:	687b      	ldr	r3, [r7, #4]
 80066f2:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80066f4:	687b      	ldr	r3, [r7, #4]
 80066f6:	681b      	ldr	r3, [r3, #0]
 80066f8:	430a      	orrs	r2, r1
 80066fa:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 80066fc:	687b      	ldr	r3, [r7, #4]
 80066fe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006700:	f003 0310 	and.w	r3, r3, #16
 8006704:	2b00      	cmp	r3, #0
 8006706:	d00a      	beq.n	800671e <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8006708:	687b      	ldr	r3, [r7, #4]
 800670a:	681b      	ldr	r3, [r3, #0]
 800670c:	689b      	ldr	r3, [r3, #8]
 800670e:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 8006712:	687b      	ldr	r3, [r7, #4]
 8006714:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8006716:	687b      	ldr	r3, [r7, #4]
 8006718:	681b      	ldr	r3, [r3, #0]
 800671a:	430a      	orrs	r2, r1
 800671c:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 800671e:	687b      	ldr	r3, [r7, #4]
 8006720:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006722:	f003 0320 	and.w	r3, r3, #32
 8006726:	2b00      	cmp	r3, #0
 8006728:	d00a      	beq.n	8006740 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 800672a:	687b      	ldr	r3, [r7, #4]
 800672c:	681b      	ldr	r3, [r3, #0]
 800672e:	689b      	ldr	r3, [r3, #8]
 8006730:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 8006734:	687b      	ldr	r3, [r7, #4]
 8006736:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8006738:	687b      	ldr	r3, [r7, #4]
 800673a:	681b      	ldr	r3, [r3, #0]
 800673c:	430a      	orrs	r2, r1
 800673e:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8006740:	687b      	ldr	r3, [r7, #4]
 8006742:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006744:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006748:	2b00      	cmp	r3, #0
 800674a:	d01a      	beq.n	8006782 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 800674c:	687b      	ldr	r3, [r7, #4]
 800674e:	681b      	ldr	r3, [r3, #0]
 8006750:	685b      	ldr	r3, [r3, #4]
 8006752:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 8006756:	687b      	ldr	r3, [r7, #4]
 8006758:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800675a:	687b      	ldr	r3, [r7, #4]
 800675c:	681b      	ldr	r3, [r3, #0]
 800675e:	430a      	orrs	r2, r1
 8006760:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8006762:	687b      	ldr	r3, [r7, #4]
 8006764:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006766:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800676a:	d10a      	bne.n	8006782 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 800676c:	687b      	ldr	r3, [r7, #4]
 800676e:	681b      	ldr	r3, [r3, #0]
 8006770:	685b      	ldr	r3, [r3, #4]
 8006772:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 8006776:	687b      	ldr	r3, [r7, #4]
 8006778:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800677a:	687b      	ldr	r3, [r7, #4]
 800677c:	681b      	ldr	r3, [r3, #0]
 800677e:	430a      	orrs	r2, r1
 8006780:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8006782:	687b      	ldr	r3, [r7, #4]
 8006784:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006786:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800678a:	2b00      	cmp	r3, #0
 800678c:	d00a      	beq.n	80067a4 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 800678e:	687b      	ldr	r3, [r7, #4]
 8006790:	681b      	ldr	r3, [r3, #0]
 8006792:	685b      	ldr	r3, [r3, #4]
 8006794:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 8006798:	687b      	ldr	r3, [r7, #4]
 800679a:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 800679c:	687b      	ldr	r3, [r7, #4]
 800679e:	681b      	ldr	r3, [r3, #0]
 80067a0:	430a      	orrs	r2, r1
 80067a2:	605a      	str	r2, [r3, #4]
  }
}
 80067a4:	bf00      	nop
 80067a6:	370c      	adds	r7, #12
 80067a8:	46bd      	mov	sp, r7
 80067aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80067ae:	4770      	bx	lr

080067b0 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 80067b0:	b580      	push	{r7, lr}
 80067b2:	b086      	sub	sp, #24
 80067b4:	af02      	add	r7, sp, #8
 80067b6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80067b8:	687b      	ldr	r3, [r7, #4]
 80067ba:	2200      	movs	r2, #0
 80067bc:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 80067c0:	f7fc fa70 	bl	8002ca4 <HAL_GetTick>
 80067c4:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 80067c6:	687b      	ldr	r3, [r7, #4]
 80067c8:	681b      	ldr	r3, [r3, #0]
 80067ca:	681b      	ldr	r3, [r3, #0]
 80067cc:	f003 0308 	and.w	r3, r3, #8
 80067d0:	2b08      	cmp	r3, #8
 80067d2:	d10e      	bne.n	80067f2 <UART_CheckIdleState+0x42>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80067d4:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 80067d8:	9300      	str	r3, [sp, #0]
 80067da:	68fb      	ldr	r3, [r7, #12]
 80067dc:	2200      	movs	r2, #0
 80067de:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 80067e2:	6878      	ldr	r0, [r7, #4]
 80067e4:	f000 f82d 	bl	8006842 <UART_WaitOnFlagUntilTimeout>
 80067e8:	4603      	mov	r3, r0
 80067ea:	2b00      	cmp	r3, #0
 80067ec:	d001      	beq.n	80067f2 <UART_CheckIdleState+0x42>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 80067ee:	2303      	movs	r3, #3
 80067f0:	e023      	b.n	800683a <UART_CheckIdleState+0x8a>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 80067f2:	687b      	ldr	r3, [r7, #4]
 80067f4:	681b      	ldr	r3, [r3, #0]
 80067f6:	681b      	ldr	r3, [r3, #0]
 80067f8:	f003 0304 	and.w	r3, r3, #4
 80067fc:	2b04      	cmp	r3, #4
 80067fe:	d10e      	bne.n	800681e <UART_CheckIdleState+0x6e>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8006800:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8006804:	9300      	str	r3, [sp, #0]
 8006806:	68fb      	ldr	r3, [r7, #12]
 8006808:	2200      	movs	r2, #0
 800680a:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 800680e:	6878      	ldr	r0, [r7, #4]
 8006810:	f000 f817 	bl	8006842 <UART_WaitOnFlagUntilTimeout>
 8006814:	4603      	mov	r3, r0
 8006816:	2b00      	cmp	r3, #0
 8006818:	d001      	beq.n	800681e <UART_CheckIdleState+0x6e>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 800681a:	2303      	movs	r3, #3
 800681c:	e00d      	b.n	800683a <UART_CheckIdleState+0x8a>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 800681e:	687b      	ldr	r3, [r7, #4]
 8006820:	2220      	movs	r2, #32
 8006822:	679a      	str	r2, [r3, #120]	; 0x78
  huart->RxState = HAL_UART_STATE_READY;
 8006824:	687b      	ldr	r3, [r7, #4]
 8006826:	2220      	movs	r2, #32
 8006828:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800682a:	687b      	ldr	r3, [r7, #4]
 800682c:	2200      	movs	r2, #0
 800682e:	661a      	str	r2, [r3, #96]	; 0x60

  __HAL_UNLOCK(huart);
 8006830:	687b      	ldr	r3, [r7, #4]
 8006832:	2200      	movs	r2, #0
 8006834:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

  return HAL_OK;
 8006838:	2300      	movs	r3, #0
}
 800683a:	4618      	mov	r0, r3
 800683c:	3710      	adds	r7, #16
 800683e:	46bd      	mov	sp, r7
 8006840:	bd80      	pop	{r7, pc}

08006842 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8006842:	b580      	push	{r7, lr}
 8006844:	b09c      	sub	sp, #112	; 0x70
 8006846:	af00      	add	r7, sp, #0
 8006848:	60f8      	str	r0, [r7, #12]
 800684a:	60b9      	str	r1, [r7, #8]
 800684c:	603b      	str	r3, [r7, #0]
 800684e:	4613      	mov	r3, r2
 8006850:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8006852:	e0a5      	b.n	80069a0 <UART_WaitOnFlagUntilTimeout+0x15e>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8006854:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8006856:	f1b3 3fff 	cmp.w	r3, #4294967295
 800685a:	f000 80a1 	beq.w	80069a0 <UART_WaitOnFlagUntilTimeout+0x15e>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800685e:	f7fc fa21 	bl	8002ca4 <HAL_GetTick>
 8006862:	4602      	mov	r2, r0
 8006864:	683b      	ldr	r3, [r7, #0]
 8006866:	1ad3      	subs	r3, r2, r3
 8006868:	6fba      	ldr	r2, [r7, #120]	; 0x78
 800686a:	429a      	cmp	r2, r3
 800686c:	d302      	bcc.n	8006874 <UART_WaitOnFlagUntilTimeout+0x32>
 800686e:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8006870:	2b00      	cmp	r3, #0
 8006872:	d13e      	bne.n	80068f2 <UART_WaitOnFlagUntilTimeout+0xb0>
           interrupts for the interrupt process */
#if defined(USART_CR1_FIFOEN)
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
                                                USART_CR1_TXEIE_TXFNFIE));
#else
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8006874:	68fb      	ldr	r3, [r7, #12]
 8006876:	681b      	ldr	r3, [r3, #0]
 8006878:	653b      	str	r3, [r7, #80]	; 0x50
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800687a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800687c:	e853 3f00 	ldrex	r3, [r3]
 8006880:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 8006882:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8006884:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8006888:	667b      	str	r3, [r7, #100]	; 0x64
 800688a:	68fb      	ldr	r3, [r7, #12]
 800688c:	681b      	ldr	r3, [r3, #0]
 800688e:	461a      	mov	r2, r3
 8006890:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8006892:	65fb      	str	r3, [r7, #92]	; 0x5c
 8006894:	65ba      	str	r2, [r7, #88]	; 0x58
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006896:	6db9      	ldr	r1, [r7, #88]	; 0x58
 8006898:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 800689a:	e841 2300 	strex	r3, r2, [r1]
 800689e:	657b      	str	r3, [r7, #84]	; 0x54
   return(result);
 80068a0:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80068a2:	2b00      	cmp	r3, #0
 80068a4:	d1e6      	bne.n	8006874 <UART_WaitOnFlagUntilTimeout+0x32>
#endif /* USART_CR1_FIFOEN */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80068a6:	68fb      	ldr	r3, [r7, #12]
 80068a8:	681b      	ldr	r3, [r3, #0]
 80068aa:	3308      	adds	r3, #8
 80068ac:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80068ae:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80068b0:	e853 3f00 	ldrex	r3, [r3]
 80068b4:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 80068b6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80068b8:	f023 0301 	bic.w	r3, r3, #1
 80068bc:	663b      	str	r3, [r7, #96]	; 0x60
 80068be:	68fb      	ldr	r3, [r7, #12]
 80068c0:	681b      	ldr	r3, [r3, #0]
 80068c2:	3308      	adds	r3, #8
 80068c4:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 80068c6:	64ba      	str	r2, [r7, #72]	; 0x48
 80068c8:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80068ca:	6c79      	ldr	r1, [r7, #68]	; 0x44
 80068cc:	6cba      	ldr	r2, [r7, #72]	; 0x48
 80068ce:	e841 2300 	strex	r3, r2, [r1]
 80068d2:	643b      	str	r3, [r7, #64]	; 0x40
   return(result);
 80068d4:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80068d6:	2b00      	cmp	r3, #0
 80068d8:	d1e5      	bne.n	80068a6 <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState = HAL_UART_STATE_READY;
 80068da:	68fb      	ldr	r3, [r7, #12]
 80068dc:	2220      	movs	r2, #32
 80068de:	679a      	str	r2, [r3, #120]	; 0x78
        huart->RxState = HAL_UART_STATE_READY;
 80068e0:	68fb      	ldr	r3, [r7, #12]
 80068e2:	2220      	movs	r2, #32
 80068e4:	67da      	str	r2, [r3, #124]	; 0x7c

        __HAL_UNLOCK(huart);
 80068e6:	68fb      	ldr	r3, [r7, #12]
 80068e8:	2200      	movs	r2, #0
 80068ea:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

        return HAL_TIMEOUT;
 80068ee:	2303      	movs	r3, #3
 80068f0:	e067      	b.n	80069c2 <UART_WaitOnFlagUntilTimeout+0x180>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 80068f2:	68fb      	ldr	r3, [r7, #12]
 80068f4:	681b      	ldr	r3, [r3, #0]
 80068f6:	681b      	ldr	r3, [r3, #0]
 80068f8:	f003 0304 	and.w	r3, r3, #4
 80068fc:	2b00      	cmp	r3, #0
 80068fe:	d04f      	beq.n	80069a0 <UART_WaitOnFlagUntilTimeout+0x15e>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8006900:	68fb      	ldr	r3, [r7, #12]
 8006902:	681b      	ldr	r3, [r3, #0]
 8006904:	69db      	ldr	r3, [r3, #28]
 8006906:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800690a:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800690e:	d147      	bne.n	80069a0 <UART_WaitOnFlagUntilTimeout+0x15e>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8006910:	68fb      	ldr	r3, [r7, #12]
 8006912:	681b      	ldr	r3, [r3, #0]
 8006914:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8006918:	621a      	str	r2, [r3, #32]
             interrupts for the interrupt process */
#if defined(USART_CR1_FIFOEN)
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
                                                  USART_CR1_TXEIE_TXFNFIE));
#else
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 800691a:	68fb      	ldr	r3, [r7, #12]
 800691c:	681b      	ldr	r3, [r3, #0]
 800691e:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006920:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006922:	e853 3f00 	ldrex	r3, [r3]
 8006926:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8006928:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800692a:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 800692e:	66fb      	str	r3, [r7, #108]	; 0x6c
 8006930:	68fb      	ldr	r3, [r7, #12]
 8006932:	681b      	ldr	r3, [r3, #0]
 8006934:	461a      	mov	r2, r3
 8006936:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8006938:	637b      	str	r3, [r7, #52]	; 0x34
 800693a:	633a      	str	r2, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800693c:	6b39      	ldr	r1, [r7, #48]	; 0x30
 800693e:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8006940:	e841 2300 	strex	r3, r2, [r1]
 8006944:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 8006946:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006948:	2b00      	cmp	r3, #0
 800694a:	d1e6      	bne.n	800691a <UART_WaitOnFlagUntilTimeout+0xd8>
#endif /* USART_CR1_FIFOEN */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800694c:	68fb      	ldr	r3, [r7, #12]
 800694e:	681b      	ldr	r3, [r3, #0]
 8006950:	3308      	adds	r3, #8
 8006952:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006954:	697b      	ldr	r3, [r7, #20]
 8006956:	e853 3f00 	ldrex	r3, [r3]
 800695a:	613b      	str	r3, [r7, #16]
   return(result);
 800695c:	693b      	ldr	r3, [r7, #16]
 800695e:	f023 0301 	bic.w	r3, r3, #1
 8006962:	66bb      	str	r3, [r7, #104]	; 0x68
 8006964:	68fb      	ldr	r3, [r7, #12]
 8006966:	681b      	ldr	r3, [r3, #0]
 8006968:	3308      	adds	r3, #8
 800696a:	6eba      	ldr	r2, [r7, #104]	; 0x68
 800696c:	623a      	str	r2, [r7, #32]
 800696e:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006970:	69f9      	ldr	r1, [r7, #28]
 8006972:	6a3a      	ldr	r2, [r7, #32]
 8006974:	e841 2300 	strex	r3, r2, [r1]
 8006978:	61bb      	str	r3, [r7, #24]
   return(result);
 800697a:	69bb      	ldr	r3, [r7, #24]
 800697c:	2b00      	cmp	r3, #0
 800697e:	d1e5      	bne.n	800694c <UART_WaitOnFlagUntilTimeout+0x10a>

          huart->gState = HAL_UART_STATE_READY;
 8006980:	68fb      	ldr	r3, [r7, #12]
 8006982:	2220      	movs	r2, #32
 8006984:	679a      	str	r2, [r3, #120]	; 0x78
          huart->RxState = HAL_UART_STATE_READY;
 8006986:	68fb      	ldr	r3, [r7, #12]
 8006988:	2220      	movs	r2, #32
 800698a:	67da      	str	r2, [r3, #124]	; 0x7c
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 800698c:	68fb      	ldr	r3, [r7, #12]
 800698e:	2220      	movs	r2, #32
 8006990:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8006994:	68fb      	ldr	r3, [r7, #12]
 8006996:	2200      	movs	r2, #0
 8006998:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

          return HAL_TIMEOUT;
 800699c:	2303      	movs	r3, #3
 800699e:	e010      	b.n	80069c2 <UART_WaitOnFlagUntilTimeout+0x180>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80069a0:	68fb      	ldr	r3, [r7, #12]
 80069a2:	681b      	ldr	r3, [r3, #0]
 80069a4:	69da      	ldr	r2, [r3, #28]
 80069a6:	68bb      	ldr	r3, [r7, #8]
 80069a8:	4013      	ands	r3, r2
 80069aa:	68ba      	ldr	r2, [r7, #8]
 80069ac:	429a      	cmp	r2, r3
 80069ae:	bf0c      	ite	eq
 80069b0:	2301      	moveq	r3, #1
 80069b2:	2300      	movne	r3, #0
 80069b4:	b2db      	uxtb	r3, r3
 80069b6:	461a      	mov	r2, r3
 80069b8:	79fb      	ldrb	r3, [r7, #7]
 80069ba:	429a      	cmp	r2, r3
 80069bc:	f43f af4a 	beq.w	8006854 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 80069c0:	2300      	movs	r3, #0
}
 80069c2:	4618      	mov	r0, r3
 80069c4:	3770      	adds	r7, #112	; 0x70
 80069c6:	46bd      	mov	sp, r7
 80069c8:	bd80      	pop	{r7, pc}

080069ca <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 80069ca:	b084      	sub	sp, #16
 80069cc:	b580      	push	{r7, lr}
 80069ce:	b084      	sub	sp, #16
 80069d0:	af00      	add	r7, sp, #0
 80069d2:	6078      	str	r0, [r7, #4]
 80069d4:	f107 001c 	add.w	r0, r7, #28
 80069d8:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;

  /* Select FS Embedded PHY */
  USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 80069dc:	687b      	ldr	r3, [r7, #4]
 80069de:	68db      	ldr	r3, [r3, #12]
 80069e0:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 80069e4:	687b      	ldr	r3, [r7, #4]
 80069e6:	60da      	str	r2, [r3, #12]

  /* Reset after a PHY select */
  ret = USB_CoreReset(USBx);
 80069e8:	6878      	ldr	r0, [r7, #4]
 80069ea:	f000 fa6f 	bl	8006ecc <USB_CoreReset>
 80069ee:	4603      	mov	r3, r0
 80069f0:	73fb      	strb	r3, [r7, #15]

  if (cfg.battery_charging_enable == 0U)
 80069f2:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80069f4:	2b00      	cmp	r3, #0
 80069f6:	d106      	bne.n	8006a06 <USB_CoreInit+0x3c>
  {
    /* Activate the USB Transceiver */
    USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 80069f8:	687b      	ldr	r3, [r7, #4]
 80069fa:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80069fc:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 8006a00:	687b      	ldr	r3, [r7, #4]
 8006a02:	639a      	str	r2, [r3, #56]	; 0x38
 8006a04:	e005      	b.n	8006a12 <USB_CoreInit+0x48>
  }
  else
  {
    /* Deactivate the USB Transceiver */
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 8006a06:	687b      	ldr	r3, [r7, #4]
 8006a08:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006a0a:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8006a0e:	687b      	ldr	r3, [r7, #4]
 8006a10:	639a      	str	r2, [r3, #56]	; 0x38
  }

  return ret;
 8006a12:	7bfb      	ldrb	r3, [r7, #15]
}
 8006a14:	4618      	mov	r0, r3
 8006a16:	3710      	adds	r7, #16
 8006a18:	46bd      	mov	sp, r7
 8006a1a:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8006a1e:	b004      	add	sp, #16
 8006a20:	4770      	bx	lr

08006a22 <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 8006a22:	b480      	push	{r7}
 8006a24:	b083      	sub	sp, #12
 8006a26:	af00      	add	r7, sp, #0
 8006a28:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 8006a2a:	687b      	ldr	r3, [r7, #4]
 8006a2c:	689b      	ldr	r3, [r3, #8]
 8006a2e:	f023 0201 	bic.w	r2, r3, #1
 8006a32:	687b      	ldr	r3, [r7, #4]
 8006a34:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 8006a36:	2300      	movs	r3, #0
}
 8006a38:	4618      	mov	r0, r3
 8006a3a:	370c      	adds	r7, #12
 8006a3c:	46bd      	mov	sp, r7
 8006a3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006a42:	4770      	bx	lr

08006a44 <USB_SetCurrentMode>:
  *            @arg USB_DEVICE_MODE Peripheral mode
  *            @arg USB_HOST_MODE Host mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_ModeTypeDef mode)
{
 8006a44:	b580      	push	{r7, lr}
 8006a46:	b084      	sub	sp, #16
 8006a48:	af00      	add	r7, sp, #0
 8006a4a:	6078      	str	r0, [r7, #4]
 8006a4c:	460b      	mov	r3, r1
 8006a4e:	70fb      	strb	r3, [r7, #3]
  uint32_t ms = 0U;
 8006a50:	2300      	movs	r3, #0
 8006a52:	60fb      	str	r3, [r7, #12]

  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 8006a54:	687b      	ldr	r3, [r7, #4]
 8006a56:	68db      	ldr	r3, [r3, #12]
 8006a58:	f023 42c0 	bic.w	r2, r3, #1610612736	; 0x60000000
 8006a5c:	687b      	ldr	r3, [r7, #4]
 8006a5e:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 8006a60:	78fb      	ldrb	r3, [r7, #3]
 8006a62:	2b01      	cmp	r3, #1
 8006a64:	d115      	bne.n	8006a92 <USB_SetCurrentMode+0x4e>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 8006a66:	687b      	ldr	r3, [r7, #4]
 8006a68:	68db      	ldr	r3, [r3, #12]
 8006a6a:	f043 5200 	orr.w	r2, r3, #536870912	; 0x20000000
 8006a6e:	687b      	ldr	r3, [r7, #4]
 8006a70:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(1U);
 8006a72:	2001      	movs	r0, #1
 8006a74:	f7fc f922 	bl	8002cbc <HAL_Delay>
      ms++;
 8006a78:	68fb      	ldr	r3, [r7, #12]
 8006a7a:	3301      	adds	r3, #1
 8006a7c:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_HOST_MODE) && (ms < 50U));
 8006a7e:	6878      	ldr	r0, [r7, #4]
 8006a80:	f000 fa16 	bl	8006eb0 <USB_GetMode>
 8006a84:	4603      	mov	r3, r0
 8006a86:	2b01      	cmp	r3, #1
 8006a88:	d01e      	beq.n	8006ac8 <USB_SetCurrentMode+0x84>
 8006a8a:	68fb      	ldr	r3, [r7, #12]
 8006a8c:	2b31      	cmp	r3, #49	; 0x31
 8006a8e:	d9f0      	bls.n	8006a72 <USB_SetCurrentMode+0x2e>
 8006a90:	e01a      	b.n	8006ac8 <USB_SetCurrentMode+0x84>
  }
  else if (mode == USB_DEVICE_MODE)
 8006a92:	78fb      	ldrb	r3, [r7, #3]
 8006a94:	2b00      	cmp	r3, #0
 8006a96:	d115      	bne.n	8006ac4 <USB_SetCurrentMode+0x80>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 8006a98:	687b      	ldr	r3, [r7, #4]
 8006a9a:	68db      	ldr	r3, [r3, #12]
 8006a9c:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 8006aa0:	687b      	ldr	r3, [r7, #4]
 8006aa2:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(1U);
 8006aa4:	2001      	movs	r0, #1
 8006aa6:	f7fc f909 	bl	8002cbc <HAL_Delay>
      ms++;
 8006aaa:	68fb      	ldr	r3, [r7, #12]
 8006aac:	3301      	adds	r3, #1
 8006aae:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_DEVICE_MODE) && (ms < 50U));
 8006ab0:	6878      	ldr	r0, [r7, #4]
 8006ab2:	f000 f9fd 	bl	8006eb0 <USB_GetMode>
 8006ab6:	4603      	mov	r3, r0
 8006ab8:	2b00      	cmp	r3, #0
 8006aba:	d005      	beq.n	8006ac8 <USB_SetCurrentMode+0x84>
 8006abc:	68fb      	ldr	r3, [r7, #12]
 8006abe:	2b31      	cmp	r3, #49	; 0x31
 8006ac0:	d9f0      	bls.n	8006aa4 <USB_SetCurrentMode+0x60>
 8006ac2:	e001      	b.n	8006ac8 <USB_SetCurrentMode+0x84>
  }
  else
  {
    return HAL_ERROR;
 8006ac4:	2301      	movs	r3, #1
 8006ac6:	e005      	b.n	8006ad4 <USB_SetCurrentMode+0x90>
  }

  if (ms == 50U)
 8006ac8:	68fb      	ldr	r3, [r7, #12]
 8006aca:	2b32      	cmp	r3, #50	; 0x32
 8006acc:	d101      	bne.n	8006ad2 <USB_SetCurrentMode+0x8e>
  {
    return HAL_ERROR;
 8006ace:	2301      	movs	r3, #1
 8006ad0:	e000      	b.n	8006ad4 <USB_SetCurrentMode+0x90>
  }

  return HAL_OK;
 8006ad2:	2300      	movs	r3, #0
}
 8006ad4:	4618      	mov	r0, r3
 8006ad6:	3710      	adds	r7, #16
 8006ad8:	46bd      	mov	sp, r7
 8006ada:	bd80      	pop	{r7, pc}

08006adc <USB_DevInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8006adc:	b084      	sub	sp, #16
 8006ade:	b580      	push	{r7, lr}
 8006ae0:	b086      	sub	sp, #24
 8006ae2:	af00      	add	r7, sp, #0
 8006ae4:	6078      	str	r0, [r7, #4]
 8006ae6:	f107 0024 	add.w	r0, r7, #36	; 0x24
 8006aea:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret = HAL_OK;
 8006aee:	2300      	movs	r3, #0
 8006af0:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006af2:	687b      	ldr	r3, [r7, #4]
 8006af4:	60fb      	str	r3, [r7, #12]
  uint32_t i;

  for (i = 0U; i < 15U; i++)
 8006af6:	2300      	movs	r3, #0
 8006af8:	613b      	str	r3, [r7, #16]
 8006afa:	e009      	b.n	8006b10 <USB_DevInit+0x34>
  {
    USBx->DIEPTXF[i] = 0U;
 8006afc:	687a      	ldr	r2, [r7, #4]
 8006afe:	693b      	ldr	r3, [r7, #16]
 8006b00:	3340      	adds	r3, #64	; 0x40
 8006b02:	009b      	lsls	r3, r3, #2
 8006b04:	4413      	add	r3, r2
 8006b06:	2200      	movs	r2, #0
 8006b08:	605a      	str	r2, [r3, #4]
  for (i = 0U; i < 15U; i++)
 8006b0a:	693b      	ldr	r3, [r7, #16]
 8006b0c:	3301      	adds	r3, #1
 8006b0e:	613b      	str	r3, [r7, #16]
 8006b10:	693b      	ldr	r3, [r7, #16]
 8006b12:	2b0e      	cmp	r3, #14
 8006b14:	d9f2      	bls.n	8006afc <USB_DevInit+0x20>
  }

  /* VBUS Sensing setup */
  if (cfg.vbus_sensing_enable == 0U)
 8006b16:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8006b18:	2b00      	cmp	r3, #0
 8006b1a:	d11c      	bne.n	8006b56 <USB_DevInit+0x7a>
  {
    USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 8006b1c:	68fb      	ldr	r3, [r7, #12]
 8006b1e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006b22:	685b      	ldr	r3, [r3, #4]
 8006b24:	68fa      	ldr	r2, [r7, #12]
 8006b26:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8006b2a:	f043 0302 	orr.w	r3, r3, #2
 8006b2e:	6053      	str	r3, [r2, #4]

    /* Deactivate VBUS Sensing B */
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBDEN;
 8006b30:	687b      	ldr	r3, [r7, #4]
 8006b32:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006b34:	f423 1200 	bic.w	r2, r3, #2097152	; 0x200000
 8006b38:	687b      	ldr	r3, [r7, #4]
 8006b3a:	639a      	str	r2, [r3, #56]	; 0x38

    /* B-peripheral session valid override enable */
    USBx->GOTGCTL |= USB_OTG_GOTGCTL_BVALOEN;
 8006b3c:	687b      	ldr	r3, [r7, #4]
 8006b3e:	681b      	ldr	r3, [r3, #0]
 8006b40:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8006b44:	687b      	ldr	r3, [r7, #4]
 8006b46:	601a      	str	r2, [r3, #0]
    USBx->GOTGCTL |= USB_OTG_GOTGCTL_BVALOVAL;
 8006b48:	687b      	ldr	r3, [r7, #4]
 8006b4a:	681b      	ldr	r3, [r3, #0]
 8006b4c:	f043 0280 	orr.w	r2, r3, #128	; 0x80
 8006b50:	687b      	ldr	r3, [r7, #4]
 8006b52:	601a      	str	r2, [r3, #0]
 8006b54:	e005      	b.n	8006b62 <USB_DevInit+0x86>
  }
  else
  {
    /* Enable HW VBUS sensing */
    USBx->GCCFG |= USB_OTG_GCCFG_VBDEN;
 8006b56:	687b      	ldr	r3, [r7, #4]
 8006b58:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006b5a:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 8006b5e:	687b      	ldr	r3, [r7, #4]
 8006b60:	639a      	str	r2, [r3, #56]	; 0x38
  }

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 8006b62:	68fb      	ldr	r3, [r7, #12]
 8006b64:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8006b68:	461a      	mov	r2, r3
 8006b6a:	2300      	movs	r3, #0
 8006b6c:	6013      	str	r3, [r2, #0]

  /* Device mode configuration */
  USBx_DEVICE->DCFG |= DCFG_FRAME_INTERVAL_80;
 8006b6e:	68fb      	ldr	r3, [r7, #12]
 8006b70:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006b74:	4619      	mov	r1, r3
 8006b76:	68fb      	ldr	r3, [r7, #12]
 8006b78:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006b7c:	461a      	mov	r2, r3
 8006b7e:	680b      	ldr	r3, [r1, #0]
 8006b80:	6013      	str	r3, [r2, #0]

  /* Set Core speed to Full speed mode */
  (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_FULL);
 8006b82:	2103      	movs	r1, #3
 8006b84:	6878      	ldr	r0, [r7, #4]
 8006b86:	f000 f959 	bl	8006e3c <USB_SetDevSpeed>

  /* Flush the FIFOs */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 8006b8a:	2110      	movs	r1, #16
 8006b8c:	6878      	ldr	r0, [r7, #4]
 8006b8e:	f000 f8f1 	bl	8006d74 <USB_FlushTxFifo>
 8006b92:	4603      	mov	r3, r0
 8006b94:	2b00      	cmp	r3, #0
 8006b96:	d001      	beq.n	8006b9c <USB_DevInit+0xc0>
  {
    ret = HAL_ERROR;
 8006b98:	2301      	movs	r3, #1
 8006b9a:	75fb      	strb	r3, [r7, #23]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 8006b9c:	6878      	ldr	r0, [r7, #4]
 8006b9e:	f000 f91d 	bl	8006ddc <USB_FlushRxFifo>
 8006ba2:	4603      	mov	r3, r0
 8006ba4:	2b00      	cmp	r3, #0
 8006ba6:	d001      	beq.n	8006bac <USB_DevInit+0xd0>
  {
    ret = HAL_ERROR;
 8006ba8:	2301      	movs	r3, #1
 8006baa:	75fb      	strb	r3, [r7, #23]
  }

  /* Clear all pending Device Interrupts */
  USBx_DEVICE->DIEPMSK = 0U;
 8006bac:	68fb      	ldr	r3, [r7, #12]
 8006bae:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006bb2:	461a      	mov	r2, r3
 8006bb4:	2300      	movs	r3, #0
 8006bb6:	6113      	str	r3, [r2, #16]
  USBx_DEVICE->DOEPMSK = 0U;
 8006bb8:	68fb      	ldr	r3, [r7, #12]
 8006bba:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006bbe:	461a      	mov	r2, r3
 8006bc0:	2300      	movs	r3, #0
 8006bc2:	6153      	str	r3, [r2, #20]
  USBx_DEVICE->DAINTMSK = 0U;
 8006bc4:	68fb      	ldr	r3, [r7, #12]
 8006bc6:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006bca:	461a      	mov	r2, r3
 8006bcc:	2300      	movs	r3, #0
 8006bce:	61d3      	str	r3, [r2, #28]

  for (i = 0U; i < cfg.dev_endpoints; i++)
 8006bd0:	2300      	movs	r3, #0
 8006bd2:	613b      	str	r3, [r7, #16]
 8006bd4:	e043      	b.n	8006c5e <USB_DevInit+0x182>
  {
    if ((USBx_INEP(i)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 8006bd6:	693b      	ldr	r3, [r7, #16]
 8006bd8:	015a      	lsls	r2, r3, #5
 8006bda:	68fb      	ldr	r3, [r7, #12]
 8006bdc:	4413      	add	r3, r2
 8006bde:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006be2:	681b      	ldr	r3, [r3, #0]
 8006be4:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8006be8:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8006bec:	d118      	bne.n	8006c20 <USB_DevInit+0x144>
    {
      if (i == 0U)
 8006bee:	693b      	ldr	r3, [r7, #16]
 8006bf0:	2b00      	cmp	r3, #0
 8006bf2:	d10a      	bne.n	8006c0a <USB_DevInit+0x12e>
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_SNAK;
 8006bf4:	693b      	ldr	r3, [r7, #16]
 8006bf6:	015a      	lsls	r2, r3, #5
 8006bf8:	68fb      	ldr	r3, [r7, #12]
 8006bfa:	4413      	add	r3, r2
 8006bfc:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006c00:	461a      	mov	r2, r3
 8006c02:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8006c06:	6013      	str	r3, [r2, #0]
 8006c08:	e013      	b.n	8006c32 <USB_DevInit+0x156>
      }
      else
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_EPDIS | USB_OTG_DIEPCTL_SNAK;
 8006c0a:	693b      	ldr	r3, [r7, #16]
 8006c0c:	015a      	lsls	r2, r3, #5
 8006c0e:	68fb      	ldr	r3, [r7, #12]
 8006c10:	4413      	add	r3, r2
 8006c12:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006c16:	461a      	mov	r2, r3
 8006c18:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8006c1c:	6013      	str	r3, [r2, #0]
 8006c1e:	e008      	b.n	8006c32 <USB_DevInit+0x156>
      }
    }
    else
    {
      USBx_INEP(i)->DIEPCTL = 0U;
 8006c20:	693b      	ldr	r3, [r7, #16]
 8006c22:	015a      	lsls	r2, r3, #5
 8006c24:	68fb      	ldr	r3, [r7, #12]
 8006c26:	4413      	add	r3, r2
 8006c28:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006c2c:	461a      	mov	r2, r3
 8006c2e:	2300      	movs	r3, #0
 8006c30:	6013      	str	r3, [r2, #0]
    }

    USBx_INEP(i)->DIEPTSIZ = 0U;
 8006c32:	693b      	ldr	r3, [r7, #16]
 8006c34:	015a      	lsls	r2, r3, #5
 8006c36:	68fb      	ldr	r3, [r7, #12]
 8006c38:	4413      	add	r3, r2
 8006c3a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006c3e:	461a      	mov	r2, r3
 8006c40:	2300      	movs	r3, #0
 8006c42:	6113      	str	r3, [r2, #16]
    USBx_INEP(i)->DIEPINT  = 0xFB7FU;
 8006c44:	693b      	ldr	r3, [r7, #16]
 8006c46:	015a      	lsls	r2, r3, #5
 8006c48:	68fb      	ldr	r3, [r7, #12]
 8006c4a:	4413      	add	r3, r2
 8006c4c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006c50:	461a      	mov	r2, r3
 8006c52:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8006c56:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 8006c58:	693b      	ldr	r3, [r7, #16]
 8006c5a:	3301      	adds	r3, #1
 8006c5c:	613b      	str	r3, [r7, #16]
 8006c5e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006c60:	693a      	ldr	r2, [r7, #16]
 8006c62:	429a      	cmp	r2, r3
 8006c64:	d3b7      	bcc.n	8006bd6 <USB_DevInit+0xfa>
  }

  for (i = 0U; i < cfg.dev_endpoints; i++)
 8006c66:	2300      	movs	r3, #0
 8006c68:	613b      	str	r3, [r7, #16]
 8006c6a:	e043      	b.n	8006cf4 <USB_DevInit+0x218>
  {
    if ((USBx_OUTEP(i)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8006c6c:	693b      	ldr	r3, [r7, #16]
 8006c6e:	015a      	lsls	r2, r3, #5
 8006c70:	68fb      	ldr	r3, [r7, #12]
 8006c72:	4413      	add	r3, r2
 8006c74:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006c78:	681b      	ldr	r3, [r3, #0]
 8006c7a:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8006c7e:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8006c82:	d118      	bne.n	8006cb6 <USB_DevInit+0x1da>
    {
      if (i == 0U)
 8006c84:	693b      	ldr	r3, [r7, #16]
 8006c86:	2b00      	cmp	r3, #0
 8006c88:	d10a      	bne.n	8006ca0 <USB_DevInit+0x1c4>
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_SNAK;
 8006c8a:	693b      	ldr	r3, [r7, #16]
 8006c8c:	015a      	lsls	r2, r3, #5
 8006c8e:	68fb      	ldr	r3, [r7, #12]
 8006c90:	4413      	add	r3, r2
 8006c92:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006c96:	461a      	mov	r2, r3
 8006c98:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8006c9c:	6013      	str	r3, [r2, #0]
 8006c9e:	e013      	b.n	8006cc8 <USB_DevInit+0x1ec>
      }
      else
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_EPDIS | USB_OTG_DOEPCTL_SNAK;
 8006ca0:	693b      	ldr	r3, [r7, #16]
 8006ca2:	015a      	lsls	r2, r3, #5
 8006ca4:	68fb      	ldr	r3, [r7, #12]
 8006ca6:	4413      	add	r3, r2
 8006ca8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006cac:	461a      	mov	r2, r3
 8006cae:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8006cb2:	6013      	str	r3, [r2, #0]
 8006cb4:	e008      	b.n	8006cc8 <USB_DevInit+0x1ec>
      }
    }
    else
    {
      USBx_OUTEP(i)->DOEPCTL = 0U;
 8006cb6:	693b      	ldr	r3, [r7, #16]
 8006cb8:	015a      	lsls	r2, r3, #5
 8006cba:	68fb      	ldr	r3, [r7, #12]
 8006cbc:	4413      	add	r3, r2
 8006cbe:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006cc2:	461a      	mov	r2, r3
 8006cc4:	2300      	movs	r3, #0
 8006cc6:	6013      	str	r3, [r2, #0]
    }

    USBx_OUTEP(i)->DOEPTSIZ = 0U;
 8006cc8:	693b      	ldr	r3, [r7, #16]
 8006cca:	015a      	lsls	r2, r3, #5
 8006ccc:	68fb      	ldr	r3, [r7, #12]
 8006cce:	4413      	add	r3, r2
 8006cd0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006cd4:	461a      	mov	r2, r3
 8006cd6:	2300      	movs	r3, #0
 8006cd8:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(i)->DOEPINT  = 0xFB7FU;
 8006cda:	693b      	ldr	r3, [r7, #16]
 8006cdc:	015a      	lsls	r2, r3, #5
 8006cde:	68fb      	ldr	r3, [r7, #12]
 8006ce0:	4413      	add	r3, r2
 8006ce2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006ce6:	461a      	mov	r2, r3
 8006ce8:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8006cec:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 8006cee:	693b      	ldr	r3, [r7, #16]
 8006cf0:	3301      	adds	r3, #1
 8006cf2:	613b      	str	r3, [r7, #16]
 8006cf4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006cf6:	693a      	ldr	r2, [r7, #16]
 8006cf8:	429a      	cmp	r2, r3
 8006cfa:	d3b7      	bcc.n	8006c6c <USB_DevInit+0x190>
  }

  USBx_DEVICE->DIEPMSK &= ~(USB_OTG_DIEPMSK_TXFURM);
 8006cfc:	68fb      	ldr	r3, [r7, #12]
 8006cfe:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006d02:	691b      	ldr	r3, [r3, #16]
 8006d04:	68fa      	ldr	r2, [r7, #12]
 8006d06:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8006d0a:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8006d0e:	6113      	str	r3, [r2, #16]

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 8006d10:	687b      	ldr	r3, [r7, #4]
 8006d12:	2200      	movs	r2, #0
 8006d14:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = 0xBFFFFFFFU;
 8006d16:	687b      	ldr	r3, [r7, #4]
 8006d18:	f06f 4280 	mvn.w	r2, #1073741824	; 0x40000000
 8006d1c:	615a      	str	r2, [r3, #20]

  /* Enable the common interrupts */
  USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 8006d1e:	687b      	ldr	r3, [r7, #4]
 8006d20:	699b      	ldr	r3, [r3, #24]
 8006d22:	f043 0210 	orr.w	r2, r3, #16
 8006d26:	687b      	ldr	r3, [r7, #4]
 8006d28:	619a      	str	r2, [r3, #24]

  /* Enable interrupts matching to the Device mode ONLY */
  USBx->GINTMSK |= USB_OTG_GINTMSK_USBSUSPM | USB_OTG_GINTMSK_USBRST |
 8006d2a:	687b      	ldr	r3, [r7, #4]
 8006d2c:	699a      	ldr	r2, [r3, #24]
 8006d2e:	4b10      	ldr	r3, [pc, #64]	; (8006d70 <USB_DevInit+0x294>)
 8006d30:	4313      	orrs	r3, r2
 8006d32:	687a      	ldr	r2, [r7, #4]
 8006d34:	6193      	str	r3, [r2, #24]
                   USB_OTG_GINTMSK_ENUMDNEM | USB_OTG_GINTMSK_IEPINT |
                   USB_OTG_GINTMSK_OEPINT   | USB_OTG_GINTMSK_IISOIXFRM |
                   USB_OTG_GINTMSK_PXFRM_IISOOXFRM | USB_OTG_GINTMSK_WUIM;

  if (cfg.Sof_enable != 0U)
 8006d36:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8006d38:	2b00      	cmp	r3, #0
 8006d3a:	d005      	beq.n	8006d48 <USB_DevInit+0x26c>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_SOFM;
 8006d3c:	687b      	ldr	r3, [r7, #4]
 8006d3e:	699b      	ldr	r3, [r3, #24]
 8006d40:	f043 0208 	orr.w	r2, r3, #8
 8006d44:	687b      	ldr	r3, [r7, #4]
 8006d46:	619a      	str	r2, [r3, #24]
  }

  if (cfg.vbus_sensing_enable == 1U)
 8006d48:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8006d4a:	2b01      	cmp	r3, #1
 8006d4c:	d107      	bne.n	8006d5e <USB_DevInit+0x282>
  {
    USBx->GINTMSK |= (USB_OTG_GINTMSK_SRQIM | USB_OTG_GINTMSK_OTGINT);
 8006d4e:	687b      	ldr	r3, [r7, #4]
 8006d50:	699b      	ldr	r3, [r3, #24]
 8006d52:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8006d56:	f043 0304 	orr.w	r3, r3, #4
 8006d5a:	687a      	ldr	r2, [r7, #4]
 8006d5c:	6193      	str	r3, [r2, #24]
  }

  return ret;
 8006d5e:	7dfb      	ldrb	r3, [r7, #23]
}
 8006d60:	4618      	mov	r0, r3
 8006d62:	3718      	adds	r7, #24
 8006d64:	46bd      	mov	sp, r7
 8006d66:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8006d6a:	b004      	add	sp, #16
 8006d6c:	4770      	bx	lr
 8006d6e:	bf00      	nop
 8006d70:	803c3800 	.word	0x803c3800

08006d74 <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 8006d74:	b480      	push	{r7}
 8006d76:	b085      	sub	sp, #20
 8006d78:	af00      	add	r7, sp, #0
 8006d7a:	6078      	str	r0, [r7, #4]
 8006d7c:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 8006d7e:	2300      	movs	r3, #0
 8006d80:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8006d82:	68fb      	ldr	r3, [r7, #12]
 8006d84:	3301      	adds	r3, #1
 8006d86:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8006d88:	68fb      	ldr	r3, [r7, #12]
 8006d8a:	4a13      	ldr	r2, [pc, #76]	; (8006dd8 <USB_FlushTxFifo+0x64>)
 8006d8c:	4293      	cmp	r3, r2
 8006d8e:	d901      	bls.n	8006d94 <USB_FlushTxFifo+0x20>
    {
      return HAL_TIMEOUT;
 8006d90:	2303      	movs	r3, #3
 8006d92:	e01b      	b.n	8006dcc <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8006d94:	687b      	ldr	r3, [r7, #4]
 8006d96:	691b      	ldr	r3, [r3, #16]
 8006d98:	2b00      	cmp	r3, #0
 8006d9a:	daf2      	bge.n	8006d82 <USB_FlushTxFifo+0xe>

  /* Flush TX Fifo */
  count = 0U;
 8006d9c:	2300      	movs	r3, #0
 8006d9e:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 8006da0:	683b      	ldr	r3, [r7, #0]
 8006da2:	019b      	lsls	r3, r3, #6
 8006da4:	f043 0220 	orr.w	r2, r3, #32
 8006da8:	687b      	ldr	r3, [r7, #4]
 8006daa:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8006dac:	68fb      	ldr	r3, [r7, #12]
 8006dae:	3301      	adds	r3, #1
 8006db0:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8006db2:	68fb      	ldr	r3, [r7, #12]
 8006db4:	4a08      	ldr	r2, [pc, #32]	; (8006dd8 <USB_FlushTxFifo+0x64>)
 8006db6:	4293      	cmp	r3, r2
 8006db8:	d901      	bls.n	8006dbe <USB_FlushTxFifo+0x4a>
    {
      return HAL_TIMEOUT;
 8006dba:	2303      	movs	r3, #3
 8006dbc:	e006      	b.n	8006dcc <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 8006dbe:	687b      	ldr	r3, [r7, #4]
 8006dc0:	691b      	ldr	r3, [r3, #16]
 8006dc2:	f003 0320 	and.w	r3, r3, #32
 8006dc6:	2b20      	cmp	r3, #32
 8006dc8:	d0f0      	beq.n	8006dac <USB_FlushTxFifo+0x38>

  return HAL_OK;
 8006dca:	2300      	movs	r3, #0
}
 8006dcc:	4618      	mov	r0, r3
 8006dce:	3714      	adds	r7, #20
 8006dd0:	46bd      	mov	sp, r7
 8006dd2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006dd6:	4770      	bx	lr
 8006dd8:	00030d40 	.word	0x00030d40

08006ddc <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo  Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 8006ddc:	b480      	push	{r7}
 8006dde:	b085      	sub	sp, #20
 8006de0:	af00      	add	r7, sp, #0
 8006de2:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8006de4:	2300      	movs	r3, #0
 8006de6:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8006de8:	68fb      	ldr	r3, [r7, #12]
 8006dea:	3301      	adds	r3, #1
 8006dec:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8006dee:	68fb      	ldr	r3, [r7, #12]
 8006df0:	4a11      	ldr	r2, [pc, #68]	; (8006e38 <USB_FlushRxFifo+0x5c>)
 8006df2:	4293      	cmp	r3, r2
 8006df4:	d901      	bls.n	8006dfa <USB_FlushRxFifo+0x1e>
    {
      return HAL_TIMEOUT;
 8006df6:	2303      	movs	r3, #3
 8006df8:	e018      	b.n	8006e2c <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8006dfa:	687b      	ldr	r3, [r7, #4]
 8006dfc:	691b      	ldr	r3, [r3, #16]
 8006dfe:	2b00      	cmp	r3, #0
 8006e00:	daf2      	bge.n	8006de8 <USB_FlushRxFifo+0xc>

  /* Flush RX Fifo */
  count = 0U;
 8006e02:	2300      	movs	r3, #0
 8006e04:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 8006e06:	687b      	ldr	r3, [r7, #4]
 8006e08:	2210      	movs	r2, #16
 8006e0a:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8006e0c:	68fb      	ldr	r3, [r7, #12]
 8006e0e:	3301      	adds	r3, #1
 8006e10:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8006e12:	68fb      	ldr	r3, [r7, #12]
 8006e14:	4a08      	ldr	r2, [pc, #32]	; (8006e38 <USB_FlushRxFifo+0x5c>)
 8006e16:	4293      	cmp	r3, r2
 8006e18:	d901      	bls.n	8006e1e <USB_FlushRxFifo+0x42>
    {
      return HAL_TIMEOUT;
 8006e1a:	2303      	movs	r3, #3
 8006e1c:	e006      	b.n	8006e2c <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 8006e1e:	687b      	ldr	r3, [r7, #4]
 8006e20:	691b      	ldr	r3, [r3, #16]
 8006e22:	f003 0310 	and.w	r3, r3, #16
 8006e26:	2b10      	cmp	r3, #16
 8006e28:	d0f0      	beq.n	8006e0c <USB_FlushRxFifo+0x30>

  return HAL_OK;
 8006e2a:	2300      	movs	r3, #0
}
 8006e2c:	4618      	mov	r0, r3
 8006e2e:	3714      	adds	r7, #20
 8006e30:	46bd      	mov	sp, r7
 8006e32:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006e36:	4770      	bx	lr
 8006e38:	00030d40 	.word	0x00030d40

08006e3c <USB_SetDevSpeed>:
  *          This parameter can be one of these values:
  *            @arg USB_OTG_SPEED_FULL: Full speed mode
  * @retval  Hal status
  */
HAL_StatusTypeDef USB_SetDevSpeed(USB_OTG_GlobalTypeDef *USBx, uint8_t speed)
{
 8006e3c:	b480      	push	{r7}
 8006e3e:	b085      	sub	sp, #20
 8006e40:	af00      	add	r7, sp, #0
 8006e42:	6078      	str	r0, [r7, #4]
 8006e44:	460b      	mov	r3, r1
 8006e46:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006e48:	687b      	ldr	r3, [r7, #4]
 8006e4a:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG |= speed;
 8006e4c:	68fb      	ldr	r3, [r7, #12]
 8006e4e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006e52:	681a      	ldr	r2, [r3, #0]
 8006e54:	78fb      	ldrb	r3, [r7, #3]
 8006e56:	68f9      	ldr	r1, [r7, #12]
 8006e58:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8006e5c:	4313      	orrs	r3, r2
 8006e5e:	600b      	str	r3, [r1, #0]
  return HAL_OK;
 8006e60:	2300      	movs	r3, #0
}
 8006e62:	4618      	mov	r0, r3
 8006e64:	3714      	adds	r7, #20
 8006e66:	46bd      	mov	sp, r7
 8006e68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006e6c:	4770      	bx	lr

08006e6e <USB_DevDisconnect>:
  * @brief  USB_DevDisconnect : Disconnect the USB device by disabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevDisconnect(USB_OTG_GlobalTypeDef *USBx)
{
 8006e6e:	b480      	push	{r7}
 8006e70:	b085      	sub	sp, #20
 8006e72:	af00      	add	r7, sp, #0
 8006e74:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006e76:	687b      	ldr	r3, [r7, #4]
 8006e78:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 8006e7a:	68fb      	ldr	r3, [r7, #12]
 8006e7c:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8006e80:	681b      	ldr	r3, [r3, #0]
 8006e82:	68fa      	ldr	r2, [r7, #12]
 8006e84:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 8006e88:	f023 0303 	bic.w	r3, r3, #3
 8006e8c:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 8006e8e:	68fb      	ldr	r3, [r7, #12]
 8006e90:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006e94:	685b      	ldr	r3, [r3, #4]
 8006e96:	68fa      	ldr	r2, [r7, #12]
 8006e98:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8006e9c:	f043 0302 	orr.w	r3, r3, #2
 8006ea0:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 8006ea2:	2300      	movs	r3, #0
}
 8006ea4:	4618      	mov	r0, r3
 8006ea6:	3714      	adds	r7, #20
 8006ea8:	46bd      	mov	sp, r7
 8006eaa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006eae:	4770      	bx	lr

08006eb0 <USB_GetMode>:
  *          This parameter can be one of these values:
  *           0 : Host
  *           1 : Device
  */
uint32_t USB_GetMode(USB_OTG_GlobalTypeDef *USBx)
{
 8006eb0:	b480      	push	{r7}
 8006eb2:	b083      	sub	sp, #12
 8006eb4:	af00      	add	r7, sp, #0
 8006eb6:	6078      	str	r0, [r7, #4]
  return ((USBx->GINTSTS) & 0x1U);
 8006eb8:	687b      	ldr	r3, [r7, #4]
 8006eba:	695b      	ldr	r3, [r3, #20]
 8006ebc:	f003 0301 	and.w	r3, r3, #1
}
 8006ec0:	4618      	mov	r0, r3
 8006ec2:	370c      	adds	r7, #12
 8006ec4:	46bd      	mov	sp, r7
 8006ec6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006eca:	4770      	bx	lr

08006ecc <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 8006ecc:	b480      	push	{r7}
 8006ece:	b085      	sub	sp, #20
 8006ed0:	af00      	add	r7, sp, #0
 8006ed2:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8006ed4:	2300      	movs	r3, #0
 8006ed6:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8006ed8:	68fb      	ldr	r3, [r7, #12]
 8006eda:	3301      	adds	r3, #1
 8006edc:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8006ede:	68fb      	ldr	r3, [r7, #12]
 8006ee0:	4a13      	ldr	r2, [pc, #76]	; (8006f30 <USB_CoreReset+0x64>)
 8006ee2:	4293      	cmp	r3, r2
 8006ee4:	d901      	bls.n	8006eea <USB_CoreReset+0x1e>
    {
      return HAL_TIMEOUT;
 8006ee6:	2303      	movs	r3, #3
 8006ee8:	e01b      	b.n	8006f22 <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8006eea:	687b      	ldr	r3, [r7, #4]
 8006eec:	691b      	ldr	r3, [r3, #16]
 8006eee:	2b00      	cmp	r3, #0
 8006ef0:	daf2      	bge.n	8006ed8 <USB_CoreReset+0xc>

  /* Core Soft Reset */
  count = 0U;
 8006ef2:	2300      	movs	r3, #0
 8006ef4:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 8006ef6:	687b      	ldr	r3, [r7, #4]
 8006ef8:	691b      	ldr	r3, [r3, #16]
 8006efa:	f043 0201 	orr.w	r2, r3, #1
 8006efe:	687b      	ldr	r3, [r7, #4]
 8006f00:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8006f02:	68fb      	ldr	r3, [r7, #12]
 8006f04:	3301      	adds	r3, #1
 8006f06:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8006f08:	68fb      	ldr	r3, [r7, #12]
 8006f0a:	4a09      	ldr	r2, [pc, #36]	; (8006f30 <USB_CoreReset+0x64>)
 8006f0c:	4293      	cmp	r3, r2
 8006f0e:	d901      	bls.n	8006f14 <USB_CoreReset+0x48>
    {
      return HAL_TIMEOUT;
 8006f10:	2303      	movs	r3, #3
 8006f12:	e006      	b.n	8006f22 <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 8006f14:	687b      	ldr	r3, [r7, #4]
 8006f16:	691b      	ldr	r3, [r3, #16]
 8006f18:	f003 0301 	and.w	r3, r3, #1
 8006f1c:	2b01      	cmp	r3, #1
 8006f1e:	d0f0      	beq.n	8006f02 <USB_CoreReset+0x36>

  return HAL_OK;
 8006f20:	2300      	movs	r3, #0
}
 8006f22:	4618      	mov	r0, r3
 8006f24:	3714      	adds	r7, #20
 8006f26:	46bd      	mov	sp, r7
 8006f28:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006f2c:	4770      	bx	lr
 8006f2e:	bf00      	nop
 8006f30:	00030d40 	.word	0x00030d40

08006f34 <__errno>:
 8006f34:	4b01      	ldr	r3, [pc, #4]	; (8006f3c <__errno+0x8>)
 8006f36:	6818      	ldr	r0, [r3, #0]
 8006f38:	4770      	bx	lr
 8006f3a:	bf00      	nop
 8006f3c:	2000017c 	.word	0x2000017c

08006f40 <__libc_init_array>:
 8006f40:	b570      	push	{r4, r5, r6, lr}
 8006f42:	4d0d      	ldr	r5, [pc, #52]	; (8006f78 <__libc_init_array+0x38>)
 8006f44:	4c0d      	ldr	r4, [pc, #52]	; (8006f7c <__libc_init_array+0x3c>)
 8006f46:	1b64      	subs	r4, r4, r5
 8006f48:	10a4      	asrs	r4, r4, #2
 8006f4a:	2600      	movs	r6, #0
 8006f4c:	42a6      	cmp	r6, r4
 8006f4e:	d109      	bne.n	8006f64 <__libc_init_array+0x24>
 8006f50:	4d0b      	ldr	r5, [pc, #44]	; (8006f80 <__libc_init_array+0x40>)
 8006f52:	4c0c      	ldr	r4, [pc, #48]	; (8006f84 <__libc_init_array+0x44>)
 8006f54:	f001 fc1a 	bl	800878c <_init>
 8006f58:	1b64      	subs	r4, r4, r5
 8006f5a:	10a4      	asrs	r4, r4, #2
 8006f5c:	2600      	movs	r6, #0
 8006f5e:	42a6      	cmp	r6, r4
 8006f60:	d105      	bne.n	8006f6e <__libc_init_array+0x2e>
 8006f62:	bd70      	pop	{r4, r5, r6, pc}
 8006f64:	f855 3b04 	ldr.w	r3, [r5], #4
 8006f68:	4798      	blx	r3
 8006f6a:	3601      	adds	r6, #1
 8006f6c:	e7ee      	b.n	8006f4c <__libc_init_array+0xc>
 8006f6e:	f855 3b04 	ldr.w	r3, [r5], #4
 8006f72:	4798      	blx	r3
 8006f74:	3601      	adds	r6, #1
 8006f76:	e7f2      	b.n	8006f5e <__libc_init_array+0x1e>
 8006f78:	080088d8 	.word	0x080088d8
 8006f7c:	080088d8 	.word	0x080088d8
 8006f80:	080088d8 	.word	0x080088d8
 8006f84:	080088dc 	.word	0x080088dc

08006f88 <memcpy>:
 8006f88:	440a      	add	r2, r1
 8006f8a:	4291      	cmp	r1, r2
 8006f8c:	f100 33ff 	add.w	r3, r0, #4294967295
 8006f90:	d100      	bne.n	8006f94 <memcpy+0xc>
 8006f92:	4770      	bx	lr
 8006f94:	b510      	push	{r4, lr}
 8006f96:	f811 4b01 	ldrb.w	r4, [r1], #1
 8006f9a:	f803 4f01 	strb.w	r4, [r3, #1]!
 8006f9e:	4291      	cmp	r1, r2
 8006fa0:	d1f9      	bne.n	8006f96 <memcpy+0xe>
 8006fa2:	bd10      	pop	{r4, pc}

08006fa4 <memmove>:
 8006fa4:	4288      	cmp	r0, r1
 8006fa6:	b510      	push	{r4, lr}
 8006fa8:	eb01 0402 	add.w	r4, r1, r2
 8006fac:	d902      	bls.n	8006fb4 <memmove+0x10>
 8006fae:	4284      	cmp	r4, r0
 8006fb0:	4623      	mov	r3, r4
 8006fb2:	d807      	bhi.n	8006fc4 <memmove+0x20>
 8006fb4:	1e43      	subs	r3, r0, #1
 8006fb6:	42a1      	cmp	r1, r4
 8006fb8:	d008      	beq.n	8006fcc <memmove+0x28>
 8006fba:	f811 2b01 	ldrb.w	r2, [r1], #1
 8006fbe:	f803 2f01 	strb.w	r2, [r3, #1]!
 8006fc2:	e7f8      	b.n	8006fb6 <memmove+0x12>
 8006fc4:	4402      	add	r2, r0
 8006fc6:	4601      	mov	r1, r0
 8006fc8:	428a      	cmp	r2, r1
 8006fca:	d100      	bne.n	8006fce <memmove+0x2a>
 8006fcc:	bd10      	pop	{r4, pc}
 8006fce:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8006fd2:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8006fd6:	e7f7      	b.n	8006fc8 <memmove+0x24>

08006fd8 <memset>:
 8006fd8:	4402      	add	r2, r0
 8006fda:	4603      	mov	r3, r0
 8006fdc:	4293      	cmp	r3, r2
 8006fde:	d100      	bne.n	8006fe2 <memset+0xa>
 8006fe0:	4770      	bx	lr
 8006fe2:	f803 1b01 	strb.w	r1, [r3], #1
 8006fe6:	e7f9      	b.n	8006fdc <memset+0x4>

08006fe8 <sniprintf>:
 8006fe8:	b40c      	push	{r2, r3}
 8006fea:	b530      	push	{r4, r5, lr}
 8006fec:	4b17      	ldr	r3, [pc, #92]	; (800704c <sniprintf+0x64>)
 8006fee:	1e0c      	subs	r4, r1, #0
 8006ff0:	681d      	ldr	r5, [r3, #0]
 8006ff2:	b09d      	sub	sp, #116	; 0x74
 8006ff4:	da08      	bge.n	8007008 <sniprintf+0x20>
 8006ff6:	238b      	movs	r3, #139	; 0x8b
 8006ff8:	602b      	str	r3, [r5, #0]
 8006ffa:	f04f 30ff 	mov.w	r0, #4294967295
 8006ffe:	b01d      	add	sp, #116	; 0x74
 8007000:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8007004:	b002      	add	sp, #8
 8007006:	4770      	bx	lr
 8007008:	f44f 7302 	mov.w	r3, #520	; 0x208
 800700c:	f8ad 3014 	strh.w	r3, [sp, #20]
 8007010:	bf14      	ite	ne
 8007012:	f104 33ff 	addne.w	r3, r4, #4294967295
 8007016:	4623      	moveq	r3, r4
 8007018:	9304      	str	r3, [sp, #16]
 800701a:	9307      	str	r3, [sp, #28]
 800701c:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8007020:	9002      	str	r0, [sp, #8]
 8007022:	9006      	str	r0, [sp, #24]
 8007024:	f8ad 3016 	strh.w	r3, [sp, #22]
 8007028:	9a20      	ldr	r2, [sp, #128]	; 0x80
 800702a:	ab21      	add	r3, sp, #132	; 0x84
 800702c:	a902      	add	r1, sp, #8
 800702e:	4628      	mov	r0, r5
 8007030:	9301      	str	r3, [sp, #4]
 8007032:	f000 f869 	bl	8007108 <_svfiprintf_r>
 8007036:	1c43      	adds	r3, r0, #1
 8007038:	bfbc      	itt	lt
 800703a:	238b      	movlt	r3, #139	; 0x8b
 800703c:	602b      	strlt	r3, [r5, #0]
 800703e:	2c00      	cmp	r4, #0
 8007040:	d0dd      	beq.n	8006ffe <sniprintf+0x16>
 8007042:	9b02      	ldr	r3, [sp, #8]
 8007044:	2200      	movs	r2, #0
 8007046:	701a      	strb	r2, [r3, #0]
 8007048:	e7d9      	b.n	8006ffe <sniprintf+0x16>
 800704a:	bf00      	nop
 800704c:	2000017c 	.word	0x2000017c

08007050 <__ssputs_r>:
 8007050:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8007054:	688e      	ldr	r6, [r1, #8]
 8007056:	429e      	cmp	r6, r3
 8007058:	4682      	mov	sl, r0
 800705a:	460c      	mov	r4, r1
 800705c:	4690      	mov	r8, r2
 800705e:	461f      	mov	r7, r3
 8007060:	d838      	bhi.n	80070d4 <__ssputs_r+0x84>
 8007062:	898a      	ldrh	r2, [r1, #12]
 8007064:	f412 6f90 	tst.w	r2, #1152	; 0x480
 8007068:	d032      	beq.n	80070d0 <__ssputs_r+0x80>
 800706a:	6825      	ldr	r5, [r4, #0]
 800706c:	6909      	ldr	r1, [r1, #16]
 800706e:	eba5 0901 	sub.w	r9, r5, r1
 8007072:	6965      	ldr	r5, [r4, #20]
 8007074:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8007078:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 800707c:	3301      	adds	r3, #1
 800707e:	444b      	add	r3, r9
 8007080:	106d      	asrs	r5, r5, #1
 8007082:	429d      	cmp	r5, r3
 8007084:	bf38      	it	cc
 8007086:	461d      	movcc	r5, r3
 8007088:	0553      	lsls	r3, r2, #21
 800708a:	d531      	bpl.n	80070f0 <__ssputs_r+0xa0>
 800708c:	4629      	mov	r1, r5
 800708e:	f000 fb3b 	bl	8007708 <_malloc_r>
 8007092:	4606      	mov	r6, r0
 8007094:	b950      	cbnz	r0, 80070ac <__ssputs_r+0x5c>
 8007096:	230c      	movs	r3, #12
 8007098:	f8ca 3000 	str.w	r3, [sl]
 800709c:	89a3      	ldrh	r3, [r4, #12]
 800709e:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80070a2:	81a3      	strh	r3, [r4, #12]
 80070a4:	f04f 30ff 	mov.w	r0, #4294967295
 80070a8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80070ac:	6921      	ldr	r1, [r4, #16]
 80070ae:	464a      	mov	r2, r9
 80070b0:	f7ff ff6a 	bl	8006f88 <memcpy>
 80070b4:	89a3      	ldrh	r3, [r4, #12]
 80070b6:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 80070ba:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80070be:	81a3      	strh	r3, [r4, #12]
 80070c0:	6126      	str	r6, [r4, #16]
 80070c2:	6165      	str	r5, [r4, #20]
 80070c4:	444e      	add	r6, r9
 80070c6:	eba5 0509 	sub.w	r5, r5, r9
 80070ca:	6026      	str	r6, [r4, #0]
 80070cc:	60a5      	str	r5, [r4, #8]
 80070ce:	463e      	mov	r6, r7
 80070d0:	42be      	cmp	r6, r7
 80070d2:	d900      	bls.n	80070d6 <__ssputs_r+0x86>
 80070d4:	463e      	mov	r6, r7
 80070d6:	6820      	ldr	r0, [r4, #0]
 80070d8:	4632      	mov	r2, r6
 80070da:	4641      	mov	r1, r8
 80070dc:	f7ff ff62 	bl	8006fa4 <memmove>
 80070e0:	68a3      	ldr	r3, [r4, #8]
 80070e2:	1b9b      	subs	r3, r3, r6
 80070e4:	60a3      	str	r3, [r4, #8]
 80070e6:	6823      	ldr	r3, [r4, #0]
 80070e8:	4433      	add	r3, r6
 80070ea:	6023      	str	r3, [r4, #0]
 80070ec:	2000      	movs	r0, #0
 80070ee:	e7db      	b.n	80070a8 <__ssputs_r+0x58>
 80070f0:	462a      	mov	r2, r5
 80070f2:	f000 fb7d 	bl	80077f0 <_realloc_r>
 80070f6:	4606      	mov	r6, r0
 80070f8:	2800      	cmp	r0, #0
 80070fa:	d1e1      	bne.n	80070c0 <__ssputs_r+0x70>
 80070fc:	6921      	ldr	r1, [r4, #16]
 80070fe:	4650      	mov	r0, sl
 8007100:	f000 fa96 	bl	8007630 <_free_r>
 8007104:	e7c7      	b.n	8007096 <__ssputs_r+0x46>
	...

08007108 <_svfiprintf_r>:
 8007108:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800710c:	4698      	mov	r8, r3
 800710e:	898b      	ldrh	r3, [r1, #12]
 8007110:	061b      	lsls	r3, r3, #24
 8007112:	b09d      	sub	sp, #116	; 0x74
 8007114:	4607      	mov	r7, r0
 8007116:	460d      	mov	r5, r1
 8007118:	4614      	mov	r4, r2
 800711a:	d50e      	bpl.n	800713a <_svfiprintf_r+0x32>
 800711c:	690b      	ldr	r3, [r1, #16]
 800711e:	b963      	cbnz	r3, 800713a <_svfiprintf_r+0x32>
 8007120:	2140      	movs	r1, #64	; 0x40
 8007122:	f000 faf1 	bl	8007708 <_malloc_r>
 8007126:	6028      	str	r0, [r5, #0]
 8007128:	6128      	str	r0, [r5, #16]
 800712a:	b920      	cbnz	r0, 8007136 <_svfiprintf_r+0x2e>
 800712c:	230c      	movs	r3, #12
 800712e:	603b      	str	r3, [r7, #0]
 8007130:	f04f 30ff 	mov.w	r0, #4294967295
 8007134:	e0d1      	b.n	80072da <_svfiprintf_r+0x1d2>
 8007136:	2340      	movs	r3, #64	; 0x40
 8007138:	616b      	str	r3, [r5, #20]
 800713a:	2300      	movs	r3, #0
 800713c:	9309      	str	r3, [sp, #36]	; 0x24
 800713e:	2320      	movs	r3, #32
 8007140:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8007144:	f8cd 800c 	str.w	r8, [sp, #12]
 8007148:	2330      	movs	r3, #48	; 0x30
 800714a:	f8df 81a8 	ldr.w	r8, [pc, #424]	; 80072f4 <_svfiprintf_r+0x1ec>
 800714e:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8007152:	f04f 0901 	mov.w	r9, #1
 8007156:	4623      	mov	r3, r4
 8007158:	469a      	mov	sl, r3
 800715a:	f813 2b01 	ldrb.w	r2, [r3], #1
 800715e:	b10a      	cbz	r2, 8007164 <_svfiprintf_r+0x5c>
 8007160:	2a25      	cmp	r2, #37	; 0x25
 8007162:	d1f9      	bne.n	8007158 <_svfiprintf_r+0x50>
 8007164:	ebba 0b04 	subs.w	fp, sl, r4
 8007168:	d00b      	beq.n	8007182 <_svfiprintf_r+0x7a>
 800716a:	465b      	mov	r3, fp
 800716c:	4622      	mov	r2, r4
 800716e:	4629      	mov	r1, r5
 8007170:	4638      	mov	r0, r7
 8007172:	f7ff ff6d 	bl	8007050 <__ssputs_r>
 8007176:	3001      	adds	r0, #1
 8007178:	f000 80aa 	beq.w	80072d0 <_svfiprintf_r+0x1c8>
 800717c:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800717e:	445a      	add	r2, fp
 8007180:	9209      	str	r2, [sp, #36]	; 0x24
 8007182:	f89a 3000 	ldrb.w	r3, [sl]
 8007186:	2b00      	cmp	r3, #0
 8007188:	f000 80a2 	beq.w	80072d0 <_svfiprintf_r+0x1c8>
 800718c:	2300      	movs	r3, #0
 800718e:	f04f 32ff 	mov.w	r2, #4294967295
 8007192:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8007196:	f10a 0a01 	add.w	sl, sl, #1
 800719a:	9304      	str	r3, [sp, #16]
 800719c:	9307      	str	r3, [sp, #28]
 800719e:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 80071a2:	931a      	str	r3, [sp, #104]	; 0x68
 80071a4:	4654      	mov	r4, sl
 80071a6:	2205      	movs	r2, #5
 80071a8:	f814 1b01 	ldrb.w	r1, [r4], #1
 80071ac:	4851      	ldr	r0, [pc, #324]	; (80072f4 <_svfiprintf_r+0x1ec>)
 80071ae:	f7f9 f80f 	bl	80001d0 <memchr>
 80071b2:	9a04      	ldr	r2, [sp, #16]
 80071b4:	b9d8      	cbnz	r0, 80071ee <_svfiprintf_r+0xe6>
 80071b6:	06d0      	lsls	r0, r2, #27
 80071b8:	bf44      	itt	mi
 80071ba:	2320      	movmi	r3, #32
 80071bc:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80071c0:	0711      	lsls	r1, r2, #28
 80071c2:	bf44      	itt	mi
 80071c4:	232b      	movmi	r3, #43	; 0x2b
 80071c6:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80071ca:	f89a 3000 	ldrb.w	r3, [sl]
 80071ce:	2b2a      	cmp	r3, #42	; 0x2a
 80071d0:	d015      	beq.n	80071fe <_svfiprintf_r+0xf6>
 80071d2:	9a07      	ldr	r2, [sp, #28]
 80071d4:	4654      	mov	r4, sl
 80071d6:	2000      	movs	r0, #0
 80071d8:	f04f 0c0a 	mov.w	ip, #10
 80071dc:	4621      	mov	r1, r4
 80071de:	f811 3b01 	ldrb.w	r3, [r1], #1
 80071e2:	3b30      	subs	r3, #48	; 0x30
 80071e4:	2b09      	cmp	r3, #9
 80071e6:	d94e      	bls.n	8007286 <_svfiprintf_r+0x17e>
 80071e8:	b1b0      	cbz	r0, 8007218 <_svfiprintf_r+0x110>
 80071ea:	9207      	str	r2, [sp, #28]
 80071ec:	e014      	b.n	8007218 <_svfiprintf_r+0x110>
 80071ee:	eba0 0308 	sub.w	r3, r0, r8
 80071f2:	fa09 f303 	lsl.w	r3, r9, r3
 80071f6:	4313      	orrs	r3, r2
 80071f8:	9304      	str	r3, [sp, #16]
 80071fa:	46a2      	mov	sl, r4
 80071fc:	e7d2      	b.n	80071a4 <_svfiprintf_r+0x9c>
 80071fe:	9b03      	ldr	r3, [sp, #12]
 8007200:	1d19      	adds	r1, r3, #4
 8007202:	681b      	ldr	r3, [r3, #0]
 8007204:	9103      	str	r1, [sp, #12]
 8007206:	2b00      	cmp	r3, #0
 8007208:	bfbb      	ittet	lt
 800720a:	425b      	neglt	r3, r3
 800720c:	f042 0202 	orrlt.w	r2, r2, #2
 8007210:	9307      	strge	r3, [sp, #28]
 8007212:	9307      	strlt	r3, [sp, #28]
 8007214:	bfb8      	it	lt
 8007216:	9204      	strlt	r2, [sp, #16]
 8007218:	7823      	ldrb	r3, [r4, #0]
 800721a:	2b2e      	cmp	r3, #46	; 0x2e
 800721c:	d10c      	bne.n	8007238 <_svfiprintf_r+0x130>
 800721e:	7863      	ldrb	r3, [r4, #1]
 8007220:	2b2a      	cmp	r3, #42	; 0x2a
 8007222:	d135      	bne.n	8007290 <_svfiprintf_r+0x188>
 8007224:	9b03      	ldr	r3, [sp, #12]
 8007226:	1d1a      	adds	r2, r3, #4
 8007228:	681b      	ldr	r3, [r3, #0]
 800722a:	9203      	str	r2, [sp, #12]
 800722c:	2b00      	cmp	r3, #0
 800722e:	bfb8      	it	lt
 8007230:	f04f 33ff 	movlt.w	r3, #4294967295
 8007234:	3402      	adds	r4, #2
 8007236:	9305      	str	r3, [sp, #20]
 8007238:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 8007304 <_svfiprintf_r+0x1fc>
 800723c:	7821      	ldrb	r1, [r4, #0]
 800723e:	2203      	movs	r2, #3
 8007240:	4650      	mov	r0, sl
 8007242:	f7f8 ffc5 	bl	80001d0 <memchr>
 8007246:	b140      	cbz	r0, 800725a <_svfiprintf_r+0x152>
 8007248:	2340      	movs	r3, #64	; 0x40
 800724a:	eba0 000a 	sub.w	r0, r0, sl
 800724e:	fa03 f000 	lsl.w	r0, r3, r0
 8007252:	9b04      	ldr	r3, [sp, #16]
 8007254:	4303      	orrs	r3, r0
 8007256:	3401      	adds	r4, #1
 8007258:	9304      	str	r3, [sp, #16]
 800725a:	f814 1b01 	ldrb.w	r1, [r4], #1
 800725e:	4826      	ldr	r0, [pc, #152]	; (80072f8 <_svfiprintf_r+0x1f0>)
 8007260:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8007264:	2206      	movs	r2, #6
 8007266:	f7f8 ffb3 	bl	80001d0 <memchr>
 800726a:	2800      	cmp	r0, #0
 800726c:	d038      	beq.n	80072e0 <_svfiprintf_r+0x1d8>
 800726e:	4b23      	ldr	r3, [pc, #140]	; (80072fc <_svfiprintf_r+0x1f4>)
 8007270:	bb1b      	cbnz	r3, 80072ba <_svfiprintf_r+0x1b2>
 8007272:	9b03      	ldr	r3, [sp, #12]
 8007274:	3307      	adds	r3, #7
 8007276:	f023 0307 	bic.w	r3, r3, #7
 800727a:	3308      	adds	r3, #8
 800727c:	9303      	str	r3, [sp, #12]
 800727e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8007280:	4433      	add	r3, r6
 8007282:	9309      	str	r3, [sp, #36]	; 0x24
 8007284:	e767      	b.n	8007156 <_svfiprintf_r+0x4e>
 8007286:	fb0c 3202 	mla	r2, ip, r2, r3
 800728a:	460c      	mov	r4, r1
 800728c:	2001      	movs	r0, #1
 800728e:	e7a5      	b.n	80071dc <_svfiprintf_r+0xd4>
 8007290:	2300      	movs	r3, #0
 8007292:	3401      	adds	r4, #1
 8007294:	9305      	str	r3, [sp, #20]
 8007296:	4619      	mov	r1, r3
 8007298:	f04f 0c0a 	mov.w	ip, #10
 800729c:	4620      	mov	r0, r4
 800729e:	f810 2b01 	ldrb.w	r2, [r0], #1
 80072a2:	3a30      	subs	r2, #48	; 0x30
 80072a4:	2a09      	cmp	r2, #9
 80072a6:	d903      	bls.n	80072b0 <_svfiprintf_r+0x1a8>
 80072a8:	2b00      	cmp	r3, #0
 80072aa:	d0c5      	beq.n	8007238 <_svfiprintf_r+0x130>
 80072ac:	9105      	str	r1, [sp, #20]
 80072ae:	e7c3      	b.n	8007238 <_svfiprintf_r+0x130>
 80072b0:	fb0c 2101 	mla	r1, ip, r1, r2
 80072b4:	4604      	mov	r4, r0
 80072b6:	2301      	movs	r3, #1
 80072b8:	e7f0      	b.n	800729c <_svfiprintf_r+0x194>
 80072ba:	ab03      	add	r3, sp, #12
 80072bc:	9300      	str	r3, [sp, #0]
 80072be:	462a      	mov	r2, r5
 80072c0:	4b0f      	ldr	r3, [pc, #60]	; (8007300 <_svfiprintf_r+0x1f8>)
 80072c2:	a904      	add	r1, sp, #16
 80072c4:	4638      	mov	r0, r7
 80072c6:	f3af 8000 	nop.w
 80072ca:	1c42      	adds	r2, r0, #1
 80072cc:	4606      	mov	r6, r0
 80072ce:	d1d6      	bne.n	800727e <_svfiprintf_r+0x176>
 80072d0:	89ab      	ldrh	r3, [r5, #12]
 80072d2:	065b      	lsls	r3, r3, #25
 80072d4:	f53f af2c 	bmi.w	8007130 <_svfiprintf_r+0x28>
 80072d8:	9809      	ldr	r0, [sp, #36]	; 0x24
 80072da:	b01d      	add	sp, #116	; 0x74
 80072dc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80072e0:	ab03      	add	r3, sp, #12
 80072e2:	9300      	str	r3, [sp, #0]
 80072e4:	462a      	mov	r2, r5
 80072e6:	4b06      	ldr	r3, [pc, #24]	; (8007300 <_svfiprintf_r+0x1f8>)
 80072e8:	a904      	add	r1, sp, #16
 80072ea:	4638      	mov	r0, r7
 80072ec:	f000 f87a 	bl	80073e4 <_printf_i>
 80072f0:	e7eb      	b.n	80072ca <_svfiprintf_r+0x1c2>
 80072f2:	bf00      	nop
 80072f4:	0800886c 	.word	0x0800886c
 80072f8:	08008876 	.word	0x08008876
 80072fc:	00000000 	.word	0x00000000
 8007300:	08007051 	.word	0x08007051
 8007304:	08008872 	.word	0x08008872

08007308 <_printf_common>:
 8007308:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800730c:	4616      	mov	r6, r2
 800730e:	4699      	mov	r9, r3
 8007310:	688a      	ldr	r2, [r1, #8]
 8007312:	690b      	ldr	r3, [r1, #16]
 8007314:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8007318:	4293      	cmp	r3, r2
 800731a:	bfb8      	it	lt
 800731c:	4613      	movlt	r3, r2
 800731e:	6033      	str	r3, [r6, #0]
 8007320:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8007324:	4607      	mov	r7, r0
 8007326:	460c      	mov	r4, r1
 8007328:	b10a      	cbz	r2, 800732e <_printf_common+0x26>
 800732a:	3301      	adds	r3, #1
 800732c:	6033      	str	r3, [r6, #0]
 800732e:	6823      	ldr	r3, [r4, #0]
 8007330:	0699      	lsls	r1, r3, #26
 8007332:	bf42      	ittt	mi
 8007334:	6833      	ldrmi	r3, [r6, #0]
 8007336:	3302      	addmi	r3, #2
 8007338:	6033      	strmi	r3, [r6, #0]
 800733a:	6825      	ldr	r5, [r4, #0]
 800733c:	f015 0506 	ands.w	r5, r5, #6
 8007340:	d106      	bne.n	8007350 <_printf_common+0x48>
 8007342:	f104 0a19 	add.w	sl, r4, #25
 8007346:	68e3      	ldr	r3, [r4, #12]
 8007348:	6832      	ldr	r2, [r6, #0]
 800734a:	1a9b      	subs	r3, r3, r2
 800734c:	42ab      	cmp	r3, r5
 800734e:	dc26      	bgt.n	800739e <_printf_common+0x96>
 8007350:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8007354:	1e13      	subs	r3, r2, #0
 8007356:	6822      	ldr	r2, [r4, #0]
 8007358:	bf18      	it	ne
 800735a:	2301      	movne	r3, #1
 800735c:	0692      	lsls	r2, r2, #26
 800735e:	d42b      	bmi.n	80073b8 <_printf_common+0xb0>
 8007360:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8007364:	4649      	mov	r1, r9
 8007366:	4638      	mov	r0, r7
 8007368:	47c0      	blx	r8
 800736a:	3001      	adds	r0, #1
 800736c:	d01e      	beq.n	80073ac <_printf_common+0xa4>
 800736e:	6823      	ldr	r3, [r4, #0]
 8007370:	68e5      	ldr	r5, [r4, #12]
 8007372:	6832      	ldr	r2, [r6, #0]
 8007374:	f003 0306 	and.w	r3, r3, #6
 8007378:	2b04      	cmp	r3, #4
 800737a:	bf08      	it	eq
 800737c:	1aad      	subeq	r5, r5, r2
 800737e:	68a3      	ldr	r3, [r4, #8]
 8007380:	6922      	ldr	r2, [r4, #16]
 8007382:	bf0c      	ite	eq
 8007384:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8007388:	2500      	movne	r5, #0
 800738a:	4293      	cmp	r3, r2
 800738c:	bfc4      	itt	gt
 800738e:	1a9b      	subgt	r3, r3, r2
 8007390:	18ed      	addgt	r5, r5, r3
 8007392:	2600      	movs	r6, #0
 8007394:	341a      	adds	r4, #26
 8007396:	42b5      	cmp	r5, r6
 8007398:	d11a      	bne.n	80073d0 <_printf_common+0xc8>
 800739a:	2000      	movs	r0, #0
 800739c:	e008      	b.n	80073b0 <_printf_common+0xa8>
 800739e:	2301      	movs	r3, #1
 80073a0:	4652      	mov	r2, sl
 80073a2:	4649      	mov	r1, r9
 80073a4:	4638      	mov	r0, r7
 80073a6:	47c0      	blx	r8
 80073a8:	3001      	adds	r0, #1
 80073aa:	d103      	bne.n	80073b4 <_printf_common+0xac>
 80073ac:	f04f 30ff 	mov.w	r0, #4294967295
 80073b0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80073b4:	3501      	adds	r5, #1
 80073b6:	e7c6      	b.n	8007346 <_printf_common+0x3e>
 80073b8:	18e1      	adds	r1, r4, r3
 80073ba:	1c5a      	adds	r2, r3, #1
 80073bc:	2030      	movs	r0, #48	; 0x30
 80073be:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 80073c2:	4422      	add	r2, r4
 80073c4:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 80073c8:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 80073cc:	3302      	adds	r3, #2
 80073ce:	e7c7      	b.n	8007360 <_printf_common+0x58>
 80073d0:	2301      	movs	r3, #1
 80073d2:	4622      	mov	r2, r4
 80073d4:	4649      	mov	r1, r9
 80073d6:	4638      	mov	r0, r7
 80073d8:	47c0      	blx	r8
 80073da:	3001      	adds	r0, #1
 80073dc:	d0e6      	beq.n	80073ac <_printf_common+0xa4>
 80073de:	3601      	adds	r6, #1
 80073e0:	e7d9      	b.n	8007396 <_printf_common+0x8e>
	...

080073e4 <_printf_i>:
 80073e4:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 80073e8:	7e0f      	ldrb	r7, [r1, #24]
 80073ea:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 80073ec:	2f78      	cmp	r7, #120	; 0x78
 80073ee:	4691      	mov	r9, r2
 80073f0:	4680      	mov	r8, r0
 80073f2:	460c      	mov	r4, r1
 80073f4:	469a      	mov	sl, r3
 80073f6:	f101 0243 	add.w	r2, r1, #67	; 0x43
 80073fa:	d807      	bhi.n	800740c <_printf_i+0x28>
 80073fc:	2f62      	cmp	r7, #98	; 0x62
 80073fe:	d80a      	bhi.n	8007416 <_printf_i+0x32>
 8007400:	2f00      	cmp	r7, #0
 8007402:	f000 80d8 	beq.w	80075b6 <_printf_i+0x1d2>
 8007406:	2f58      	cmp	r7, #88	; 0x58
 8007408:	f000 80a3 	beq.w	8007552 <_printf_i+0x16e>
 800740c:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8007410:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8007414:	e03a      	b.n	800748c <_printf_i+0xa8>
 8007416:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 800741a:	2b15      	cmp	r3, #21
 800741c:	d8f6      	bhi.n	800740c <_printf_i+0x28>
 800741e:	a101      	add	r1, pc, #4	; (adr r1, 8007424 <_printf_i+0x40>)
 8007420:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8007424:	0800747d 	.word	0x0800747d
 8007428:	08007491 	.word	0x08007491
 800742c:	0800740d 	.word	0x0800740d
 8007430:	0800740d 	.word	0x0800740d
 8007434:	0800740d 	.word	0x0800740d
 8007438:	0800740d 	.word	0x0800740d
 800743c:	08007491 	.word	0x08007491
 8007440:	0800740d 	.word	0x0800740d
 8007444:	0800740d 	.word	0x0800740d
 8007448:	0800740d 	.word	0x0800740d
 800744c:	0800740d 	.word	0x0800740d
 8007450:	0800759d 	.word	0x0800759d
 8007454:	080074c1 	.word	0x080074c1
 8007458:	0800757f 	.word	0x0800757f
 800745c:	0800740d 	.word	0x0800740d
 8007460:	0800740d 	.word	0x0800740d
 8007464:	080075bf 	.word	0x080075bf
 8007468:	0800740d 	.word	0x0800740d
 800746c:	080074c1 	.word	0x080074c1
 8007470:	0800740d 	.word	0x0800740d
 8007474:	0800740d 	.word	0x0800740d
 8007478:	08007587 	.word	0x08007587
 800747c:	682b      	ldr	r3, [r5, #0]
 800747e:	1d1a      	adds	r2, r3, #4
 8007480:	681b      	ldr	r3, [r3, #0]
 8007482:	602a      	str	r2, [r5, #0]
 8007484:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8007488:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 800748c:	2301      	movs	r3, #1
 800748e:	e0a3      	b.n	80075d8 <_printf_i+0x1f4>
 8007490:	6820      	ldr	r0, [r4, #0]
 8007492:	6829      	ldr	r1, [r5, #0]
 8007494:	0606      	lsls	r6, r0, #24
 8007496:	f101 0304 	add.w	r3, r1, #4
 800749a:	d50a      	bpl.n	80074b2 <_printf_i+0xce>
 800749c:	680e      	ldr	r6, [r1, #0]
 800749e:	602b      	str	r3, [r5, #0]
 80074a0:	2e00      	cmp	r6, #0
 80074a2:	da03      	bge.n	80074ac <_printf_i+0xc8>
 80074a4:	232d      	movs	r3, #45	; 0x2d
 80074a6:	4276      	negs	r6, r6
 80074a8:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80074ac:	485e      	ldr	r0, [pc, #376]	; (8007628 <_printf_i+0x244>)
 80074ae:	230a      	movs	r3, #10
 80074b0:	e019      	b.n	80074e6 <_printf_i+0x102>
 80074b2:	680e      	ldr	r6, [r1, #0]
 80074b4:	602b      	str	r3, [r5, #0]
 80074b6:	f010 0f40 	tst.w	r0, #64	; 0x40
 80074ba:	bf18      	it	ne
 80074bc:	b236      	sxthne	r6, r6
 80074be:	e7ef      	b.n	80074a0 <_printf_i+0xbc>
 80074c0:	682b      	ldr	r3, [r5, #0]
 80074c2:	6820      	ldr	r0, [r4, #0]
 80074c4:	1d19      	adds	r1, r3, #4
 80074c6:	6029      	str	r1, [r5, #0]
 80074c8:	0601      	lsls	r1, r0, #24
 80074ca:	d501      	bpl.n	80074d0 <_printf_i+0xec>
 80074cc:	681e      	ldr	r6, [r3, #0]
 80074ce:	e002      	b.n	80074d6 <_printf_i+0xf2>
 80074d0:	0646      	lsls	r6, r0, #25
 80074d2:	d5fb      	bpl.n	80074cc <_printf_i+0xe8>
 80074d4:	881e      	ldrh	r6, [r3, #0]
 80074d6:	4854      	ldr	r0, [pc, #336]	; (8007628 <_printf_i+0x244>)
 80074d8:	2f6f      	cmp	r7, #111	; 0x6f
 80074da:	bf0c      	ite	eq
 80074dc:	2308      	moveq	r3, #8
 80074de:	230a      	movne	r3, #10
 80074e0:	2100      	movs	r1, #0
 80074e2:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 80074e6:	6865      	ldr	r5, [r4, #4]
 80074e8:	60a5      	str	r5, [r4, #8]
 80074ea:	2d00      	cmp	r5, #0
 80074ec:	bfa2      	ittt	ge
 80074ee:	6821      	ldrge	r1, [r4, #0]
 80074f0:	f021 0104 	bicge.w	r1, r1, #4
 80074f4:	6021      	strge	r1, [r4, #0]
 80074f6:	b90e      	cbnz	r6, 80074fc <_printf_i+0x118>
 80074f8:	2d00      	cmp	r5, #0
 80074fa:	d04d      	beq.n	8007598 <_printf_i+0x1b4>
 80074fc:	4615      	mov	r5, r2
 80074fe:	fbb6 f1f3 	udiv	r1, r6, r3
 8007502:	fb03 6711 	mls	r7, r3, r1, r6
 8007506:	5dc7      	ldrb	r7, [r0, r7]
 8007508:	f805 7d01 	strb.w	r7, [r5, #-1]!
 800750c:	4637      	mov	r7, r6
 800750e:	42bb      	cmp	r3, r7
 8007510:	460e      	mov	r6, r1
 8007512:	d9f4      	bls.n	80074fe <_printf_i+0x11a>
 8007514:	2b08      	cmp	r3, #8
 8007516:	d10b      	bne.n	8007530 <_printf_i+0x14c>
 8007518:	6823      	ldr	r3, [r4, #0]
 800751a:	07de      	lsls	r6, r3, #31
 800751c:	d508      	bpl.n	8007530 <_printf_i+0x14c>
 800751e:	6923      	ldr	r3, [r4, #16]
 8007520:	6861      	ldr	r1, [r4, #4]
 8007522:	4299      	cmp	r1, r3
 8007524:	bfde      	ittt	le
 8007526:	2330      	movle	r3, #48	; 0x30
 8007528:	f805 3c01 	strble.w	r3, [r5, #-1]
 800752c:	f105 35ff 	addle.w	r5, r5, #4294967295
 8007530:	1b52      	subs	r2, r2, r5
 8007532:	6122      	str	r2, [r4, #16]
 8007534:	f8cd a000 	str.w	sl, [sp]
 8007538:	464b      	mov	r3, r9
 800753a:	aa03      	add	r2, sp, #12
 800753c:	4621      	mov	r1, r4
 800753e:	4640      	mov	r0, r8
 8007540:	f7ff fee2 	bl	8007308 <_printf_common>
 8007544:	3001      	adds	r0, #1
 8007546:	d14c      	bne.n	80075e2 <_printf_i+0x1fe>
 8007548:	f04f 30ff 	mov.w	r0, #4294967295
 800754c:	b004      	add	sp, #16
 800754e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8007552:	4835      	ldr	r0, [pc, #212]	; (8007628 <_printf_i+0x244>)
 8007554:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 8007558:	6829      	ldr	r1, [r5, #0]
 800755a:	6823      	ldr	r3, [r4, #0]
 800755c:	f851 6b04 	ldr.w	r6, [r1], #4
 8007560:	6029      	str	r1, [r5, #0]
 8007562:	061d      	lsls	r5, r3, #24
 8007564:	d514      	bpl.n	8007590 <_printf_i+0x1ac>
 8007566:	07df      	lsls	r7, r3, #31
 8007568:	bf44      	itt	mi
 800756a:	f043 0320 	orrmi.w	r3, r3, #32
 800756e:	6023      	strmi	r3, [r4, #0]
 8007570:	b91e      	cbnz	r6, 800757a <_printf_i+0x196>
 8007572:	6823      	ldr	r3, [r4, #0]
 8007574:	f023 0320 	bic.w	r3, r3, #32
 8007578:	6023      	str	r3, [r4, #0]
 800757a:	2310      	movs	r3, #16
 800757c:	e7b0      	b.n	80074e0 <_printf_i+0xfc>
 800757e:	6823      	ldr	r3, [r4, #0]
 8007580:	f043 0320 	orr.w	r3, r3, #32
 8007584:	6023      	str	r3, [r4, #0]
 8007586:	2378      	movs	r3, #120	; 0x78
 8007588:	4828      	ldr	r0, [pc, #160]	; (800762c <_printf_i+0x248>)
 800758a:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 800758e:	e7e3      	b.n	8007558 <_printf_i+0x174>
 8007590:	0659      	lsls	r1, r3, #25
 8007592:	bf48      	it	mi
 8007594:	b2b6      	uxthmi	r6, r6
 8007596:	e7e6      	b.n	8007566 <_printf_i+0x182>
 8007598:	4615      	mov	r5, r2
 800759a:	e7bb      	b.n	8007514 <_printf_i+0x130>
 800759c:	682b      	ldr	r3, [r5, #0]
 800759e:	6826      	ldr	r6, [r4, #0]
 80075a0:	6961      	ldr	r1, [r4, #20]
 80075a2:	1d18      	adds	r0, r3, #4
 80075a4:	6028      	str	r0, [r5, #0]
 80075a6:	0635      	lsls	r5, r6, #24
 80075a8:	681b      	ldr	r3, [r3, #0]
 80075aa:	d501      	bpl.n	80075b0 <_printf_i+0x1cc>
 80075ac:	6019      	str	r1, [r3, #0]
 80075ae:	e002      	b.n	80075b6 <_printf_i+0x1d2>
 80075b0:	0670      	lsls	r0, r6, #25
 80075b2:	d5fb      	bpl.n	80075ac <_printf_i+0x1c8>
 80075b4:	8019      	strh	r1, [r3, #0]
 80075b6:	2300      	movs	r3, #0
 80075b8:	6123      	str	r3, [r4, #16]
 80075ba:	4615      	mov	r5, r2
 80075bc:	e7ba      	b.n	8007534 <_printf_i+0x150>
 80075be:	682b      	ldr	r3, [r5, #0]
 80075c0:	1d1a      	adds	r2, r3, #4
 80075c2:	602a      	str	r2, [r5, #0]
 80075c4:	681d      	ldr	r5, [r3, #0]
 80075c6:	6862      	ldr	r2, [r4, #4]
 80075c8:	2100      	movs	r1, #0
 80075ca:	4628      	mov	r0, r5
 80075cc:	f7f8 fe00 	bl	80001d0 <memchr>
 80075d0:	b108      	cbz	r0, 80075d6 <_printf_i+0x1f2>
 80075d2:	1b40      	subs	r0, r0, r5
 80075d4:	6060      	str	r0, [r4, #4]
 80075d6:	6863      	ldr	r3, [r4, #4]
 80075d8:	6123      	str	r3, [r4, #16]
 80075da:	2300      	movs	r3, #0
 80075dc:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80075e0:	e7a8      	b.n	8007534 <_printf_i+0x150>
 80075e2:	6923      	ldr	r3, [r4, #16]
 80075e4:	462a      	mov	r2, r5
 80075e6:	4649      	mov	r1, r9
 80075e8:	4640      	mov	r0, r8
 80075ea:	47d0      	blx	sl
 80075ec:	3001      	adds	r0, #1
 80075ee:	d0ab      	beq.n	8007548 <_printf_i+0x164>
 80075f0:	6823      	ldr	r3, [r4, #0]
 80075f2:	079b      	lsls	r3, r3, #30
 80075f4:	d413      	bmi.n	800761e <_printf_i+0x23a>
 80075f6:	68e0      	ldr	r0, [r4, #12]
 80075f8:	9b03      	ldr	r3, [sp, #12]
 80075fa:	4298      	cmp	r0, r3
 80075fc:	bfb8      	it	lt
 80075fe:	4618      	movlt	r0, r3
 8007600:	e7a4      	b.n	800754c <_printf_i+0x168>
 8007602:	2301      	movs	r3, #1
 8007604:	4632      	mov	r2, r6
 8007606:	4649      	mov	r1, r9
 8007608:	4640      	mov	r0, r8
 800760a:	47d0      	blx	sl
 800760c:	3001      	adds	r0, #1
 800760e:	d09b      	beq.n	8007548 <_printf_i+0x164>
 8007610:	3501      	adds	r5, #1
 8007612:	68e3      	ldr	r3, [r4, #12]
 8007614:	9903      	ldr	r1, [sp, #12]
 8007616:	1a5b      	subs	r3, r3, r1
 8007618:	42ab      	cmp	r3, r5
 800761a:	dcf2      	bgt.n	8007602 <_printf_i+0x21e>
 800761c:	e7eb      	b.n	80075f6 <_printf_i+0x212>
 800761e:	2500      	movs	r5, #0
 8007620:	f104 0619 	add.w	r6, r4, #25
 8007624:	e7f5      	b.n	8007612 <_printf_i+0x22e>
 8007626:	bf00      	nop
 8007628:	0800887d 	.word	0x0800887d
 800762c:	0800888e 	.word	0x0800888e

08007630 <_free_r>:
 8007630:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8007632:	2900      	cmp	r1, #0
 8007634:	d044      	beq.n	80076c0 <_free_r+0x90>
 8007636:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800763a:	9001      	str	r0, [sp, #4]
 800763c:	2b00      	cmp	r3, #0
 800763e:	f1a1 0404 	sub.w	r4, r1, #4
 8007642:	bfb8      	it	lt
 8007644:	18e4      	addlt	r4, r4, r3
 8007646:	f000 f913 	bl	8007870 <__malloc_lock>
 800764a:	4a1e      	ldr	r2, [pc, #120]	; (80076c4 <_free_r+0x94>)
 800764c:	9801      	ldr	r0, [sp, #4]
 800764e:	6813      	ldr	r3, [r2, #0]
 8007650:	b933      	cbnz	r3, 8007660 <_free_r+0x30>
 8007652:	6063      	str	r3, [r4, #4]
 8007654:	6014      	str	r4, [r2, #0]
 8007656:	b003      	add	sp, #12
 8007658:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800765c:	f000 b90e 	b.w	800787c <__malloc_unlock>
 8007660:	42a3      	cmp	r3, r4
 8007662:	d908      	bls.n	8007676 <_free_r+0x46>
 8007664:	6825      	ldr	r5, [r4, #0]
 8007666:	1961      	adds	r1, r4, r5
 8007668:	428b      	cmp	r3, r1
 800766a:	bf01      	itttt	eq
 800766c:	6819      	ldreq	r1, [r3, #0]
 800766e:	685b      	ldreq	r3, [r3, #4]
 8007670:	1949      	addeq	r1, r1, r5
 8007672:	6021      	streq	r1, [r4, #0]
 8007674:	e7ed      	b.n	8007652 <_free_r+0x22>
 8007676:	461a      	mov	r2, r3
 8007678:	685b      	ldr	r3, [r3, #4]
 800767a:	b10b      	cbz	r3, 8007680 <_free_r+0x50>
 800767c:	42a3      	cmp	r3, r4
 800767e:	d9fa      	bls.n	8007676 <_free_r+0x46>
 8007680:	6811      	ldr	r1, [r2, #0]
 8007682:	1855      	adds	r5, r2, r1
 8007684:	42a5      	cmp	r5, r4
 8007686:	d10b      	bne.n	80076a0 <_free_r+0x70>
 8007688:	6824      	ldr	r4, [r4, #0]
 800768a:	4421      	add	r1, r4
 800768c:	1854      	adds	r4, r2, r1
 800768e:	42a3      	cmp	r3, r4
 8007690:	6011      	str	r1, [r2, #0]
 8007692:	d1e0      	bne.n	8007656 <_free_r+0x26>
 8007694:	681c      	ldr	r4, [r3, #0]
 8007696:	685b      	ldr	r3, [r3, #4]
 8007698:	6053      	str	r3, [r2, #4]
 800769a:	4421      	add	r1, r4
 800769c:	6011      	str	r1, [r2, #0]
 800769e:	e7da      	b.n	8007656 <_free_r+0x26>
 80076a0:	d902      	bls.n	80076a8 <_free_r+0x78>
 80076a2:	230c      	movs	r3, #12
 80076a4:	6003      	str	r3, [r0, #0]
 80076a6:	e7d6      	b.n	8007656 <_free_r+0x26>
 80076a8:	6825      	ldr	r5, [r4, #0]
 80076aa:	1961      	adds	r1, r4, r5
 80076ac:	428b      	cmp	r3, r1
 80076ae:	bf04      	itt	eq
 80076b0:	6819      	ldreq	r1, [r3, #0]
 80076b2:	685b      	ldreq	r3, [r3, #4]
 80076b4:	6063      	str	r3, [r4, #4]
 80076b6:	bf04      	itt	eq
 80076b8:	1949      	addeq	r1, r1, r5
 80076ba:	6021      	streq	r1, [r4, #0]
 80076bc:	6054      	str	r4, [r2, #4]
 80076be:	e7ca      	b.n	8007656 <_free_r+0x26>
 80076c0:	b003      	add	sp, #12
 80076c2:	bd30      	pop	{r4, r5, pc}
 80076c4:	2000102c 	.word	0x2000102c

080076c8 <sbrk_aligned>:
 80076c8:	b570      	push	{r4, r5, r6, lr}
 80076ca:	4e0e      	ldr	r6, [pc, #56]	; (8007704 <sbrk_aligned+0x3c>)
 80076cc:	460c      	mov	r4, r1
 80076ce:	6831      	ldr	r1, [r6, #0]
 80076d0:	4605      	mov	r5, r0
 80076d2:	b911      	cbnz	r1, 80076da <sbrk_aligned+0x12>
 80076d4:	f000 f8bc 	bl	8007850 <_sbrk_r>
 80076d8:	6030      	str	r0, [r6, #0]
 80076da:	4621      	mov	r1, r4
 80076dc:	4628      	mov	r0, r5
 80076de:	f000 f8b7 	bl	8007850 <_sbrk_r>
 80076e2:	1c43      	adds	r3, r0, #1
 80076e4:	d00a      	beq.n	80076fc <sbrk_aligned+0x34>
 80076e6:	1cc4      	adds	r4, r0, #3
 80076e8:	f024 0403 	bic.w	r4, r4, #3
 80076ec:	42a0      	cmp	r0, r4
 80076ee:	d007      	beq.n	8007700 <sbrk_aligned+0x38>
 80076f0:	1a21      	subs	r1, r4, r0
 80076f2:	4628      	mov	r0, r5
 80076f4:	f000 f8ac 	bl	8007850 <_sbrk_r>
 80076f8:	3001      	adds	r0, #1
 80076fa:	d101      	bne.n	8007700 <sbrk_aligned+0x38>
 80076fc:	f04f 34ff 	mov.w	r4, #4294967295
 8007700:	4620      	mov	r0, r4
 8007702:	bd70      	pop	{r4, r5, r6, pc}
 8007704:	20001030 	.word	0x20001030

08007708 <_malloc_r>:
 8007708:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800770c:	1ccd      	adds	r5, r1, #3
 800770e:	f025 0503 	bic.w	r5, r5, #3
 8007712:	3508      	adds	r5, #8
 8007714:	2d0c      	cmp	r5, #12
 8007716:	bf38      	it	cc
 8007718:	250c      	movcc	r5, #12
 800771a:	2d00      	cmp	r5, #0
 800771c:	4607      	mov	r7, r0
 800771e:	db01      	blt.n	8007724 <_malloc_r+0x1c>
 8007720:	42a9      	cmp	r1, r5
 8007722:	d905      	bls.n	8007730 <_malloc_r+0x28>
 8007724:	230c      	movs	r3, #12
 8007726:	603b      	str	r3, [r7, #0]
 8007728:	2600      	movs	r6, #0
 800772a:	4630      	mov	r0, r6
 800772c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8007730:	4e2e      	ldr	r6, [pc, #184]	; (80077ec <_malloc_r+0xe4>)
 8007732:	f000 f89d 	bl	8007870 <__malloc_lock>
 8007736:	6833      	ldr	r3, [r6, #0]
 8007738:	461c      	mov	r4, r3
 800773a:	bb34      	cbnz	r4, 800778a <_malloc_r+0x82>
 800773c:	4629      	mov	r1, r5
 800773e:	4638      	mov	r0, r7
 8007740:	f7ff ffc2 	bl	80076c8 <sbrk_aligned>
 8007744:	1c43      	adds	r3, r0, #1
 8007746:	4604      	mov	r4, r0
 8007748:	d14d      	bne.n	80077e6 <_malloc_r+0xde>
 800774a:	6834      	ldr	r4, [r6, #0]
 800774c:	4626      	mov	r6, r4
 800774e:	2e00      	cmp	r6, #0
 8007750:	d140      	bne.n	80077d4 <_malloc_r+0xcc>
 8007752:	6823      	ldr	r3, [r4, #0]
 8007754:	4631      	mov	r1, r6
 8007756:	4638      	mov	r0, r7
 8007758:	eb04 0803 	add.w	r8, r4, r3
 800775c:	f000 f878 	bl	8007850 <_sbrk_r>
 8007760:	4580      	cmp	r8, r0
 8007762:	d13a      	bne.n	80077da <_malloc_r+0xd2>
 8007764:	6821      	ldr	r1, [r4, #0]
 8007766:	3503      	adds	r5, #3
 8007768:	1a6d      	subs	r5, r5, r1
 800776a:	f025 0503 	bic.w	r5, r5, #3
 800776e:	3508      	adds	r5, #8
 8007770:	2d0c      	cmp	r5, #12
 8007772:	bf38      	it	cc
 8007774:	250c      	movcc	r5, #12
 8007776:	4629      	mov	r1, r5
 8007778:	4638      	mov	r0, r7
 800777a:	f7ff ffa5 	bl	80076c8 <sbrk_aligned>
 800777e:	3001      	adds	r0, #1
 8007780:	d02b      	beq.n	80077da <_malloc_r+0xd2>
 8007782:	6823      	ldr	r3, [r4, #0]
 8007784:	442b      	add	r3, r5
 8007786:	6023      	str	r3, [r4, #0]
 8007788:	e00e      	b.n	80077a8 <_malloc_r+0xa0>
 800778a:	6822      	ldr	r2, [r4, #0]
 800778c:	1b52      	subs	r2, r2, r5
 800778e:	d41e      	bmi.n	80077ce <_malloc_r+0xc6>
 8007790:	2a0b      	cmp	r2, #11
 8007792:	d916      	bls.n	80077c2 <_malloc_r+0xba>
 8007794:	1961      	adds	r1, r4, r5
 8007796:	42a3      	cmp	r3, r4
 8007798:	6025      	str	r5, [r4, #0]
 800779a:	bf18      	it	ne
 800779c:	6059      	strne	r1, [r3, #4]
 800779e:	6863      	ldr	r3, [r4, #4]
 80077a0:	bf08      	it	eq
 80077a2:	6031      	streq	r1, [r6, #0]
 80077a4:	5162      	str	r2, [r4, r5]
 80077a6:	604b      	str	r3, [r1, #4]
 80077a8:	4638      	mov	r0, r7
 80077aa:	f104 060b 	add.w	r6, r4, #11
 80077ae:	f000 f865 	bl	800787c <__malloc_unlock>
 80077b2:	f026 0607 	bic.w	r6, r6, #7
 80077b6:	1d23      	adds	r3, r4, #4
 80077b8:	1af2      	subs	r2, r6, r3
 80077ba:	d0b6      	beq.n	800772a <_malloc_r+0x22>
 80077bc:	1b9b      	subs	r3, r3, r6
 80077be:	50a3      	str	r3, [r4, r2]
 80077c0:	e7b3      	b.n	800772a <_malloc_r+0x22>
 80077c2:	6862      	ldr	r2, [r4, #4]
 80077c4:	42a3      	cmp	r3, r4
 80077c6:	bf0c      	ite	eq
 80077c8:	6032      	streq	r2, [r6, #0]
 80077ca:	605a      	strne	r2, [r3, #4]
 80077cc:	e7ec      	b.n	80077a8 <_malloc_r+0xa0>
 80077ce:	4623      	mov	r3, r4
 80077d0:	6864      	ldr	r4, [r4, #4]
 80077d2:	e7b2      	b.n	800773a <_malloc_r+0x32>
 80077d4:	4634      	mov	r4, r6
 80077d6:	6876      	ldr	r6, [r6, #4]
 80077d8:	e7b9      	b.n	800774e <_malloc_r+0x46>
 80077da:	230c      	movs	r3, #12
 80077dc:	603b      	str	r3, [r7, #0]
 80077de:	4638      	mov	r0, r7
 80077e0:	f000 f84c 	bl	800787c <__malloc_unlock>
 80077e4:	e7a1      	b.n	800772a <_malloc_r+0x22>
 80077e6:	6025      	str	r5, [r4, #0]
 80077e8:	e7de      	b.n	80077a8 <_malloc_r+0xa0>
 80077ea:	bf00      	nop
 80077ec:	2000102c 	.word	0x2000102c

080077f0 <_realloc_r>:
 80077f0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80077f4:	4680      	mov	r8, r0
 80077f6:	4614      	mov	r4, r2
 80077f8:	460e      	mov	r6, r1
 80077fa:	b921      	cbnz	r1, 8007806 <_realloc_r+0x16>
 80077fc:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8007800:	4611      	mov	r1, r2
 8007802:	f7ff bf81 	b.w	8007708 <_malloc_r>
 8007806:	b92a      	cbnz	r2, 8007814 <_realloc_r+0x24>
 8007808:	f7ff ff12 	bl	8007630 <_free_r>
 800780c:	4625      	mov	r5, r4
 800780e:	4628      	mov	r0, r5
 8007810:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8007814:	f000 f838 	bl	8007888 <_malloc_usable_size_r>
 8007818:	4284      	cmp	r4, r0
 800781a:	4607      	mov	r7, r0
 800781c:	d802      	bhi.n	8007824 <_realloc_r+0x34>
 800781e:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 8007822:	d812      	bhi.n	800784a <_realloc_r+0x5a>
 8007824:	4621      	mov	r1, r4
 8007826:	4640      	mov	r0, r8
 8007828:	f7ff ff6e 	bl	8007708 <_malloc_r>
 800782c:	4605      	mov	r5, r0
 800782e:	2800      	cmp	r0, #0
 8007830:	d0ed      	beq.n	800780e <_realloc_r+0x1e>
 8007832:	42bc      	cmp	r4, r7
 8007834:	4622      	mov	r2, r4
 8007836:	4631      	mov	r1, r6
 8007838:	bf28      	it	cs
 800783a:	463a      	movcs	r2, r7
 800783c:	f7ff fba4 	bl	8006f88 <memcpy>
 8007840:	4631      	mov	r1, r6
 8007842:	4640      	mov	r0, r8
 8007844:	f7ff fef4 	bl	8007630 <_free_r>
 8007848:	e7e1      	b.n	800780e <_realloc_r+0x1e>
 800784a:	4635      	mov	r5, r6
 800784c:	e7df      	b.n	800780e <_realloc_r+0x1e>
	...

08007850 <_sbrk_r>:
 8007850:	b538      	push	{r3, r4, r5, lr}
 8007852:	4d06      	ldr	r5, [pc, #24]	; (800786c <_sbrk_r+0x1c>)
 8007854:	2300      	movs	r3, #0
 8007856:	4604      	mov	r4, r0
 8007858:	4608      	mov	r0, r1
 800785a:	602b      	str	r3, [r5, #0]
 800785c:	f7fa fd3a 	bl	80022d4 <_sbrk>
 8007860:	1c43      	adds	r3, r0, #1
 8007862:	d102      	bne.n	800786a <_sbrk_r+0x1a>
 8007864:	682b      	ldr	r3, [r5, #0]
 8007866:	b103      	cbz	r3, 800786a <_sbrk_r+0x1a>
 8007868:	6023      	str	r3, [r4, #0]
 800786a:	bd38      	pop	{r3, r4, r5, pc}
 800786c:	20001034 	.word	0x20001034

08007870 <__malloc_lock>:
 8007870:	4801      	ldr	r0, [pc, #4]	; (8007878 <__malloc_lock+0x8>)
 8007872:	f000 b811 	b.w	8007898 <__retarget_lock_acquire_recursive>
 8007876:	bf00      	nop
 8007878:	20001038 	.word	0x20001038

0800787c <__malloc_unlock>:
 800787c:	4801      	ldr	r0, [pc, #4]	; (8007884 <__malloc_unlock+0x8>)
 800787e:	f000 b80c 	b.w	800789a <__retarget_lock_release_recursive>
 8007882:	bf00      	nop
 8007884:	20001038 	.word	0x20001038

08007888 <_malloc_usable_size_r>:
 8007888:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800788c:	1f18      	subs	r0, r3, #4
 800788e:	2b00      	cmp	r3, #0
 8007890:	bfbc      	itt	lt
 8007892:	580b      	ldrlt	r3, [r1, r0]
 8007894:	18c0      	addlt	r0, r0, r3
 8007896:	4770      	bx	lr

08007898 <__retarget_lock_acquire_recursive>:
 8007898:	4770      	bx	lr

0800789a <__retarget_lock_release_recursive>:
 800789a:	4770      	bx	lr

0800789c <trunc>:
 800789c:	ec51 0b10 	vmov	r0, r1, d0
 80078a0:	f3c1 520a 	ubfx	r2, r1, #20, #11
 80078a4:	f2a2 33ff 	subw	r3, r2, #1023	; 0x3ff
 80078a8:	2b13      	cmp	r3, #19
 80078aa:	b5d0      	push	{r4, r6, r7, lr}
 80078ac:	460c      	mov	r4, r1
 80078ae:	dc10      	bgt.n	80078d2 <trunc+0x36>
 80078b0:	2b00      	cmp	r3, #0
 80078b2:	bfa5      	ittet	ge
 80078b4:	4a11      	ldrge	r2, [pc, #68]	; (80078fc <trunc+0x60>)
 80078b6:	fa42 f303 	asrge.w	r3, r2, r3
 80078ba:	2100      	movlt	r1, #0
 80078bc:	2100      	movge	r1, #0
 80078be:	bfb9      	ittee	lt
 80078c0:	2000      	movlt	r0, #0
 80078c2:	f004 4100 	andlt.w	r1, r4, #2147483648	; 0x80000000
 80078c6:	2000      	movge	r0, #0
 80078c8:	ea24 0103 	bicge.w	r1, r4, r3
 80078cc:	ec41 0b10 	vmov	d0, r0, r1
 80078d0:	bdd0      	pop	{r4, r6, r7, pc}
 80078d2:	2b33      	cmp	r3, #51	; 0x33
 80078d4:	dd08      	ble.n	80078e8 <trunc+0x4c>
 80078d6:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80078da:	d1f7      	bne.n	80078cc <trunc+0x30>
 80078dc:	ee10 2a10 	vmov	r2, s0
 80078e0:	460b      	mov	r3, r1
 80078e2:	f7f8 fccb 	bl	800027c <__adddf3>
 80078e6:	e7f1      	b.n	80078cc <trunc+0x30>
 80078e8:	f2a2 4213 	subw	r2, r2, #1043	; 0x413
 80078ec:	f04f 33ff 	mov.w	r3, #4294967295
 80078f0:	fa23 f202 	lsr.w	r2, r3, r2
 80078f4:	ea20 0602 	bic.w	r6, r0, r2
 80078f8:	4630      	mov	r0, r6
 80078fa:	e7e7      	b.n	80078cc <trunc+0x30>
 80078fc:	000fffff 	.word	0x000fffff

08007900 <pow>:
 8007900:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007902:	ed2d 8b02 	vpush	{d8}
 8007906:	eeb0 8a40 	vmov.f32	s16, s0
 800790a:	eef0 8a60 	vmov.f32	s17, s1
 800790e:	ec55 4b11 	vmov	r4, r5, d1
 8007912:	f000 f891 	bl	8007a38 <__ieee754_pow>
 8007916:	4622      	mov	r2, r4
 8007918:	462b      	mov	r3, r5
 800791a:	4620      	mov	r0, r4
 800791c:	4629      	mov	r1, r5
 800791e:	ec57 6b10 	vmov	r6, r7, d0
 8007922:	f7f9 f8fb 	bl	8000b1c <__aeabi_dcmpun>
 8007926:	2800      	cmp	r0, #0
 8007928:	d13b      	bne.n	80079a2 <pow+0xa2>
 800792a:	ec51 0b18 	vmov	r0, r1, d8
 800792e:	2200      	movs	r2, #0
 8007930:	2300      	movs	r3, #0
 8007932:	f7f9 f8c1 	bl	8000ab8 <__aeabi_dcmpeq>
 8007936:	b1b8      	cbz	r0, 8007968 <pow+0x68>
 8007938:	2200      	movs	r2, #0
 800793a:	2300      	movs	r3, #0
 800793c:	4620      	mov	r0, r4
 800793e:	4629      	mov	r1, r5
 8007940:	f7f9 f8ba 	bl	8000ab8 <__aeabi_dcmpeq>
 8007944:	2800      	cmp	r0, #0
 8007946:	d146      	bne.n	80079d6 <pow+0xd6>
 8007948:	ec45 4b10 	vmov	d0, r4, r5
 800794c:	f000 fe8d 	bl	800866a <finite>
 8007950:	b338      	cbz	r0, 80079a2 <pow+0xa2>
 8007952:	2200      	movs	r2, #0
 8007954:	2300      	movs	r3, #0
 8007956:	4620      	mov	r0, r4
 8007958:	4629      	mov	r1, r5
 800795a:	f7f9 f8b7 	bl	8000acc <__aeabi_dcmplt>
 800795e:	b300      	cbz	r0, 80079a2 <pow+0xa2>
 8007960:	f7ff fae8 	bl	8006f34 <__errno>
 8007964:	2322      	movs	r3, #34	; 0x22
 8007966:	e01b      	b.n	80079a0 <pow+0xa0>
 8007968:	ec47 6b10 	vmov	d0, r6, r7
 800796c:	f000 fe7d 	bl	800866a <finite>
 8007970:	b9e0      	cbnz	r0, 80079ac <pow+0xac>
 8007972:	eeb0 0a48 	vmov.f32	s0, s16
 8007976:	eef0 0a68 	vmov.f32	s1, s17
 800797a:	f000 fe76 	bl	800866a <finite>
 800797e:	b1a8      	cbz	r0, 80079ac <pow+0xac>
 8007980:	ec45 4b10 	vmov	d0, r4, r5
 8007984:	f000 fe71 	bl	800866a <finite>
 8007988:	b180      	cbz	r0, 80079ac <pow+0xac>
 800798a:	4632      	mov	r2, r6
 800798c:	463b      	mov	r3, r7
 800798e:	4630      	mov	r0, r6
 8007990:	4639      	mov	r1, r7
 8007992:	f7f9 f8c3 	bl	8000b1c <__aeabi_dcmpun>
 8007996:	2800      	cmp	r0, #0
 8007998:	d0e2      	beq.n	8007960 <pow+0x60>
 800799a:	f7ff facb 	bl	8006f34 <__errno>
 800799e:	2321      	movs	r3, #33	; 0x21
 80079a0:	6003      	str	r3, [r0, #0]
 80079a2:	ecbd 8b02 	vpop	{d8}
 80079a6:	ec47 6b10 	vmov	d0, r6, r7
 80079aa:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80079ac:	2200      	movs	r2, #0
 80079ae:	2300      	movs	r3, #0
 80079b0:	4630      	mov	r0, r6
 80079b2:	4639      	mov	r1, r7
 80079b4:	f7f9 f880 	bl	8000ab8 <__aeabi_dcmpeq>
 80079b8:	2800      	cmp	r0, #0
 80079ba:	d0f2      	beq.n	80079a2 <pow+0xa2>
 80079bc:	eeb0 0a48 	vmov.f32	s0, s16
 80079c0:	eef0 0a68 	vmov.f32	s1, s17
 80079c4:	f000 fe51 	bl	800866a <finite>
 80079c8:	2800      	cmp	r0, #0
 80079ca:	d0ea      	beq.n	80079a2 <pow+0xa2>
 80079cc:	ec45 4b10 	vmov	d0, r4, r5
 80079d0:	f000 fe4b 	bl	800866a <finite>
 80079d4:	e7c3      	b.n	800795e <pow+0x5e>
 80079d6:	4f01      	ldr	r7, [pc, #4]	; (80079dc <pow+0xdc>)
 80079d8:	2600      	movs	r6, #0
 80079da:	e7e2      	b.n	80079a2 <pow+0xa2>
 80079dc:	3ff00000 	.word	0x3ff00000

080079e0 <sqrt>:
 80079e0:	b538      	push	{r3, r4, r5, lr}
 80079e2:	ed2d 8b02 	vpush	{d8}
 80079e6:	ec55 4b10 	vmov	r4, r5, d0
 80079ea:	f000 fd53 	bl	8008494 <__ieee754_sqrt>
 80079ee:	4622      	mov	r2, r4
 80079f0:	462b      	mov	r3, r5
 80079f2:	4620      	mov	r0, r4
 80079f4:	4629      	mov	r1, r5
 80079f6:	eeb0 8a40 	vmov.f32	s16, s0
 80079fa:	eef0 8a60 	vmov.f32	s17, s1
 80079fe:	f7f9 f88d 	bl	8000b1c <__aeabi_dcmpun>
 8007a02:	b990      	cbnz	r0, 8007a2a <sqrt+0x4a>
 8007a04:	2200      	movs	r2, #0
 8007a06:	2300      	movs	r3, #0
 8007a08:	4620      	mov	r0, r4
 8007a0a:	4629      	mov	r1, r5
 8007a0c:	f7f9 f85e 	bl	8000acc <__aeabi_dcmplt>
 8007a10:	b158      	cbz	r0, 8007a2a <sqrt+0x4a>
 8007a12:	f7ff fa8f 	bl	8006f34 <__errno>
 8007a16:	2321      	movs	r3, #33	; 0x21
 8007a18:	6003      	str	r3, [r0, #0]
 8007a1a:	2200      	movs	r2, #0
 8007a1c:	2300      	movs	r3, #0
 8007a1e:	4610      	mov	r0, r2
 8007a20:	4619      	mov	r1, r3
 8007a22:	f7f8 ff0b 	bl	800083c <__aeabi_ddiv>
 8007a26:	ec41 0b18 	vmov	d8, r0, r1
 8007a2a:	eeb0 0a48 	vmov.f32	s0, s16
 8007a2e:	eef0 0a68 	vmov.f32	s1, s17
 8007a32:	ecbd 8b02 	vpop	{d8}
 8007a36:	bd38      	pop	{r3, r4, r5, pc}

08007a38 <__ieee754_pow>:
 8007a38:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007a3c:	ed2d 8b06 	vpush	{d8-d10}
 8007a40:	b089      	sub	sp, #36	; 0x24
 8007a42:	ed8d 1b00 	vstr	d1, [sp]
 8007a46:	e9dd 2900 	ldrd	r2, r9, [sp]
 8007a4a:	f029 4800 	bic.w	r8, r9, #2147483648	; 0x80000000
 8007a4e:	ea58 0102 	orrs.w	r1, r8, r2
 8007a52:	ec57 6b10 	vmov	r6, r7, d0
 8007a56:	d115      	bne.n	8007a84 <__ieee754_pow+0x4c>
 8007a58:	19b3      	adds	r3, r6, r6
 8007a5a:	f487 2200 	eor.w	r2, r7, #524288	; 0x80000
 8007a5e:	4152      	adcs	r2, r2
 8007a60:	4299      	cmp	r1, r3
 8007a62:	4b89      	ldr	r3, [pc, #548]	; (8007c88 <__ieee754_pow+0x250>)
 8007a64:	4193      	sbcs	r3, r2
 8007a66:	f080 84d2 	bcs.w	800840e <__ieee754_pow+0x9d6>
 8007a6a:	e9dd 2300 	ldrd	r2, r3, [sp]
 8007a6e:	4630      	mov	r0, r6
 8007a70:	4639      	mov	r1, r7
 8007a72:	f7f8 fc03 	bl	800027c <__adddf3>
 8007a76:	ec41 0b10 	vmov	d0, r0, r1
 8007a7a:	b009      	add	sp, #36	; 0x24
 8007a7c:	ecbd 8b06 	vpop	{d8-d10}
 8007a80:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007a84:	4b81      	ldr	r3, [pc, #516]	; (8007c8c <__ieee754_pow+0x254>)
 8007a86:	f027 4400 	bic.w	r4, r7, #2147483648	; 0x80000000
 8007a8a:	429c      	cmp	r4, r3
 8007a8c:	ee10 aa10 	vmov	sl, s0
 8007a90:	463d      	mov	r5, r7
 8007a92:	dc06      	bgt.n	8007aa2 <__ieee754_pow+0x6a>
 8007a94:	d101      	bne.n	8007a9a <__ieee754_pow+0x62>
 8007a96:	2e00      	cmp	r6, #0
 8007a98:	d1e7      	bne.n	8007a6a <__ieee754_pow+0x32>
 8007a9a:	4598      	cmp	r8, r3
 8007a9c:	dc01      	bgt.n	8007aa2 <__ieee754_pow+0x6a>
 8007a9e:	d10f      	bne.n	8007ac0 <__ieee754_pow+0x88>
 8007aa0:	b172      	cbz	r2, 8007ac0 <__ieee754_pow+0x88>
 8007aa2:	f105 4540 	add.w	r5, r5, #3221225472	; 0xc0000000
 8007aa6:	f505 1580 	add.w	r5, r5, #1048576	; 0x100000
 8007aaa:	ea55 050a 	orrs.w	r5, r5, sl
 8007aae:	d1dc      	bne.n	8007a6a <__ieee754_pow+0x32>
 8007ab0:	e9dd 3200 	ldrd	r3, r2, [sp]
 8007ab4:	18db      	adds	r3, r3, r3
 8007ab6:	f482 2200 	eor.w	r2, r2, #524288	; 0x80000
 8007aba:	4152      	adcs	r2, r2
 8007abc:	429d      	cmp	r5, r3
 8007abe:	e7d0      	b.n	8007a62 <__ieee754_pow+0x2a>
 8007ac0:	2d00      	cmp	r5, #0
 8007ac2:	da3b      	bge.n	8007b3c <__ieee754_pow+0x104>
 8007ac4:	4b72      	ldr	r3, [pc, #456]	; (8007c90 <__ieee754_pow+0x258>)
 8007ac6:	4598      	cmp	r8, r3
 8007ac8:	dc51      	bgt.n	8007b6e <__ieee754_pow+0x136>
 8007aca:	f1a3 7354 	sub.w	r3, r3, #55574528	; 0x3500000
 8007ace:	4598      	cmp	r8, r3
 8007ad0:	f340 84ac 	ble.w	800842c <__ieee754_pow+0x9f4>
 8007ad4:	ea4f 5328 	mov.w	r3, r8, asr #20
 8007ad8:	f2a3 33ff 	subw	r3, r3, #1023	; 0x3ff
 8007adc:	2b14      	cmp	r3, #20
 8007ade:	dd0f      	ble.n	8007b00 <__ieee754_pow+0xc8>
 8007ae0:	f1c3 0334 	rsb	r3, r3, #52	; 0x34
 8007ae4:	fa22 f103 	lsr.w	r1, r2, r3
 8007ae8:	fa01 f303 	lsl.w	r3, r1, r3
 8007aec:	4293      	cmp	r3, r2
 8007aee:	f040 849d 	bne.w	800842c <__ieee754_pow+0x9f4>
 8007af2:	f001 0101 	and.w	r1, r1, #1
 8007af6:	f1c1 0302 	rsb	r3, r1, #2
 8007afa:	9304      	str	r3, [sp, #16]
 8007afc:	b182      	cbz	r2, 8007b20 <__ieee754_pow+0xe8>
 8007afe:	e05f      	b.n	8007bc0 <__ieee754_pow+0x188>
 8007b00:	2a00      	cmp	r2, #0
 8007b02:	d15b      	bne.n	8007bbc <__ieee754_pow+0x184>
 8007b04:	f1c3 0314 	rsb	r3, r3, #20
 8007b08:	fa48 f103 	asr.w	r1, r8, r3
 8007b0c:	fa01 f303 	lsl.w	r3, r1, r3
 8007b10:	4543      	cmp	r3, r8
 8007b12:	f040 8488 	bne.w	8008426 <__ieee754_pow+0x9ee>
 8007b16:	f001 0101 	and.w	r1, r1, #1
 8007b1a:	f1c1 0302 	rsb	r3, r1, #2
 8007b1e:	9304      	str	r3, [sp, #16]
 8007b20:	4b5c      	ldr	r3, [pc, #368]	; (8007c94 <__ieee754_pow+0x25c>)
 8007b22:	4598      	cmp	r8, r3
 8007b24:	d132      	bne.n	8007b8c <__ieee754_pow+0x154>
 8007b26:	f1b9 0f00 	cmp.w	r9, #0
 8007b2a:	f280 8478 	bge.w	800841e <__ieee754_pow+0x9e6>
 8007b2e:	4959      	ldr	r1, [pc, #356]	; (8007c94 <__ieee754_pow+0x25c>)
 8007b30:	4632      	mov	r2, r6
 8007b32:	463b      	mov	r3, r7
 8007b34:	2000      	movs	r0, #0
 8007b36:	f7f8 fe81 	bl	800083c <__aeabi_ddiv>
 8007b3a:	e79c      	b.n	8007a76 <__ieee754_pow+0x3e>
 8007b3c:	2300      	movs	r3, #0
 8007b3e:	9304      	str	r3, [sp, #16]
 8007b40:	2a00      	cmp	r2, #0
 8007b42:	d13d      	bne.n	8007bc0 <__ieee754_pow+0x188>
 8007b44:	4b51      	ldr	r3, [pc, #324]	; (8007c8c <__ieee754_pow+0x254>)
 8007b46:	4598      	cmp	r8, r3
 8007b48:	d1ea      	bne.n	8007b20 <__ieee754_pow+0xe8>
 8007b4a:	f104 4340 	add.w	r3, r4, #3221225472	; 0xc0000000
 8007b4e:	f503 1380 	add.w	r3, r3, #1048576	; 0x100000
 8007b52:	ea53 030a 	orrs.w	r3, r3, sl
 8007b56:	f000 845a 	beq.w	800840e <__ieee754_pow+0x9d6>
 8007b5a:	4b4f      	ldr	r3, [pc, #316]	; (8007c98 <__ieee754_pow+0x260>)
 8007b5c:	429c      	cmp	r4, r3
 8007b5e:	dd08      	ble.n	8007b72 <__ieee754_pow+0x13a>
 8007b60:	f1b9 0f00 	cmp.w	r9, #0
 8007b64:	f2c0 8457 	blt.w	8008416 <__ieee754_pow+0x9de>
 8007b68:	e9dd 0100 	ldrd	r0, r1, [sp]
 8007b6c:	e783      	b.n	8007a76 <__ieee754_pow+0x3e>
 8007b6e:	2302      	movs	r3, #2
 8007b70:	e7e5      	b.n	8007b3e <__ieee754_pow+0x106>
 8007b72:	f1b9 0f00 	cmp.w	r9, #0
 8007b76:	f04f 0000 	mov.w	r0, #0
 8007b7a:	f04f 0100 	mov.w	r1, #0
 8007b7e:	f6bf af7a 	bge.w	8007a76 <__ieee754_pow+0x3e>
 8007b82:	e9dd 0300 	ldrd	r0, r3, [sp]
 8007b86:	f103 4100 	add.w	r1, r3, #2147483648	; 0x80000000
 8007b8a:	e774      	b.n	8007a76 <__ieee754_pow+0x3e>
 8007b8c:	f1b9 4f80 	cmp.w	r9, #1073741824	; 0x40000000
 8007b90:	d106      	bne.n	8007ba0 <__ieee754_pow+0x168>
 8007b92:	4632      	mov	r2, r6
 8007b94:	463b      	mov	r3, r7
 8007b96:	4630      	mov	r0, r6
 8007b98:	4639      	mov	r1, r7
 8007b9a:	f7f8 fd25 	bl	80005e8 <__aeabi_dmul>
 8007b9e:	e76a      	b.n	8007a76 <__ieee754_pow+0x3e>
 8007ba0:	4b3e      	ldr	r3, [pc, #248]	; (8007c9c <__ieee754_pow+0x264>)
 8007ba2:	4599      	cmp	r9, r3
 8007ba4:	d10c      	bne.n	8007bc0 <__ieee754_pow+0x188>
 8007ba6:	2d00      	cmp	r5, #0
 8007ba8:	db0a      	blt.n	8007bc0 <__ieee754_pow+0x188>
 8007baa:	ec47 6b10 	vmov	d0, r6, r7
 8007bae:	b009      	add	sp, #36	; 0x24
 8007bb0:	ecbd 8b06 	vpop	{d8-d10}
 8007bb4:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007bb8:	f000 bc6c 	b.w	8008494 <__ieee754_sqrt>
 8007bbc:	2300      	movs	r3, #0
 8007bbe:	9304      	str	r3, [sp, #16]
 8007bc0:	ec47 6b10 	vmov	d0, r6, r7
 8007bc4:	f000 fd48 	bl	8008658 <fabs>
 8007bc8:	ec51 0b10 	vmov	r0, r1, d0
 8007bcc:	f1ba 0f00 	cmp.w	sl, #0
 8007bd0:	d129      	bne.n	8007c26 <__ieee754_pow+0x1ee>
 8007bd2:	b124      	cbz	r4, 8007bde <__ieee754_pow+0x1a6>
 8007bd4:	4b2f      	ldr	r3, [pc, #188]	; (8007c94 <__ieee754_pow+0x25c>)
 8007bd6:	f025 4240 	bic.w	r2, r5, #3221225472	; 0xc0000000
 8007bda:	429a      	cmp	r2, r3
 8007bdc:	d123      	bne.n	8007c26 <__ieee754_pow+0x1ee>
 8007bde:	f1b9 0f00 	cmp.w	r9, #0
 8007be2:	da05      	bge.n	8007bf0 <__ieee754_pow+0x1b8>
 8007be4:	4602      	mov	r2, r0
 8007be6:	460b      	mov	r3, r1
 8007be8:	2000      	movs	r0, #0
 8007bea:	492a      	ldr	r1, [pc, #168]	; (8007c94 <__ieee754_pow+0x25c>)
 8007bec:	f7f8 fe26 	bl	800083c <__aeabi_ddiv>
 8007bf0:	2d00      	cmp	r5, #0
 8007bf2:	f6bf af40 	bge.w	8007a76 <__ieee754_pow+0x3e>
 8007bf6:	9b04      	ldr	r3, [sp, #16]
 8007bf8:	f104 4440 	add.w	r4, r4, #3221225472	; 0xc0000000
 8007bfc:	f504 1480 	add.w	r4, r4, #1048576	; 0x100000
 8007c00:	4323      	orrs	r3, r4
 8007c02:	d108      	bne.n	8007c16 <__ieee754_pow+0x1de>
 8007c04:	4602      	mov	r2, r0
 8007c06:	460b      	mov	r3, r1
 8007c08:	4610      	mov	r0, r2
 8007c0a:	4619      	mov	r1, r3
 8007c0c:	f7f8 fb34 	bl	8000278 <__aeabi_dsub>
 8007c10:	4602      	mov	r2, r0
 8007c12:	460b      	mov	r3, r1
 8007c14:	e78f      	b.n	8007b36 <__ieee754_pow+0xfe>
 8007c16:	9b04      	ldr	r3, [sp, #16]
 8007c18:	2b01      	cmp	r3, #1
 8007c1a:	f47f af2c 	bne.w	8007a76 <__ieee754_pow+0x3e>
 8007c1e:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8007c22:	4619      	mov	r1, r3
 8007c24:	e727      	b.n	8007a76 <__ieee754_pow+0x3e>
 8007c26:	0feb      	lsrs	r3, r5, #31
 8007c28:	3b01      	subs	r3, #1
 8007c2a:	9306      	str	r3, [sp, #24]
 8007c2c:	9a06      	ldr	r2, [sp, #24]
 8007c2e:	9b04      	ldr	r3, [sp, #16]
 8007c30:	4313      	orrs	r3, r2
 8007c32:	d102      	bne.n	8007c3a <__ieee754_pow+0x202>
 8007c34:	4632      	mov	r2, r6
 8007c36:	463b      	mov	r3, r7
 8007c38:	e7e6      	b.n	8007c08 <__ieee754_pow+0x1d0>
 8007c3a:	4b19      	ldr	r3, [pc, #100]	; (8007ca0 <__ieee754_pow+0x268>)
 8007c3c:	4598      	cmp	r8, r3
 8007c3e:	f340 80fb 	ble.w	8007e38 <__ieee754_pow+0x400>
 8007c42:	f103 7304 	add.w	r3, r3, #34603008	; 0x2100000
 8007c46:	4598      	cmp	r8, r3
 8007c48:	4b13      	ldr	r3, [pc, #76]	; (8007c98 <__ieee754_pow+0x260>)
 8007c4a:	dd0c      	ble.n	8007c66 <__ieee754_pow+0x22e>
 8007c4c:	429c      	cmp	r4, r3
 8007c4e:	dc0f      	bgt.n	8007c70 <__ieee754_pow+0x238>
 8007c50:	f1b9 0f00 	cmp.w	r9, #0
 8007c54:	da0f      	bge.n	8007c76 <__ieee754_pow+0x23e>
 8007c56:	2000      	movs	r0, #0
 8007c58:	b009      	add	sp, #36	; 0x24
 8007c5a:	ecbd 8b06 	vpop	{d8-d10}
 8007c5e:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007c62:	f000 bcf0 	b.w	8008646 <__math_oflow>
 8007c66:	429c      	cmp	r4, r3
 8007c68:	dbf2      	blt.n	8007c50 <__ieee754_pow+0x218>
 8007c6a:	4b0a      	ldr	r3, [pc, #40]	; (8007c94 <__ieee754_pow+0x25c>)
 8007c6c:	429c      	cmp	r4, r3
 8007c6e:	dd19      	ble.n	8007ca4 <__ieee754_pow+0x26c>
 8007c70:	f1b9 0f00 	cmp.w	r9, #0
 8007c74:	dcef      	bgt.n	8007c56 <__ieee754_pow+0x21e>
 8007c76:	2000      	movs	r0, #0
 8007c78:	b009      	add	sp, #36	; 0x24
 8007c7a:	ecbd 8b06 	vpop	{d8-d10}
 8007c7e:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007c82:	f000 bcd7 	b.w	8008634 <__math_uflow>
 8007c86:	bf00      	nop
 8007c88:	fff00000 	.word	0xfff00000
 8007c8c:	7ff00000 	.word	0x7ff00000
 8007c90:	433fffff 	.word	0x433fffff
 8007c94:	3ff00000 	.word	0x3ff00000
 8007c98:	3fefffff 	.word	0x3fefffff
 8007c9c:	3fe00000 	.word	0x3fe00000
 8007ca0:	41e00000 	.word	0x41e00000
 8007ca4:	4b60      	ldr	r3, [pc, #384]	; (8007e28 <__ieee754_pow+0x3f0>)
 8007ca6:	2200      	movs	r2, #0
 8007ca8:	f7f8 fae6 	bl	8000278 <__aeabi_dsub>
 8007cac:	a354      	add	r3, pc, #336	; (adr r3, 8007e00 <__ieee754_pow+0x3c8>)
 8007cae:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007cb2:	4604      	mov	r4, r0
 8007cb4:	460d      	mov	r5, r1
 8007cb6:	f7f8 fc97 	bl	80005e8 <__aeabi_dmul>
 8007cba:	a353      	add	r3, pc, #332	; (adr r3, 8007e08 <__ieee754_pow+0x3d0>)
 8007cbc:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007cc0:	4606      	mov	r6, r0
 8007cc2:	460f      	mov	r7, r1
 8007cc4:	4620      	mov	r0, r4
 8007cc6:	4629      	mov	r1, r5
 8007cc8:	f7f8 fc8e 	bl	80005e8 <__aeabi_dmul>
 8007ccc:	4b57      	ldr	r3, [pc, #348]	; (8007e2c <__ieee754_pow+0x3f4>)
 8007cce:	4682      	mov	sl, r0
 8007cd0:	468b      	mov	fp, r1
 8007cd2:	2200      	movs	r2, #0
 8007cd4:	4620      	mov	r0, r4
 8007cd6:	4629      	mov	r1, r5
 8007cd8:	f7f8 fc86 	bl	80005e8 <__aeabi_dmul>
 8007cdc:	4602      	mov	r2, r0
 8007cde:	460b      	mov	r3, r1
 8007ce0:	a14b      	add	r1, pc, #300	; (adr r1, 8007e10 <__ieee754_pow+0x3d8>)
 8007ce2:	e9d1 0100 	ldrd	r0, r1, [r1]
 8007ce6:	f7f8 fac7 	bl	8000278 <__aeabi_dsub>
 8007cea:	4622      	mov	r2, r4
 8007cec:	462b      	mov	r3, r5
 8007cee:	f7f8 fc7b 	bl	80005e8 <__aeabi_dmul>
 8007cf2:	4602      	mov	r2, r0
 8007cf4:	460b      	mov	r3, r1
 8007cf6:	2000      	movs	r0, #0
 8007cf8:	494d      	ldr	r1, [pc, #308]	; (8007e30 <__ieee754_pow+0x3f8>)
 8007cfa:	f7f8 fabd 	bl	8000278 <__aeabi_dsub>
 8007cfe:	4622      	mov	r2, r4
 8007d00:	4680      	mov	r8, r0
 8007d02:	4689      	mov	r9, r1
 8007d04:	462b      	mov	r3, r5
 8007d06:	4620      	mov	r0, r4
 8007d08:	4629      	mov	r1, r5
 8007d0a:	f7f8 fc6d 	bl	80005e8 <__aeabi_dmul>
 8007d0e:	4602      	mov	r2, r0
 8007d10:	460b      	mov	r3, r1
 8007d12:	4640      	mov	r0, r8
 8007d14:	4649      	mov	r1, r9
 8007d16:	f7f8 fc67 	bl	80005e8 <__aeabi_dmul>
 8007d1a:	a33f      	add	r3, pc, #252	; (adr r3, 8007e18 <__ieee754_pow+0x3e0>)
 8007d1c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007d20:	f7f8 fc62 	bl	80005e8 <__aeabi_dmul>
 8007d24:	4602      	mov	r2, r0
 8007d26:	460b      	mov	r3, r1
 8007d28:	4650      	mov	r0, sl
 8007d2a:	4659      	mov	r1, fp
 8007d2c:	f7f8 faa4 	bl	8000278 <__aeabi_dsub>
 8007d30:	4602      	mov	r2, r0
 8007d32:	460b      	mov	r3, r1
 8007d34:	4680      	mov	r8, r0
 8007d36:	4689      	mov	r9, r1
 8007d38:	4630      	mov	r0, r6
 8007d3a:	4639      	mov	r1, r7
 8007d3c:	f7f8 fa9e 	bl	800027c <__adddf3>
 8007d40:	2000      	movs	r0, #0
 8007d42:	4632      	mov	r2, r6
 8007d44:	463b      	mov	r3, r7
 8007d46:	4604      	mov	r4, r0
 8007d48:	460d      	mov	r5, r1
 8007d4a:	f7f8 fa95 	bl	8000278 <__aeabi_dsub>
 8007d4e:	4602      	mov	r2, r0
 8007d50:	460b      	mov	r3, r1
 8007d52:	4640      	mov	r0, r8
 8007d54:	4649      	mov	r1, r9
 8007d56:	f7f8 fa8f 	bl	8000278 <__aeabi_dsub>
 8007d5a:	9b04      	ldr	r3, [sp, #16]
 8007d5c:	9a06      	ldr	r2, [sp, #24]
 8007d5e:	3b01      	subs	r3, #1
 8007d60:	4313      	orrs	r3, r2
 8007d62:	4682      	mov	sl, r0
 8007d64:	468b      	mov	fp, r1
 8007d66:	f040 81e7 	bne.w	8008138 <__ieee754_pow+0x700>
 8007d6a:	ed9f 7b2d 	vldr	d7, [pc, #180]	; 8007e20 <__ieee754_pow+0x3e8>
 8007d6e:	eeb0 8a47 	vmov.f32	s16, s14
 8007d72:	eef0 8a67 	vmov.f32	s17, s15
 8007d76:	e9dd 6700 	ldrd	r6, r7, [sp]
 8007d7a:	2600      	movs	r6, #0
 8007d7c:	4632      	mov	r2, r6
 8007d7e:	463b      	mov	r3, r7
 8007d80:	e9dd 0100 	ldrd	r0, r1, [sp]
 8007d84:	f7f8 fa78 	bl	8000278 <__aeabi_dsub>
 8007d88:	4622      	mov	r2, r4
 8007d8a:	462b      	mov	r3, r5
 8007d8c:	f7f8 fc2c 	bl	80005e8 <__aeabi_dmul>
 8007d90:	e9dd 2300 	ldrd	r2, r3, [sp]
 8007d94:	4680      	mov	r8, r0
 8007d96:	4689      	mov	r9, r1
 8007d98:	4650      	mov	r0, sl
 8007d9a:	4659      	mov	r1, fp
 8007d9c:	f7f8 fc24 	bl	80005e8 <__aeabi_dmul>
 8007da0:	4602      	mov	r2, r0
 8007da2:	460b      	mov	r3, r1
 8007da4:	4640      	mov	r0, r8
 8007da6:	4649      	mov	r1, r9
 8007da8:	f7f8 fa68 	bl	800027c <__adddf3>
 8007dac:	4632      	mov	r2, r6
 8007dae:	463b      	mov	r3, r7
 8007db0:	4680      	mov	r8, r0
 8007db2:	4689      	mov	r9, r1
 8007db4:	4620      	mov	r0, r4
 8007db6:	4629      	mov	r1, r5
 8007db8:	f7f8 fc16 	bl	80005e8 <__aeabi_dmul>
 8007dbc:	460b      	mov	r3, r1
 8007dbe:	4604      	mov	r4, r0
 8007dc0:	460d      	mov	r5, r1
 8007dc2:	4602      	mov	r2, r0
 8007dc4:	4649      	mov	r1, r9
 8007dc6:	4640      	mov	r0, r8
 8007dc8:	f7f8 fa58 	bl	800027c <__adddf3>
 8007dcc:	4b19      	ldr	r3, [pc, #100]	; (8007e34 <__ieee754_pow+0x3fc>)
 8007dce:	4299      	cmp	r1, r3
 8007dd0:	ec45 4b19 	vmov	d9, r4, r5
 8007dd4:	4606      	mov	r6, r0
 8007dd6:	460f      	mov	r7, r1
 8007dd8:	468b      	mov	fp, r1
 8007dda:	f340 82f1 	ble.w	80083c0 <__ieee754_pow+0x988>
 8007dde:	f101 433f 	add.w	r3, r1, #3204448256	; 0xbf000000
 8007de2:	f503 03e0 	add.w	r3, r3, #7340032	; 0x700000
 8007de6:	4303      	orrs	r3, r0
 8007de8:	f000 81e4 	beq.w	80081b4 <__ieee754_pow+0x77c>
 8007dec:	ec51 0b18 	vmov	r0, r1, d8
 8007df0:	2200      	movs	r2, #0
 8007df2:	2300      	movs	r3, #0
 8007df4:	f7f8 fe6a 	bl	8000acc <__aeabi_dcmplt>
 8007df8:	3800      	subs	r0, #0
 8007dfa:	bf18      	it	ne
 8007dfc:	2001      	movne	r0, #1
 8007dfe:	e72b      	b.n	8007c58 <__ieee754_pow+0x220>
 8007e00:	60000000 	.word	0x60000000
 8007e04:	3ff71547 	.word	0x3ff71547
 8007e08:	f85ddf44 	.word	0xf85ddf44
 8007e0c:	3e54ae0b 	.word	0x3e54ae0b
 8007e10:	55555555 	.word	0x55555555
 8007e14:	3fd55555 	.word	0x3fd55555
 8007e18:	652b82fe 	.word	0x652b82fe
 8007e1c:	3ff71547 	.word	0x3ff71547
 8007e20:	00000000 	.word	0x00000000
 8007e24:	bff00000 	.word	0xbff00000
 8007e28:	3ff00000 	.word	0x3ff00000
 8007e2c:	3fd00000 	.word	0x3fd00000
 8007e30:	3fe00000 	.word	0x3fe00000
 8007e34:	408fffff 	.word	0x408fffff
 8007e38:	4bd5      	ldr	r3, [pc, #852]	; (8008190 <__ieee754_pow+0x758>)
 8007e3a:	402b      	ands	r3, r5
 8007e3c:	2200      	movs	r2, #0
 8007e3e:	b92b      	cbnz	r3, 8007e4c <__ieee754_pow+0x414>
 8007e40:	4bd4      	ldr	r3, [pc, #848]	; (8008194 <__ieee754_pow+0x75c>)
 8007e42:	f7f8 fbd1 	bl	80005e8 <__aeabi_dmul>
 8007e46:	f06f 0234 	mvn.w	r2, #52	; 0x34
 8007e4a:	460c      	mov	r4, r1
 8007e4c:	1523      	asrs	r3, r4, #20
 8007e4e:	f2a3 33ff 	subw	r3, r3, #1023	; 0x3ff
 8007e52:	4413      	add	r3, r2
 8007e54:	9305      	str	r3, [sp, #20]
 8007e56:	4bd0      	ldr	r3, [pc, #832]	; (8008198 <__ieee754_pow+0x760>)
 8007e58:	f3c4 0413 	ubfx	r4, r4, #0, #20
 8007e5c:	f044 557f 	orr.w	r5, r4, #1069547520	; 0x3fc00000
 8007e60:	429c      	cmp	r4, r3
 8007e62:	f445 1540 	orr.w	r5, r5, #3145728	; 0x300000
 8007e66:	dd08      	ble.n	8007e7a <__ieee754_pow+0x442>
 8007e68:	4bcc      	ldr	r3, [pc, #816]	; (800819c <__ieee754_pow+0x764>)
 8007e6a:	429c      	cmp	r4, r3
 8007e6c:	f340 8162 	ble.w	8008134 <__ieee754_pow+0x6fc>
 8007e70:	9b05      	ldr	r3, [sp, #20]
 8007e72:	3301      	adds	r3, #1
 8007e74:	9305      	str	r3, [sp, #20]
 8007e76:	f5a5 1580 	sub.w	r5, r5, #1048576	; 0x100000
 8007e7a:	2400      	movs	r4, #0
 8007e7c:	00e3      	lsls	r3, r4, #3
 8007e7e:	9307      	str	r3, [sp, #28]
 8007e80:	4bc7      	ldr	r3, [pc, #796]	; (80081a0 <__ieee754_pow+0x768>)
 8007e82:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 8007e86:	ed93 7b00 	vldr	d7, [r3]
 8007e8a:	4629      	mov	r1, r5
 8007e8c:	ec53 2b17 	vmov	r2, r3, d7
 8007e90:	eeb0 9a47 	vmov.f32	s18, s14
 8007e94:	eef0 9a67 	vmov.f32	s19, s15
 8007e98:	4682      	mov	sl, r0
 8007e9a:	f7f8 f9ed 	bl	8000278 <__aeabi_dsub>
 8007e9e:	4652      	mov	r2, sl
 8007ea0:	4606      	mov	r6, r0
 8007ea2:	460f      	mov	r7, r1
 8007ea4:	462b      	mov	r3, r5
 8007ea6:	ec51 0b19 	vmov	r0, r1, d9
 8007eaa:	f7f8 f9e7 	bl	800027c <__adddf3>
 8007eae:	4602      	mov	r2, r0
 8007eb0:	460b      	mov	r3, r1
 8007eb2:	2000      	movs	r0, #0
 8007eb4:	49bb      	ldr	r1, [pc, #748]	; (80081a4 <__ieee754_pow+0x76c>)
 8007eb6:	f7f8 fcc1 	bl	800083c <__aeabi_ddiv>
 8007eba:	ec41 0b1a 	vmov	d10, r0, r1
 8007ebe:	4602      	mov	r2, r0
 8007ec0:	460b      	mov	r3, r1
 8007ec2:	4630      	mov	r0, r6
 8007ec4:	4639      	mov	r1, r7
 8007ec6:	f7f8 fb8f 	bl	80005e8 <__aeabi_dmul>
 8007eca:	2300      	movs	r3, #0
 8007ecc:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8007ed0:	9302      	str	r3, [sp, #8]
 8007ed2:	e9dd 8902 	ldrd	r8, r9, [sp, #8]
 8007ed6:	46ab      	mov	fp, r5
 8007ed8:	106d      	asrs	r5, r5, #1
 8007eda:	f045 5500 	orr.w	r5, r5, #536870912	; 0x20000000
 8007ede:	f505 2500 	add.w	r5, r5, #524288	; 0x80000
 8007ee2:	ec41 0b18 	vmov	d8, r0, r1
 8007ee6:	eb05 4384 	add.w	r3, r5, r4, lsl #18
 8007eea:	2200      	movs	r2, #0
 8007eec:	4640      	mov	r0, r8
 8007eee:	4649      	mov	r1, r9
 8007ef0:	4614      	mov	r4, r2
 8007ef2:	461d      	mov	r5, r3
 8007ef4:	f7f8 fb78 	bl	80005e8 <__aeabi_dmul>
 8007ef8:	4602      	mov	r2, r0
 8007efa:	460b      	mov	r3, r1
 8007efc:	4630      	mov	r0, r6
 8007efe:	4639      	mov	r1, r7
 8007f00:	f7f8 f9ba 	bl	8000278 <__aeabi_dsub>
 8007f04:	ec53 2b19 	vmov	r2, r3, d9
 8007f08:	4606      	mov	r6, r0
 8007f0a:	460f      	mov	r7, r1
 8007f0c:	4620      	mov	r0, r4
 8007f0e:	4629      	mov	r1, r5
 8007f10:	f7f8 f9b2 	bl	8000278 <__aeabi_dsub>
 8007f14:	4602      	mov	r2, r0
 8007f16:	460b      	mov	r3, r1
 8007f18:	4650      	mov	r0, sl
 8007f1a:	4659      	mov	r1, fp
 8007f1c:	f7f8 f9ac 	bl	8000278 <__aeabi_dsub>
 8007f20:	4642      	mov	r2, r8
 8007f22:	464b      	mov	r3, r9
 8007f24:	f7f8 fb60 	bl	80005e8 <__aeabi_dmul>
 8007f28:	4602      	mov	r2, r0
 8007f2a:	460b      	mov	r3, r1
 8007f2c:	4630      	mov	r0, r6
 8007f2e:	4639      	mov	r1, r7
 8007f30:	f7f8 f9a2 	bl	8000278 <__aeabi_dsub>
 8007f34:	ec53 2b1a 	vmov	r2, r3, d10
 8007f38:	f7f8 fb56 	bl	80005e8 <__aeabi_dmul>
 8007f3c:	ec53 2b18 	vmov	r2, r3, d8
 8007f40:	ec41 0b19 	vmov	d9, r0, r1
 8007f44:	ec51 0b18 	vmov	r0, r1, d8
 8007f48:	f7f8 fb4e 	bl	80005e8 <__aeabi_dmul>
 8007f4c:	a37c      	add	r3, pc, #496	; (adr r3, 8008140 <__ieee754_pow+0x708>)
 8007f4e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007f52:	4604      	mov	r4, r0
 8007f54:	460d      	mov	r5, r1
 8007f56:	f7f8 fb47 	bl	80005e8 <__aeabi_dmul>
 8007f5a:	a37b      	add	r3, pc, #492	; (adr r3, 8008148 <__ieee754_pow+0x710>)
 8007f5c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007f60:	f7f8 f98c 	bl	800027c <__adddf3>
 8007f64:	4622      	mov	r2, r4
 8007f66:	462b      	mov	r3, r5
 8007f68:	f7f8 fb3e 	bl	80005e8 <__aeabi_dmul>
 8007f6c:	a378      	add	r3, pc, #480	; (adr r3, 8008150 <__ieee754_pow+0x718>)
 8007f6e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007f72:	f7f8 f983 	bl	800027c <__adddf3>
 8007f76:	4622      	mov	r2, r4
 8007f78:	462b      	mov	r3, r5
 8007f7a:	f7f8 fb35 	bl	80005e8 <__aeabi_dmul>
 8007f7e:	a376      	add	r3, pc, #472	; (adr r3, 8008158 <__ieee754_pow+0x720>)
 8007f80:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007f84:	f7f8 f97a 	bl	800027c <__adddf3>
 8007f88:	4622      	mov	r2, r4
 8007f8a:	462b      	mov	r3, r5
 8007f8c:	f7f8 fb2c 	bl	80005e8 <__aeabi_dmul>
 8007f90:	a373      	add	r3, pc, #460	; (adr r3, 8008160 <__ieee754_pow+0x728>)
 8007f92:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007f96:	f7f8 f971 	bl	800027c <__adddf3>
 8007f9a:	4622      	mov	r2, r4
 8007f9c:	462b      	mov	r3, r5
 8007f9e:	f7f8 fb23 	bl	80005e8 <__aeabi_dmul>
 8007fa2:	a371      	add	r3, pc, #452	; (adr r3, 8008168 <__ieee754_pow+0x730>)
 8007fa4:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007fa8:	f7f8 f968 	bl	800027c <__adddf3>
 8007fac:	4622      	mov	r2, r4
 8007fae:	4606      	mov	r6, r0
 8007fb0:	460f      	mov	r7, r1
 8007fb2:	462b      	mov	r3, r5
 8007fb4:	4620      	mov	r0, r4
 8007fb6:	4629      	mov	r1, r5
 8007fb8:	f7f8 fb16 	bl	80005e8 <__aeabi_dmul>
 8007fbc:	4602      	mov	r2, r0
 8007fbe:	460b      	mov	r3, r1
 8007fc0:	4630      	mov	r0, r6
 8007fc2:	4639      	mov	r1, r7
 8007fc4:	f7f8 fb10 	bl	80005e8 <__aeabi_dmul>
 8007fc8:	4642      	mov	r2, r8
 8007fca:	4604      	mov	r4, r0
 8007fcc:	460d      	mov	r5, r1
 8007fce:	464b      	mov	r3, r9
 8007fd0:	ec51 0b18 	vmov	r0, r1, d8
 8007fd4:	f7f8 f952 	bl	800027c <__adddf3>
 8007fd8:	ec53 2b19 	vmov	r2, r3, d9
 8007fdc:	f7f8 fb04 	bl	80005e8 <__aeabi_dmul>
 8007fe0:	4622      	mov	r2, r4
 8007fe2:	462b      	mov	r3, r5
 8007fe4:	f7f8 f94a 	bl	800027c <__adddf3>
 8007fe8:	4642      	mov	r2, r8
 8007fea:	4682      	mov	sl, r0
 8007fec:	468b      	mov	fp, r1
 8007fee:	464b      	mov	r3, r9
 8007ff0:	4640      	mov	r0, r8
 8007ff2:	4649      	mov	r1, r9
 8007ff4:	f7f8 faf8 	bl	80005e8 <__aeabi_dmul>
 8007ff8:	4b6b      	ldr	r3, [pc, #428]	; (80081a8 <__ieee754_pow+0x770>)
 8007ffa:	2200      	movs	r2, #0
 8007ffc:	4606      	mov	r6, r0
 8007ffe:	460f      	mov	r7, r1
 8008000:	f7f8 f93c 	bl	800027c <__adddf3>
 8008004:	4652      	mov	r2, sl
 8008006:	465b      	mov	r3, fp
 8008008:	f7f8 f938 	bl	800027c <__adddf3>
 800800c:	2000      	movs	r0, #0
 800800e:	4604      	mov	r4, r0
 8008010:	460d      	mov	r5, r1
 8008012:	4602      	mov	r2, r0
 8008014:	460b      	mov	r3, r1
 8008016:	4640      	mov	r0, r8
 8008018:	4649      	mov	r1, r9
 800801a:	f7f8 fae5 	bl	80005e8 <__aeabi_dmul>
 800801e:	4b62      	ldr	r3, [pc, #392]	; (80081a8 <__ieee754_pow+0x770>)
 8008020:	4680      	mov	r8, r0
 8008022:	4689      	mov	r9, r1
 8008024:	2200      	movs	r2, #0
 8008026:	4620      	mov	r0, r4
 8008028:	4629      	mov	r1, r5
 800802a:	f7f8 f925 	bl	8000278 <__aeabi_dsub>
 800802e:	4632      	mov	r2, r6
 8008030:	463b      	mov	r3, r7
 8008032:	f7f8 f921 	bl	8000278 <__aeabi_dsub>
 8008036:	4602      	mov	r2, r0
 8008038:	460b      	mov	r3, r1
 800803a:	4650      	mov	r0, sl
 800803c:	4659      	mov	r1, fp
 800803e:	f7f8 f91b 	bl	8000278 <__aeabi_dsub>
 8008042:	ec53 2b18 	vmov	r2, r3, d8
 8008046:	f7f8 facf 	bl	80005e8 <__aeabi_dmul>
 800804a:	4622      	mov	r2, r4
 800804c:	4606      	mov	r6, r0
 800804e:	460f      	mov	r7, r1
 8008050:	462b      	mov	r3, r5
 8008052:	ec51 0b19 	vmov	r0, r1, d9
 8008056:	f7f8 fac7 	bl	80005e8 <__aeabi_dmul>
 800805a:	4602      	mov	r2, r0
 800805c:	460b      	mov	r3, r1
 800805e:	4630      	mov	r0, r6
 8008060:	4639      	mov	r1, r7
 8008062:	f7f8 f90b 	bl	800027c <__adddf3>
 8008066:	4606      	mov	r6, r0
 8008068:	460f      	mov	r7, r1
 800806a:	4602      	mov	r2, r0
 800806c:	460b      	mov	r3, r1
 800806e:	4640      	mov	r0, r8
 8008070:	4649      	mov	r1, r9
 8008072:	f7f8 f903 	bl	800027c <__adddf3>
 8008076:	a33e      	add	r3, pc, #248	; (adr r3, 8008170 <__ieee754_pow+0x738>)
 8008078:	e9d3 2300 	ldrd	r2, r3, [r3]
 800807c:	2000      	movs	r0, #0
 800807e:	4604      	mov	r4, r0
 8008080:	460d      	mov	r5, r1
 8008082:	f7f8 fab1 	bl	80005e8 <__aeabi_dmul>
 8008086:	4642      	mov	r2, r8
 8008088:	ec41 0b18 	vmov	d8, r0, r1
 800808c:	464b      	mov	r3, r9
 800808e:	4620      	mov	r0, r4
 8008090:	4629      	mov	r1, r5
 8008092:	f7f8 f8f1 	bl	8000278 <__aeabi_dsub>
 8008096:	4602      	mov	r2, r0
 8008098:	460b      	mov	r3, r1
 800809a:	4630      	mov	r0, r6
 800809c:	4639      	mov	r1, r7
 800809e:	f7f8 f8eb 	bl	8000278 <__aeabi_dsub>
 80080a2:	a335      	add	r3, pc, #212	; (adr r3, 8008178 <__ieee754_pow+0x740>)
 80080a4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80080a8:	f7f8 fa9e 	bl	80005e8 <__aeabi_dmul>
 80080ac:	a334      	add	r3, pc, #208	; (adr r3, 8008180 <__ieee754_pow+0x748>)
 80080ae:	e9d3 2300 	ldrd	r2, r3, [r3]
 80080b2:	4606      	mov	r6, r0
 80080b4:	460f      	mov	r7, r1
 80080b6:	4620      	mov	r0, r4
 80080b8:	4629      	mov	r1, r5
 80080ba:	f7f8 fa95 	bl	80005e8 <__aeabi_dmul>
 80080be:	4602      	mov	r2, r0
 80080c0:	460b      	mov	r3, r1
 80080c2:	4630      	mov	r0, r6
 80080c4:	4639      	mov	r1, r7
 80080c6:	f7f8 f8d9 	bl	800027c <__adddf3>
 80080ca:	9a07      	ldr	r2, [sp, #28]
 80080cc:	4b37      	ldr	r3, [pc, #220]	; (80081ac <__ieee754_pow+0x774>)
 80080ce:	4413      	add	r3, r2
 80080d0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80080d4:	f7f8 f8d2 	bl	800027c <__adddf3>
 80080d8:	4682      	mov	sl, r0
 80080da:	9805      	ldr	r0, [sp, #20]
 80080dc:	468b      	mov	fp, r1
 80080de:	f7f8 fa19 	bl	8000514 <__aeabi_i2d>
 80080e2:	9a07      	ldr	r2, [sp, #28]
 80080e4:	4b32      	ldr	r3, [pc, #200]	; (80081b0 <__ieee754_pow+0x778>)
 80080e6:	4413      	add	r3, r2
 80080e8:	e9d3 8900 	ldrd	r8, r9, [r3]
 80080ec:	4606      	mov	r6, r0
 80080ee:	460f      	mov	r7, r1
 80080f0:	4652      	mov	r2, sl
 80080f2:	465b      	mov	r3, fp
 80080f4:	ec51 0b18 	vmov	r0, r1, d8
 80080f8:	f7f8 f8c0 	bl	800027c <__adddf3>
 80080fc:	4642      	mov	r2, r8
 80080fe:	464b      	mov	r3, r9
 8008100:	f7f8 f8bc 	bl	800027c <__adddf3>
 8008104:	4632      	mov	r2, r6
 8008106:	463b      	mov	r3, r7
 8008108:	f7f8 f8b8 	bl	800027c <__adddf3>
 800810c:	2000      	movs	r0, #0
 800810e:	4632      	mov	r2, r6
 8008110:	463b      	mov	r3, r7
 8008112:	4604      	mov	r4, r0
 8008114:	460d      	mov	r5, r1
 8008116:	f7f8 f8af 	bl	8000278 <__aeabi_dsub>
 800811a:	4642      	mov	r2, r8
 800811c:	464b      	mov	r3, r9
 800811e:	f7f8 f8ab 	bl	8000278 <__aeabi_dsub>
 8008122:	ec53 2b18 	vmov	r2, r3, d8
 8008126:	f7f8 f8a7 	bl	8000278 <__aeabi_dsub>
 800812a:	4602      	mov	r2, r0
 800812c:	460b      	mov	r3, r1
 800812e:	4650      	mov	r0, sl
 8008130:	4659      	mov	r1, fp
 8008132:	e610      	b.n	8007d56 <__ieee754_pow+0x31e>
 8008134:	2401      	movs	r4, #1
 8008136:	e6a1      	b.n	8007e7c <__ieee754_pow+0x444>
 8008138:	ed9f 7b13 	vldr	d7, [pc, #76]	; 8008188 <__ieee754_pow+0x750>
 800813c:	e617      	b.n	8007d6e <__ieee754_pow+0x336>
 800813e:	bf00      	nop
 8008140:	4a454eef 	.word	0x4a454eef
 8008144:	3fca7e28 	.word	0x3fca7e28
 8008148:	93c9db65 	.word	0x93c9db65
 800814c:	3fcd864a 	.word	0x3fcd864a
 8008150:	a91d4101 	.word	0xa91d4101
 8008154:	3fd17460 	.word	0x3fd17460
 8008158:	518f264d 	.word	0x518f264d
 800815c:	3fd55555 	.word	0x3fd55555
 8008160:	db6fabff 	.word	0xdb6fabff
 8008164:	3fdb6db6 	.word	0x3fdb6db6
 8008168:	33333303 	.word	0x33333303
 800816c:	3fe33333 	.word	0x3fe33333
 8008170:	e0000000 	.word	0xe0000000
 8008174:	3feec709 	.word	0x3feec709
 8008178:	dc3a03fd 	.word	0xdc3a03fd
 800817c:	3feec709 	.word	0x3feec709
 8008180:	145b01f5 	.word	0x145b01f5
 8008184:	be3e2fe0 	.word	0xbe3e2fe0
 8008188:	00000000 	.word	0x00000000
 800818c:	3ff00000 	.word	0x3ff00000
 8008190:	7ff00000 	.word	0x7ff00000
 8008194:	43400000 	.word	0x43400000
 8008198:	0003988e 	.word	0x0003988e
 800819c:	000bb679 	.word	0x000bb679
 80081a0:	080088a0 	.word	0x080088a0
 80081a4:	3ff00000 	.word	0x3ff00000
 80081a8:	40080000 	.word	0x40080000
 80081ac:	080088c0 	.word	0x080088c0
 80081b0:	080088b0 	.word	0x080088b0
 80081b4:	a3b5      	add	r3, pc, #724	; (adr r3, 800848c <__ieee754_pow+0xa54>)
 80081b6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80081ba:	4640      	mov	r0, r8
 80081bc:	4649      	mov	r1, r9
 80081be:	f7f8 f85d 	bl	800027c <__adddf3>
 80081c2:	4622      	mov	r2, r4
 80081c4:	ec41 0b1a 	vmov	d10, r0, r1
 80081c8:	462b      	mov	r3, r5
 80081ca:	4630      	mov	r0, r6
 80081cc:	4639      	mov	r1, r7
 80081ce:	f7f8 f853 	bl	8000278 <__aeabi_dsub>
 80081d2:	4602      	mov	r2, r0
 80081d4:	460b      	mov	r3, r1
 80081d6:	ec51 0b1a 	vmov	r0, r1, d10
 80081da:	f7f8 fc95 	bl	8000b08 <__aeabi_dcmpgt>
 80081de:	2800      	cmp	r0, #0
 80081e0:	f47f ae04 	bne.w	8007dec <__ieee754_pow+0x3b4>
 80081e4:	4aa4      	ldr	r2, [pc, #656]	; (8008478 <__ieee754_pow+0xa40>)
 80081e6:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
 80081ea:	4293      	cmp	r3, r2
 80081ec:	f340 8108 	ble.w	8008400 <__ieee754_pow+0x9c8>
 80081f0:	151b      	asrs	r3, r3, #20
 80081f2:	f44f 1a80 	mov.w	sl, #1048576	; 0x100000
 80081f6:	f2a3 33fe 	subw	r3, r3, #1022	; 0x3fe
 80081fa:	fa4a f303 	asr.w	r3, sl, r3
 80081fe:	445b      	add	r3, fp
 8008200:	f3c3 520a 	ubfx	r2, r3, #20, #11
 8008204:	4e9d      	ldr	r6, [pc, #628]	; (800847c <__ieee754_pow+0xa44>)
 8008206:	f2a2 32ff 	subw	r2, r2, #1023	; 0x3ff
 800820a:	4116      	asrs	r6, r2
 800820c:	f3c3 0a13 	ubfx	sl, r3, #0, #20
 8008210:	2000      	movs	r0, #0
 8008212:	ea23 0106 	bic.w	r1, r3, r6
 8008216:	f1c2 0214 	rsb	r2, r2, #20
 800821a:	f44a 1a80 	orr.w	sl, sl, #1048576	; 0x100000
 800821e:	fa4a fa02 	asr.w	sl, sl, r2
 8008222:	f1bb 0f00 	cmp.w	fp, #0
 8008226:	4602      	mov	r2, r0
 8008228:	460b      	mov	r3, r1
 800822a:	4620      	mov	r0, r4
 800822c:	4629      	mov	r1, r5
 800822e:	bfb8      	it	lt
 8008230:	f1ca 0a00 	rsblt	sl, sl, #0
 8008234:	f7f8 f820 	bl	8000278 <__aeabi_dsub>
 8008238:	ec41 0b19 	vmov	d9, r0, r1
 800823c:	4642      	mov	r2, r8
 800823e:	464b      	mov	r3, r9
 8008240:	ec51 0b19 	vmov	r0, r1, d9
 8008244:	f7f8 f81a 	bl	800027c <__adddf3>
 8008248:	a37b      	add	r3, pc, #492	; (adr r3, 8008438 <__ieee754_pow+0xa00>)
 800824a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800824e:	2000      	movs	r0, #0
 8008250:	4604      	mov	r4, r0
 8008252:	460d      	mov	r5, r1
 8008254:	f7f8 f9c8 	bl	80005e8 <__aeabi_dmul>
 8008258:	ec53 2b19 	vmov	r2, r3, d9
 800825c:	4606      	mov	r6, r0
 800825e:	460f      	mov	r7, r1
 8008260:	4620      	mov	r0, r4
 8008262:	4629      	mov	r1, r5
 8008264:	f7f8 f808 	bl	8000278 <__aeabi_dsub>
 8008268:	4602      	mov	r2, r0
 800826a:	460b      	mov	r3, r1
 800826c:	4640      	mov	r0, r8
 800826e:	4649      	mov	r1, r9
 8008270:	f7f8 f802 	bl	8000278 <__aeabi_dsub>
 8008274:	a372      	add	r3, pc, #456	; (adr r3, 8008440 <__ieee754_pow+0xa08>)
 8008276:	e9d3 2300 	ldrd	r2, r3, [r3]
 800827a:	f7f8 f9b5 	bl	80005e8 <__aeabi_dmul>
 800827e:	a372      	add	r3, pc, #456	; (adr r3, 8008448 <__ieee754_pow+0xa10>)
 8008280:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008284:	4680      	mov	r8, r0
 8008286:	4689      	mov	r9, r1
 8008288:	4620      	mov	r0, r4
 800828a:	4629      	mov	r1, r5
 800828c:	f7f8 f9ac 	bl	80005e8 <__aeabi_dmul>
 8008290:	4602      	mov	r2, r0
 8008292:	460b      	mov	r3, r1
 8008294:	4640      	mov	r0, r8
 8008296:	4649      	mov	r1, r9
 8008298:	f7f7 fff0 	bl	800027c <__adddf3>
 800829c:	4604      	mov	r4, r0
 800829e:	460d      	mov	r5, r1
 80082a0:	4602      	mov	r2, r0
 80082a2:	460b      	mov	r3, r1
 80082a4:	4630      	mov	r0, r6
 80082a6:	4639      	mov	r1, r7
 80082a8:	f7f7 ffe8 	bl	800027c <__adddf3>
 80082ac:	4632      	mov	r2, r6
 80082ae:	463b      	mov	r3, r7
 80082b0:	4680      	mov	r8, r0
 80082b2:	4689      	mov	r9, r1
 80082b4:	f7f7 ffe0 	bl	8000278 <__aeabi_dsub>
 80082b8:	4602      	mov	r2, r0
 80082ba:	460b      	mov	r3, r1
 80082bc:	4620      	mov	r0, r4
 80082be:	4629      	mov	r1, r5
 80082c0:	f7f7 ffda 	bl	8000278 <__aeabi_dsub>
 80082c4:	4642      	mov	r2, r8
 80082c6:	4606      	mov	r6, r0
 80082c8:	460f      	mov	r7, r1
 80082ca:	464b      	mov	r3, r9
 80082cc:	4640      	mov	r0, r8
 80082ce:	4649      	mov	r1, r9
 80082d0:	f7f8 f98a 	bl	80005e8 <__aeabi_dmul>
 80082d4:	a35e      	add	r3, pc, #376	; (adr r3, 8008450 <__ieee754_pow+0xa18>)
 80082d6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80082da:	4604      	mov	r4, r0
 80082dc:	460d      	mov	r5, r1
 80082de:	f7f8 f983 	bl	80005e8 <__aeabi_dmul>
 80082e2:	a35d      	add	r3, pc, #372	; (adr r3, 8008458 <__ieee754_pow+0xa20>)
 80082e4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80082e8:	f7f7 ffc6 	bl	8000278 <__aeabi_dsub>
 80082ec:	4622      	mov	r2, r4
 80082ee:	462b      	mov	r3, r5
 80082f0:	f7f8 f97a 	bl	80005e8 <__aeabi_dmul>
 80082f4:	a35a      	add	r3, pc, #360	; (adr r3, 8008460 <__ieee754_pow+0xa28>)
 80082f6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80082fa:	f7f7 ffbf 	bl	800027c <__adddf3>
 80082fe:	4622      	mov	r2, r4
 8008300:	462b      	mov	r3, r5
 8008302:	f7f8 f971 	bl	80005e8 <__aeabi_dmul>
 8008306:	a358      	add	r3, pc, #352	; (adr r3, 8008468 <__ieee754_pow+0xa30>)
 8008308:	e9d3 2300 	ldrd	r2, r3, [r3]
 800830c:	f7f7 ffb4 	bl	8000278 <__aeabi_dsub>
 8008310:	4622      	mov	r2, r4
 8008312:	462b      	mov	r3, r5
 8008314:	f7f8 f968 	bl	80005e8 <__aeabi_dmul>
 8008318:	a355      	add	r3, pc, #340	; (adr r3, 8008470 <__ieee754_pow+0xa38>)
 800831a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800831e:	f7f7 ffad 	bl	800027c <__adddf3>
 8008322:	4622      	mov	r2, r4
 8008324:	462b      	mov	r3, r5
 8008326:	f7f8 f95f 	bl	80005e8 <__aeabi_dmul>
 800832a:	4602      	mov	r2, r0
 800832c:	460b      	mov	r3, r1
 800832e:	4640      	mov	r0, r8
 8008330:	4649      	mov	r1, r9
 8008332:	f7f7 ffa1 	bl	8000278 <__aeabi_dsub>
 8008336:	4604      	mov	r4, r0
 8008338:	460d      	mov	r5, r1
 800833a:	4602      	mov	r2, r0
 800833c:	460b      	mov	r3, r1
 800833e:	4640      	mov	r0, r8
 8008340:	4649      	mov	r1, r9
 8008342:	f7f8 f951 	bl	80005e8 <__aeabi_dmul>
 8008346:	2200      	movs	r2, #0
 8008348:	ec41 0b19 	vmov	d9, r0, r1
 800834c:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8008350:	4620      	mov	r0, r4
 8008352:	4629      	mov	r1, r5
 8008354:	f7f7 ff90 	bl	8000278 <__aeabi_dsub>
 8008358:	4602      	mov	r2, r0
 800835a:	460b      	mov	r3, r1
 800835c:	ec51 0b19 	vmov	r0, r1, d9
 8008360:	f7f8 fa6c 	bl	800083c <__aeabi_ddiv>
 8008364:	4632      	mov	r2, r6
 8008366:	4604      	mov	r4, r0
 8008368:	460d      	mov	r5, r1
 800836a:	463b      	mov	r3, r7
 800836c:	4640      	mov	r0, r8
 800836e:	4649      	mov	r1, r9
 8008370:	f7f8 f93a 	bl	80005e8 <__aeabi_dmul>
 8008374:	4632      	mov	r2, r6
 8008376:	463b      	mov	r3, r7
 8008378:	f7f7 ff80 	bl	800027c <__adddf3>
 800837c:	4602      	mov	r2, r0
 800837e:	460b      	mov	r3, r1
 8008380:	4620      	mov	r0, r4
 8008382:	4629      	mov	r1, r5
 8008384:	f7f7 ff78 	bl	8000278 <__aeabi_dsub>
 8008388:	4642      	mov	r2, r8
 800838a:	464b      	mov	r3, r9
 800838c:	f7f7 ff74 	bl	8000278 <__aeabi_dsub>
 8008390:	460b      	mov	r3, r1
 8008392:	4602      	mov	r2, r0
 8008394:	493a      	ldr	r1, [pc, #232]	; (8008480 <__ieee754_pow+0xa48>)
 8008396:	2000      	movs	r0, #0
 8008398:	f7f7 ff6e 	bl	8000278 <__aeabi_dsub>
 800839c:	ec41 0b10 	vmov	d0, r0, r1
 80083a0:	ee10 3a90 	vmov	r3, s1
 80083a4:	eb03 530a 	add.w	r3, r3, sl, lsl #20
 80083a8:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80083ac:	da2b      	bge.n	8008406 <__ieee754_pow+0x9ce>
 80083ae:	4650      	mov	r0, sl
 80083b0:	f000 f966 	bl	8008680 <scalbn>
 80083b4:	ec51 0b10 	vmov	r0, r1, d0
 80083b8:	ec53 2b18 	vmov	r2, r3, d8
 80083bc:	f7ff bbed 	b.w	8007b9a <__ieee754_pow+0x162>
 80083c0:	4b30      	ldr	r3, [pc, #192]	; (8008484 <__ieee754_pow+0xa4c>)
 80083c2:	f021 4600 	bic.w	r6, r1, #2147483648	; 0x80000000
 80083c6:	429e      	cmp	r6, r3
 80083c8:	f77f af0c 	ble.w	80081e4 <__ieee754_pow+0x7ac>
 80083cc:	4b2e      	ldr	r3, [pc, #184]	; (8008488 <__ieee754_pow+0xa50>)
 80083ce:	440b      	add	r3, r1
 80083d0:	4303      	orrs	r3, r0
 80083d2:	d009      	beq.n	80083e8 <__ieee754_pow+0x9b0>
 80083d4:	ec51 0b18 	vmov	r0, r1, d8
 80083d8:	2200      	movs	r2, #0
 80083da:	2300      	movs	r3, #0
 80083dc:	f7f8 fb76 	bl	8000acc <__aeabi_dcmplt>
 80083e0:	3800      	subs	r0, #0
 80083e2:	bf18      	it	ne
 80083e4:	2001      	movne	r0, #1
 80083e6:	e447      	b.n	8007c78 <__ieee754_pow+0x240>
 80083e8:	4622      	mov	r2, r4
 80083ea:	462b      	mov	r3, r5
 80083ec:	f7f7 ff44 	bl	8000278 <__aeabi_dsub>
 80083f0:	4642      	mov	r2, r8
 80083f2:	464b      	mov	r3, r9
 80083f4:	f7f8 fb7e 	bl	8000af4 <__aeabi_dcmpge>
 80083f8:	2800      	cmp	r0, #0
 80083fa:	f43f aef3 	beq.w	80081e4 <__ieee754_pow+0x7ac>
 80083fe:	e7e9      	b.n	80083d4 <__ieee754_pow+0x99c>
 8008400:	f04f 0a00 	mov.w	sl, #0
 8008404:	e71a      	b.n	800823c <__ieee754_pow+0x804>
 8008406:	ec51 0b10 	vmov	r0, r1, d0
 800840a:	4619      	mov	r1, r3
 800840c:	e7d4      	b.n	80083b8 <__ieee754_pow+0x980>
 800840e:	491c      	ldr	r1, [pc, #112]	; (8008480 <__ieee754_pow+0xa48>)
 8008410:	2000      	movs	r0, #0
 8008412:	f7ff bb30 	b.w	8007a76 <__ieee754_pow+0x3e>
 8008416:	2000      	movs	r0, #0
 8008418:	2100      	movs	r1, #0
 800841a:	f7ff bb2c 	b.w	8007a76 <__ieee754_pow+0x3e>
 800841e:	4630      	mov	r0, r6
 8008420:	4639      	mov	r1, r7
 8008422:	f7ff bb28 	b.w	8007a76 <__ieee754_pow+0x3e>
 8008426:	9204      	str	r2, [sp, #16]
 8008428:	f7ff bb7a 	b.w	8007b20 <__ieee754_pow+0xe8>
 800842c:	2300      	movs	r3, #0
 800842e:	f7ff bb64 	b.w	8007afa <__ieee754_pow+0xc2>
 8008432:	bf00      	nop
 8008434:	f3af 8000 	nop.w
 8008438:	00000000 	.word	0x00000000
 800843c:	3fe62e43 	.word	0x3fe62e43
 8008440:	fefa39ef 	.word	0xfefa39ef
 8008444:	3fe62e42 	.word	0x3fe62e42
 8008448:	0ca86c39 	.word	0x0ca86c39
 800844c:	be205c61 	.word	0xbe205c61
 8008450:	72bea4d0 	.word	0x72bea4d0
 8008454:	3e663769 	.word	0x3e663769
 8008458:	c5d26bf1 	.word	0xc5d26bf1
 800845c:	3ebbbd41 	.word	0x3ebbbd41
 8008460:	af25de2c 	.word	0xaf25de2c
 8008464:	3f11566a 	.word	0x3f11566a
 8008468:	16bebd93 	.word	0x16bebd93
 800846c:	3f66c16c 	.word	0x3f66c16c
 8008470:	5555553e 	.word	0x5555553e
 8008474:	3fc55555 	.word	0x3fc55555
 8008478:	3fe00000 	.word	0x3fe00000
 800847c:	000fffff 	.word	0x000fffff
 8008480:	3ff00000 	.word	0x3ff00000
 8008484:	4090cbff 	.word	0x4090cbff
 8008488:	3f6f3400 	.word	0x3f6f3400
 800848c:	652b82fe 	.word	0x652b82fe
 8008490:	3c971547 	.word	0x3c971547

08008494 <__ieee754_sqrt>:
 8008494:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8008498:	ec55 4b10 	vmov	r4, r5, d0
 800849c:	4e55      	ldr	r6, [pc, #340]	; (80085f4 <__ieee754_sqrt+0x160>)
 800849e:	43ae      	bics	r6, r5
 80084a0:	ee10 0a10 	vmov	r0, s0
 80084a4:	ee10 3a10 	vmov	r3, s0
 80084a8:	462a      	mov	r2, r5
 80084aa:	4629      	mov	r1, r5
 80084ac:	d110      	bne.n	80084d0 <__ieee754_sqrt+0x3c>
 80084ae:	ee10 2a10 	vmov	r2, s0
 80084b2:	462b      	mov	r3, r5
 80084b4:	f7f8 f898 	bl	80005e8 <__aeabi_dmul>
 80084b8:	4602      	mov	r2, r0
 80084ba:	460b      	mov	r3, r1
 80084bc:	4620      	mov	r0, r4
 80084be:	4629      	mov	r1, r5
 80084c0:	f7f7 fedc 	bl	800027c <__adddf3>
 80084c4:	4604      	mov	r4, r0
 80084c6:	460d      	mov	r5, r1
 80084c8:	ec45 4b10 	vmov	d0, r4, r5
 80084cc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80084d0:	2d00      	cmp	r5, #0
 80084d2:	dc10      	bgt.n	80084f6 <__ieee754_sqrt+0x62>
 80084d4:	f025 4600 	bic.w	r6, r5, #2147483648	; 0x80000000
 80084d8:	4330      	orrs	r0, r6
 80084da:	d0f5      	beq.n	80084c8 <__ieee754_sqrt+0x34>
 80084dc:	b15d      	cbz	r5, 80084f6 <__ieee754_sqrt+0x62>
 80084de:	ee10 2a10 	vmov	r2, s0
 80084e2:	462b      	mov	r3, r5
 80084e4:	ee10 0a10 	vmov	r0, s0
 80084e8:	f7f7 fec6 	bl	8000278 <__aeabi_dsub>
 80084ec:	4602      	mov	r2, r0
 80084ee:	460b      	mov	r3, r1
 80084f0:	f7f8 f9a4 	bl	800083c <__aeabi_ddiv>
 80084f4:	e7e6      	b.n	80084c4 <__ieee754_sqrt+0x30>
 80084f6:	1512      	asrs	r2, r2, #20
 80084f8:	d074      	beq.n	80085e4 <__ieee754_sqrt+0x150>
 80084fa:	07d4      	lsls	r4, r2, #31
 80084fc:	f3c1 0113 	ubfx	r1, r1, #0, #20
 8008500:	f2a2 37ff 	subw	r7, r2, #1023	; 0x3ff
 8008504:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8008508:	bf5e      	ittt	pl
 800850a:	0fda      	lsrpl	r2, r3, #31
 800850c:	005b      	lslpl	r3, r3, #1
 800850e:	eb02 0141 	addpl.w	r1, r2, r1, lsl #1
 8008512:	2400      	movs	r4, #0
 8008514:	0fda      	lsrs	r2, r3, #31
 8008516:	eb02 0141 	add.w	r1, r2, r1, lsl #1
 800851a:	107f      	asrs	r7, r7, #1
 800851c:	005b      	lsls	r3, r3, #1
 800851e:	2516      	movs	r5, #22
 8008520:	4620      	mov	r0, r4
 8008522:	f44f 1200 	mov.w	r2, #2097152	; 0x200000
 8008526:	1886      	adds	r6, r0, r2
 8008528:	428e      	cmp	r6, r1
 800852a:	bfde      	ittt	le
 800852c:	1b89      	suble	r1, r1, r6
 800852e:	18b0      	addle	r0, r6, r2
 8008530:	18a4      	addle	r4, r4, r2
 8008532:	0049      	lsls	r1, r1, #1
 8008534:	3d01      	subs	r5, #1
 8008536:	eb01 71d3 	add.w	r1, r1, r3, lsr #31
 800853a:	ea4f 0252 	mov.w	r2, r2, lsr #1
 800853e:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8008542:	d1f0      	bne.n	8008526 <__ieee754_sqrt+0x92>
 8008544:	462a      	mov	r2, r5
 8008546:	f04f 0e20 	mov.w	lr, #32
 800854a:	f04f 4600 	mov.w	r6, #2147483648	; 0x80000000
 800854e:	4281      	cmp	r1, r0
 8008550:	eb06 0c05 	add.w	ip, r6, r5
 8008554:	dc02      	bgt.n	800855c <__ieee754_sqrt+0xc8>
 8008556:	d113      	bne.n	8008580 <__ieee754_sqrt+0xec>
 8008558:	459c      	cmp	ip, r3
 800855a:	d811      	bhi.n	8008580 <__ieee754_sqrt+0xec>
 800855c:	f1bc 0f00 	cmp.w	ip, #0
 8008560:	eb0c 0506 	add.w	r5, ip, r6
 8008564:	da43      	bge.n	80085ee <__ieee754_sqrt+0x15a>
 8008566:	2d00      	cmp	r5, #0
 8008568:	db41      	blt.n	80085ee <__ieee754_sqrt+0x15a>
 800856a:	f100 0801 	add.w	r8, r0, #1
 800856e:	1a09      	subs	r1, r1, r0
 8008570:	459c      	cmp	ip, r3
 8008572:	bf88      	it	hi
 8008574:	f101 31ff 	addhi.w	r1, r1, #4294967295
 8008578:	eba3 030c 	sub.w	r3, r3, ip
 800857c:	4432      	add	r2, r6
 800857e:	4640      	mov	r0, r8
 8008580:	ea4f 7cd3 	mov.w	ip, r3, lsr #31
 8008584:	f1be 0e01 	subs.w	lr, lr, #1
 8008588:	eb0c 0141 	add.w	r1, ip, r1, lsl #1
 800858c:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8008590:	ea4f 0656 	mov.w	r6, r6, lsr #1
 8008594:	d1db      	bne.n	800854e <__ieee754_sqrt+0xba>
 8008596:	430b      	orrs	r3, r1
 8008598:	d006      	beq.n	80085a8 <__ieee754_sqrt+0x114>
 800859a:	1c50      	adds	r0, r2, #1
 800859c:	bf13      	iteet	ne
 800859e:	3201      	addne	r2, #1
 80085a0:	3401      	addeq	r4, #1
 80085a2:	4672      	moveq	r2, lr
 80085a4:	f022 0201 	bicne.w	r2, r2, #1
 80085a8:	1063      	asrs	r3, r4, #1
 80085aa:	0852      	lsrs	r2, r2, #1
 80085ac:	07e1      	lsls	r1, r4, #31
 80085ae:	f103 537f 	add.w	r3, r3, #1069547520	; 0x3fc00000
 80085b2:	f503 1300 	add.w	r3, r3, #2097152	; 0x200000
 80085b6:	bf48      	it	mi
 80085b8:	f042 4200 	orrmi.w	r2, r2, #2147483648	; 0x80000000
 80085bc:	eb03 5507 	add.w	r5, r3, r7, lsl #20
 80085c0:	4614      	mov	r4, r2
 80085c2:	e781      	b.n	80084c8 <__ieee754_sqrt+0x34>
 80085c4:	0ad9      	lsrs	r1, r3, #11
 80085c6:	3815      	subs	r0, #21
 80085c8:	055b      	lsls	r3, r3, #21
 80085ca:	2900      	cmp	r1, #0
 80085cc:	d0fa      	beq.n	80085c4 <__ieee754_sqrt+0x130>
 80085ce:	02cd      	lsls	r5, r1, #11
 80085d0:	d50a      	bpl.n	80085e8 <__ieee754_sqrt+0x154>
 80085d2:	f1c2 0420 	rsb	r4, r2, #32
 80085d6:	fa23 f404 	lsr.w	r4, r3, r4
 80085da:	1e55      	subs	r5, r2, #1
 80085dc:	4093      	lsls	r3, r2
 80085de:	4321      	orrs	r1, r4
 80085e0:	1b42      	subs	r2, r0, r5
 80085e2:	e78a      	b.n	80084fa <__ieee754_sqrt+0x66>
 80085e4:	4610      	mov	r0, r2
 80085e6:	e7f0      	b.n	80085ca <__ieee754_sqrt+0x136>
 80085e8:	0049      	lsls	r1, r1, #1
 80085ea:	3201      	adds	r2, #1
 80085ec:	e7ef      	b.n	80085ce <__ieee754_sqrt+0x13a>
 80085ee:	4680      	mov	r8, r0
 80085f0:	e7bd      	b.n	800856e <__ieee754_sqrt+0xda>
 80085f2:	bf00      	nop
 80085f4:	7ff00000 	.word	0x7ff00000

080085f8 <with_errno>:
 80085f8:	b570      	push	{r4, r5, r6, lr}
 80085fa:	4604      	mov	r4, r0
 80085fc:	460d      	mov	r5, r1
 80085fe:	4616      	mov	r6, r2
 8008600:	f7fe fc98 	bl	8006f34 <__errno>
 8008604:	4629      	mov	r1, r5
 8008606:	6006      	str	r6, [r0, #0]
 8008608:	4620      	mov	r0, r4
 800860a:	bd70      	pop	{r4, r5, r6, pc}

0800860c <xflow>:
 800860c:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800860e:	4614      	mov	r4, r2
 8008610:	461d      	mov	r5, r3
 8008612:	b108      	cbz	r0, 8008618 <xflow+0xc>
 8008614:	f103 4300 	add.w	r3, r3, #2147483648	; 0x80000000
 8008618:	e9cd 2300 	strd	r2, r3, [sp]
 800861c:	e9dd 2300 	ldrd	r2, r3, [sp]
 8008620:	4620      	mov	r0, r4
 8008622:	4629      	mov	r1, r5
 8008624:	f7f7 ffe0 	bl	80005e8 <__aeabi_dmul>
 8008628:	2222      	movs	r2, #34	; 0x22
 800862a:	b003      	add	sp, #12
 800862c:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8008630:	f7ff bfe2 	b.w	80085f8 <with_errno>

08008634 <__math_uflow>:
 8008634:	b508      	push	{r3, lr}
 8008636:	2200      	movs	r2, #0
 8008638:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 800863c:	f7ff ffe6 	bl	800860c <xflow>
 8008640:	ec41 0b10 	vmov	d0, r0, r1
 8008644:	bd08      	pop	{r3, pc}

08008646 <__math_oflow>:
 8008646:	b508      	push	{r3, lr}
 8008648:	2200      	movs	r2, #0
 800864a:	f04f 43e0 	mov.w	r3, #1879048192	; 0x70000000
 800864e:	f7ff ffdd 	bl	800860c <xflow>
 8008652:	ec41 0b10 	vmov	d0, r0, r1
 8008656:	bd08      	pop	{r3, pc}

08008658 <fabs>:
 8008658:	ec51 0b10 	vmov	r0, r1, d0
 800865c:	ee10 2a10 	vmov	r2, s0
 8008660:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 8008664:	ec43 2b10 	vmov	d0, r2, r3
 8008668:	4770      	bx	lr

0800866a <finite>:
 800866a:	b082      	sub	sp, #8
 800866c:	ed8d 0b00 	vstr	d0, [sp]
 8008670:	9801      	ldr	r0, [sp, #4]
 8008672:	f040 4000 	orr.w	r0, r0, #2147483648	; 0x80000000
 8008676:	f500 1080 	add.w	r0, r0, #1048576	; 0x100000
 800867a:	0fc0      	lsrs	r0, r0, #31
 800867c:	b002      	add	sp, #8
 800867e:	4770      	bx	lr

08008680 <scalbn>:
 8008680:	b570      	push	{r4, r5, r6, lr}
 8008682:	ec55 4b10 	vmov	r4, r5, d0
 8008686:	f3c5 520a 	ubfx	r2, r5, #20, #11
 800868a:	4606      	mov	r6, r0
 800868c:	462b      	mov	r3, r5
 800868e:	b99a      	cbnz	r2, 80086b8 <scalbn+0x38>
 8008690:	f025 4300 	bic.w	r3, r5, #2147483648	; 0x80000000
 8008694:	4323      	orrs	r3, r4
 8008696:	d036      	beq.n	8008706 <scalbn+0x86>
 8008698:	4b39      	ldr	r3, [pc, #228]	; (8008780 <scalbn+0x100>)
 800869a:	4629      	mov	r1, r5
 800869c:	ee10 0a10 	vmov	r0, s0
 80086a0:	2200      	movs	r2, #0
 80086a2:	f7f7 ffa1 	bl	80005e8 <__aeabi_dmul>
 80086a6:	4b37      	ldr	r3, [pc, #220]	; (8008784 <scalbn+0x104>)
 80086a8:	429e      	cmp	r6, r3
 80086aa:	4604      	mov	r4, r0
 80086ac:	460d      	mov	r5, r1
 80086ae:	da10      	bge.n	80086d2 <scalbn+0x52>
 80086b0:	a32b      	add	r3, pc, #172	; (adr r3, 8008760 <scalbn+0xe0>)
 80086b2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80086b6:	e03a      	b.n	800872e <scalbn+0xae>
 80086b8:	f240 71ff 	movw	r1, #2047	; 0x7ff
 80086bc:	428a      	cmp	r2, r1
 80086be:	d10c      	bne.n	80086da <scalbn+0x5a>
 80086c0:	ee10 2a10 	vmov	r2, s0
 80086c4:	4620      	mov	r0, r4
 80086c6:	4629      	mov	r1, r5
 80086c8:	f7f7 fdd8 	bl	800027c <__adddf3>
 80086cc:	4604      	mov	r4, r0
 80086ce:	460d      	mov	r5, r1
 80086d0:	e019      	b.n	8008706 <scalbn+0x86>
 80086d2:	f3c1 520a 	ubfx	r2, r1, #20, #11
 80086d6:	460b      	mov	r3, r1
 80086d8:	3a36      	subs	r2, #54	; 0x36
 80086da:	4432      	add	r2, r6
 80086dc:	f240 71fe 	movw	r1, #2046	; 0x7fe
 80086e0:	428a      	cmp	r2, r1
 80086e2:	dd08      	ble.n	80086f6 <scalbn+0x76>
 80086e4:	2d00      	cmp	r5, #0
 80086e6:	a120      	add	r1, pc, #128	; (adr r1, 8008768 <scalbn+0xe8>)
 80086e8:	e9d1 0100 	ldrd	r0, r1, [r1]
 80086ec:	da1c      	bge.n	8008728 <scalbn+0xa8>
 80086ee:	a120      	add	r1, pc, #128	; (adr r1, 8008770 <scalbn+0xf0>)
 80086f0:	e9d1 0100 	ldrd	r0, r1, [r1]
 80086f4:	e018      	b.n	8008728 <scalbn+0xa8>
 80086f6:	2a00      	cmp	r2, #0
 80086f8:	dd08      	ble.n	800870c <scalbn+0x8c>
 80086fa:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 80086fe:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 8008702:	ea43 5502 	orr.w	r5, r3, r2, lsl #20
 8008706:	ec45 4b10 	vmov	d0, r4, r5
 800870a:	bd70      	pop	{r4, r5, r6, pc}
 800870c:	f112 0f35 	cmn.w	r2, #53	; 0x35
 8008710:	da19      	bge.n	8008746 <scalbn+0xc6>
 8008712:	f24c 3350 	movw	r3, #50000	; 0xc350
 8008716:	429e      	cmp	r6, r3
 8008718:	f005 4300 	and.w	r3, r5, #2147483648	; 0x80000000
 800871c:	dd0a      	ble.n	8008734 <scalbn+0xb4>
 800871e:	a112      	add	r1, pc, #72	; (adr r1, 8008768 <scalbn+0xe8>)
 8008720:	e9d1 0100 	ldrd	r0, r1, [r1]
 8008724:	2b00      	cmp	r3, #0
 8008726:	d1e2      	bne.n	80086ee <scalbn+0x6e>
 8008728:	a30f      	add	r3, pc, #60	; (adr r3, 8008768 <scalbn+0xe8>)
 800872a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800872e:	f7f7 ff5b 	bl	80005e8 <__aeabi_dmul>
 8008732:	e7cb      	b.n	80086cc <scalbn+0x4c>
 8008734:	a10a      	add	r1, pc, #40	; (adr r1, 8008760 <scalbn+0xe0>)
 8008736:	e9d1 0100 	ldrd	r0, r1, [r1]
 800873a:	2b00      	cmp	r3, #0
 800873c:	d0b8      	beq.n	80086b0 <scalbn+0x30>
 800873e:	a10e      	add	r1, pc, #56	; (adr r1, 8008778 <scalbn+0xf8>)
 8008740:	e9d1 0100 	ldrd	r0, r1, [r1]
 8008744:	e7b4      	b.n	80086b0 <scalbn+0x30>
 8008746:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 800874a:	3236      	adds	r2, #54	; 0x36
 800874c:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 8008750:	ea43 5102 	orr.w	r1, r3, r2, lsl #20
 8008754:	4620      	mov	r0, r4
 8008756:	4b0c      	ldr	r3, [pc, #48]	; (8008788 <scalbn+0x108>)
 8008758:	2200      	movs	r2, #0
 800875a:	e7e8      	b.n	800872e <scalbn+0xae>
 800875c:	f3af 8000 	nop.w
 8008760:	c2f8f359 	.word	0xc2f8f359
 8008764:	01a56e1f 	.word	0x01a56e1f
 8008768:	8800759c 	.word	0x8800759c
 800876c:	7e37e43c 	.word	0x7e37e43c
 8008770:	8800759c 	.word	0x8800759c
 8008774:	fe37e43c 	.word	0xfe37e43c
 8008778:	c2f8f359 	.word	0xc2f8f359
 800877c:	81a56e1f 	.word	0x81a56e1f
 8008780:	43500000 	.word	0x43500000
 8008784:	ffff3cb0 	.word	0xffff3cb0
 8008788:	3c900000 	.word	0x3c900000

0800878c <_init>:
 800878c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800878e:	bf00      	nop
 8008790:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8008792:	bc08      	pop	{r3}
 8008794:	469e      	mov	lr, r3
 8008796:	4770      	bx	lr

08008798 <_fini>:
 8008798:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800879a:	bf00      	nop
 800879c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800879e:	bc08      	pop	{r3}
 80087a0:	469e      	mov	lr, r3
 80087a2:	4770      	bx	lr
